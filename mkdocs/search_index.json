{
    "docs": [
        {
            "location": "/",
            "text": "Note:\n This documentation site, like all of Orchard, is a \ncommunity effort\n. If you would like to contribute, please see \nDocumentation Style Guidelines\n\nand \nSuggestions for New Topics\n.\n\n\n\n\nGetting Started\n\n\n\n\nInstalling Orchard\n\n\nManually Installing Orchard Using a .zip File\n\n\nWorking with Orchard in WebMatrix\n\n\nGetting Around the Dashboard\n\n\nBuilding Your First Orchard Site\n\n\nNavigation and Menus\n\n\nAdding a Blog to Your Site\n\n\nAdding and Managing Media Content\n\n\nManaging Widgets\n\n\nOrganizing Content Using Tags\n\n\n\n\nAbout the Project\n\n\n\n\nOrchard Concept Definitions\n\n\nA Guide to All the Built-in Modules and Features of Orchard\n\n\nWhat's Happening Now?\n\n\nFrequently Asked Questions\n\n\n\n\nTutorial Videos\n\n\n\n\nTutorial Videos About Orchard\n\n\n\n\nDocumentation\n\n\n\n\n\n\nAuthoring Websites\n\n\n\n\nBlogging with LiveWriter\n\n\nCreating Global-Ready Applications\n\n\nSearch and Indexing\n\n\nSaving, Scheduling, and Publishing Drafts\n\n\nCreating Custom Content Types\n\n\n\n\n\n\n\n\nCustomizing Websites\n\n\n\n\nPreviewing and Applying a Theme\n\n\nInstalling Themes\n\n\nCustomizing Themes\n\n\n\n\n\n\n\n\nUsing the Orchard Gallery\n\n\n\n\nGallery Overview\n\n\nInstalling Modules and Themes from the Gallery\n\n\nBrowsing the Gallery Web Site\n\n\nContributing a Module or Theme to the Gallery\n\n\nRegistering Additional Gallery Feeds\n\n\n\n\n\n\n\n\nManaging Websites\n\n\n\n\nEnabling and Disabling Features\n\n\nUsing the Command-Line Interface\n\n\nInstalling and Upgrading Modules\n\n\nModifying Site Settings\n\n\nModerating Comments\n\n\nManaging Users and Roles\n\n\nUnderstanding Permissions\n\n\nMaking a Website Recipe\n\n\nCreating an Image Gallery\n\n\nWorkflows\n\n\nProjection\n\n\nCreate Dynamic Forms\n\n\n\n\n\n\n\n\nHosting and Deploying Websites\n\n\n\n\nUpgrading a Site to a New Version of Orchard\n\n\nOptimizing Server Performance of Orchard Applications\n\n\nWhat's New for Windows Azure in Orchard 1.7.1\n\n\nDeploying Orchard to Windows Azure\n\n\nUsing Windows Azure Blob Storage\n\n\nUsing Windows Azure Cache\n\n\nRunning Orchard on Mono\n\n\nSetting Up a Multi-Tenant Orchard Site\n\n\nSetting Up a Machine Key\n\n\n\n\n\n\n\n\nExtending Orchard\n\n\n\n\nFirst Steps into Orchard\n\n\nHow Orchard Works\n\n\nCommand-Line Code Generation\n\n\nGetting Started with Modules Course\n\n\nPart 1 - Build a Static Widget\n\n\nPart 2 - Make the Widget Dynamic\n\n\nPart 3 - Using the Orchard API\n\n\nPart 4 - Applying Best Practices\n\n\n\n\n\n\nBuilding a Hello World Module\n\n\nCreating a Module with a Simple Text Editor\n\n\nWriting a Content Part\n\n\nWriting a Content Field\n\n\nPackaging and Sharing a Module\n\n\nWriting a Widget\n\n\nCreating \n1-N\n and \nN-N\n Relations\n\n\nManifest Files for Modules and Themes\n\n\nCaching\n\n\nCustom Site Settings\n\n\nWeb Api in Orchard\n\n\n\n\n\n\n\n\nWorking with Data\n\n\n\n\nUnderstanding Data Access\n\n\nUnderstanding Content Handlers\n\n\n\n\n\n\n\n\n\n\nCreating Themes\n\n\n\n\nWriting a New Theme\n\n\nThe Anatomy of a Theme\n\n\nUnderstanding the placement.info File\n\n\nAccessing and Rendering Shapes\n\n\nAlternates\n\n\nTemplate File Syntax Guide\n\n\nPackaging and Sharing Themes\n\n\nUI Guidelines for Theme Authors\n\n\nCustomizing Orchard Using Designer Helper Tools\n\n\n\n\n\n\n\n\nDeveloper Tools and Guidelines\n\n\n\n\nDeveloper FAQ\n\n\nSetting Up a Source Enlistment\n\n\nSource Code Organization\n\n\nDependencies and Libraries\n\n\nCode Conventions\n\n\nContinuous Integration\n\n\nMerging Pull Requests\n\n\n\n\n\n\n\n\nAdditional Topics\n\n\n\n\nOrchard Dynamic Compilation\n\n\nConfiguring Email\n\n\n\n\n\n\n\n\nGetting Involved\n\n\n\n\nContributing Documentation\n\n\nDocumentation Style Guidelines\n\n\nContributing Patches\n\n\n\n\n\n\n\n\nUser Experiences\n\n\n\n\nWalkthroughs and UI Mockups\n\n\n\n\nArchived Specs\n\n\n\n\nArchived Specs",
            "title": "Home"
        },
        {
            "location": "/#getting-started",
            "text": "Installing Orchard  Manually Installing Orchard Using a .zip File  Working with Orchard in WebMatrix  Getting Around the Dashboard  Building Your First Orchard Site  Navigation and Menus  Adding a Blog to Your Site  Adding and Managing Media Content  Managing Widgets  Organizing Content Using Tags",
            "title": "Getting Started"
        },
        {
            "location": "/#about-the-project",
            "text": "Orchard Concept Definitions  A Guide to All the Built-in Modules and Features of Orchard  What's Happening Now?  Frequently Asked Questions",
            "title": "About the Project"
        },
        {
            "location": "/#tutorial-videos",
            "text": "Tutorial Videos About Orchard",
            "title": "Tutorial Videos"
        },
        {
            "location": "/#documentation",
            "text": "Authoring Websites   Blogging with LiveWriter  Creating Global-Ready Applications  Search and Indexing  Saving, Scheduling, and Publishing Drafts  Creating Custom Content Types     Customizing Websites   Previewing and Applying a Theme  Installing Themes  Customizing Themes     Using the Orchard Gallery   Gallery Overview  Installing Modules and Themes from the Gallery  Browsing the Gallery Web Site  Contributing a Module or Theme to the Gallery  Registering Additional Gallery Feeds     Managing Websites   Enabling and Disabling Features  Using the Command-Line Interface  Installing and Upgrading Modules  Modifying Site Settings  Moderating Comments  Managing Users and Roles  Understanding Permissions  Making a Website Recipe  Creating an Image Gallery  Workflows  Projection  Create Dynamic Forms     Hosting and Deploying Websites   Upgrading a Site to a New Version of Orchard  Optimizing Server Performance of Orchard Applications  What's New for Windows Azure in Orchard 1.7.1  Deploying Orchard to Windows Azure  Using Windows Azure Blob Storage  Using Windows Azure Cache  Running Orchard on Mono  Setting Up a Multi-Tenant Orchard Site  Setting Up a Machine Key     Extending Orchard   First Steps into Orchard  How Orchard Works  Command-Line Code Generation  Getting Started with Modules Course  Part 1 - Build a Static Widget  Part 2 - Make the Widget Dynamic  Part 3 - Using the Orchard API  Part 4 - Applying Best Practices    Building a Hello World Module  Creating a Module with a Simple Text Editor  Writing a Content Part  Writing a Content Field  Packaging and Sharing a Module  Writing a Widget  Creating  1-N  and  N-N  Relations  Manifest Files for Modules and Themes  Caching  Custom Site Settings  Web Api in Orchard     Working with Data   Understanding Data Access  Understanding Content Handlers      Creating Themes   Writing a New Theme  The Anatomy of a Theme  Understanding the placement.info File  Accessing and Rendering Shapes  Alternates  Template File Syntax Guide  Packaging and Sharing Themes  UI Guidelines for Theme Authors  Customizing Orchard Using Designer Helper Tools     Developer Tools and Guidelines   Developer FAQ  Setting Up a Source Enlistment  Source Code Organization  Dependencies and Libraries  Code Conventions  Continuous Integration  Merging Pull Requests     Additional Topics   Orchard Dynamic Compilation  Configuring Email     Getting Involved   Contributing Documentation  Documentation Style Guidelines  Contributing Patches",
            "title": "Documentation"
        },
        {
            "location": "/#user-experiences",
            "text": "Walkthroughs and UI Mockups",
            "title": "User Experiences"
        },
        {
            "location": "/#archived-specs",
            "text": "Archived Specs",
            "title": "Archived Specs"
        },
        {
            "location": "/Documentation/Installing-Orchard/",
            "text": "This topic targets, and was tested with, the Orchard 1.8 release.\n\n\nDifferent Ways To Install Orchard\n\n\nThere are four ways you can install Orchard. You can:\n\n\n\n\nInstall it using the Microsoft Web Platform Installer.\n\n\nInstall it from Microsoft WebMatrix as shown in \nWorking with Orchard in WebMatrix\n.\n\n\nDownload the Orchard \n.zip file\n and install it as described in \nManually Installing Orchard Using a zip File\n.\n\n\nEnlist\n in the Orchard source code and build Orchard from the command line or in Visual Studio.\n\n\n\n\nThis topic shows how to install Orchard using the Microsoft Web Platform Installer.\n\n\nRequirements\n\n\nThe minimum requirements for running Orchard are the following:\n\n\n\n\nASP.NET 4.5\n\n\nA web server such as IIS Express 8, 7.5 or IIS 7.x.\n\n\n\n\nWhen installing IIS, make sure you enable the ASP.NET IIS modules. Also make sure that you run Orchard\nin an integrated pipeline ASP.NET 4 application pool. \n\n\n\n\nImportant\n:  If you previously installed any pre-release versions of WebMatrix, ASP.NET Web Pages, or ASP.NET MVC 4, you should uninstall those products before Orchard will run correctly on your computer. \nTo develop Orchard sites, many developers will want to use a database such as SQL Server, and a web page programming environment such as WebMatrix or Visual Studio 2013.\nThe following installation was tested with a clean installation of Windows 8.1. It uses the Web Platform Installer and it includes Orchard, IIS 8.0 Express, and optional applications for Orchard development like WebMatrix and SQL Server Compact 4.0. \n\n\n\n\nInstalling Orchard\n\n\nTo begin, download and install the \nWeb Platform Installer\n. When you're done, run it. \n\n\nFind \nOrchard CMS\n and then click \nAdd\n to include Orchard as an item to install.\n\n\n\n\nClick \nInstall\n. Accept the license terms in order to continue.\n\n\n\n\nWhen the installation is complete, the dialog shows the list of installed tools in addition to Orchard.  Click the \nLaunch\n link to open the site in WebMatrix.\n\n\n\n\nRunning Orchard in WebMatrix\n\n\nAfter WebMatrix starts, it should inmediately launch Orchard in the default browser. If not, you can launch Orchard by clicking the \nRun\n drop-down button, and selecting which browser to use.\nIn WebMatrix you can click the \nFiles\n workspace to see the contents of the Orchard site.\n\n\n\n\nThe first time Orchard is launched, you see in your browser the Orchard setup screen. \n\n\n\n\nBy default, Orchard includes a built-in database that you can use without installing a separate database server. However, if you are running SQL Server or SQL Server Express, you can configure Orchard to use either of those products instead by specifying a connection string. Optionally, you can enter a table prefix so that multiple Orchard installations can share the same database but keep their data separate.\n\n\n\n\nThe setup screen also includes a section where you can choose an Orchard recipe to set up your site. You can choose from the following Orchard recipes:\n\n\n\n\nDefault\n. Sets up a site with frequently used Orchard features.\n\n\nBlog\n. Sets up a site as a personal blog.\n\n\nCore\n. Sets up a site that has only the Orchard framework for development use.\n\n\n\n\n\n\nFor information about recipes and how to make a custom recipe, see \nMaking a Web Site Recipe\n. \n\n\nAfter you've entered the required information on the setup  screen, click \nFinish Setup\n. When the setup process is complete, your new site's home page is displayed.\n\n\n\n\nYou can now begin configuring your site.\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.8\n\n\n4-15-14:  Updated info for 1.8 release. Updated some screenshots, requirements, .zip link and other minor changes.\n\n\n\n\n\n\nUpdates for Orchard 1.1\n\n\n4-12-11:  Updated screens for 1.1 installation.\n\n\n3-14-11:  Added information about recipes in the setup screen.",
            "title": "Installing Orchard"
        },
        {
            "location": "/Documentation/Installing-Orchard/#different-ways-to-install-orchard",
            "text": "There are four ways you can install Orchard. You can:   Install it using the Microsoft Web Platform Installer.  Install it from Microsoft WebMatrix as shown in  Working with Orchard in WebMatrix .  Download the Orchard  .zip file  and install it as described in  Manually Installing Orchard Using a zip File .  Enlist  in the Orchard source code and build Orchard from the command line or in Visual Studio.   This topic shows how to install Orchard using the Microsoft Web Platform Installer.",
            "title": "Different Ways To Install Orchard"
        },
        {
            "location": "/Documentation/Installing-Orchard/#requirements",
            "text": "The minimum requirements for running Orchard are the following:   ASP.NET 4.5  A web server such as IIS Express 8, 7.5 or IIS 7.x.   When installing IIS, make sure you enable the ASP.NET IIS modules. Also make sure that you run Orchard\nin an integrated pipeline ASP.NET 4 application pool.    Important :  If you previously installed any pre-release versions of WebMatrix, ASP.NET Web Pages, or ASP.NET MVC 4, you should uninstall those products before Orchard will run correctly on your computer. \nTo develop Orchard sites, many developers will want to use a database such as SQL Server, and a web page programming environment such as WebMatrix or Visual Studio 2013.\nThe following installation was tested with a clean installation of Windows 8.1. It uses the Web Platform Installer and it includes Orchard, IIS 8.0 Express, and optional applications for Orchard development like WebMatrix and SQL Server Compact 4.0.",
            "title": "Requirements"
        },
        {
            "location": "/Documentation/Installing-Orchard/#installing-orchard",
            "text": "To begin, download and install the  Web Platform Installer . When you're done, run it.   Find  Orchard CMS  and then click  Add  to include Orchard as an item to install.   Click  Install . Accept the license terms in order to continue.   When the installation is complete, the dialog shows the list of installed tools in addition to Orchard.  Click the  Launch  link to open the site in WebMatrix.",
            "title": "Installing Orchard"
        },
        {
            "location": "/Documentation/Installing-Orchard/#running-orchard-in-webmatrix",
            "text": "After WebMatrix starts, it should inmediately launch Orchard in the default browser. If not, you can launch Orchard by clicking the  Run  drop-down button, and selecting which browser to use.\nIn WebMatrix you can click the  Files  workspace to see the contents of the Orchard site.   The first time Orchard is launched, you see in your browser the Orchard setup screen.    By default, Orchard includes a built-in database that you can use without installing a separate database server. However, if you are running SQL Server or SQL Server Express, you can configure Orchard to use either of those products instead by specifying a connection string. Optionally, you can enter a table prefix so that multiple Orchard installations can share the same database but keep their data separate.   The setup screen also includes a section where you can choose an Orchard recipe to set up your site. You can choose from the following Orchard recipes:   Default . Sets up a site with frequently used Orchard features.  Blog . Sets up a site as a personal blog.  Core . Sets up a site that has only the Orchard framework for development use.    For information about recipes and how to make a custom recipe, see  Making a Web Site Recipe .   After you've entered the required information on the setup  screen, click  Finish Setup . When the setup process is complete, your new site's home page is displayed.   You can now begin configuring your site.",
            "title": "Running Orchard in WebMatrix"
        },
        {
            "location": "/Documentation/Installing-Orchard/#change-history",
            "text": "Updates for Orchard 1.8  4-15-14:  Updated info for 1.8 release. Updated some screenshots, requirements, .zip link and other minor changes.    Updates for Orchard 1.1  4-12-11:  Updated screens for 1.1 installation.  3-14-11:  Added information about recipes in the setup screen.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Manually-installing-Orchard-zip-file/",
            "text": "This topic targets, and was tested with, the Orchard 1.8 release.\n\n\nThis topic shows the steps you need to perform to install Orchard using the .zip file.\n\n\nWe will use three different approaches:\n\n\n\n\nIIS.\n\n\nWebMatrix and IIS Express\n\n\nVisual Studio and the Visual Studio Development Server.\n\n\n\n\n\n\nNote\n: If you prefer using the Web Platform Installer, or if you plan to use WebMatrix to develop your site, you may want to see the topic \nInstalling Orchard\n, which installs Orchard from the Web Platform Installer and includes WebMatrix in the installation.\n\n\n\n\nDownloading the .zip File\n\n\nNavigate to the \nReleases Section of Orchard in GitHub\n. \n\n\nYou will find two .zip files.\n\n\n\n\nOrchard.Web.1.x.xx.zip\n : In this file the site has already been built and can be run without additional compilation. It does not includes all the source code.\n\n\nOrchard.Source.1.x.xx.zip\n : This file includes the source code. If you plan to develop modules you probably prefer this one. It is easier to use with Visual Studio and you have plenty of source files to see how everything is done.\n\n\n\n\nRunning the Site Using IIS\n\n\nThis procedure was tested with a clean installation of Windows 8.1 Enterprise Edition.\n\n\nFirst let's setup the server. Search for \"Add or Remove Programs\" in your system. And execute it.\n\n\n\n\nClick \nTurn Windows features on or off\n.\n\n\n\n\nClick \nInternet Information Services\n and then \nASP.NET 4.5\n. Click \nOK\n.\n\n\n\n\nAt this point we recommend rebooting your system. This way you will be sure that all the required services are started from scratch.\n\n\nWhen the system restarts, download the \nOrchard.Web.1.x.xx.zip\n file from \nhere\n. Extract the .zip file to your Desktop. The extracted folder contains several files and an \nOrchard\n folder.\n\n\nCopy the \nOrchard\n Folder to \nC:\\inetpub\\wwwroot\\\n.\n\n\nIn Windows Explorer go inside the \nOrchard\n Folder.Let's start with \nApp_Data\n folder.\n\n\nThis folder is where Orchard stores site settings. Right-click \nApp_Data\n folder, click \nProperties\n and using the \nSecurity\n tab set modify and read permissions for the \nIIS_IUSRS\n user.\n\n\nThen repeat the same procedure for the following folders:\n\n\n\n\nModules\n. This is required if you want to install modules from the gallery. (We recommend that you remove the read/write permissions for production sites.)\n\n\nThemes\n. This is required if you want to install themes from the gallery. (We recommend that you remove the read/write permissions for production sites.)\n\n\nMedia\n. This folder is where Orchard stores media files (images, etc.).\n\n\n\n\n\n\n\n\nTip\n: If you want to completely reset an Orchard site configuration to its default settings, you can delete the contents of the App_Data directory. This removes all your custom settings, users, and configuration, as well as any custom data you have added to the site. \nIf you delete the contents of the App_Data folder, and if you want to remove custom images that you have added to the site, you can delete the contents of the Media folder as well. The required files will be recreated the next time Orchard is started.\n\n\n\n\nNow you can create your new website. Search your system for \nInternet Information Services (IIS) Manager\n, and execute it.\n\n\n\n\nClick in \nDefault Web Site\n and \nstop\n. This will free port 80 for our site.\n\n\n\n\nRight-click \nSites\n and \nAdd Website\n.\n\n\n\n\nWrite your site name and point \nPhysical path\n to your \nOrchard\n folder. Click \nOk\n.\n\n\n\n\nClick \nYes\n in the warning dialog about two sites using port 80.\n\n\n\n\nYour website is running now. Click \nbrowse\n to navigate to it.\n\n\n\n\nYou should see the Orchard setup screen in your browser.\n\n\nRunning the Site Using WebMatrix and IIS Express\n\n\nDownload the \nOrchard.Web.1.x.xx.zip\n file from \nhere\n. Extract the Orchard .zip file to a local folder. Launch WebMatrix, and in the \nQuick Start\n screen, click \nOpen\n and then \nFolder\n.\n\n\n\n\nNavigate to the folder where you extracted the .zip file, select the folder named \nOrchard\n, and then click \nSelect Folder\n to open the site.\n\n\n\n\nTo run the site, in the WebMatrix \nFiles\n workspace, select the root \nOrchard\n folder. Click the drop-down list in the \nRun\n button and then select a browser.\n\n\n\n\nYou should see the Orchard setup screen in your browser.\n\n\nRunning the Site Using Visual Studio and the Visual Studio Development Server\n\n\nThis procedure was tested with Visual Studio 2013 Update 1.\n\n\nAltough you can run the precompiled version of Orchard in Visual Studio, you will find much easier to work in Visual Studio with the full source code version. \nDownload the full source code from \nhere\n. Extract the .zip file to a local folder.\n\n\n\n\nLaunch Visual Studio and select \nFile\n > \nOpen\n > \nProject/Solution\n. Navigate to the folder where you extracted the .zip and open the folder named \nsrc\n. Select the \nOrchard.sln\n solution file.\n\n\n\n\nTo run the site, press Ctrl+F5. You should see the Orchard setup screen in your browser.\n\n\nSetting Up a Site\n\n\nWhen you first launch the Orchard site, you are presented with the Orchard setup screen: \n\n\n\n\nBy default, Orchard includes a built-in database that you can use without installing a separate database server. If you choose this option then you don't need to configure the database at all. A mini version of SQL Server called SQL Server CE will be automatically run with your site. It keeps its data inside a database file that lives inside \nApp_Data\n.  \n\n\nHowever, if you are running SQL Server or SQL Server Express, you can configure Orchard to use either of those products instead by specifying a connection string. The database and user specified in the connection string must be created before you start the Orchard setup. Just create an empty database on your database server, create the user and that's it. Orchard will set up all of the tables and data automatically for you during the setup process.\n\n\nOptionally, you can enter a table prefix so that multiple Orchard installations can share the same database but keep their data separate.\n\n\n\n\nThe Orchard setup screen includes a section where you can choose an Orchard recipe. You can choose from the following Orchard recipes:\n\n\n\n\nDefault\n. Sets up a site with frequently used Orchard features.\n\n\nBlog\n. Sets up a site as a personal blog.\n\n\nCore\n. Sets up a site that has only the Orchard framework for development use.\n\n\n\n\n\n\nFor information about recipes and how to make a custom recipe, see \nMaking a Web Site Recipe\n. \n\n\nAfter you've entered the required information on the setup screen, click \nFinish Setup\n. When the setup process is complete, your new site's home page is displayed.\n\n\n\n\nYou are now on the Orchard home page and can begin configuring your site.\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.8\n\n\n4-9-14: Added screenshots and more detail to the IIS section. Updated Webmatrix screenshots. Changed a bit the structure of some paragraphs to make them clearer. Updated some links.\n\n\n\n\n\n\nUpdates for Orchard 1.6\n\n\n11-07-12: Updated screens for 1.6 installation.\n\n\n4-12-11: Updated screens for 1.1 installation.\n\n\n3-14-11: Added section on using WebMatrix and IIS Express.\n\n\n3-14-11: Added information about recipes in the setup screen.\n\n\n3-15-11: Fixed the IIS section to use the Orchard subfolder from the zip.",
            "title": "Manually Installing Orchard"
        },
        {
            "location": "/Documentation/Manually-installing-Orchard-zip-file/#downloading-the-zip-file",
            "text": "Navigate to the  Releases Section of Orchard in GitHub .   You will find two .zip files.   Orchard.Web.1.x.xx.zip  : In this file the site has already been built and can be run without additional compilation. It does not includes all the source code.  Orchard.Source.1.x.xx.zip  : This file includes the source code. If you plan to develop modules you probably prefer this one. It is easier to use with Visual Studio and you have plenty of source files to see how everything is done.",
            "title": "Downloading the .zip File"
        },
        {
            "location": "/Documentation/Manually-installing-Orchard-zip-file/#running-the-site-using-iis",
            "text": "This procedure was tested with a clean installation of Windows 8.1 Enterprise Edition.  First let's setup the server. Search for \"Add or Remove Programs\" in your system. And execute it.   Click  Turn Windows features on or off .   Click  Internet Information Services  and then  ASP.NET 4.5 . Click  OK .   At this point we recommend rebooting your system. This way you will be sure that all the required services are started from scratch.  When the system restarts, download the  Orchard.Web.1.x.xx.zip  file from  here . Extract the .zip file to your Desktop. The extracted folder contains several files and an  Orchard  folder.  Copy the  Orchard  Folder to  C:\\inetpub\\wwwroot\\ .  In Windows Explorer go inside the  Orchard  Folder.Let's start with  App_Data  folder.  This folder is where Orchard stores site settings. Right-click  App_Data  folder, click  Properties  and using the  Security  tab set modify and read permissions for the  IIS_IUSRS  user.  Then repeat the same procedure for the following folders:   Modules . This is required if you want to install modules from the gallery. (We recommend that you remove the read/write permissions for production sites.)  Themes . This is required if you want to install themes from the gallery. (We recommend that you remove the read/write permissions for production sites.)  Media . This folder is where Orchard stores media files (images, etc.).     Tip : If you want to completely reset an Orchard site configuration to its default settings, you can delete the contents of the App_Data directory. This removes all your custom settings, users, and configuration, as well as any custom data you have added to the site. \nIf you delete the contents of the App_Data folder, and if you want to remove custom images that you have added to the site, you can delete the contents of the Media folder as well. The required files will be recreated the next time Orchard is started.   Now you can create your new website. Search your system for  Internet Information Services (IIS) Manager , and execute it.   Click in  Default Web Site  and  stop . This will free port 80 for our site.   Right-click  Sites  and  Add Website .   Write your site name and point  Physical path  to your  Orchard  folder. Click  Ok .   Click  Yes  in the warning dialog about two sites using port 80.   Your website is running now. Click  browse  to navigate to it.   You should see the Orchard setup screen in your browser.",
            "title": "Running the Site Using IIS"
        },
        {
            "location": "/Documentation/Manually-installing-Orchard-zip-file/#running-the-site-using-webmatrix-and-iis-express",
            "text": "Download the  Orchard.Web.1.x.xx.zip  file from  here . Extract the Orchard .zip file to a local folder. Launch WebMatrix, and in the  Quick Start  screen, click  Open  and then  Folder .   Navigate to the folder where you extracted the .zip file, select the folder named  Orchard , and then click  Select Folder  to open the site.   To run the site, in the WebMatrix  Files  workspace, select the root  Orchard  folder. Click the drop-down list in the  Run  button and then select a browser.   You should see the Orchard setup screen in your browser.",
            "title": "Running the Site Using WebMatrix and IIS Express"
        },
        {
            "location": "/Documentation/Manually-installing-Orchard-zip-file/#running-the-site-using-visual-studio-and-the-visual-studio-development-server",
            "text": "This procedure was tested with Visual Studio 2013 Update 1.  Altough you can run the precompiled version of Orchard in Visual Studio, you will find much easier to work in Visual Studio with the full source code version. \nDownload the full source code from  here . Extract the .zip file to a local folder.   Launch Visual Studio and select  File  >  Open  >  Project/Solution . Navigate to the folder where you extracted the .zip and open the folder named  src . Select the  Orchard.sln  solution file.   To run the site, press Ctrl+F5. You should see the Orchard setup screen in your browser.",
            "title": "Running the Site Using Visual Studio and the Visual Studio Development Server"
        },
        {
            "location": "/Documentation/Manually-installing-Orchard-zip-file/#setting-up-a-site",
            "text": "When you first launch the Orchard site, you are presented with the Orchard setup screen:    By default, Orchard includes a built-in database that you can use without installing a separate database server. If you choose this option then you don't need to configure the database at all. A mini version of SQL Server called SQL Server CE will be automatically run with your site. It keeps its data inside a database file that lives inside  App_Data .    However, if you are running SQL Server or SQL Server Express, you can configure Orchard to use either of those products instead by specifying a connection string. The database and user specified in the connection string must be created before you start the Orchard setup. Just create an empty database on your database server, create the user and that's it. Orchard will set up all of the tables and data automatically for you during the setup process.  Optionally, you can enter a table prefix so that multiple Orchard installations can share the same database but keep their data separate.   The Orchard setup screen includes a section where you can choose an Orchard recipe. You can choose from the following Orchard recipes:   Default . Sets up a site with frequently used Orchard features.  Blog . Sets up a site as a personal blog.  Core . Sets up a site that has only the Orchard framework for development use.    For information about recipes and how to make a custom recipe, see  Making a Web Site Recipe .   After you've entered the required information on the setup screen, click  Finish Setup . When the setup process is complete, your new site's home page is displayed.   You are now on the Orchard home page and can begin configuring your site.",
            "title": "Setting Up a Site"
        },
        {
            "location": "/Documentation/Manually-installing-Orchard-zip-file/#change-history",
            "text": "Updates for Orchard 1.8  4-9-14: Added screenshots and more detail to the IIS section. Updated Webmatrix screenshots. Changed a bit the structure of some paragraphs to make them clearer. Updated some links.    Updates for Orchard 1.6  11-07-12: Updated screens for 1.6 installation.  4-12-11: Updated screens for 1.1 installation.  3-14-11: Added section on using WebMatrix and IIS Express.  3-14-11: Added information about recipes in the setup screen.  3-15-11: Fixed the IIS section to use the Orchard subfolder from the zip.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Working-with-Orchard-in-WebMatrix/",
            "text": "WebMatrix\n, Microsoft's one-stop web development tool, lets you create, edit, and publish websites with unprecedented ease. WebMatrix includes a built-in web server (IIS Express), along with a simple editor for editing and customizing applications like Orchard. When installing Orchard using the Web Platform Installer, you have the option to install to\nWebMatrix instead of IIS. \n\n\nInstalling and Launching WebMatrix\n\n\nDownload and launch the Microsoft \nWeb Platform Installer\n  Then click the \nAdd\n button for \nMicrosoft WebMatrix\n and click \nInstall\n.\n\n\n\n\nAccept the license terms and launch WebMatrix when the installation finishes.\n\n\nUsing WebMatrix to create an Orchard Website\n\n\nTo create an Orchard Website using WebMatrix, click \nApp Gallery\n on the WebMatrix startup page.  \n\n\n\n\nScroll down and select \nOrchard CMS\n. Enter a name to be used as the folder name for your site. For example, if the site name \"Orchard CMS\" is entered, the folder \"Documents/My Websites/Orchard CMS\" will be created.  Click \nNext\n.\n\n\n\n\nClick \nI Accept\n to accept the EULA agreement.\n\n\n\n\nA new subfolder, \"Orchard CMS\", will be added to your \"My Websites\" folder. Click \nOK\n. Your Orchard site will then be opened in Web Matrix and the \"Orchard Setup\" page will be launched in a new browser window.\n\n\n\n\nEnter basic information about your site on the Orchard Setup page. Specifically: the name of the site, the name of a user of the site, the user's password, the kind of database to use for site data, and the Orchard recipe.  \n\n\nIf you are just starting out using Orchard, we recommend that you select \nSQL Compact Server\n for the database and \nDefault\n for the recipe. Enter the information and click \nFinish Setup\n.\n\n\n\n\n \n\n\nOrchard sets up your initial site and then opens a browser window with the site's home page.  You will automatically be logged in with the user name you specified in setup (in this case, \nadmin\n).  At this point, clicking on \nDashboard\n \nwill take you to the \nOrchard Dashboard\n where website changes can be made.\n\n\n \n\n\nRunning your website from Web Matrix\n\n\nAt any point in time, you can run your website from WebMatrix by selecting the project node and clicking \nRun\n.\n\n\n\n\nWorking with Files\n\n\nYou can use WebMatrix to edit the files in your Orchard installation. WebMatrix provides a simple editor that includes colorization for HTML, CSS, JavaScript, and code files. \n\n\nAlthough WebMatrix does not provide a build system for compiling code files, Orchard itself provides dynamic compilation for code files when they are edited. For more information, see \nOrchard Dynamic Compilation\n.\n\n\n\n\nYou can change the editor WebMatrix uses by following these \ninstructions\n. \n\n\nAs an example, you may find it helpful to use the XML editor (which provides colorization) on the placement.info file.  To do this you must change the setting for \n.info\n files in the WebMatrix file \nfiletypes.xml\n (which can be found in the following locations):\n\n\n32-bit machines: C:\\Program Files\\Microsoft WebMatrix\\config\\filetypes.xml\n64-bit machines: C:\\Program Files (x86)\\Microsoft WebMatrix\\config\\filetypes.xml\n\n\n\n1) Add the .info file extension to the list of XML file types:\n\n\n<FileType extension=\".info;.config;.csproj;.vbproj;.resx;.settings;.sitemap;.user;.wsdl;.browser;.xaml;.xml;.xoml;.xsd;.xsl;.xslt;.mxml;.dbml;.wstemplate\">\n    <OpenAs>XML</OpenAs>\n    <TabColor>Yellow</TabColor>\n    <Icon>XMLFileIcon</Icon>\n    <EmitUtf8BomByDefault>True</EmitUtf8BomByDefault>\n    <Description>An XML File</Description>\n</FileType>\n\n\n\n2) Remove the .info file extension from the list of Text file types:\n\n\n<FileType extension=\".ashx;.export;.po;.blogtemplate;.yml;.yaml;.manifest;.pl;.json;.csv\">\n    <OpenAs>Text</OpenAs>\n    <TabColor>Gray</TabColor>\n    <Icon>DefaultFileIcon</Icon>\n    <EmitUtf8BomByDefault>False</EmitUtf8BomByDefault>\n    <Description>Unknown file type</Description>\n</FileType>\n\n\n\n3) Restart WebMatrix to apply the change.\n\n\nWorking with the Database\n\n\nIf you selected \nSQL Server Compact\n for the the database option in Orchard setup, you can open the \nOrchard.sdf\n database in WebMatrix by selecting \nDatabases\n.\n\n\n\n\nOnce the database window is opened, you can view the contents of a table by selecting the table in the explorer pane.\n\n\n\n\n(If you were already in the \nDatabases\n workspace, you might need to right-click the Orchard node and then click \nRefresh\n in order to display the database and tables.)\n\n\n\n\nPublishing Your Web Site\n\n\nWhen you're ready to upload the local copy of your website to the Internet, click the \nPublish\n button in the WebMatrix ribbon.\n\n\n\n\nThe first time you publish, the \nPublish Your Site\n dialog box is displayed. \n\n\n\n\nTo publish a website, you must have an account with a web hosting provider. If you don't have one yet, you can select either \nGet Started with Windows Azure\n or \nFind Windows Web Hosting\n. \n If you select Windows Azure, you will have the option of creating your website as either an Azure Website or Azure Web Role. For instructions on working with Azure see ?????\n \n \n\n\nAfter you've set up an account with a hosting provider, the provider will typically send you an email with your user name, server name, and other information. To save you the extra step of entering this information manually, the provider might send you a \"Profile XML\" file (named with the \n.publishsettings\n extension) that contains this information. \nYou can use these settings by selecting \nImport publish profile\n and then selecting the file provided by your hoster. Otherwise, you can enter the settings manually. \n\n\n  \n\n\nAfter you've published your site, you might want to make changes to it and republish it.  When you subsequently select \nPublish\n, WebMatrix will list the local files that have been changed since the last time the local site was published.\nAt this point you can select which files you want to upload to the remote stie and select \nContinue\n or cancel.\n \n \n\n\nOnce you have published your website, you can view the files in the remote site by opening the \nRemote View\n.\n\n\n\n\nMore information about using WebMatrix to publish websites can be found \nhere\n.\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.6\n\n\n11-14-12:  Updated screens and workflow.",
            "title": "Working with Orchard in WebMatrix"
        },
        {
            "location": "/Documentation/Working-with-Orchard-in-WebMatrix/#installing-and-launching-webmatrix",
            "text": "Download and launch the Microsoft  Web Platform Installer   Then click the  Add  button for  Microsoft WebMatrix  and click  Install .   Accept the license terms and launch WebMatrix when the installation finishes.",
            "title": "Installing and Launching WebMatrix"
        },
        {
            "location": "/Documentation/Working-with-Orchard-in-WebMatrix/#using-webmatrix-to-create-an-orchard-website",
            "text": "To create an Orchard Website using WebMatrix, click  App Gallery  on the WebMatrix startup page.     Scroll down and select  Orchard CMS . Enter a name to be used as the folder name for your site. For example, if the site name \"Orchard CMS\" is entered, the folder \"Documents/My Websites/Orchard CMS\" will be created.  Click  Next .   Click  I Accept  to accept the EULA agreement.   A new subfolder, \"Orchard CMS\", will be added to your \"My Websites\" folder. Click  OK . Your Orchard site will then be opened in Web Matrix and the \"Orchard Setup\" page will be launched in a new browser window.   Enter basic information about your site on the Orchard Setup page. Specifically: the name of the site, the name of a user of the site, the user's password, the kind of database to use for site data, and the Orchard recipe.    If you are just starting out using Orchard, we recommend that you select  SQL Compact Server  for the database and  Default  for the recipe. Enter the information and click  Finish Setup .      Orchard sets up your initial site and then opens a browser window with the site's home page.  You will automatically be logged in with the user name you specified in setup (in this case,  admin ).  At this point, clicking on  Dashboard  \nwill take you to the  Orchard Dashboard  where website changes can be made.",
            "title": "Using WebMatrix to create an Orchard Website"
        },
        {
            "location": "/Documentation/Working-with-Orchard-in-WebMatrix/#running-your-website-from-web-matrix",
            "text": "At any point in time, you can run your website from WebMatrix by selecting the project node and clicking  Run .",
            "title": "Running your website from Web Matrix"
        },
        {
            "location": "/Documentation/Working-with-Orchard-in-WebMatrix/#working-with-files",
            "text": "You can use WebMatrix to edit the files in your Orchard installation. WebMatrix provides a simple editor that includes colorization for HTML, CSS, JavaScript, and code files.   Although WebMatrix does not provide a build system for compiling code files, Orchard itself provides dynamic compilation for code files when they are edited. For more information, see  Orchard Dynamic Compilation .   You can change the editor WebMatrix uses by following these  instructions .   As an example, you may find it helpful to use the XML editor (which provides colorization) on the placement.info file.  To do this you must change the setting for  .info  files in the WebMatrix file  filetypes.xml  (which can be found in the following locations):  32-bit machines: C:\\Program Files\\Microsoft WebMatrix\\config\\filetypes.xml\n64-bit machines: C:\\Program Files (x86)\\Microsoft WebMatrix\\config\\filetypes.xml  1) Add the .info file extension to the list of XML file types:  <FileType extension=\".info;.config;.csproj;.vbproj;.resx;.settings;.sitemap;.user;.wsdl;.browser;.xaml;.xml;.xoml;.xsd;.xsl;.xslt;.mxml;.dbml;.wstemplate\">\n    <OpenAs>XML</OpenAs>\n    <TabColor>Yellow</TabColor>\n    <Icon>XMLFileIcon</Icon>\n    <EmitUtf8BomByDefault>True</EmitUtf8BomByDefault>\n    <Description>An XML File</Description>\n</FileType>  2) Remove the .info file extension from the list of Text file types:  <FileType extension=\".ashx;.export;.po;.blogtemplate;.yml;.yaml;.manifest;.pl;.json;.csv\">\n    <OpenAs>Text</OpenAs>\n    <TabColor>Gray</TabColor>\n    <Icon>DefaultFileIcon</Icon>\n    <EmitUtf8BomByDefault>False</EmitUtf8BomByDefault>\n    <Description>Unknown file type</Description>\n</FileType>  3) Restart WebMatrix to apply the change.",
            "title": "Working with Files"
        },
        {
            "location": "/Documentation/Working-with-Orchard-in-WebMatrix/#working-with-the-database",
            "text": "If you selected  SQL Server Compact  for the the database option in Orchard setup, you can open the  Orchard.sdf  database in WebMatrix by selecting  Databases .   Once the database window is opened, you can view the contents of a table by selecting the table in the explorer pane.   (If you were already in the  Databases  workspace, you might need to right-click the Orchard node and then click  Refresh  in order to display the database and tables.)",
            "title": "Working with the Database"
        },
        {
            "location": "/Documentation/Working-with-Orchard-in-WebMatrix/#publishing-your-web-site",
            "text": "When you're ready to upload the local copy of your website to the Internet, click the  Publish  button in the WebMatrix ribbon.   The first time you publish, the  Publish Your Site  dialog box is displayed.    To publish a website, you must have an account with a web hosting provider. If you don't have one yet, you can select either  Get Started with Windows Azure  or  Find Windows Web Hosting . \n If you select Windows Azure, you will have the option of creating your website as either an Azure Website or Azure Web Role. For instructions on working with Azure see ?????\n     After you've set up an account with a hosting provider, the provider will typically send you an email with your user name, server name, and other information. To save you the extra step of entering this information manually, the provider might send you a \"Profile XML\" file (named with the  .publishsettings  extension) that contains this information. \nYou can use these settings by selecting  Import publish profile  and then selecting the file provided by your hoster. Otherwise, you can enter the settings manually.       After you've published your site, you might want to make changes to it and republish it.  When you subsequently select  Publish , WebMatrix will list the local files that have been changed since the last time the local site was published.\nAt this point you can select which files you want to upload to the remote stie and select  Continue  or cancel.\n     Once you have published your website, you can view the files in the remote site by opening the  Remote View .   More information about using WebMatrix to publish websites can be found  here .",
            "title": "Publishing Your Web Site"
        },
        {
            "location": "/Documentation/Working-with-Orchard-in-WebMatrix/#change-history",
            "text": "Updates for Orchard 1.6  11-14-12:  Updated screens and workflow.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Getting-around-the-dashboard/",
            "text": "This topic targets, and was tested with, the Orchard 1.8 release.\n\n\nThe Orchard dashboard lets you manage your website, change its appearance, add content, and enable and disable Orchard features. When you are logged into your website, you can access the dashboard by clicking the \nDashboard\n link at the bottom of your default home page.\n\n\nWhen you open the dashboard, you see a list of application features and settings on the left side of the page. This list is divided into sections of related features. Each expandable section can be collapsed to show only the section title. If you click a section title, the first feature in that section is selected. This list changes as you enable and disable Orchard features. For example, the \nBlog\n section will have a set of additional collapsible items under it (as shown) after you actually create a blog. The \nNew\n section allows you to create new instances of default content types as well as any custom content types that you define. The right side of the page displays the settings that are available for the selected feature. The following image shows the contents of the dashboard.\n\n\n\n\nFeature Settings Available in the Dashboard\n\n\nThe following table shows each of the dashboard sections and briefly describes the available settings.\n\n\n\n\n\n\n\n\nSection Title\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDashboard\n\n\nContains the dashboard and displays the main (\"Welcome to Orchard\") page. This page contains a number of helpful links for working with Orchard. The page also shows the Orchard version that is running, and displays advisories from \nhttp://orchardproject.net\n (when advisories are available) that can notify you when a new version is available or when an important update needs to be applied.\n\n\n\n\n\n\nNew\n\n\nLets you create new instances of default content types or of custom content types that you define in the \nContent Definition\n screen. For more information, see \nCreating Custom Content Types\n.\n\n\n\n\n\n\nContent\n\n\nLets you manage the instances of your content types. For example it lets you create pages, edit or remove existing pages, and publish pages. For more information, see \nAdding Pages to Your Site\n\n\n\n\n\n\nContent Definition\n\n\nLets you manage existing content types as well as creating your own. For more information, see \nContent Types\n\n\n\n\n\n\nBlog\n\n\nLets you add a blog to your website, create new blog posts, and manage your blog. For more information, see \nAdding a Blog to Your Site\n.\n\n\n\n\n\n\nQueries\n\n\nLets you add new queries and edit or remove existing queries.Queries are later used for display lists of content items through the site.\n\n\n\n\n\n\nComments\n\n\nIf your website is configured to allow users to post comments, lets you manage the posted comments. For more information, see \nModerating Comments\n.\n\n\n\n\n\n\nTaxonomies\n\n\nLets you manage taxonomy terms. Later on you can use them to categorize content items and display or hide them in different ways according to their taxonomy.\n\n\n\n\n\n\nWidgets\n\n\nLets you manage the widgets that appear on the pages of your site. For more information, see \nManaging widgets\n.\n\n\n\n\n\n\nMedia\n\n\nLets you add or remove folders that contain media. For more information, see \nAdding and Managing Media Content\n.\n\n\n\n\n\n\nNavigation\n\n\nLets you add or remove items in the main menu and define additional navigation menus. For more information, see \nNavigation and Menus\n.\n\n\n\n\n\n\nTags\n\n\nLets you add or remove content tags for your site. For more information, see \nOrganizing Content with Tags\n.\n\n\n\n\n\n\nModules\n\n\nLets you download, install, and manage modules and features on your site. For more information, see \nInstalling Modules and Themes from the Gallery\n, \nEnabling and Disabling Features\n, and \nInstalling and Upgrading Modules\n.\n\n\n\n\n\n\nThemes\n\n\nLets you install new themes and apply themes to your site. For more information, see \nInstalling Themes\n and \nPreviewing and Applying a Theme\n.\n\n\n\n\n\n\nWorkflows\n\n\nLets you manage your workflows. Through workflows your site can perform simple or complex tasks based on system events or user interaction.\n\n\n\n\n\n\nUsers\n\n\nLets you manage users and roles for your site. For more information, see \nManaging Users and Roles\n.\n\n\n\n\n\n\nReports\n\n\nLets you manage and view reports that Orchard generates for your site.\n\n\n\n\n\n\nSettings\n\n\nLets you configure a variety of site settings such as the site name and culture, the default number of items per page, URLs for Gallery feeds, whether user-added comments must be approved, media file types that can be uploaded, and user registration settings. For more information see \nModifying Site Settings\n.\n\n\n\n\n\n\n\n\nChange History\n\n\n\n\nUpdated for Orchard 1.8\n\n\n4-20-14: Updated screenshot. Updated available settings on 1.8.\n\n\n\n\n\n\nUpdated for Orchard 1.1\n\n\n3-15-11: Updated screen shot and table to show 1.1 version of the dashboard.",
            "title": "Getting Around the Dashboard"
        },
        {
            "location": "/Documentation/Getting-around-the-dashboard/#feature-settings-available-in-the-dashboard",
            "text": "The following table shows each of the dashboard sections and briefly describes the available settings.     Section Title  Description      Dashboard  Contains the dashboard and displays the main (\"Welcome to Orchard\") page. This page contains a number of helpful links for working with Orchard. The page also shows the Orchard version that is running, and displays advisories from  http://orchardproject.net  (when advisories are available) that can notify you when a new version is available or when an important update needs to be applied.    New  Lets you create new instances of default content types or of custom content types that you define in the  Content Definition  screen. For more information, see  Creating Custom Content Types .    Content  Lets you manage the instances of your content types. For example it lets you create pages, edit or remove existing pages, and publish pages. For more information, see  Adding Pages to Your Site    Content Definition  Lets you manage existing content types as well as creating your own. For more information, see  Content Types    Blog  Lets you add a blog to your website, create new blog posts, and manage your blog. For more information, see  Adding a Blog to Your Site .    Queries  Lets you add new queries and edit or remove existing queries.Queries are later used for display lists of content items through the site.    Comments  If your website is configured to allow users to post comments, lets you manage the posted comments. For more information, see  Moderating Comments .    Taxonomies  Lets you manage taxonomy terms. Later on you can use them to categorize content items and display or hide them in different ways according to their taxonomy.    Widgets  Lets you manage the widgets that appear on the pages of your site. For more information, see  Managing widgets .    Media  Lets you add or remove folders that contain media. For more information, see  Adding and Managing Media Content .    Navigation  Lets you add or remove items in the main menu and define additional navigation menus. For more information, see  Navigation and Menus .    Tags  Lets you add or remove content tags for your site. For more information, see  Organizing Content with Tags .    Modules  Lets you download, install, and manage modules and features on your site. For more information, see  Installing Modules and Themes from the Gallery ,  Enabling and Disabling Features , and  Installing and Upgrading Modules .    Themes  Lets you install new themes and apply themes to your site. For more information, see  Installing Themes  and  Previewing and Applying a Theme .    Workflows  Lets you manage your workflows. Through workflows your site can perform simple or complex tasks based on system events or user interaction.    Users  Lets you manage users and roles for your site. For more information, see  Managing Users and Roles .    Reports  Lets you manage and view reports that Orchard generates for your site.    Settings  Lets you configure a variety of site settings such as the site name and culture, the default number of items per page, URLs for Gallery feeds, whether user-added comments must be approved, media file types that can be uploaded, and user registration settings. For more information see  Modifying Site Settings .",
            "title": "Feature Settings Available in the Dashboard"
        },
        {
            "location": "/Documentation/Getting-around-the-dashboard/#change-history",
            "text": "Updated for Orchard 1.8  4-20-14: Updated screenshot. Updated available settings on 1.8.    Updated for Orchard 1.1  3-15-11: Updated screen shot and table to show 1.1 version of the dashboard.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Getting-Started/",
            "text": "This topic targets, and was tested with, the Orchard 1.8 release.\n\n\nThis walkthrough provides a glimpse of the features that Orchard has to offer, provided as a step-by-step guide. If this is your first time using Orchard, this document is for you!\n\n\nGetting Started with Orchard\n\n\nBeing new to Orchard, you should know the right place where you can find the resources and latest information about Orchard.\n\n\n\n\nOrchard Beginner\n\n\nOrchard in GitHub - Orchard Code Repository\n\n\nOrchard Discussion Forum - Discussion area for Orchard\n\n\nOrchard Documentation - Documentation area for Orchard\n\n\nOrchard Community Websites - Community sites on Orchard from all over the world\n\n\nOrchard CMS Weekly Meeting\n\n\n\n\nThis topic assumes that you have already installed Orchard and set up your website. If you haven't, follow the instructions in \nInstalling Orchard\n.\n\n\nThere are plenty of options to get up and running with Orchard without installing Orchard on your local machine or local IIS Server.\n\n\nTry Orchard\n\n\nTry Orchard!\n is a showcase for the Orchard content management framework: you can try how Orchard feels by checking out an already running demo site where you can play with Orchard as you wish.\n\n\nNo registration, no setup, nothing required, you can just go to \nTry Orchard!\n, open one of the continuously re-installed demo sites and play with it. This is the simplest way of taking the first steps with Orchard.\n\n\nBe aware though that Try Orchard! is really just for testing: since the demo sites are wiped out hourly you don't try to publish your blog there!\n\n\n\n\n\n\nDotNest : Orchard SaaS provider\n\n\nDotNest\n is the Orchard SaaS provider: this means that you can simply register and create Orchard websites that run in the cloud without any hassle. Your website will just work: you don't have to deploy and later upgrade it, you can just use it.\n\n\nWith DotNest you can try out Orchard very simply, very quickly and since your website is already hosted for you you can also show it to everybody. Apart from getting used to the user interface and features of Orchard you can also get into the \nbasics of Orchard theme development\n with it and style and customize your Orchard website in a lot of ways.\n\n\nConvenience does come with disadvantages: due to the architecture of DotNest you can't install custom modules, so you have to use what is already available (that however should be enough for a big part of websites).\n\n\n1)\n What is \nDotNest\n \n\n\n\n2)\n Click \nNew Tenant\n to create a new tenant on DotNest\n\n\n\n\n3)\n Fill in the required details to create a \nNew Tenant\n\n\n\n\n3)\n \nNew Tenant\n successfully created\n\n\n\nOrchard on Azure Websites\n\n\nAfter a \nfree registration\n you can create websites from the Azure Gallery where you can select Orchard to deploy in one click too.\n\n\nYour Orchard site on Azure Websites will be completely under your control: you can install any module and theme you want too. However this also comes with responsibilities: you have to maintain your website yourself, upgrade and fix it as necessary.\n\n\n\n\n\n\n\n\n\n\nChanging The Layout Of The Home Page\n\n\nOut of the box, Orchard applies a theme to your website known as the \"Theme Machine\".  The Theme Machine includes CSS styles and a layout. Orchard allows you to selectively include or exclude portions (zones) of the layout on each page of your website. \n\n\n\n\nThe \nNavigation\n zone contains a menu with a single tab, \nHome\n. The \nTripelFirst, TripleSecond\n and \nTripleThird\n zones at the bottom of the page are populated with dummy text in the \nFirst Leader Aside\n, \nSecond Leader Aside\n and \nThird Leader Aside\n paragraphs.  \n\n\nIn addition to zones, every page has a central region (In this case, the text from \n\"Welcome to Orchard\"\n to \n\"Thank you for using Orchard\"\n) which, for this tutorial, will be referred to as the \nBody\n of the page. \n\n\n\n\nAlthough the Theme Machine has many possible zones defined, on a given page the only zones visible will be zones that have had widgets added to them (you can learn more about widgets \nhere\n). The Navigation, TripelFirst, TripelSecond and TripelThird zones are visible on the home page because they contain widgets.\n\n\n1)\n Select \nWidgets\n from the Dashboard.  \n\n\nThe Widgets management page opens with the \nDefault\n layer selected.  Any zone that is visible in the Default layer will appear on all pages. Therefore, the \nNavigation\n zone is visible on\nall web pages and has a \nMain Menu\n widget.  The Main Menu widget is annotated in green because it has been added to a zone in the \ncurrent layer\n.  \n\n\n\n\n2)\n Select the \nHomePage\n layer to see which zones are visible for the home page.  \n\n\nWidgets which have been added to zones in the selected layer will be annotated in green (FirstLeaderAside, SecondLeaderAside and ThirdLeaderAside).  Widgets which have been added to zones in other layers will be annotated in gray (Main Menu).\n\n\n\n\n\n\nThe TripelFirst, TripelSecond, and TripelThird zones on the home page have widgets in them and are visible. Removing all of the widgets in a zone will make the zone invisible.  \n\n\n3)\n Select \nRemove\n for the \nThird Leader Aside\n widget.\n\n\n\n\nThe TripelThird zone will no longer be visible on the home page.\n\n\n\n\n4)\n Select \nAdd\n for the TripelThird zone to add a widget to the zone.\n\n\n\n5)\n Select the \nHTML Widget\n to add this type of widget to the TripelThird zone.\n\n\n\n6)\n Enter a title for your widget and some content.\n\n\n\n\n7)\n \nSave\n the new widget.\n\n\n8)\n Select \nYour Site\n in the upper-left side of the Dashboard to view the modified home page with the new TripelThird zone.\n\n\n\nEditing The Content Of The Home Page\n\n\nOrchard provides a feature that makes it easy for you to edit the content in a zone or the page body.  To turn on this feature you must enable the \nContent Control Wrapper\n and \nWidget Control Wrapper\n modules \n\n\n1)\n Select \nModules\n on the Dashboard.\n\n\n2)\n Enable \nContent Control Wrapper\n\n\n3)\n Enable \nWidget Control Wrapper\n\n\n\n\nOnce these modules are enabled, you can edit the contents of an individual zone by clicking the \nEdit\n link (at the top right) in the zone.  \n\n\n\n\n4)\n Select the \nEdit\n link for the \nTripelFirst\n zone of the home page. \n\n\n5)\n Change the title, and optionally, change or remove the existing body text for the zone.  \n\n\nInserting a Media Item\n\n\n6)\n Select \nInsert Media Item\n. \n\n\n\n\n7)\n Click \nCreate Folder\n. \n\n\n\n\n8)\n Name the folder \nmyImages\n and click \nSave\n. \n\n\n\n\n9)\n Click the folder \nmyImages\n, and then click \nImport\n \n\n\n\n\n10)\n Click \nMy Computer\n and then click in the central zone to browse for an image. If you prefer you can drop your image into the central zone.\n\n\n\n\n11)\n Close the dialog.\n\n\n\n\n12)\n Click the image and click \nSelect\n.\n\n\n\n\n13)\n If needed, resize the image using the handlers so that later it fits nicely into the zone. Then click \nSave\n to save the changes to the widget. \n\n\n\n\nThe home page is automatically displayed with the updated zone.\n\n\n\n\n14)\n Select the \nEdit\n link for the \nBody\n of the page.\n\n\n\n\nOrchard will display the \nEdit Page\n screen.\n\n\n\n\nNote:\n The Edit Page screen can also be reached from the Dashboard by selecting \nContent\n on the Dashboard and then selecting \nEdit\n for the page you are interested in.\n\n\n\n\n15)\n Enter some text for the content. \n\n\n\n\n16)\n Select \nPublish Now\n at the bottom of the page to make the updates to the page visible immediately.\n\n\n\n\nAdding a New Page to Your Site\n\n\n1)\n In the Orchard Dashboard, under \nNew\n, select \nPage\n.\n\n\n2)\n Enter a title for the page.  When you enter a title for the page and save it (for example, \"Download\"), the permalink (URL) for the page will be filled in automatically (\"download\").  You can edit this link if you prefer a different URL.\n\n\n3)\n Enter some text for the content page body.\n\n\n\n\n4)\n  In the \nTags\n field, add comma-separated tags such as \"download\" and \"Orchard\" so that you can search and filter using those tags later. \n\n\n5)\n Check \nShow on main menu\n and enter the menu text (\"Downloads\") to use in the site's main menu.\n\n\n6)\n Select \nPublish Now\n to make the updates to the page visible immediately. You can also save the page as a draft (to edit later before publishing), or you can choose to publish the page at a specific date and time.\n\n\n\n\n7)\n Select \nYour Site\n in the upper-left side of the Dashboard to view the modified home page with the new menu. Clik \nDownloads\n and you will see your new page.\n\n\nAdding New Layer for a Page\n\n\nTo change the layout of your new page without affecting the rest of the site you can create a new layer, that will be applied only to the \nDownloads\n page. Then you can place some widgets on that layer and they will be visible only in the \nDownloads\n page.\n\n\n1)\n Go to the Dashboard and select \nWidgets\n. Then click \nadd a new layer\n to add a new layer for this page which will allow you to customize the layout for the new page at a later point in time.\n\n\n\n\n2)\n Write a name for the layer, a description, and a layer rule: url\"~/download\". This will instruct the Orchard System to show the widgets in this layer only when the url of the browser is pointing to \"download\". Select \nSave\n.\n\n\n\n\nAdding a New HTML Widget\n\n\n3)\n To check that your layer rule is working you can add a widget to it. Ensure that \nCurrent Layer\n is \nDownload\n. Click \nAdd\n in \nAsideFirst\n.\n\n\n\n\n4)\n Add a new \nHtml Widget\n.\n\n\n\n\n5)\n Write a title and a body for it. Save it.\n\n\n\n\n6)\n Select \nYour Site\n in the upper-left side of the Dashboard. Navigate to \nDownloads\n. You should see the custom layout.\n\n\n\n\nSelecting A Theme\n\n\nTo customize the look and feel of the Orchard website you change the theme. \n\n\n1)\n On the Orchard Dashboard, select \nThemes\n.  The currently installed themes are listed. \n\n\n2)\n To download new themes, select the \nGallery\n tab.\n\n\n3)\n Search for \nPJS.Bootstrap\n to find the PJS.Bootstrap Theme. Install the \nPJS.Bootstrap\n theme.\n\n\n4)\n Select the \nInstalled\n tab. \n\n\nAfter a theme has been installed it appears as an option in the \nAvailable\n section on the \nInstalled\n tab. In the following illustration, the \nPJS.Bootstrap\n theme has been installed so it appears in the \nAvailable\n section. (The current theme for the site is \nPJS.Bootstrap\n.) \n\n\n5)\n To see how your site will look with an available them,  select \nPreview\n for the theme.  To apply an available theme to your site select \nSet Current\n for the theme. For more details, see \nPreviewing and Applying a Theme\n and \nInstalling Themes\n.\n\n\n\n\n\n\nExtending Orchard With Modules And Features\n\n\nA key feature of Orchard is the ability to add new features in order to extend the functionality of your site. The primary way to do this is by installing modules. You can think of a module as a package of files (in a .zip folder) that can be installed on your site. To view the modules that are included with Orchard, in the Orchard Dashboard, click \nModules\n and then click the \nInstalled\n tab in the \nModules\n screen.\n\n\n\n\nOrchard provides some built-in modules, and you can install new modules. For details, see \nInstalling and Upgrading Modules\n and \nRegistering additional gallery feeds\n.\n\n\nIndividual modules can expose features that can be independently enabled or disabled. To view the features exposed by the built-in modules in Orchard, click the \nFeatures\n tab in the \nModules\n screen.  \n\n\n\n\nEach feature has an \nEnable\n or \nDisable\n link (depending on its current state), as well as an optional list of dependencies that must also be enabled for a specific feature. The documentation throughout this site describes the variety of features in Orchard and how you can use them to customize your site's user interface and behavior.\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.8\n\n\n9-04-14: Added new sections for how to get started with Orchard and how to get up and running with Orchard : Try Orchard, DotNest, Azure Websites. Updated screen shots for themes (PJS.Bootstrap Theme), modules and control wrappers. \n\n\n4-22-14:  Media selection is different now, updated that part. Adding a widget layer is not suggested anymore when adding a new page, updated that part. Link to registering additional gallery feeds was not working. Updated several screenshots. Added capitalization to section headers.\n\n\n\n\n\n\nUpdates for Orchard 1.6\n\n\n11-25-12:  Added section describing how to change the layout for a page by enabling/disabling zones.  Removed section on Creating a Blog (which already has it's own topic).\n\n\n\n\n\n\nUpdates for Orchard 1.1\n\n\n3-14-11:  Updated screen shots showing updated menus, and updated dashboard and settings options.",
            "title": "Building Your First Orchard Site"
        },
        {
            "location": "/Documentation/Getting-Started/#getting-started-with-orchard",
            "text": "Being new to Orchard, you should know the right place where you can find the resources and latest information about Orchard.   Orchard Beginner  Orchard in GitHub - Orchard Code Repository  Orchard Discussion Forum - Discussion area for Orchard  Orchard Documentation - Documentation area for Orchard  Orchard Community Websites - Community sites on Orchard from all over the world  Orchard CMS Weekly Meeting   This topic assumes that you have already installed Orchard and set up your website. If you haven't, follow the instructions in  Installing Orchard .  There are plenty of options to get up and running with Orchard without installing Orchard on your local machine or local IIS Server.",
            "title": "Getting Started with Orchard"
        },
        {
            "location": "/Documentation/Getting-Started/#try-orchard",
            "text": "Try Orchard!  is a showcase for the Orchard content management framework: you can try how Orchard feels by checking out an already running demo site where you can play with Orchard as you wish.  No registration, no setup, nothing required, you can just go to  Try Orchard! , open one of the continuously re-installed demo sites and play with it. This is the simplest way of taking the first steps with Orchard.  Be aware though that Try Orchard! is really just for testing: since the demo sites are wiped out hourly you don't try to publish your blog there!",
            "title": "Try Orchard"
        },
        {
            "location": "/Documentation/Getting-Started/#dotnest-orchard-saas-provider",
            "text": "DotNest  is the Orchard SaaS provider: this means that you can simply register and create Orchard websites that run in the cloud without any hassle. Your website will just work: you don't have to deploy and later upgrade it, you can just use it.  With DotNest you can try out Orchard very simply, very quickly and since your website is already hosted for you you can also show it to everybody. Apart from getting used to the user interface and features of Orchard you can also get into the  basics of Orchard theme development  with it and style and customize your Orchard website in a lot of ways.  Convenience does come with disadvantages: due to the architecture of DotNest you can't install custom modules, so you have to use what is already available (that however should be enough for a big part of websites).  1)  What is  DotNest    2)  Click  New Tenant  to create a new tenant on DotNest   3)  Fill in the required details to create a  New Tenant   3)   New Tenant  successfully created",
            "title": "DotNest : Orchard SaaS provider"
        },
        {
            "location": "/Documentation/Getting-Started/#orchard-on-azure-websites",
            "text": "After a  free registration  you can create websites from the Azure Gallery where you can select Orchard to deploy in one click too.  Your Orchard site on Azure Websites will be completely under your control: you can install any module and theme you want too. However this also comes with responsibilities: you have to maintain your website yourself, upgrade and fix it as necessary.",
            "title": "Orchard on Azure Websites"
        },
        {
            "location": "/Documentation/Getting-Started/#changing-the-layout-of-the-home-page",
            "text": "Out of the box, Orchard applies a theme to your website known as the \"Theme Machine\".  The Theme Machine includes CSS styles and a layout. Orchard allows you to selectively include or exclude portions (zones) of the layout on each page of your website.    The  Navigation  zone contains a menu with a single tab,  Home . The  TripelFirst, TripleSecond  and  TripleThird  zones at the bottom of the page are populated with dummy text in the  First Leader Aside ,  Second Leader Aside  and  Third Leader Aside  paragraphs.    In addition to zones, every page has a central region (In this case, the text from  \"Welcome to Orchard\"  to  \"Thank you for using Orchard\" ) which, for this tutorial, will be referred to as the  Body  of the page.    Although the Theme Machine has many possible zones defined, on a given page the only zones visible will be zones that have had widgets added to them (you can learn more about widgets  here ). The Navigation, TripelFirst, TripelSecond and TripelThird zones are visible on the home page because they contain widgets.  1)  Select  Widgets  from the Dashboard.    The Widgets management page opens with the  Default  layer selected.  Any zone that is visible in the Default layer will appear on all pages. Therefore, the  Navigation  zone is visible on\nall web pages and has a  Main Menu  widget.  The Main Menu widget is annotated in green because it has been added to a zone in the  current layer .     2)  Select the  HomePage  layer to see which zones are visible for the home page.    Widgets which have been added to zones in the selected layer will be annotated in green (FirstLeaderAside, SecondLeaderAside and ThirdLeaderAside).  Widgets which have been added to zones in other layers will be annotated in gray (Main Menu).    The TripelFirst, TripelSecond, and TripelThird zones on the home page have widgets in them and are visible. Removing all of the widgets in a zone will make the zone invisible.    3)  Select  Remove  for the  Third Leader Aside  widget.   The TripelThird zone will no longer be visible on the home page.   4)  Select  Add  for the TripelThird zone to add a widget to the zone.  5)  Select the  HTML Widget  to add this type of widget to the TripelThird zone.  6)  Enter a title for your widget and some content.   7)   Save  the new widget.  8)  Select  Your Site  in the upper-left side of the Dashboard to view the modified home page with the new TripelThird zone.",
            "title": "Changing The Layout Of The Home Page"
        },
        {
            "location": "/Documentation/Getting-Started/#editing-the-content-of-the-home-page",
            "text": "Orchard provides a feature that makes it easy for you to edit the content in a zone or the page body.  To turn on this feature you must enable the  Content Control Wrapper  and  Widget Control Wrapper  modules   1)  Select  Modules  on the Dashboard.  2)  Enable  Content Control Wrapper  3)  Enable  Widget Control Wrapper   Once these modules are enabled, you can edit the contents of an individual zone by clicking the  Edit  link (at the top right) in the zone.     4)  Select the  Edit  link for the  TripelFirst  zone of the home page.   5)  Change the title, and optionally, change or remove the existing body text for the zone.",
            "title": "Editing The Content Of The Home Page"
        },
        {
            "location": "/Documentation/Getting-Started/#inserting-a-media-item",
            "text": "6)  Select  Insert Media Item .    7)  Click  Create Folder .    8)  Name the folder  myImages  and click  Save .    9)  Click the folder  myImages , and then click  Import     10)  Click  My Computer  and then click in the central zone to browse for an image. If you prefer you can drop your image into the central zone.   11)  Close the dialog.   12)  Click the image and click  Select .   13)  If needed, resize the image using the handlers so that later it fits nicely into the zone. Then click  Save  to save the changes to the widget.    The home page is automatically displayed with the updated zone.   14)  Select the  Edit  link for the  Body  of the page.   Orchard will display the  Edit Page  screen.   Note:  The Edit Page screen can also be reached from the Dashboard by selecting  Content  on the Dashboard and then selecting  Edit  for the page you are interested in.   15)  Enter some text for the content.    16)  Select  Publish Now  at the bottom of the page to make the updates to the page visible immediately.",
            "title": "Inserting a Media Item"
        },
        {
            "location": "/Documentation/Getting-Started/#adding-a-new-page-to-your-site",
            "text": "1)  In the Orchard Dashboard, under  New , select  Page .  2)  Enter a title for the page.  When you enter a title for the page and save it (for example, \"Download\"), the permalink (URL) for the page will be filled in automatically (\"download\").  You can edit this link if you prefer a different URL.  3)  Enter some text for the content page body.   4)   In the  Tags  field, add comma-separated tags such as \"download\" and \"Orchard\" so that you can search and filter using those tags later.   5)  Check  Show on main menu  and enter the menu text (\"Downloads\") to use in the site's main menu.  6)  Select  Publish Now  to make the updates to the page visible immediately. You can also save the page as a draft (to edit later before publishing), or you can choose to publish the page at a specific date and time.   7)  Select  Your Site  in the upper-left side of the Dashboard to view the modified home page with the new menu. Clik  Downloads  and you will see your new page.",
            "title": "Adding a New Page to Your Site"
        },
        {
            "location": "/Documentation/Getting-Started/#adding-new-layer-for-a-page",
            "text": "To change the layout of your new page without affecting the rest of the site you can create a new layer, that will be applied only to the  Downloads  page. Then you can place some widgets on that layer and they will be visible only in the  Downloads  page.  1)  Go to the Dashboard and select  Widgets . Then click  add a new layer  to add a new layer for this page which will allow you to customize the layout for the new page at a later point in time.   2)  Write a name for the layer, a description, and a layer rule: url\"~/download\". This will instruct the Orchard System to show the widgets in this layer only when the url of the browser is pointing to \"download\". Select  Save .",
            "title": "Adding New Layer for a Page"
        },
        {
            "location": "/Documentation/Getting-Started/#adding-a-new-html-widget",
            "text": "3)  To check that your layer rule is working you can add a widget to it. Ensure that  Current Layer  is  Download . Click  Add  in  AsideFirst .   4)  Add a new  Html Widget .   5)  Write a title and a body for it. Save it.   6)  Select  Your Site  in the upper-left side of the Dashboard. Navigate to  Downloads . You should see the custom layout.",
            "title": "Adding a New HTML Widget"
        },
        {
            "location": "/Documentation/Getting-Started/#selecting-a-theme",
            "text": "To customize the look and feel of the Orchard website you change the theme.   1)  On the Orchard Dashboard, select  Themes .  The currently installed themes are listed.   2)  To download new themes, select the  Gallery  tab.  3)  Search for  PJS.Bootstrap  to find the PJS.Bootstrap Theme. Install the  PJS.Bootstrap  theme.  4)  Select the  Installed  tab.   After a theme has been installed it appears as an option in the  Available  section on the  Installed  tab. In the following illustration, the  PJS.Bootstrap  theme has been installed so it appears in the  Available  section. (The current theme for the site is  PJS.Bootstrap .)   5)  To see how your site will look with an available them,  select  Preview  for the theme.  To apply an available theme to your site select  Set Current  for the theme. For more details, see  Previewing and Applying a Theme  and  Installing Themes .",
            "title": "Selecting A Theme"
        },
        {
            "location": "/Documentation/Getting-Started/#extending-orchard-with-modules-and-features",
            "text": "A key feature of Orchard is the ability to add new features in order to extend the functionality of your site. The primary way to do this is by installing modules. You can think of a module as a package of files (in a .zip folder) that can be installed on your site. To view the modules that are included with Orchard, in the Orchard Dashboard, click  Modules  and then click the  Installed  tab in the  Modules  screen.   Orchard provides some built-in modules, and you can install new modules. For details, see  Installing and Upgrading Modules  and  Registering additional gallery feeds .  Individual modules can expose features that can be independently enabled or disabled. To view the features exposed by the built-in modules in Orchard, click the  Features  tab in the  Modules  screen.     Each feature has an  Enable  or  Disable  link (depending on its current state), as well as an optional list of dependencies that must also be enabled for a specific feature. The documentation throughout this site describes the variety of features in Orchard and how you can use them to customize your site's user interface and behavior.",
            "title": "Extending Orchard With Modules And Features"
        },
        {
            "location": "/Documentation/Getting-Started/#change-history",
            "text": "Updates for Orchard 1.8  9-04-14: Added new sections for how to get started with Orchard and how to get up and running with Orchard : Try Orchard, DotNest, Azure Websites. Updated screen shots for themes (PJS.Bootstrap Theme), modules and control wrappers.   4-22-14:  Media selection is different now, updated that part. Adding a widget layer is not suggested anymore when adding a new page, updated that part. Link to registering additional gallery feeds was not working. Updated several screenshots. Added capitalization to section headers.    Updates for Orchard 1.6  11-25-12:  Added section describing how to change the layout for a page by enabling/disabling zones.  Removed section on Creating a Blog (which already has it's own topic).    Updates for Orchard 1.1  3-14-11:  Updated screen shots showing updated menus, and updated dashboard and settings options.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Navigation-and-menus/",
            "text": "This topic targets, and was tested with, the Orchard 1.8 release. It also includes a reference to navigation in Orchard <1.5\n\n\nThere are different ways to build up a menu structure. Here we will show two common methods that could be used:\n\n\n\n\nAdding menu items first, content later.\n\n\nContent first, navigation later.\n\n\n\n\nOf course they are not mutually exclusive, you can alternate both methods in the same site.\n\n\nAdding Menu Items First, Content Later\n\n\nThis method could be prefered when you first want to style your website to see all menu items.\n\n\nIn the Orchard administration panel click the \nNavigation\n menu item. \nYou will see that there is a default menu available, called 'Main Menu'.\nThe right side contains all types of menu items that you can add:\n\n\n\n\nContent Menu Item\n\n\nCustom Link\n\n\nHtml Menu Item\n\n\nQuery Link\n\n\nShape Link\n\n\nTaxonomy Link\n\n\n\n\nClick \nAdd\n next to the \nContent Menu Item\n to add a new menu item.\n\n\n\nOn the 'Create Menu Item' page you can fill in the Menu text.\nSelect \nBrowse\n and link to any content item (e.g your Home Page). Later, when you have prepared your real target content item you can update the menu link.\n\n\n\n\n\n\nContent First, Navigation Later\n\n\nHere we first create a new Page (or edit a Page). \nSelect \nNew Page\n on the left menu. Create an \nAbout Us\n page. Give it a title and a body.\nAt the bottom check the \nShow on a menu\n checkbox to see the menu options\nfor that page. The \nMenu text\n is the name of your menu item. By default the Page link will be added to the \nMain Menu\n.\n\n\n\n\nWhen you now \nSave\n your page and navigate to the \nNavigation\n menu item on the left side you will see\nthat the new menu item that you created was added to the Main Menu.\n\n\nCreating A Submenu\n\n\nCreating a submenu is very easy:\nNavigate to the \nNavigation\n section. If you \nhover\n over an already added Menu Item with your mouse, you'll see\nthat you can drag and drop the Menu Item.\nSimply drag the Menu Item a bit to the right until it snaps to a sub container.  Remember that changes you made here won't be updated until you click the \nSave All\n in the bottom-right side of the page.\n\n\n\n\n\n\nOlder Versions Of Orchard (Before 1.5)\n\n\nManaging menus in older versions of Orchard was quite different.\nOrchard <1.5 has a very simple main menu feature that is a list of menu item text and links to display,\naccessible from the \nNavigation\n link in the Orchard admin panel.  When you add an item to the main menu\nusing the page or blog post editor screens, a new entry is added here.  You can use this screen to rename,\nreorder, and remove menu items. (This will not delete the content item; it will only remove the menu item).\n\n\n\n\nYou can also add arbitrary URLs in your menu, whether external or pointing to a page in your Orchard site,\nby adding a new menu item.  Note that only items added in this way have an editable URL on this screen.\nContent item URLs must be edited from the editor screen for that content item instead.\n\n\nTo reorder menu items, type a numeric index in the \"Position\" textbox.  Position indexes can be any of\nthe following format:\n\n\n\n\nInteger\n: 1, 2, 3, etc.\n\n\nDecimal\n: 1.1, 1.2, 1.3, etc\n\n\nMulti-part number\n: 1.1.1, 1.2.1, 1.2.2, etc\n\n\n\n\nWhen you are satisfied with your changes, click \nUpdate All\n to update the main menu of your site\n(effective immediately).\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.8\n\n\n4-24-14:  Added screenshots. Now you can't create a Content Menu Item and leave empty the content item; updated that part. Changed a bit the structure to comply with Orchard style documentation guidelines.",
            "title": "Navigation and Menus"
        },
        {
            "location": "/Documentation/Navigation-and-menus/#adding-menu-items-first-content-later",
            "text": "This method could be prefered when you first want to style your website to see all menu items.  In the Orchard administration panel click the  Navigation  menu item. \nYou will see that there is a default menu available, called 'Main Menu'.\nThe right side contains all types of menu items that you can add:   Content Menu Item  Custom Link  Html Menu Item  Query Link  Shape Link  Taxonomy Link   Click  Add  next to the  Content Menu Item  to add a new menu item.  On the 'Create Menu Item' page you can fill in the Menu text.\nSelect  Browse  and link to any content item (e.g your Home Page). Later, when you have prepared your real target content item you can update the menu link.",
            "title": "Adding Menu Items First, Content Later"
        },
        {
            "location": "/Documentation/Navigation-and-menus/#content-first-navigation-later",
            "text": "Here we first create a new Page (or edit a Page). \nSelect  New Page  on the left menu. Create an  About Us  page. Give it a title and a body.\nAt the bottom check the  Show on a menu  checkbox to see the menu options\nfor that page. The  Menu text  is the name of your menu item. By default the Page link will be added to the  Main Menu .   When you now  Save  your page and navigate to the  Navigation  menu item on the left side you will see\nthat the new menu item that you created was added to the Main Menu.",
            "title": "Content First, Navigation Later"
        },
        {
            "location": "/Documentation/Navigation-and-menus/#creating-a-submenu",
            "text": "Creating a submenu is very easy:\nNavigate to the  Navigation  section. If you  hover  over an already added Menu Item with your mouse, you'll see\nthat you can drag and drop the Menu Item.\nSimply drag the Menu Item a bit to the right until it snaps to a sub container.  Remember that changes you made here won't be updated until you click the  Save All  in the bottom-right side of the page.",
            "title": "Creating A Submenu"
        },
        {
            "location": "/Documentation/Navigation-and-menus/#older-versions-of-orchard-before-15",
            "text": "Managing menus in older versions of Orchard was quite different.\nOrchard <1.5 has a very simple main menu feature that is a list of menu item text and links to display,\naccessible from the  Navigation  link in the Orchard admin panel.  When you add an item to the main menu\nusing the page or blog post editor screens, a new entry is added here.  You can use this screen to rename,\nreorder, and remove menu items. (This will not delete the content item; it will only remove the menu item).   You can also add arbitrary URLs in your menu, whether external or pointing to a page in your Orchard site,\nby adding a new menu item.  Note that only items added in this way have an editable URL on this screen.\nContent item URLs must be edited from the editor screen for that content item instead.  To reorder menu items, type a numeric index in the \"Position\" textbox.  Position indexes can be any of\nthe following format:   Integer : 1, 2, 3, etc.  Decimal : 1.1, 1.2, 1.3, etc  Multi-part number : 1.1.1, 1.2.1, 1.2.2, etc   When you are satisfied with your changes, click  Update All  to update the main menu of your site\n(effective immediately).",
            "title": "Older Versions Of Orchard (Before 1.5)"
        },
        {
            "location": "/Documentation/Navigation-and-menus/#change-history",
            "text": "Updates for Orchard 1.8  4-24-14:  Added screenshots. Now you can't create a Content Menu Item and leave empty the content item; updated that part. Changed a bit the structure to comply with Orchard style documentation guidelines.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Adding-a-Blog-to-Your-Site/",
            "text": "This topic targets, and was tested with, the Orchard 1.8 release.\n\n\nOrchard provides a blogging engine that makes it easy to add a blog to your web site.\nThis topic describes how to create a blog for your site, add a new blog post, and then setup comments and tags.\n\n\nAdd the Blog\n\n\nOn the Orchard dashboard expand the \nBlog\n submenu. Then click \nNew Blog\n.\nIn the \nNew Blog\n screen add a title, description, and menu text for the blog and click \nSave\n.\n\n\n\n\nA page for managing the blog is displayed.\n\n\n\n\nNote: You can have several blogs in the same Orchard site.\n\n\n\n\n\n\nAdd a post to the Blog\n\n\nClick \nNew Post\n to create a new blog entry. The \nNew Blog Post\n screen is displayed. Enter a title for your post and the post contents.\n\n\n\n\nEnter tags (separated by commas) to your blog post in the \nTags\n field. Check \nShow comments\n , \nAllow new comments\n and \nAllow threaded comments\n. Click \nSave\n to save it as a draft.\n\n\n\n\nIn the dashboard, click \nBlog\n to view the list of posts in the blog.  In the list of posts, the new post is saved as a draft, which means it is not yet visible to visitors of the site.  Click \nPublish\n to allow site visitors to see the post.\n\n\n\n\nA screen shows that the post was published successfully.   \n\n\n\n\nClick \nYour Site\n to view the site's home page again.\n\n\nA new tab, \nBlog\n, has been added to the menu. Click the \nBlog\n tab which will display the blog and the new the post.  To see more details about the new post, click the \nmore\n link at the end of the post content.\n\n\n\n\nAdd a comment to the post\n\n\nBecause comments were enabled for the post, a new comment can be entered.  The comment may not appear immediately after it is submitted.  That is because Orchard has a setting which requires the site administrator to approve comments before they are published.\n\n\n\n\nReturn to the Orchard dashboard and under \nSettings\n, click \nComments\n. There are two options which effect how comments are handled. One to require administrator approval before a comment is published, and another option for enabling automatic closing of comments for old posts. For more details about these features, see the \nModerating Comments\n topic.\n\n\n\n\nNote: There are several good modules in the \nOrchard Gallery\n to enable spam protection in your blog.\n\n\n\n\n\n\nUsing Tags in blogs\n\n\nOrchard provides the ability to browse content by the tags that are added to the content. Click one of the tags (for example, \"Orchard\") in the blog post to see a list of all content that has that tag.  For more information about managing tags, see \nOrganizing Content with Tags\n.\n\n\n\n\nNotice the URL for browsing tagged content as well.  \n\n\n\n\nIf the URL is shortened to just the \n/Tags/\n portion, the list of tags used in your site is displayed.\n\n\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.8\n\n\n4-25-14:  New Screenshots. Comment settings are different. You can add many blogs.\n\n\n\n\n\n\nUpdates for Orchard 1.6\n\n\n11-25-12:  Broke into multiple sections.",
            "title": "Adding a Blog to Your Site"
        },
        {
            "location": "/Documentation/Adding-a-Blog-to-Your-Site/#add-the-blog",
            "text": "On the Orchard dashboard expand the  Blog  submenu. Then click  New Blog .\nIn the  New Blog  screen add a title, description, and menu text for the blog and click  Save .   A page for managing the blog is displayed.   Note: You can have several blogs in the same Orchard site.",
            "title": "Add the Blog"
        },
        {
            "location": "/Documentation/Adding-a-Blog-to-Your-Site/#add-a-post-to-the-blog",
            "text": "Click  New Post  to create a new blog entry. The  New Blog Post  screen is displayed. Enter a title for your post and the post contents.   Enter tags (separated by commas) to your blog post in the  Tags  field. Check  Show comments  ,  Allow new comments  and  Allow threaded comments . Click  Save  to save it as a draft.   In the dashboard, click  Blog  to view the list of posts in the blog.  In the list of posts, the new post is saved as a draft, which means it is not yet visible to visitors of the site.  Click  Publish  to allow site visitors to see the post.   A screen shows that the post was published successfully.      Click  Your Site  to view the site's home page again.  A new tab,  Blog , has been added to the menu. Click the  Blog  tab which will display the blog and the new the post.  To see more details about the new post, click the  more  link at the end of the post content.",
            "title": "Add a post to the Blog"
        },
        {
            "location": "/Documentation/Adding-a-Blog-to-Your-Site/#add-a-comment-to-the-post",
            "text": "Because comments were enabled for the post, a new comment can be entered.  The comment may not appear immediately after it is submitted.  That is because Orchard has a setting which requires the site administrator to approve comments before they are published.   Return to the Orchard dashboard and under  Settings , click  Comments . There are two options which effect how comments are handled. One to require administrator approval before a comment is published, and another option for enabling automatic closing of comments for old posts. For more details about these features, see the  Moderating Comments  topic.   Note: There are several good modules in the  Orchard Gallery  to enable spam protection in your blog.",
            "title": "Add a comment to the post"
        },
        {
            "location": "/Documentation/Adding-a-Blog-to-Your-Site/#using-tags-in-blogs",
            "text": "Orchard provides the ability to browse content by the tags that are added to the content. Click one of the tags (for example, \"Orchard\") in the blog post to see a list of all content that has that tag.  For more information about managing tags, see  Organizing Content with Tags .   Notice the URL for browsing tagged content as well.     If the URL is shortened to just the  /Tags/  portion, the list of tags used in your site is displayed.",
            "title": "Using Tags in blogs"
        },
        {
            "location": "/Documentation/Adding-a-Blog-to-Your-Site/#change-history",
            "text": "Updates for Orchard 1.8  4-25-14:  New Screenshots. Comment settings are different. You can add many blogs.    Updates for Orchard 1.6  11-25-12:  Broke into multiple sections.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Adding-and-managing-media-content/",
            "text": "When you upload images using the rich-text editor in Orchard\n(or using an XML-RPC client, such as \nWindows Live Writer\n),\nthe images are saved in a \nMedia\n folder under the root of your Orchard installation.\nThe \nMedia\n folder must be writable (by the user process that's running the website) in order\nfor image uploads to succeed.\nIf you installed Orchard using the \nWeb Platform Installer\n,\nthe \nMedia\n folder write permissions are configured automatically.\n\n\nTo add and delete media folders, click \nMedia\n in the dashboard. \n\n\n\n\nBrowse to a media image file and view the details. The properties of a media file are:\n\n\n\n\nScreenshot\n. A thumbnail preview of the image content.\n\n\nSize\n and \nAdded on\n. Properties of the media file.\n\n\nEmbed\n. The URL of the media file, which you can copy to the HTML view of the rich-text editor\nin order to embed the media image into content.\n\n\nName\n. The name of the media file.\n\n\n\n\n\n\nTo manage the subfolders for your media folder, click \nMedia\n again on the dashboard.\nThen click a folder to display the \nManage Folder\n screen. \n\n\n\n\nThis screen gives you the options to add or delete media files and to create subfolders.\n\n\nClick \nAdd a folder\n to create a new subfolder.\n\n\nName the new subfolder (for example, name the subfolder \"Pictures\") and save it.   \n\n\n\n\nBrowse to the new subfolder and click \nAdd media\n.\n\n\n\n\nOrchard lets you upload single media files as well as uploading a \n.zip\n file that contains multiple image files.\nIf you have a large set of images to upload, it can be more efficient to first add them all to a \n.zip\n file\nand then just upload the \n.zip\n file instead of uploading the images one by one. \n\n\nTo see how this works, create a \n.zip\n file on your computer that contains several image files,\nand then click \nUpload\n. The \nExtract zip\n checkbox is selected by default,\nwhich will cause the uploaded images in the \n.zip\n to be extracted and added to the folder.\n\n\n\n\nThe uploaded and extracted images are displayed in their parent folder.\n\n\n\n\nTo see or edit the details of an individual uploaded image, click it. \n\n\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.1\n\n\n3-16-11: Updated all screen shots and menu choices text.",
            "title": "Adding and Managing Media Content"
        },
        {
            "location": "/Documentation/Adding-and-managing-media-content/#change-history",
            "text": "Updates for Orchard 1.1  3-16-11: Updated all screen shots and menu choices text.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Managing-widgets/",
            "text": "In Orchard, a widget is a fragment of UI (such as HTML) and code (such as a content part) that can be easily mapped to any location or zone in the active theme, such as a sidebar or footer zone.  Examples of widgets include navigation menus, image galleries, ads, videos, and tag clouds.\n\n\nThis article explains the basics of widgets and shows you how to manage them.\n\n\nLayers, Zones, and Widgets\n\n\nIn Orchard, you manage widgets by clicking \nWidgets\n in the dashboard. The \nWidgets\n screen lists the available widgets and lets you assign the widget to a \nlayer\n and a \nzone\n. \n\n\nYou can think of a \nlayer\n as a set of rules for displaying a widget (or group of widgets). For example, a layer might display a widget on a specific page only if the user is logged in. A \nzone\n helps to position a widget on a page. \n\n\nThe following image shows the \nWidgets\n screen.\n\n\n\n\nAvailable Widgets\n\n\nWhenever a widget becomes available (usually by enabling another feature in the \nFeatures\n tab on the \nModules\n screen of the dashboard), Orchard adds it to the list of available widgets that can be added to zones in the current theme. To see the list of widgets available in a zone, in the \nWidgets\n screen, click the \nAdd\n button on one of the listed zones. \n\n\nFor example, in the \nWidgets\n screen click \nAdd\n for the \nHeader\n zone. A screen is displayed that allows you to choose one of the available widgets.\n\n\n\n\nThe following table describes the widgets that are available by default in Orchard: \n\n\n\n\n\n\n\n\nWidget\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBlog Archives\n\n\nDisplays a list of archived entries for the specified blog.\n\n\n\n\n\n\nContainer Widget\n\n\nDisplays a \"contained\" content item, such as a list.\n\n\n\n\n\n\nHtml Widget\n\n\nDisplays HTML content, which is entered using the widget's editor.\n\n\n\n\n\n\nRecent Blog Posts\n\n\nDisplays a list of recent posts for the specified blog.\n\n\n\n\n\n\n\n\nList of Layers\n\n\nOrchard comes with a number of layers already defined. You can define additional layers as needed, as discussed later in \nAdding a Layer\n. In the \nWidgets\n screen, you can edit the existing layers by selecting a layer in the \nCurrent Layer\n drop-down list, or you can add new layers by clicking \nAdd a new layer\n. \n\n\nThe following table lists the default layers, shows the rule that defines the layer, and describes the effect of the layer.\n\n\n\n\n\n\n\n\nLayer\n\n\nRule\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDefault\n\n\ntrue\n\n\nAlways displayed on every page.\n\n\n\n\n\n\nAuthenticated\n\n\nauthenticated\n\n\nDisplayed if the user is authenticated.\n\n\n\n\n\n\nAnonymous\n\n\nnot authenticated\n\n\nDisplayed if the user is anonymous.\n\n\n\n\n\n\nDisabled\n\n\nfalse\n\n\nNot displayed. This layer is provided as way to save the configuration of widgets that are not currently displayed.\n\n\n\n\n\n\nTheHomepage\n\n\nurl(\"~/\")\n\n\nDisplayed on the home page.\n\n\n\n\n\n\n\n\nList of Zones\n\n\nIn Orchard, a web page is divided into zones (regions). The available zones are defined by the website's theme. In the \nWidgets\n screen, you can see the list of all zones available for the currently selected layer. The list also shows the widgets assigned to each zone for the selected layer.\n\n\nFor information about the zones that are available in the default theme (TheThemeMachine), see \nCustomizing the Default Theme\n.\n\n\nAdding a Layer\n\n\nTo add a layer, in the dashboard, click \nWidgets\n. On the \nWidgets\n screen, click \nAdd a new layer\n. The \nAdd Layer\n screen is displayed:\n\n\n\n\nTo define the new layer, enter the name of the layer, a description, and the rule that defines the layer. When you're finished, click \nSave\n.\n\n\nThe \nLayer Rule\n value is an expression that resolves to either \ntrue\n or \nfalse\n. If it resolves to \ntrue\n, the widget is displayed; otherwise the widget is not displayed. \n\n\nThe following table summarizes the syntax for building layer rules.\n\n\n\n\n\n\n\n\nRule Syntax\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nurl(\"<url\u00a0path>\")\n\n\nTrue if the current URL matches the specified path. If you add an asterisk (*) to the end of the path, all pages found in subfolders under that path will evaluate to true (for example, \nurl(\"~/home*\")\n).\n\n\n\n\n\n\nauthenticated\n\n\nTrue if the user is logged in.\n\n\n\n\n\n\nContentType(\"<Type>\")\n\n\nTrue if the content type being view matches the content type specified e.g. ContentType(\"Page\")\n\n\n\n\n\n\nnot\n\n\nLogical NOT.\n\n\n\n\n\n\nand\n\n\nLogical AND.\n\n\n\n\n\n\nor\n\n\nLogical OR.\n\n\n\n\n\n\n\n\nYour expression can use parentheses.\n\n\nFor example, the following expression defines a rule that displays a widget on the \nAbout\n page if the user is not authenticated, or on any page if the user is authenticated. \n\n\n(not authenticated and url(\"~/about\")) or authenticated\n\n\n\nTo allow multiple URL values, you can use the following syntax:\n\n\nurl(\"~/foo\") or url(\"~/bar\")\n\n\n\nAssigning a Widget to a Zone\n\n\nTo assign a widget to a zone, click the \nAdd\n button on a zone that you want to add the widget to, and then select the widget to add.  \n\n\nFor example, click \nAdd\n on the Header zone, and then in the \nChoose A Widget\n screen click the \nHtml Widget\n.  \n\n\nThe \nAdd A Widget\n screen is displayed.\n\n\n\n\nThe fields you need to fill in depend on the widget you're configuring. However, all widgets have \nZone\n, \nLayer\n, \nTitle\n, and \nPosition\n fields. The \nPosition\n field determines the relative position of all widgets within the zone (in effect, z-order). Keep in mind that the widgets within the zone can come from multiple layers. For example, two different layers might have widgets assigned to the same zone.\n\n\nThe value of the \nPosition\n field can be an integer or a sequence of integers separated by dots. For example, the following values are all valid: 5, 10.1, 7.5.3.1. Widgets with lower position values will be rendered before those with higher values.\n\n\nAfter setting the values of all fields, click \nSave\n.\n\n\nEditing or Deleting a Widget\n\n\nTo edit or delete a widget, in the \nWidgets\n screen, use the \nCurrent Layer\n drop-down list to select the layer that the widget is assigned to. In the list of zones displayed for the layer, click the widget you want to edit. The \nEdit Widget\n screen is displayed:\n\n\n\n\nEdit the field you want to change, then click \nSave\n. To remove the widget from the zone, click \nDelete\n.\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.1\n\n\n3-16-11: Updated screen shots for 1.1 version.\n\n\n\n\n\n\nUpdates for Orchard 1.7\n\n\n4-4-14: Added Content Type rule",
            "title": "Managing Widgets"
        },
        {
            "location": "/Documentation/Managing-widgets/#layers-zones-and-widgets",
            "text": "In Orchard, you manage widgets by clicking  Widgets  in the dashboard. The  Widgets  screen lists the available widgets and lets you assign the widget to a  layer  and a  zone .   You can think of a  layer  as a set of rules for displaying a widget (or group of widgets). For example, a layer might display a widget on a specific page only if the user is logged in. A  zone  helps to position a widget on a page.   The following image shows the  Widgets  screen.",
            "title": "Layers, Zones, and Widgets"
        },
        {
            "location": "/Documentation/Managing-widgets/#available-widgets",
            "text": "Whenever a widget becomes available (usually by enabling another feature in the  Features  tab on the  Modules  screen of the dashboard), Orchard adds it to the list of available widgets that can be added to zones in the current theme. To see the list of widgets available in a zone, in the  Widgets  screen, click the  Add  button on one of the listed zones.   For example, in the  Widgets  screen click  Add  for the  Header  zone. A screen is displayed that allows you to choose one of the available widgets.   The following table describes the widgets that are available by default in Orchard:      Widget  Description      Blog Archives  Displays a list of archived entries for the specified blog.    Container Widget  Displays a \"contained\" content item, such as a list.    Html Widget  Displays HTML content, which is entered using the widget's editor.    Recent Blog Posts  Displays a list of recent posts for the specified blog.",
            "title": "Available Widgets"
        },
        {
            "location": "/Documentation/Managing-widgets/#list-of-layers",
            "text": "Orchard comes with a number of layers already defined. You can define additional layers as needed, as discussed later in  Adding a Layer . In the  Widgets  screen, you can edit the existing layers by selecting a layer in the  Current Layer  drop-down list, or you can add new layers by clicking  Add a new layer .   The following table lists the default layers, shows the rule that defines the layer, and describes the effect of the layer.     Layer  Rule  Description      Default  true  Always displayed on every page.    Authenticated  authenticated  Displayed if the user is authenticated.    Anonymous  not authenticated  Displayed if the user is anonymous.    Disabled  false  Not displayed. This layer is provided as way to save the configuration of widgets that are not currently displayed.    TheHomepage  url(\"~/\")  Displayed on the home page.",
            "title": "List of Layers"
        },
        {
            "location": "/Documentation/Managing-widgets/#list-of-zones",
            "text": "In Orchard, a web page is divided into zones (regions). The available zones are defined by the website's theme. In the  Widgets  screen, you can see the list of all zones available for the currently selected layer. The list also shows the widgets assigned to each zone for the selected layer.  For information about the zones that are available in the default theme (TheThemeMachine), see  Customizing the Default Theme .",
            "title": "List of Zones"
        },
        {
            "location": "/Documentation/Managing-widgets/#adding-a-layer",
            "text": "To add a layer, in the dashboard, click  Widgets . On the  Widgets  screen, click  Add a new layer . The  Add Layer  screen is displayed:   To define the new layer, enter the name of the layer, a description, and the rule that defines the layer. When you're finished, click  Save .  The  Layer Rule  value is an expression that resolves to either  true  or  false . If it resolves to  true , the widget is displayed; otherwise the widget is not displayed.   The following table summarizes the syntax for building layer rules.     Rule Syntax  Description      url(\"<url\u00a0path>\")  True if the current URL matches the specified path. If you add an asterisk (*) to the end of the path, all pages found in subfolders under that path will evaluate to true (for example,  url(\"~/home*\") ).    authenticated  True if the user is logged in.    ContentType(\"<Type>\")  True if the content type being view matches the content type specified e.g. ContentType(\"Page\")    not  Logical NOT.    and  Logical AND.    or  Logical OR.     Your expression can use parentheses.  For example, the following expression defines a rule that displays a widget on the  About  page if the user is not authenticated, or on any page if the user is authenticated.   (not authenticated and url(\"~/about\")) or authenticated  To allow multiple URL values, you can use the following syntax:  url(\"~/foo\") or url(\"~/bar\")",
            "title": "Adding a Layer"
        },
        {
            "location": "/Documentation/Managing-widgets/#assigning-a-widget-to-a-zone",
            "text": "To assign a widget to a zone, click the  Add  button on a zone that you want to add the widget to, and then select the widget to add.    For example, click  Add  on the Header zone, and then in the  Choose A Widget  screen click the  Html Widget .    The  Add A Widget  screen is displayed.   The fields you need to fill in depend on the widget you're configuring. However, all widgets have  Zone ,  Layer ,  Title , and  Position  fields. The  Position  field determines the relative position of all widgets within the zone (in effect, z-order). Keep in mind that the widgets within the zone can come from multiple layers. For example, two different layers might have widgets assigned to the same zone.  The value of the  Position  field can be an integer or a sequence of integers separated by dots. For example, the following values are all valid: 5, 10.1, 7.5.3.1. Widgets with lower position values will be rendered before those with higher values.  After setting the values of all fields, click  Save .",
            "title": "Assigning a Widget to a Zone"
        },
        {
            "location": "/Documentation/Managing-widgets/#editing-or-deleting-a-widget",
            "text": "To edit or delete a widget, in the  Widgets  screen, use the  Current Layer  drop-down list to select the layer that the widget is assigned to. In the list of zones displayed for the layer, click the widget you want to edit. The  Edit Widget  screen is displayed:   Edit the field you want to change, then click  Save . To remove the widget from the zone, click  Delete .",
            "title": "Editing or Deleting a Widget"
        },
        {
            "location": "/Documentation/Managing-widgets/#change-history",
            "text": "Updates for Orchard 1.1  3-16-11: Updated screen shots for 1.1 version.    Updates for Orchard 1.7  4-4-14: Added Content Type rule",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Organizing-content-with-tags/",
            "text": "Content items in Orchard can be categorized with tags, and the list of items tagged with a given keyword are accessible via a front-end ~/tags/\ntag-name\n URL. The browser navigates to the URL for a particular tag when that tag is selected by the user. \n\n\n\n\n\n\nTo edit the global list of tags in your site, go to the \nManage Tags\n screen in the Orchard dashboard by selecting \nTags\n from the navigation section.\n\n\n\n\nHere you can edit the tag keywords and remove tags. When you remove a tag, it is removed from all content items that share that tag. When you edit a tag, it updates all content items with that tag to the new keyword.  You can also collapse tags by renaming a tag to the same name as another tag.  This is useful for cleaning up your tags so that they are consistent throughout your site.\n\n\n\n\nClicking on a tag keyword in this screen will display the list of content items that share that tag.\n\n\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.8\n\n\n10-31-14: Updated screen shots for managing tags",
            "title": "Organizing Content Using Tags"
        },
        {
            "location": "/Documentation/Organizing-content-with-tags/#change-history",
            "text": "Updates for Orchard 1.8  10-31-14: Updated screen shots for managing tags",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/",
            "text": "Orchard is a Web CMS, which essentially aims at helping you build web sites from existing pieces. Those pieces come in a few different sizes and shapes that need to be well understood if you're going to be productive with them. This article will go through those pieces and explain their names and behavior.\n\n\nGeneral CMS definitions\n\n\nContent\n\n\nThe 'C' in CMS means \"content\" so it would be fair to say that content is anything that the CMS manages. More precisely, content is everything in the site that has any information in it. For example, a blog post, a comment, a product and even the navigation menu or your company's logo are identifiable, individual pieces of content. If you were thinking at this moment that content is pretty much everything on the site you'd be right. If you were thinking that is pretty vague, you'd be right as well. We will get a lot more specific and distinguish between different kinds of content in following sections.\n\n\nAdmin panel, Dashboard or back-end\n\n\nThe admin panel (sometimes also called dashboard or back-end) is where you manage your site and its content. It is restricted to users who have the \"Access admin panel\" permission. This is the 'M' in CMS.\n\n\n\n\nCMS\n\n\nThe 'S' in CMS is for \"System\", which is not as vague and meaningless as it seems. It's important that a CMS manages content in a systematic way: this means that all content is managed homogeneously, which enables mutuality of resources.\n\n\nFor example, you can manage blog posts, pages and products using common tools, and all of those can get comments, ratings or tagging from common modules. This gives you a more consistent experience and facilitates the creation of new types of content.\n\n\nFront-end\n\n\nThe front-end is the part of the site that is accessible to regular and anonymous users. In other words, it's the public-facing part of your site: everything but the admin UI.\n\n\n\n\nSetup\n\n\nSetup is the process you must follow in order to get your web site to working condition (and no more than that, you still have work to do after it's done, such as creating content).\n\n\n\n\nOrchard concepts\n\n\nContent Item\n\n\nA content item is a single piece of content, often associated with a single URL (address) on the site. Examples of content items are pages, blog posts or products.\n\n\nContent type\n\n\nContent items are instances of content types. Said differently, content types are classes of content items. We said in the previous section that examples of content items are pages, blog posts, and products. Those three examples also describe three content types: page, blog post and product. In other words what we call a blog post is just an item of type blog post.\n\n\nContent Part\n\n\nIn Orchard, content types are built from smaller parts, that are conveniently called content parts. Content parts are atoms of content that are enough to build a specific coherent behavior and that can be reused across content types.\n\n\n\n\nFor example, comments, tags or ratings are content parts because they define a specific behavior and can be reused by any content type. There is nothing in comments that is specific to a given content type such as blog posts. Comments can be equally useful on blog posts as they would be on pages or products.\n\n\nThere can be only one of each part on any given content type.\n\n\nContent Field\n\n\nContent fields are pieces of information that can be added to a content type. Content fields have a name and a type and are specific to a content type. There can be several of each field type on any given content type.\n\n\nFor example, a Product content type can have a text field representing its Sku, a numeric field representing its price, and another numeric field representing its weight. Each of these fields probably only makes sense on a product.\n\n\n\n\nNote: it would be possible to create a product part with three properties that would be roughly equivalent to this set of fields. This would have the advantage of making it possible to transform any content type into a product. Each approach is a valid choice and Orchard allows for both.\n\n\n\n\nModule\n\n\nThe various custom extensions that can be built for Orchard are typically built as modules. A module is a set of extensions for Orchard that are grouped under a single sub-folder of the Modules directory that can be found under the Orchard web site.\n\n\nOptional modules for Orchard can be found in the Orchard Gallery (see the menu entry on top of this page).\n\n\n\n\nFeature\n\n\nA module can contain one or more features, which is a logical grouping of functionality that can be enabled or disabled individually. For example, a custom authentication module could have separate features for OpenID, FaceBook, LiveID, Twitter or Google authentication that can each be turned on or off.\n\n\nFeatures can depend on each other, whether they are in the same module or not.\n\n\n\n\nManifest\n\n\nA manifest is a small text file that describes a module or a theme to the system.\n\n\nHere is an example of a manifest:\n\n\nName: Comments\nAntiForgery: enabled\nAuthor: The Orchard Team\nWebsite: http://orchardproject.net\nVersion: 1.8.1\nOrchardVersion: 1.8\nDescription: The comments system implemented by this module can be applied to arbitrary Orchard content types, such as blogs and pages. It includes comment validation and spam protection through the Akismet service.\nFeatures:\nOrchard.Comments:\n    Name: Comments\n    Description: Standard content item comments.\n    Dependencies: Settings, Orchard.Tokens\n    Category: Social\nOrchard.Comments.Workflows:\n    Name: Comments Workflows Activities\n    Description: Provides workflow activities for comments management.\n    Category: Workflows\n    Dependencies: Orchard.Workflows\n\n\n\nUI composition\n\n\nOrchard manages content that is composed from parts. It needs a mechanism that orchestrates the display while taking into account the composite nature of the content. This is why we talk about UI composition, as elementary bits and pieces of content need to be composed into a harmonious and consistent whole. Several concepts contribute to this UI composition.\n\n\nTheme\n\n\nWhen designing a web site, it is important to be able to modify the visual look of every single aspect of the site. Orchard provides a clean separation between the content management and the visual rendering of the content.\n\n\nA theme is a packaged look and feel for an Orchard site. It can consist of any combination of style sheets, images, layouts, templates and even custom code. It is even possible to create a theme that inherits from another, which is very useful if you are trying to make only small modifications on an existing theme.\n\n\n\n\nLayout\n\n\nA layout is a file in a theme that defines the general organization of the pages of the site that use it. A layout typically defines a set of zones where contents or widgets can be inserted.\n\n\n\n\nTemplate\n\n\nEach content part, each field and each widget will need to be graphically represented in the front-end, transforming the data that it represents into a form that can be read by the users of the site. A template is the recipe that formats that data and transforms it into HTML for the browser to display. You can think of a template as plain HTML with well-defined \"holes\" where data gets inserted.\n\n\nHere is an example of a template that displays the title from the Route part:\n\n\n<h1>@Model.Title</h1>\n\n\n\nShape\n\n\nBefore displaying something using a template, that something gets transformed into a shape, which is a very malleable object that contains all the information required in order to display it. Before getting rendered by templates, everything gets mapped into a tree of shapes that is a sort of abstract representation of the contents of the final page. The advantage of such trees of shapes is that any module can modify existing shapes or create new ones.\n\n\nThe layout, zones, widgets and content parts all get represented as shapes as part of the rendering process.\n\n\nOne could imagine for example a Gravatar module that would add avatar icon shapes to the comment shapes that were created by the comment module. In the same way, the layers from the widget module are adding widget shapes to the zone shapes of the layout shape.\n\n\nPlacement\n\n\nWhen rendering the collections of parts and fields -or any other shapes- that compose a page or content item, Orchard needs to know in what order to do so. Placement.info files are XML files that describe rules that can be used to determine what shapes go into what zones and in what order. This enables not only the rendering of each shape to be customized, but also the order in which they get rendered.\n\n\nHere is an example of a placement file:\n\n\n<Placement>\n    <Place Parts_Map=\"Content:10\"/>\n    <Place Parts_Map_Edit=\"Content:7.5\"/>\n</Placement>\n\n\n\nZone\n\n\nZones are specific parts of a layout that can be customized by inserting widgets. In some themes, zones are collapsible, which means that they disappear if they contain no active widget.\n\n\nWidget\n\n\nA widget is a small fragment of UI that can be added to some or all pages of the site. Examples of widgets are tag clouds, maps, archives, a search form, or recent blog posts.\n\n\n\n\nLayer\n\n\nA layer is a group of widgets (with their specific configuration, which includes their positioning -zone name and ordering-) that is activated by a specific rule.\n\n\nFor example, the TheHomePage layer is activated by a rule that specifically selects the home page. The Default layer is always active no matter what page is displayed. The Authenticated layer is only active when users have identified themselves.\n\n\nWhen more than one layer is active on any given page, all the widgets from all those layers get displayed at the same time. Orchard orders them based on their position string.\n\n\nSecurity\n\n\nUsers and roles\n\n\nIn Orchard, users can be attributed roles, which can be seen as stereotypes of users. Permissions can then be attributed to roles in order to define who can do what on the site (more on this in the next section). Any user can have one or several roles.\n\n\nSite owners can create their own roles but Orchard comes with built-in roles that should cover most sites' requirements:\n\n\n\n\nAdministrator: have full control over the site's settings and contents.\n\n\nEditor: does not create content but edit and publish content created by authors.\n\n\nModerator: validates user-created contents such as comments.\n\n\nAuthor: writes and publishes his own content.\n\n\nContributor: writes content but does not necessarily have the rights to publish it.\n\n\nAnonymous: an unknown user, someone who hasn't logged in.\n\n\nAuthenticated: any user who has logged in.\n\n\n\n\nNeither Anonymous nor Authenticated can be assigned to a user manually. Rather, they are determined dynamically at runtime.\n\n\nPrivileges and Permissions\n\n\nAll users don't have the same rights and privileges in Orchard: the site owner can choose who can create content, who can write or validate comments, etc. Rights and privileges are represented as permissions. In Orchard, permissions are granted to roles but are not explicitly denied. In other words if a user belongs to any role that has a given permission, he has that permission. To revoke a permission, you need to either remove a user from the role the permission has been granted to or you need to remove that permission for the whole role.\n\n\nSome permissions are \"effectively granted\". This means that they have not been explicitly granted, but that they have been implied by another permission. For example, if you grant the site owner permission, you are implicitly granting all the other permissions.\n\n\n\n\nPermissions, as well as their default settings for the built-in roles, are defined by modules. This means that if you build your own module, you can define specific permissions to accompany it.\n\n\nSite owner\n\n\nThe site owner, sometimes also called \"super user\" is a special user that is defined at setup time and that has all the rights on the site. It can be changed from the settings admin screen if you have the permission to do so.\n\n\nThere is a permission called \"Site Owners Permission\" that grants the same right and that is granted by default to only members of the Administrator role. We advise never to grant that permission to any other role.\n\n\nDevelopment\n\n\nIn this section we will describe concepts that are only required for module developers.\n\n\nASP.NET MVC\n\n\nASP.NET MVC is the Web framework that Orchard is built on.\n\n\nHandler\n\n\nA handler is similar to an MVC filter in that it contains code that will execute for specific events of the request life-cycle. They are typically used to set-up data repositories or to do additional operations when something gets loaded.\n\n\nDriver\n\n\nDrivers are similar to MVC controllers, but they act at the level of a content part instead of at the level of the full request. They typically prepare shapes for rendering and handle post-backs from admin editors.\n\n\nRecord\n\n\nA record is a class that models the database representation of a content part. They are POCOs where each property must be virtual.\n\n\nModel\n\n\nWhat plays the part of the model for a content part is the part class itself. Some parts also define view models, in the form of strongly-typed classes or of more flexible dynamic shapes.\n\n\nMigration\n\n\nA migration is a description of the operations to execute when first installing a feature or when upgrading it from a version to the next. This enables smooth upgrades of individual features without data loss. Orchard includes a data migration framework.\n\n\nInjection\n\n\nInversion of Control, or injection, is widely used in Orchard. When any piece of code requires a dependency, it will typically demand the injection of one or several instances of a specific interface. The framework will take care of selecting, instantiating and injecting the right implementations at runtime.\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.8\n\n\n9-6-14: Updated all screen shots for setup, dashboard, content parts and modules/features.",
            "title": "Orchard Concept Definitions"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#general-cms-definitions",
            "text": "",
            "title": "General CMS definitions"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#content",
            "text": "The 'C' in CMS means \"content\" so it would be fair to say that content is anything that the CMS manages. More precisely, content is everything in the site that has any information in it. For example, a blog post, a comment, a product and even the navigation menu or your company's logo are identifiable, individual pieces of content. If you were thinking at this moment that content is pretty much everything on the site you'd be right. If you were thinking that is pretty vague, you'd be right as well. We will get a lot more specific and distinguish between different kinds of content in following sections.",
            "title": "Content"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#admin-panel-dashboard-or-back-end",
            "text": "The admin panel (sometimes also called dashboard or back-end) is where you manage your site and its content. It is restricted to users who have the \"Access admin panel\" permission. This is the 'M' in CMS.",
            "title": "Admin panel, Dashboard or back-end"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#cms",
            "text": "The 'S' in CMS is for \"System\", which is not as vague and meaningless as it seems. It's important that a CMS manages content in a systematic way: this means that all content is managed homogeneously, which enables mutuality of resources.  For example, you can manage blog posts, pages and products using common tools, and all of those can get comments, ratings or tagging from common modules. This gives you a more consistent experience and facilitates the creation of new types of content.",
            "title": "CMS"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#front-end",
            "text": "The front-end is the part of the site that is accessible to regular and anonymous users. In other words, it's the public-facing part of your site: everything but the admin UI.",
            "title": "Front-end"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#setup",
            "text": "Setup is the process you must follow in order to get your web site to working condition (and no more than that, you still have work to do after it's done, such as creating content).",
            "title": "Setup"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#orchard-concepts",
            "text": "",
            "title": "Orchard concepts"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#content-item",
            "text": "A content item is a single piece of content, often associated with a single URL (address) on the site. Examples of content items are pages, blog posts or products.",
            "title": "Content Item"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#content-type",
            "text": "Content items are instances of content types. Said differently, content types are classes of content items. We said in the previous section that examples of content items are pages, blog posts, and products. Those three examples also describe three content types: page, blog post and product. In other words what we call a blog post is just an item of type blog post.",
            "title": "Content type"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#content-part",
            "text": "In Orchard, content types are built from smaller parts, that are conveniently called content parts. Content parts are atoms of content that are enough to build a specific coherent behavior and that can be reused across content types.   For example, comments, tags or ratings are content parts because they define a specific behavior and can be reused by any content type. There is nothing in comments that is specific to a given content type such as blog posts. Comments can be equally useful on blog posts as they would be on pages or products.  There can be only one of each part on any given content type.",
            "title": "Content Part"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#content-field",
            "text": "Content fields are pieces of information that can be added to a content type. Content fields have a name and a type and are specific to a content type. There can be several of each field type on any given content type.  For example, a Product content type can have a text field representing its Sku, a numeric field representing its price, and another numeric field representing its weight. Each of these fields probably only makes sense on a product.   Note: it would be possible to create a product part with three properties that would be roughly equivalent to this set of fields. This would have the advantage of making it possible to transform any content type into a product. Each approach is a valid choice and Orchard allows for both.",
            "title": "Content Field"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#module",
            "text": "The various custom extensions that can be built for Orchard are typically built as modules. A module is a set of extensions for Orchard that are grouped under a single sub-folder of the Modules directory that can be found under the Orchard web site.  Optional modules for Orchard can be found in the Orchard Gallery (see the menu entry on top of this page).",
            "title": "Module"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#feature",
            "text": "A module can contain one or more features, which is a logical grouping of functionality that can be enabled or disabled individually. For example, a custom authentication module could have separate features for OpenID, FaceBook, LiveID, Twitter or Google authentication that can each be turned on or off.  Features can depend on each other, whether they are in the same module or not.",
            "title": "Feature"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#manifest",
            "text": "A manifest is a small text file that describes a module or a theme to the system.  Here is an example of a manifest:  Name: Comments\nAntiForgery: enabled\nAuthor: The Orchard Team\nWebsite: http://orchardproject.net\nVersion: 1.8.1\nOrchardVersion: 1.8\nDescription: The comments system implemented by this module can be applied to arbitrary Orchard content types, such as blogs and pages. It includes comment validation and spam protection through the Akismet service.\nFeatures:\nOrchard.Comments:\n    Name: Comments\n    Description: Standard content item comments.\n    Dependencies: Settings, Orchard.Tokens\n    Category: Social\nOrchard.Comments.Workflows:\n    Name: Comments Workflows Activities\n    Description: Provides workflow activities for comments management.\n    Category: Workflows\n    Dependencies: Orchard.Workflows",
            "title": "Manifest"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#ui-composition",
            "text": "Orchard manages content that is composed from parts. It needs a mechanism that orchestrates the display while taking into account the composite nature of the content. This is why we talk about UI composition, as elementary bits and pieces of content need to be composed into a harmonious and consistent whole. Several concepts contribute to this UI composition.",
            "title": "UI composition"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#theme",
            "text": "When designing a web site, it is important to be able to modify the visual look of every single aspect of the site. Orchard provides a clean separation between the content management and the visual rendering of the content.  A theme is a packaged look and feel for an Orchard site. It can consist of any combination of style sheets, images, layouts, templates and even custom code. It is even possible to create a theme that inherits from another, which is very useful if you are trying to make only small modifications on an existing theme.",
            "title": "Theme"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#layout",
            "text": "A layout is a file in a theme that defines the general organization of the pages of the site that use it. A layout typically defines a set of zones where contents or widgets can be inserted.",
            "title": "Layout"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#template",
            "text": "Each content part, each field and each widget will need to be graphically represented in the front-end, transforming the data that it represents into a form that can be read by the users of the site. A template is the recipe that formats that data and transforms it into HTML for the browser to display. You can think of a template as plain HTML with well-defined \"holes\" where data gets inserted.  Here is an example of a template that displays the title from the Route part:  <h1>@Model.Title</h1>",
            "title": "Template"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#shape",
            "text": "Before displaying something using a template, that something gets transformed into a shape, which is a very malleable object that contains all the information required in order to display it. Before getting rendered by templates, everything gets mapped into a tree of shapes that is a sort of abstract representation of the contents of the final page. The advantage of such trees of shapes is that any module can modify existing shapes or create new ones.  The layout, zones, widgets and content parts all get represented as shapes as part of the rendering process.  One could imagine for example a Gravatar module that would add avatar icon shapes to the comment shapes that were created by the comment module. In the same way, the layers from the widget module are adding widget shapes to the zone shapes of the layout shape.",
            "title": "Shape"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#placement",
            "text": "When rendering the collections of parts and fields -or any other shapes- that compose a page or content item, Orchard needs to know in what order to do so. Placement.info files are XML files that describe rules that can be used to determine what shapes go into what zones and in what order. This enables not only the rendering of each shape to be customized, but also the order in which they get rendered.  Here is an example of a placement file:  <Placement>\n    <Place Parts_Map=\"Content:10\"/>\n    <Place Parts_Map_Edit=\"Content:7.5\"/>\n</Placement>",
            "title": "Placement"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#zone",
            "text": "Zones are specific parts of a layout that can be customized by inserting widgets. In some themes, zones are collapsible, which means that they disappear if they contain no active widget.",
            "title": "Zone"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#widget",
            "text": "A widget is a small fragment of UI that can be added to some or all pages of the site. Examples of widgets are tag clouds, maps, archives, a search form, or recent blog posts.",
            "title": "Widget"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#layer",
            "text": "A layer is a group of widgets (with their specific configuration, which includes their positioning -zone name and ordering-) that is activated by a specific rule.  For example, the TheHomePage layer is activated by a rule that specifically selects the home page. The Default layer is always active no matter what page is displayed. The Authenticated layer is only active when users have identified themselves.  When more than one layer is active on any given page, all the widgets from all those layers get displayed at the same time. Orchard orders them based on their position string.",
            "title": "Layer"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#security",
            "text": "",
            "title": "Security"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#users-and-roles",
            "text": "In Orchard, users can be attributed roles, which can be seen as stereotypes of users. Permissions can then be attributed to roles in order to define who can do what on the site (more on this in the next section). Any user can have one or several roles.  Site owners can create their own roles but Orchard comes with built-in roles that should cover most sites' requirements:   Administrator: have full control over the site's settings and contents.  Editor: does not create content but edit and publish content created by authors.  Moderator: validates user-created contents such as comments.  Author: writes and publishes his own content.  Contributor: writes content but does not necessarily have the rights to publish it.  Anonymous: an unknown user, someone who hasn't logged in.  Authenticated: any user who has logged in.   Neither Anonymous nor Authenticated can be assigned to a user manually. Rather, they are determined dynamically at runtime.",
            "title": "Users and roles"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#privileges-and-permissions",
            "text": "All users don't have the same rights and privileges in Orchard: the site owner can choose who can create content, who can write or validate comments, etc. Rights and privileges are represented as permissions. In Orchard, permissions are granted to roles but are not explicitly denied. In other words if a user belongs to any role that has a given permission, he has that permission. To revoke a permission, you need to either remove a user from the role the permission has been granted to or you need to remove that permission for the whole role.  Some permissions are \"effectively granted\". This means that they have not been explicitly granted, but that they have been implied by another permission. For example, if you grant the site owner permission, you are implicitly granting all the other permissions.   Permissions, as well as their default settings for the built-in roles, are defined by modules. This means that if you build your own module, you can define specific permissions to accompany it.",
            "title": "Privileges and Permissions"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#site-owner",
            "text": "The site owner, sometimes also called \"super user\" is a special user that is defined at setup time and that has all the rights on the site. It can be changed from the settings admin screen if you have the permission to do so.  There is a permission called \"Site Owners Permission\" that grants the same right and that is granted by default to only members of the Administrator role. We advise never to grant that permission to any other role.",
            "title": "Site owner"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#development",
            "text": "In this section we will describe concepts that are only required for module developers.",
            "title": "Development"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#aspnet-mvc",
            "text": "ASP.NET MVC is the Web framework that Orchard is built on.",
            "title": "ASP.NET MVC"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#handler",
            "text": "A handler is similar to an MVC filter in that it contains code that will execute for specific events of the request life-cycle. They are typically used to set-up data repositories or to do additional operations when something gets loaded.",
            "title": "Handler"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#driver",
            "text": "Drivers are similar to MVC controllers, but they act at the level of a content part instead of at the level of the full request. They typically prepare shapes for rendering and handle post-backs from admin editors.",
            "title": "Driver"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#record",
            "text": "A record is a class that models the database representation of a content part. They are POCOs where each property must be virtual.",
            "title": "Record"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#model",
            "text": "What plays the part of the model for a content part is the part class itself. Some parts also define view models, in the form of strongly-typed classes or of more flexible dynamic shapes.",
            "title": "Model"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#migration",
            "text": "A migration is a description of the operations to execute when first installing a feature or when upgrading it from a version to the next. This enables smooth upgrades of individual features without data loss. Orchard includes a data migration framework.",
            "title": "Migration"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#injection",
            "text": "Inversion of Control, or injection, is widely used in Orchard. When any piece of code requires a dependency, it will typically demand the injection of one or several instances of a specific interface. The framework will take care of selecting, instantiating and injecting the right implementations at runtime.",
            "title": "Injection"
        },
        {
            "location": "/Documentation/Basic-Orchard-Concepts/#change-history",
            "text": "Updates for Orchard 1.8  9-6-14: Updated all screen shots for setup, dashboard, content parts and modules/features.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Builtin-Features/",
            "text": "There are lots of features available in Orchard out of the box, and many times more from\nthe \ngallery\n. This topic gives a brief description of each of Orchard's first-party\nfeatures.\n\n\nThe list is organized alphabetically by module name, within two main sections separating\ncore modules from non core modules. Core features cannot be disabled and are all enabled\nat all times, but there are features that are implemented in core modules that can be\nenabled and disabled. Those features are simply not in the \"Core\" category.\n\n\nEach module details its features, whether it's available from the gallery or the source code releases.\n\n\nCore modules\n\n\nCommon\n\n\nThe three core content parts Body, Common, and Identity, as well as the Text field, are\nimplemented by this core module.\n\n\nThe Body part represents a block of rich text. It is\nconfigured by default to use HTML through TinyMCE, but can be adjusted to use plain text,\nMarkdown or any custom flavor.\n\n\nThe Common part captures the creation, modification and publication dates, as well as the\nowner of the content item. The container item can also be found on this part, in order\nto implement parent / child metaphors of hierarchies such as blog / post or folder / file.\n\n\nThe Identity part is useful to provide a unique identity to a content item that doesn't\nhave a natural one. For example, pages are naturally identified by their relative URL\nwithin the site, or users by their user name, but widgets have no such natural identity.\nIn order to enable importing and exporting of those items, the identity part can be added.\nIt creates GUIDs that are used as a unique identity that can reliably be exchanged between\ninstances of Orchard.\n\n\nThe Text field is very similar to the Body part, except that it is a field rather than a part,\nenabling the use of multiple instances on a single item. It also has some shorter flavors\nsuch as a single-line box of unformatted text.\n\n\nContainers\n\n\nThis module introduces four parts that are useful to create simple hierarchies of contents.\nIt is the basis for the Orchard.Lists module, but you may want to also consider other content\nclassification models such as taxonomies and better querying mechanisms such as projections.\n\n\nThe Container part can be added to a type to mark its ability to contain certain types of\ncontent items. It also has properties specifying sort order and pagination.\n\n\nThe Containable part specifies that a type can be contained. It works hand-in-hand with the\nContainer part and enables the content editor to choose a container for the item.\n\n\nThe Container Widget part is similar to the Container part, except that it is made to be used\nin the container widget, and it has additional filtering capabilities in order to be able to\ndisplay only a selected subset of the contained items. It is also not a container in itself,\nbut rather references and re-uses an existing container item.\n\n\nThe custom properties part exposes three custom text properties that were useful to implement custom\nfiltering and ordering. This part is deprecated as projections now enable filtering and sorting\non fields.\n\n\nContents\n\n\nThis core module creates the infrastructure for custom content types.\n\n\nFeatures\n\n\n\n\nContents (Core): the infrastructure for custom types.\n\n\nContent Control Wrapper (off by default): adds en edit button on the front-end.\n\n\n\n\nDashboard\n\n\nImplements the administration dashboard as an extensible shell.\n\n\nFeeds\n\n\nThe Feeds core module provides the infrastructure that modules can use to expose RSS,\nAtom or other types of feeds.\n\n\nNavigation\n\n\nSince Orchard 1.5, the application ships with a hierarchical and extensible navigation menu.\nMore than one named menu can be built using this core module. Menu items can be provided\nby any number of providers. The module ships with custom items that can point to any URL,\nand content menu items that point to a specific content item.\nOther modules, such as taxonomies or projections, can provide their own dynamic menu item providers.\nMenus can be rendered as full hierarchical menu widgets, or as breadcrumb or local menus.\nA content item can be added to menus using the Navigation part. The Menu part, that was\nfulfilling this role before Orchard 1.5, is deprecated but still provided for back-compatibility\nwith the data from previous versions of Orchard.\nThis core module also provides the administration menu.\n\n\nReports\n\n\nThe Reports core module sets-up the infrastructure to generate and display basic reports.\nIt is used during setup to log the various setup operations, including database operations.\n\n\nScheduling\n\n\nThe APIs from this core module can be used by other modules such as Publish Later to schedule\noperations to be executed in the future.\n\n\nSettings\n\n\nSite-wide settings in Orchard are stored in a content item. The Site content type is what is used\nfor this, and as any content type in Orchard, it can be extended. This enables modules to contribute\ntheir own settings. This module is what enables that scenario.\n\n\nShapes\n\n\nShapes in Orchard are the basic units of UI from which all HTML is built. New shapes can of course\nbe added by modules dynamically, but this module provides some basic and standard shapes.\n\n\nCore shapes are defined in code in CoreShapes.cs. Other shapes are defined in Views as cshtml files.\nAny shape, core or otherwise, can be overridden by templates in a theme.\n\n\nCore shapes\n\n\n\n\nActionLink: uses route values to construct a HTML link.\n\n\nDisplayTemplate, EditorTemplate: internally used to build the display and editor views of content items.\n\n\nLayout: this is the outermost shape, that together with its wrapper, Document, defines the basic HTML structure to be rendered. It also defines top-level zones.\n\n\nList: a standard shape to render lists of shapes.\n\n\nMenu, MenuItem, LocalMenu, LocalMenuItem and MenuItemLink: the shapes that navigation renders.\n\n\nPager and associated shapes and alternates: the shapes used to render pagination.\n\n\nPartial: a shape that can be used to render a template as a partial view, using the specified model. Creating a dynamic shape is often a preferable technique.\n\n\nResource, HeadScripts, FootScripts, Metas, HeadLinks, StyleSheetLinks, Style: shapes used to render resources such as script tags or stylesheets.\n\n\nZone: a special shape that is made to contain other shapes, typically but not always limited to widgets.\n\n\n\n\nTemplated shapes\n\n\n\n\nBreadcrumb: a breadcrumb representation of a list of menu item links.\n\n\nErrorPage and NotFound: the pages that are rendered in case of server error or 404 not found resource. These are fun ones to override in a theme.\n\n\nHeader: the header of the page (not the head tag).\n\n\nMessage: this shape is used to render information, warning or error messages.\n\n\nUser: displays login, logout, dashboard and change password links.\n\n\n\n\nTitle\n\n\nThis simple module introduces the Title part that is used by most content types.\n\n\nXmlRpc\n\n\nThe APIs necessary to create content such as pages and blog posts from applications such as\nWindows Live Writer are implemented in this core module. The Orchard.Blogs module builds\non this module to enable specifically blog post creation.\n\n\nNon-core modules\n\n\nMarkdown (off by default)\n\n\nMarkdown\n is a human-readable text format used to describe rich text without the\ncomplexity of HTML. Some people prefer to write in Markdown rather than in a WYSYWYG\ntext editor such as the default TinyMCE editor that comes with Orchard.\n\n\nOnce you've enabled the Markdown feature, you can create new content types or edit\nthe existing ones to use the Markdown format instead of HTML by opening the settings\nfor the Body part and changing the flavor setting from \"html\" to \"markdown\". The\nMarkdown editor will then be shown instead of TinyMCE in the content item editor.\n\n\nOrchard.Alias\n\n\nThe Alias module sets up the infrastructure to map friendly URLs to content items\nand custom routes. It is the foundation on which Autoroute is built.\n\n\nFeatures\n\n\n\n\nAlias: this is the core infrastructure piece for aliases to work.\n\n\nAlias UI (off by default): provides admin UI to modify, create or remove aliases.\n\n\n\n\nOrchard.AntiSpam (off by default)\n\n\nThe AntiSpam module provides various spam-fighting features and infrastructure\npieces. It makes it possible to prevent spam on arbitrary contents (previous\nversions of Orchard only had anti-spam services on comments). With this module,\nyou can add captcha, external spam-filtering or submission limits simply by adding\na few parts to your types, including custom forms.\n\n\nFeatures\n\n\n\n\nAnti-Spam: the core infrastructure pieces for anti-spam. Also provides the \nReCaptcha\n part that can be added to content types to add CAPTCHA to its edit form.\n\n\nAkismet Anti-Spam Filter: enables the use of the third-party \nAkismet\n service with Orchard content types.\n\n\nTypePad Anti-Spam Filter: enables the use of the third-party \nTypePad\n service with Orchard content types.\n\n\n\n\nOrchard.ArchiveLater\n\n\nUsing the part provided by this module, you can schedule a content item to be archived.\n\n\nThis module is available from source code packages or \nfrom the gallery\n.\n\n\nOrchard.AuditTrail (off by default)\n\n\nAudit Trail module in Orchard provides a log records for creation, deletion of any Content Type and events like user events, role events and it even provides a recycle bin.\n\n\nFeatures\n\n\n\n\nOrchard.AuditTrail : Provides a log for recording and viewing back-end changes.\n\n\nOrchard.AudiTrail.ImportExport : Provides import/export functionality for the Audit Trail feature.\n\n\nOrchard.AuditTrail.Trimming : Provides a background task that regularly deletes old audit trail records.\n\n\nOrchard.AuditTrail.Users : Provides audit trail support for user related events.\n\n\nOrchard.AuditTrail.Roles : Provides audit trail support for role related events.\n\n\nOrchard.AuditTrail.ContentDefinition : Provides audit trail support for content definition related events.\n\n\nOrchard.AuditTrail.RecycleBin : Adds a Recycle Bin menu item to the Audit Trail menu, enabling you to recycle removed content items.\n\n\n\n\nOrchard.Autoroute\n\n\nThis very powerful feature makes it possible for content type creators to specify a\ntoken-based URL blueprint. For example, if you want the URL of your blog posts\nto be of the form posts/2012/7/the-best-post-you-ll-ever-read, you can go to the\ncontent type editor for blog posts, deploy the settings for the Autoroute part and\nset the pattern to \"posts/{Content.Date.Format:yyyy}/{Content.Date.Format:MM}/{Content.Slug}\".\n\n\nAutoroute is built on top of the Alias feature.\n\n\nOrchard.Azure (Off by default)\n\n\nOrchard.Azure provides a set of Orchard service implementations targeting Microsoft Azure services.\n\n\nFeatures\n\n\n\n\nOrchard.Azure.Media : Activates an Orchard media storage provider that targets Microsoft Azure Blob Storage.\n\n\nOrchard.Azure.OutputCache : Activates an Orchard output cache provider that targets Windows Azure Cache.\n\n\nOrchard.Azure.DatabaseCache : Activates an NHibernate second-level cache provider that targets Microsoft Azure Cache.\n\n\n\n\nOrchard.Azure.MediaServices (Off by default)\n\n\nProvides integration of Microsoft Azure Media Services functionality into Orchard.\n\n\nOrchard.Blogs\n\n\nThe blogs module provides Orchard's blogging features. It relies heavily on Orchard's\ncontent type composition and other features such as comments.\n\n\nSee Also\n\n\n\n\nAdding a blog to your site\n\n\nBlogging with Live Writer\n\n\n\n\nOrchard.Caching\n\n\nOrchard.Caching provides an API to cache business data.\n\n\nOrchard.CodeGeneration\n\n\nThis module provides developers with scaffolding commands that help with the creation\nof new modules and themes.\n\n\nThis module is available from source code packages or \nfrom the gallery\n.\n\n\nOrchard.Comments\n\n\nYou can use the Comments part provided by this module on any content type, in order\nto enable users of your site to provide feedback.\n\n\nSee Also\n\n\n\n\nModerating comments\n\n\n\n\nOrchard.ContentPermissions (off by default)\n\n\nWithout this module, Orchard only provides configurable permissions for whole content types.\nThis module provides a part that can be added to any content type to restrict viewing\npermissions per content item instead of per content type.\n\n\nOrchard.ContentPicker\n\n\nThis module provides an extensible content item picker that can be used to build\nrelationships between content items. The content picker module provides a content picker field which can be attached to any Content Type.\n\n\nThis module is available from source code packages or \nfrom the gallery\n.\n\n\nOrchard.ContentTypes (off by default)\n\n\nEnable this module to enable the creation and modification of content types from the admin UI.\n\n\nSee Also\n\n\n\n\nCreating custom content types\n\n\n\n\nOrchard.CustomForms (off by default) (Deprecated in 1.9)\n\n\nCustom forms are built as content types, typically using fields. Once you've built the content\ntype for your custom form, you can enable its instances to be created from the front-end by\nanonymous users.\n\n\nThis is useful, for example, to create contact forms: enable the feature, create a \"Contact Form\"\ncontent type, add name, e-mail and message text fields (select TextArea as the display option in the\nfield's settings), click on \"Forms\" in the admin menu, click \"Add a new  Custom Form\", \nselect \"Contact Us\" as the content type for the form and publish. If you enable the Rules feature,\nyou can then create a rule that sends an e-mail when an item of the \"Contact Us\" type is\npublished. You should also grant the \"Submit Contact Form\" permission to the anonymous role\nfrom the Users/Roles admin screen under \"Custom Forms\" in order to allow anonymous users to post contact forms.\n\n\nOrchard.DesignerTools\n\n\nThis module contains a few features that help with the development of themes.\n\n\nFeatures\n\n\n\n\nShape Tracing: provides a Firebug-like tool that can be used to explore the server-side shape structure of the page, generate alternates, and inspect the model, placement and templates for any shape.\n\n\nURL Alternates: adds alternates for all shapes based on the current URL, of the form \"someshape-url-thecurrenturl\" or \"someshape-url-homepage\".\n\n\nWidget Alternates: adds alternates for specific widgets and layers.\n\n\n\n\nSee Also:\n\n\n\n\nCustomizing Orchard using designer helper tools\n\n\n\n\nThis module is available from source code packages or \nfrom the gallery\n.\n\n\nOrchard.DynamicForms (off by default)\n\n\nDynamicForms module in Orchard allows to create custom forms like contact forms using layouts.\n\n\nAfter enabling the DynamicForms module -> click on Form in the dashboard area. The DynamicForms module is built using the DynamicLayouts module which allows us to place or drag-n-drop elements like a forms, checkboxes, buttons, labels, text areas, radio buttons, validation messages and many more on the Layout canvas.\n\n\nFeatures\n\n\n\n\nOrchard.DynamicForms : Create custom forms like contact forms using layouts.\n\n\nOrchard.DynamicForms.AntiSpam : Provides anti-spam elements to protect your content from malicious submissions.\n\n\nOrchard.DynamicForms.Taxonomies : Adds a Taxonomy form element to the system.\n\n\nOrchard.DynamicForms.Projections : Adds a Query form element to the system.\n\n\nOrchard.DynamicForms.ImportExport : Enables the import and export of form submissions.\n\n\n\n\nOrchard.Email\n\n\nThis module implements an email messaging channel that can be used for example to send\nemail notifications from rules.\n\n\nThis module is available from source code packages or \nfrom the gallery\n.\n\n\nOrchard.Fields\n\n\nOrchard.Fields provides Input, Boolean, DateTime, Numeric, Link, Enumeration, and Media Picker fields\nthat can be used in custom content types.\n\n\nOrchard.Forms\n\n\nThis developer-targeted module provides shapes that are useful to dynamically build forms from code.\n\n\nThis module is used as a dependency by Projector and Rules.\n\n\nOrchard.ImportExport\n\n\nThe definition for content types, as well as the content itself, can be exported from one Orchard\ninstance, and imported into another using this module. The format that is used for the transfer\nis the same XML format that is used in recipes.\n\n\nThis module is available from source code packages or \nfrom the gallery\n.\n\n\nOrchard.ImageEditor\n\n\nOrchard.ImageEditor adds a client side image editor for Media Library\n\n\nOrchard.Indexing, Orchard.Search and Lucene\n\n\nThose three modules constitute the default full-text search infrastructure for Orchard.\nThe indexing module populates the index from content items. The Lucene module provides\nthe specific index implementation that indexing populates and that search queries.\nThe search index queries the index and formats results.\n\n\nThis module is available from source code packages or from the gallery: \nsearch\n,\n\nindexing\n and \nLucene\n.\n\n\nOrchard.JobsQueue\n\n\nThis module provides a jobs queue to process jobs asynchronously.\n\n\nFeatures\n\n\n\n\nOrchard.JobsQueue : Provides a jobs queue to process jobs asynchronously.\n\n\nOrchard.JobsQueue.UI : Provides a UI to manage queued jobs.\n\n\n\n\nOrchard.jQuery (deprecated)\n\n\nUsed as a dependency by other modules, this provides jQuery and jQueryUI scripts.\n\n\nThis module is deprecated as of Orchard v1.10, you should use Orchard.Resources now instead.\n\n\nOrchard.Layouts\n\n\nOrchard.Layouts module in Orchard provides tools to create layouts. In Orchard v.1.9 by default the Page content type has a LayoutPart instead of the BodyPart. \n\n\nA LayoutPart is a layout canvas which is empty by default. The Layouts module consists of Elements like Grids, Rows, Columns and Content Item elements, Media elements and Part elements like Title, Common and Tags part.\n\n\nLayout elements can be dragged-n-dropped on the Layout canvas to form a layout for a Page or a master layout for other pages.\n\n\nThe Layouts module has a feature called Snippets which allows you to use a shape from within your current theme as an element. Quite handy auh.\n\n\nFeatures\n\n\n\n\nOrchard.Layouts : Provides tools to create layouts.\n\n\nOrchard.Layouts.Snippets : Enables support for adding elements based on shapes in the current theme.\n\n\nOrchard.Layouts.Markdown : Adds a Markdown element to the system.\n\n\nOrchard.Layouts.Projections : Adds a Projection element to the system.\n\n\nOrchard.Layouts.Tokens : Provides an element token provider that enables elements to be rendered using a token and enables tokens to be used inside of various elements such as Html, Text and Paragraph.\n\n\n\n\nOrchard.Lists\n\n\nThis module provides a simple implementation for lists of content items, following\na folder/file metaphor where a content item can belong to only one list.\n\n\nOrchard.Localization\n\n\nThe localization module enables the localization of content items. This module provides a part that can be added to a content type to make it localizable. The items of the modified types can have several versions that differ by culture.\n\n\nFeatures\n\n\n\n\nOrchard.Localization : Enables localization of content items.\n\n\nOrchard.Localization.DateTimeFormat : Enables PO-based translation of date/time formats and names of days and months.\n\n\nOrchard.Localization.CultureSelector : Enables culture picker services, and also the admin culture picker.\n\n\nOrchard.Localization.Transliteration : Enables transliteration of content.\n\n\nOrchard.Localization.Transliteration.SlugGeneration : Enables transliteration of the autoroute slug when creating a piece of content.\n\n\n\n\nOrchard.MediaLibrary\n\n\nOrchard.MediaLibrary Provides enhanced Media management tools\n\n\nSee Also\n\n\n\n\nAdding and managing media content\n\n\n\n\nOrchard.MediaProcessing\n\n\nModule for processing Media e.g. image resizing\n\n\nOrchard.MessageBus\n\n\nProvides communication APIs for server farms.\n\n\nFeatures\n\n\n\n\nOrchard.MessageBus : Reusable API abstractions to communicate in a server farm.\n\n\nOrchard.MessageBus.DistributedSignals : Distribute signals cache invalidation calls.\n\n\nOrchard.MessageBus.SqlServerServiceBroker : A message bus implementation using SQL Server Service Broker.\n\n\nOrchard.MessageBus.DistributedShellRestart : Distribute shell restarts.\n\n\n\n\nOrchard.Migrations\n\n\nData migration commands.\n\n\nFeatures\n\n\n\n\nDatabaseUpdate : Commands for updating the database schema according to the definition of the \"Record\" classes in code.\n\n\n\n\nOrchard.Modules\n\n\nThis is the module that provides the admin UI to enable and disable features.\n\n\nSee Also\n\n\n\n\nInstalling and upgrading modules\n\n\n\n\nOrchard.MultiTenancy\n\n\nHosting multiple Orchard sites on separate applications means duplicating everything\nfor each site. The multi-tenancy module enables the hosting of multiple Orchard sites\nwithin a single IIS application, thus saving a lot of resources, and reducing maintenance\ncosts. Each site's data is strictly segregated from the others through a table prefix\nor complete database separation.\n\n\nSee Also\n\n\n\n\nSetting up a multi-tenant Orchard site\n\n\n\n\nThis module is available from source code packages or \nfrom the gallery\n.\n\n\nOrchard.OutputCache\n\n\nAdds Output Caching functionality.\n\n\nFeatures\n\n\n\n\nOrchard.OutputCache : Adds output caching functionality.\n\n\nOrchard.OutputCache.Database : Activates a provider that stores output cache data in the database.\n\n\n\n\nOrchard.Packaging\n\n\nThis module handles the packaging of themes and modules.\n\n\nFeatures\n\n\n\n\nPackaging commands: core services and command-line commands to package and install modules.\n\n\nGallery: integrates the \ngallery\n into Orchard.\n\n\nPackage Updates: enables module updates from the admin dashboard.\n\n\n\n\nSee Also\n\n\n\n\nInstalling modules and themes from the gallery\n\n\n\n\nOrchard.Pages\n\n\nThe Pages modules adds the Page content type, and associated commands.\n\n\nSee Also\n\n\n\n\nAdding pages to your site\n\n\n\n\nOrchard.Projections\n\n\nThis tremendously useful module enables the creation of arbitrary queries over\nthe contents of the site, and then to present the results in flexible layouts,\nwithout leaving the admin dashboard.\n\n\nSee Also\n\n\n\n\nPresentation video on Projections\n\n\n\n\nOrchard.PublishLater (off by default)\n\n\nThe PublishLater part can be added to draftable content types and allows scheduled\npublication of contents.\n\n\nSee Also\n\n\n\n\nSaving, scheduling and publishing drafts\n\n\n\n\nOrchard.Recipes\n\n\nRecipes are XML files that describe a set of operations on the contents and configuration\nof the site. Recipes are used at setup to describe predefined initial configurations\n(Orchard comes with default, blog and core recipes). They can also be included with\nmodules to specify additional operations that get executed after installation.\nFinally, the import/export feature uses this same recipe format to transfer contents.\n\n\nSee Also\n\n\n\n\nMaking a web site recipe\n\n\n\n\nOrchard.Redis\n\n\nProvides Redis integration with Orchard.\n\n\nFeatures\n\n\n\n\nOrchard.Redis : Provides Redis integration with Orchard.\n\n\nOrchard.Redis.MessageBus : A message bus implementation using Redis pub/sub.\n\n\nOrchard.Redis.OutputCache : An output cache storage provider using Redis.\n\n\nOrchard.Redis.Caching : Business data cache using Redis.\n\n\n\n\nOrchard.Resources\n\n\nProvides a variety of third-party client-side libraries (stylesheets and scripts) used by other modules.\n\n\nAdded in Orchard v1.10, replaces the deprecated Orchard.jQuery module.\n\n\nOrchard.Roles\n\n\nThe roles module is adding the ability to assign roles to users. It's also providing a set of default roles for which other modules can define default permissions.\n\n\nFeatures\n\n\n\n\nOrchard.Roles : Standard user roles.\n\n\nOrchard.Roles.Workflows : Provides a role based activities.\n\n\n\n\nSee Also\n\n\n\n\nManaging users and roles\n\n\nUnderstanding permissions\n\n\n\n\nOrchard.Rules (deprecated) (off by default)\n\n\nOrchard events can be picked up by rules and trigger actions. For example, the publication\nevent on the comment content type can be picked-up by a user-defined rule and trigger\nthe action of sending an e-mail to the owner of the blog.\nThe Rules module provides simple admin UI to create and manage rules. This module is deprecated. \nWe recommend users switch to Orchard.Workflows Module.\n\n\nOrchard.Scripting\n\n\nIn order to enable simple programmability of the application without requiring the\ndevelopment of a whole module, certain key areas of Orchard expose extensibility through\nscripting. For example, widget layer visibility is defined by rules that are written\nas simple script expressions. The scripting infrastructure is language-agnostic, and\nnew languages could be added by a module. Orchard comes with one implementation that\nis a simple expression language whose syntax is a subset of Ruby.\n\n\nFeatures\n\n\n\n\nScripting: the scripting infrastructure.\n\n\nLightweight Scripting: a simple expression language that is a subset of Ruby.\n\n\nScripting Rules: makes it possible for rules to be triggered by arbitrary scripted expressions.\n\n\n\n\nOrchard.Scripting.CSharp\n\n\nProvides C# compiler services.\n\n\nFeatures\n\n\n\n\nOrchard.Scripting.CSharp : Provides C# compiler services.\n\n\nOrchard.Scripting.CSharp.Validation : Provides a Script Validation part.\n\n\n\n\nOrchard.Scripting.DLR\n\n\nThis module, built on Orchard.Scripting, enables the possibility to use DLR languages\nsuch as Ruby and Python as scripting languages.\n\n\nOrchard.Setup (off after setup)\n\n\nThis module is always disabled except before the application has been setup. It is responsible\nfor implementing the setup mechanism. It contains the original recipes in its Recipes subfolder.\n\n\nSee Also\n\n\n\n\nInstalling Orchard\n\n\nMaking a web site recipe\n\n\n\n\nOrchard.Search\n\n\nStandard interface to Orchard's built-in search.\n\n\nFeatures\n\n\n\n\nOrchard.Search : Standard interface to Orchard's built-in search.\n\n\nOrchard.Search.Content : Provides a Content Search tab in Admin.\n\n\nOrchard.Search.ContentPicker : Provides a search tab in Content Picker.\n\n\nOrchard.Search.MediaLibrary : Provides search menu item in the Media Library explorer.\n\n\n\n\nOrchard.SecureSocketsLayer\n\n\nThis module will ensure SSL is used when accessing specific parts of the website like the dashboard, authentication pages or custom pages.\n\n\nOrchard.Tags\n\n\nTags are a very simple way to categorize contents. It is a flat and easily extensible structure.\n\n\nFeatures\n\n\n\n\nOrchard.Tags : The tags module is providing basic tagging for arbitrary content types.\n\n\nOrchard.Tags.Feeds : Adds tags to the RSS feeds. \n\n\nOrchard.Tags.TagCloud : Adds a tag cloud widget. \n\n\n\n\nSee Also\n\n\n\n\nOrganizing content with tags\n\n\n\n\nOrchard.TaskLease\n\n\nIn web farm environments, it's often useful to send messages across all servers in the farm. This\nmodule implements a way for code to communicate tasks to the whole server farm.\n\n\nThis module is available from source code packages or \nfrom the gallery\n.\n\n\nOrchard.Taxonomies\n\n\nThe taxonomy module is providing custom categorization of arbitrary content types. The taxonomy module provides a taxonomy field which can be attached to any Content Type.\n\n\nOrchard.Themes\n\n\nThis module provides the infrastructure for easy customization of the look and feel of the site\nthrough the definition of themes, which are a set of scripts, stylesheets and template overrides.\n\n\nSee Also\n\n\n\n\nInstalling themes\n\n\nPreviewing and applying a theme\n\n\nCustomizing the default theme\n\n\n\n\nOrchard.Templates\n\n\nProvides a Template type that can be used to store template code and used as a shape.\n\n\nFeatures\n\n\n\n\nOrchard.Templates : Provides a Template type that represents a shape template, stored as a content item.\n\n\nOrchard.Templates.Razor : Extends Templates with Razor templates.\n\n\n\n\nOrchard.Tokens (off by default)\n\n\nProvides a system for performing string replacements with common site values. Tokens are contextual environment variables that are used in dynamic expressions. For example,\nthe Autoroute feature makes it possible to define URL patterns for content items of a given\ntype. Those patterns rely on tokens that will be dynamically evaluated in a specific context.\nThe \"{Content.Date.Format:yyyy}/{Content.Slug}\" would be evaluated for the specific content item\nit applies to and would be resolved to something like \"2012/the-title\".\n\n\nFeatures\n\n\n\n\nOrchard.Tokens : Provides a system for performing string replacements with common site values.\n\n\nOrchard.Tokens.Feeds : Provides a content part to customize RSS fields based on tokens.\n\n\nOrchard.Tokens.HtmlFilter : Evaluates tokens in a body.\n\n\n\n\nOrchard.Users\n\n\nThis is the module that implements the default user management in Orchard.\n\n\nFeatures\n\n\n\n\nOrchard.Users : default user management in Orchard.\n\n\nOrchard.Users.Workflows : Provides User based Workflow Activites.\n\n\nOrchard.Users.PasswordEditor : Adds the ability for admins to edit users' passwords.\n\n\n\n\nSee Also\n\n\n\n\nManaging users and roles\n\n\n\n\nOrchard.Warmup (off by default)\n\n\nCold starts in ASP.NET applications can be slow, and shared hosting environments create the\nconditions for frequent such cold starts. In order to mitigate this situation, the warmup\nfeature can prepare static versions of the most common pages of the site so those can be served\nas soon as possible even if the application is not entirely done warming up.\n\n\nOrchard.Widgets\n\n\nWidgets are reusable pieces of UI that can be positioned on any page of the site. Which widgets\nget displayed on what pages is determined by layer rules.\n\n\nFeatures\n\n\n\n\nWidgets: the core widget feature and admin UI.\n\n\nPage Layer Hinting: adds a message when publishing a new page that prompts the user to create a new layer for that page.\n\n\nWidget Control Wrapper: Adds an edit button on the front-end for easier modification.\n\n\n\n\nSee Also\n\n\n\n\nManaging widgets\n\n\nGetting Started with Modules course\n\n\nWriting a widget\n\n\n\n\nOrchard.Workflows\n\n\nOrchard.Workflows module provides tools to create custom workflows. \n\n\nSysCache\n\n\nEnables database caching using the SysCache provider.\n\n\nTinyMCE\n\n\nUsed as a dependency by other features, this provides the scripts necessary to implement the TinyMCE WYSYWYG HTML editor.\n\n\nUpgrade / UpgradeTo16 /UpgradeTo15 / UpgradeTo14 (off by default)\n\n\nProvides actions for upgrading Orchard instances.\n\n\nOrchard 1.4 brought breaking changes in the way URLs and titles are managed. 1.3 and previous versions\nwere using the Route part to handle a static URL and title. 1.4 deprecated this in favor of the new\nalias, autoroute and title part. The upgrade module contains special scripts that upgrade old content\nto the new way of doing things.\nOrchard 1.4 also introduced new field types (see Orchard.Fields), and because some users may have\nused equivalent Contrib.* fields from gallery modules, the upgrade module provides an upgrade path\nto the new fields.",
            "title": "Built-in modules and features"
        },
        {
            "location": "/Documentation/Builtin-Features/#core-modules",
            "text": "",
            "title": "Core modules"
        },
        {
            "location": "/Documentation/Builtin-Features/#common",
            "text": "The three core content parts Body, Common, and Identity, as well as the Text field, are\nimplemented by this core module.  The Body part represents a block of rich text. It is\nconfigured by default to use HTML through TinyMCE, but can be adjusted to use plain text,\nMarkdown or any custom flavor.  The Common part captures the creation, modification and publication dates, as well as the\nowner of the content item. The container item can also be found on this part, in order\nto implement parent / child metaphors of hierarchies such as blog / post or folder / file.  The Identity part is useful to provide a unique identity to a content item that doesn't\nhave a natural one. For example, pages are naturally identified by their relative URL\nwithin the site, or users by their user name, but widgets have no such natural identity.\nIn order to enable importing and exporting of those items, the identity part can be added.\nIt creates GUIDs that are used as a unique identity that can reliably be exchanged between\ninstances of Orchard.  The Text field is very similar to the Body part, except that it is a field rather than a part,\nenabling the use of multiple instances on a single item. It also has some shorter flavors\nsuch as a single-line box of unformatted text.",
            "title": "Common"
        },
        {
            "location": "/Documentation/Builtin-Features/#containers",
            "text": "This module introduces four parts that are useful to create simple hierarchies of contents.\nIt is the basis for the Orchard.Lists module, but you may want to also consider other content\nclassification models such as taxonomies and better querying mechanisms such as projections.  The Container part can be added to a type to mark its ability to contain certain types of\ncontent items. It also has properties specifying sort order and pagination.  The Containable part specifies that a type can be contained. It works hand-in-hand with the\nContainer part and enables the content editor to choose a container for the item.  The Container Widget part is similar to the Container part, except that it is made to be used\nin the container widget, and it has additional filtering capabilities in order to be able to\ndisplay only a selected subset of the contained items. It is also not a container in itself,\nbut rather references and re-uses an existing container item.  The custom properties part exposes three custom text properties that were useful to implement custom\nfiltering and ordering. This part is deprecated as projections now enable filtering and sorting\non fields.",
            "title": "Containers"
        },
        {
            "location": "/Documentation/Builtin-Features/#contents",
            "text": "This core module creates the infrastructure for custom content types.",
            "title": "Contents"
        },
        {
            "location": "/Documentation/Builtin-Features/#features",
            "text": "Contents (Core): the infrastructure for custom types.  Content Control Wrapper (off by default): adds en edit button on the front-end.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#dashboard",
            "text": "Implements the administration dashboard as an extensible shell.",
            "title": "Dashboard"
        },
        {
            "location": "/Documentation/Builtin-Features/#feeds",
            "text": "The Feeds core module provides the infrastructure that modules can use to expose RSS,\nAtom or other types of feeds.",
            "title": "Feeds"
        },
        {
            "location": "/Documentation/Builtin-Features/#navigation",
            "text": "Since Orchard 1.5, the application ships with a hierarchical and extensible navigation menu.\nMore than one named menu can be built using this core module. Menu items can be provided\nby any number of providers. The module ships with custom items that can point to any URL,\nand content menu items that point to a specific content item.\nOther modules, such as taxonomies or projections, can provide their own dynamic menu item providers.\nMenus can be rendered as full hierarchical menu widgets, or as breadcrumb or local menus.\nA content item can be added to menus using the Navigation part. The Menu part, that was\nfulfilling this role before Orchard 1.5, is deprecated but still provided for back-compatibility\nwith the data from previous versions of Orchard.\nThis core module also provides the administration menu.",
            "title": "Navigation"
        },
        {
            "location": "/Documentation/Builtin-Features/#reports",
            "text": "The Reports core module sets-up the infrastructure to generate and display basic reports.\nIt is used during setup to log the various setup operations, including database operations.",
            "title": "Reports"
        },
        {
            "location": "/Documentation/Builtin-Features/#scheduling",
            "text": "The APIs from this core module can be used by other modules such as Publish Later to schedule\noperations to be executed in the future.",
            "title": "Scheduling"
        },
        {
            "location": "/Documentation/Builtin-Features/#settings",
            "text": "Site-wide settings in Orchard are stored in a content item. The Site content type is what is used\nfor this, and as any content type in Orchard, it can be extended. This enables modules to contribute\ntheir own settings. This module is what enables that scenario.",
            "title": "Settings"
        },
        {
            "location": "/Documentation/Builtin-Features/#shapes",
            "text": "Shapes in Orchard are the basic units of UI from which all HTML is built. New shapes can of course\nbe added by modules dynamically, but this module provides some basic and standard shapes.  Core shapes are defined in code in CoreShapes.cs. Other shapes are defined in Views as cshtml files.\nAny shape, core or otherwise, can be overridden by templates in a theme.",
            "title": "Shapes"
        },
        {
            "location": "/Documentation/Builtin-Features/#core-shapes",
            "text": "ActionLink: uses route values to construct a HTML link.  DisplayTemplate, EditorTemplate: internally used to build the display and editor views of content items.  Layout: this is the outermost shape, that together with its wrapper, Document, defines the basic HTML structure to be rendered. It also defines top-level zones.  List: a standard shape to render lists of shapes.  Menu, MenuItem, LocalMenu, LocalMenuItem and MenuItemLink: the shapes that navigation renders.  Pager and associated shapes and alternates: the shapes used to render pagination.  Partial: a shape that can be used to render a template as a partial view, using the specified model. Creating a dynamic shape is often a preferable technique.  Resource, HeadScripts, FootScripts, Metas, HeadLinks, StyleSheetLinks, Style: shapes used to render resources such as script tags or stylesheets.  Zone: a special shape that is made to contain other shapes, typically but not always limited to widgets.",
            "title": "Core shapes"
        },
        {
            "location": "/Documentation/Builtin-Features/#templated-shapes",
            "text": "Breadcrumb: a breadcrumb representation of a list of menu item links.  ErrorPage and NotFound: the pages that are rendered in case of server error or 404 not found resource. These are fun ones to override in a theme.  Header: the header of the page (not the head tag).  Message: this shape is used to render information, warning or error messages.  User: displays login, logout, dashboard and change password links.",
            "title": "Templated shapes"
        },
        {
            "location": "/Documentation/Builtin-Features/#title",
            "text": "This simple module introduces the Title part that is used by most content types.",
            "title": "Title"
        },
        {
            "location": "/Documentation/Builtin-Features/#xmlrpc",
            "text": "The APIs necessary to create content such as pages and blog posts from applications such as\nWindows Live Writer are implemented in this core module. The Orchard.Blogs module builds\non this module to enable specifically blog post creation.",
            "title": "XmlRpc"
        },
        {
            "location": "/Documentation/Builtin-Features/#non-core-modules",
            "text": "",
            "title": "Non-core modules"
        },
        {
            "location": "/Documentation/Builtin-Features/#markdown-off-by-default",
            "text": "Markdown  is a human-readable text format used to describe rich text without the\ncomplexity of HTML. Some people prefer to write in Markdown rather than in a WYSYWYG\ntext editor such as the default TinyMCE editor that comes with Orchard.  Once you've enabled the Markdown feature, you can create new content types or edit\nthe existing ones to use the Markdown format instead of HTML by opening the settings\nfor the Body part and changing the flavor setting from \"html\" to \"markdown\". The\nMarkdown editor will then be shown instead of TinyMCE in the content item editor.",
            "title": "Markdown (off by default)"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardalias",
            "text": "The Alias module sets up the infrastructure to map friendly URLs to content items\nand custom routes. It is the foundation on which Autoroute is built.",
            "title": "Orchard.Alias"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_1",
            "text": "Alias: this is the core infrastructure piece for aliases to work.  Alias UI (off by default): provides admin UI to modify, create or remove aliases.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardantispam-off-by-default",
            "text": "The AntiSpam module provides various spam-fighting features and infrastructure\npieces. It makes it possible to prevent spam on arbitrary contents (previous\nversions of Orchard only had anti-spam services on comments). With this module,\nyou can add captcha, external spam-filtering or submission limits simply by adding\na few parts to your types, including custom forms.",
            "title": "Orchard.AntiSpam (off by default)"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_2",
            "text": "Anti-Spam: the core infrastructure pieces for anti-spam. Also provides the  ReCaptcha  part that can be added to content types to add CAPTCHA to its edit form.  Akismet Anti-Spam Filter: enables the use of the third-party  Akismet  service with Orchard content types.  TypePad Anti-Spam Filter: enables the use of the third-party  TypePad  service with Orchard content types.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardarchivelater",
            "text": "Using the part provided by this module, you can schedule a content item to be archived.  This module is available from source code packages or  from the gallery .",
            "title": "Orchard.ArchiveLater"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardaudittrail-off-by-default",
            "text": "Audit Trail module in Orchard provides a log records for creation, deletion of any Content Type and events like user events, role events and it even provides a recycle bin.",
            "title": "Orchard.AuditTrail (off by default)"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_3",
            "text": "Orchard.AuditTrail : Provides a log for recording and viewing back-end changes.  Orchard.AudiTrail.ImportExport : Provides import/export functionality for the Audit Trail feature.  Orchard.AuditTrail.Trimming : Provides a background task that regularly deletes old audit trail records.  Orchard.AuditTrail.Users : Provides audit trail support for user related events.  Orchard.AuditTrail.Roles : Provides audit trail support for role related events.  Orchard.AuditTrail.ContentDefinition : Provides audit trail support for content definition related events.  Orchard.AuditTrail.RecycleBin : Adds a Recycle Bin menu item to the Audit Trail menu, enabling you to recycle removed content items.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardautoroute",
            "text": "This very powerful feature makes it possible for content type creators to specify a\ntoken-based URL blueprint. For example, if you want the URL of your blog posts\nto be of the form posts/2012/7/the-best-post-you-ll-ever-read, you can go to the\ncontent type editor for blog posts, deploy the settings for the Autoroute part and\nset the pattern to \"posts/{Content.Date.Format:yyyy}/{Content.Date.Format:MM}/{Content.Slug}\".  Autoroute is built on top of the Alias feature.",
            "title": "Orchard.Autoroute"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardazure-off-by-default",
            "text": "Orchard.Azure provides a set of Orchard service implementations targeting Microsoft Azure services.",
            "title": "Orchard.Azure (Off by default)"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_4",
            "text": "Orchard.Azure.Media : Activates an Orchard media storage provider that targets Microsoft Azure Blob Storage.  Orchard.Azure.OutputCache : Activates an Orchard output cache provider that targets Windows Azure Cache.  Orchard.Azure.DatabaseCache : Activates an NHibernate second-level cache provider that targets Microsoft Azure Cache.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardazuremediaservices-off-by-default",
            "text": "Provides integration of Microsoft Azure Media Services functionality into Orchard.",
            "title": "Orchard.Azure.MediaServices (Off by default)"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardblogs",
            "text": "The blogs module provides Orchard's blogging features. It relies heavily on Orchard's\ncontent type composition and other features such as comments.",
            "title": "Orchard.Blogs"
        },
        {
            "location": "/Documentation/Builtin-Features/#see-also",
            "text": "Adding a blog to your site  Blogging with Live Writer",
            "title": "See Also"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardcaching",
            "text": "Orchard.Caching provides an API to cache business data.",
            "title": "Orchard.Caching"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardcodegeneration",
            "text": "This module provides developers with scaffolding commands that help with the creation\nof new modules and themes.  This module is available from source code packages or  from the gallery .",
            "title": "Orchard.CodeGeneration"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardcomments",
            "text": "You can use the Comments part provided by this module on any content type, in order\nto enable users of your site to provide feedback.",
            "title": "Orchard.Comments"
        },
        {
            "location": "/Documentation/Builtin-Features/#see-also_1",
            "text": "Moderating comments",
            "title": "See Also"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardcontentpermissions-off-by-default",
            "text": "Without this module, Orchard only provides configurable permissions for whole content types.\nThis module provides a part that can be added to any content type to restrict viewing\npermissions per content item instead of per content type.",
            "title": "Orchard.ContentPermissions (off by default)"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardcontentpicker",
            "text": "This module provides an extensible content item picker that can be used to build\nrelationships between content items. The content picker module provides a content picker field which can be attached to any Content Type.  This module is available from source code packages or  from the gallery .",
            "title": "Orchard.ContentPicker"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardcontenttypes-off-by-default",
            "text": "Enable this module to enable the creation and modification of content types from the admin UI.",
            "title": "Orchard.ContentTypes (off by default)"
        },
        {
            "location": "/Documentation/Builtin-Features/#see-also_2",
            "text": "Creating custom content types",
            "title": "See Also"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardcustomforms-off-by-default-deprecated-in-19",
            "text": "Custom forms are built as content types, typically using fields. Once you've built the content\ntype for your custom form, you can enable its instances to be created from the front-end by\nanonymous users.  This is useful, for example, to create contact forms: enable the feature, create a \"Contact Form\"\ncontent type, add name, e-mail and message text fields (select TextArea as the display option in the\nfield's settings), click on \"Forms\" in the admin menu, click \"Add a new  Custom Form\", \nselect \"Contact Us\" as the content type for the form and publish. If you enable the Rules feature,\nyou can then create a rule that sends an e-mail when an item of the \"Contact Us\" type is\npublished. You should also grant the \"Submit Contact Form\" permission to the anonymous role\nfrom the Users/Roles admin screen under \"Custom Forms\" in order to allow anonymous users to post contact forms.",
            "title": "Orchard.CustomForms (off by default) (Deprecated in 1.9)"
        },
        {
            "location": "/Documentation/Builtin-Features/#orcharddesignertools",
            "text": "This module contains a few features that help with the development of themes.",
            "title": "Orchard.DesignerTools"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_5",
            "text": "Shape Tracing: provides a Firebug-like tool that can be used to explore the server-side shape structure of the page, generate alternates, and inspect the model, placement and templates for any shape.  URL Alternates: adds alternates for all shapes based on the current URL, of the form \"someshape-url-thecurrenturl\" or \"someshape-url-homepage\".  Widget Alternates: adds alternates for specific widgets and layers.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#see-also_3",
            "text": "Customizing Orchard using designer helper tools   This module is available from source code packages or  from the gallery .",
            "title": "See Also:"
        },
        {
            "location": "/Documentation/Builtin-Features/#orcharddynamicforms-off-by-default",
            "text": "DynamicForms module in Orchard allows to create custom forms like contact forms using layouts.  After enabling the DynamicForms module -> click on Form in the dashboard area. The DynamicForms module is built using the DynamicLayouts module which allows us to place or drag-n-drop elements like a forms, checkboxes, buttons, labels, text areas, radio buttons, validation messages and many more on the Layout canvas.",
            "title": "Orchard.DynamicForms (off by default)"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_6",
            "text": "Orchard.DynamicForms : Create custom forms like contact forms using layouts.  Orchard.DynamicForms.AntiSpam : Provides anti-spam elements to protect your content from malicious submissions.  Orchard.DynamicForms.Taxonomies : Adds a Taxonomy form element to the system.  Orchard.DynamicForms.Projections : Adds a Query form element to the system.  Orchard.DynamicForms.ImportExport : Enables the import and export of form submissions.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardemail",
            "text": "This module implements an email messaging channel that can be used for example to send\nemail notifications from rules.  This module is available from source code packages or  from the gallery .",
            "title": "Orchard.Email"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardfields",
            "text": "Orchard.Fields provides Input, Boolean, DateTime, Numeric, Link, Enumeration, and Media Picker fields\nthat can be used in custom content types.",
            "title": "Orchard.Fields"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardforms",
            "text": "This developer-targeted module provides shapes that are useful to dynamically build forms from code.  This module is used as a dependency by Projector and Rules.",
            "title": "Orchard.Forms"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardimportexport",
            "text": "The definition for content types, as well as the content itself, can be exported from one Orchard\ninstance, and imported into another using this module. The format that is used for the transfer\nis the same XML format that is used in recipes.  This module is available from source code packages or  from the gallery .",
            "title": "Orchard.ImportExport"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardimageeditor",
            "text": "Orchard.ImageEditor adds a client side image editor for Media Library",
            "title": "Orchard.ImageEditor"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardindexing-orchardsearch-and-lucene",
            "text": "Those three modules constitute the default full-text search infrastructure for Orchard.\nThe indexing module populates the index from content items. The Lucene module provides\nthe specific index implementation that indexing populates and that search queries.\nThe search index queries the index and formats results.  This module is available from source code packages or from the gallery:  search , indexing  and  Lucene .",
            "title": "Orchard.Indexing, Orchard.Search and Lucene"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardjobsqueue",
            "text": "This module provides a jobs queue to process jobs asynchronously.",
            "title": "Orchard.JobsQueue"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_7",
            "text": "Orchard.JobsQueue : Provides a jobs queue to process jobs asynchronously.  Orchard.JobsQueue.UI : Provides a UI to manage queued jobs.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardjquery-deprecated",
            "text": "Used as a dependency by other modules, this provides jQuery and jQueryUI scripts.  This module is deprecated as of Orchard v1.10, you should use Orchard.Resources now instead.",
            "title": "Orchard.jQuery (deprecated)"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardlayouts",
            "text": "Orchard.Layouts module in Orchard provides tools to create layouts. In Orchard v.1.9 by default the Page content type has a LayoutPart instead of the BodyPart.   A LayoutPart is a layout canvas which is empty by default. The Layouts module consists of Elements like Grids, Rows, Columns and Content Item elements, Media elements and Part elements like Title, Common and Tags part.  Layout elements can be dragged-n-dropped on the Layout canvas to form a layout for a Page or a master layout for other pages.  The Layouts module has a feature called Snippets which allows you to use a shape from within your current theme as an element. Quite handy auh.",
            "title": "Orchard.Layouts"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_8",
            "text": "Orchard.Layouts : Provides tools to create layouts.  Orchard.Layouts.Snippets : Enables support for adding elements based on shapes in the current theme.  Orchard.Layouts.Markdown : Adds a Markdown element to the system.  Orchard.Layouts.Projections : Adds a Projection element to the system.  Orchard.Layouts.Tokens : Provides an element token provider that enables elements to be rendered using a token and enables tokens to be used inside of various elements such as Html, Text and Paragraph.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardlists",
            "text": "This module provides a simple implementation for lists of content items, following\na folder/file metaphor where a content item can belong to only one list.",
            "title": "Orchard.Lists"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardlocalization",
            "text": "The localization module enables the localization of content items. This module provides a part that can be added to a content type to make it localizable. The items of the modified types can have several versions that differ by culture.",
            "title": "Orchard.Localization"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_9",
            "text": "Orchard.Localization : Enables localization of content items.  Orchard.Localization.DateTimeFormat : Enables PO-based translation of date/time formats and names of days and months.  Orchard.Localization.CultureSelector : Enables culture picker services, and also the admin culture picker.  Orchard.Localization.Transliteration : Enables transliteration of content.  Orchard.Localization.Transliteration.SlugGeneration : Enables transliteration of the autoroute slug when creating a piece of content.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardmedialibrary",
            "text": "Orchard.MediaLibrary Provides enhanced Media management tools",
            "title": "Orchard.MediaLibrary"
        },
        {
            "location": "/Documentation/Builtin-Features/#see-also_4",
            "text": "Adding and managing media content",
            "title": "See Also"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardmediaprocessing",
            "text": "Module for processing Media e.g. image resizing",
            "title": "Orchard.MediaProcessing"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardmessagebus",
            "text": "Provides communication APIs for server farms.",
            "title": "Orchard.MessageBus"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_10",
            "text": "Orchard.MessageBus : Reusable API abstractions to communicate in a server farm.  Orchard.MessageBus.DistributedSignals : Distribute signals cache invalidation calls.  Orchard.MessageBus.SqlServerServiceBroker : A message bus implementation using SQL Server Service Broker.  Orchard.MessageBus.DistributedShellRestart : Distribute shell restarts.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardmigrations",
            "text": "Data migration commands.",
            "title": "Orchard.Migrations"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_11",
            "text": "DatabaseUpdate : Commands for updating the database schema according to the definition of the \"Record\" classes in code.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardmodules",
            "text": "This is the module that provides the admin UI to enable and disable features.",
            "title": "Orchard.Modules"
        },
        {
            "location": "/Documentation/Builtin-Features/#see-also_5",
            "text": "Installing and upgrading modules",
            "title": "See Also"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardmultitenancy",
            "text": "Hosting multiple Orchard sites on separate applications means duplicating everything\nfor each site. The multi-tenancy module enables the hosting of multiple Orchard sites\nwithin a single IIS application, thus saving a lot of resources, and reducing maintenance\ncosts. Each site's data is strictly segregated from the others through a table prefix\nor complete database separation.",
            "title": "Orchard.MultiTenancy"
        },
        {
            "location": "/Documentation/Builtin-Features/#see-also_6",
            "text": "Setting up a multi-tenant Orchard site   This module is available from source code packages or  from the gallery .",
            "title": "See Also"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardoutputcache",
            "text": "Adds Output Caching functionality.",
            "title": "Orchard.OutputCache"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_12",
            "text": "Orchard.OutputCache : Adds output caching functionality.  Orchard.OutputCache.Database : Activates a provider that stores output cache data in the database.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardpackaging",
            "text": "This module handles the packaging of themes and modules.",
            "title": "Orchard.Packaging"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_13",
            "text": "Packaging commands: core services and command-line commands to package and install modules.  Gallery: integrates the  gallery  into Orchard.  Package Updates: enables module updates from the admin dashboard.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#see-also_7",
            "text": "Installing modules and themes from the gallery",
            "title": "See Also"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardpages",
            "text": "The Pages modules adds the Page content type, and associated commands.",
            "title": "Orchard.Pages"
        },
        {
            "location": "/Documentation/Builtin-Features/#see-also_8",
            "text": "Adding pages to your site",
            "title": "See Also"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardprojections",
            "text": "This tremendously useful module enables the creation of arbitrary queries over\nthe contents of the site, and then to present the results in flexible layouts,\nwithout leaving the admin dashboard.",
            "title": "Orchard.Projections"
        },
        {
            "location": "/Documentation/Builtin-Features/#see-also_9",
            "text": "Presentation video on Projections",
            "title": "See Also"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardpublishlater-off-by-default",
            "text": "The PublishLater part can be added to draftable content types and allows scheduled\npublication of contents.",
            "title": "Orchard.PublishLater (off by default)"
        },
        {
            "location": "/Documentation/Builtin-Features/#see-also_10",
            "text": "Saving, scheduling and publishing drafts",
            "title": "See Also"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardrecipes",
            "text": "Recipes are XML files that describe a set of operations on the contents and configuration\nof the site. Recipes are used at setup to describe predefined initial configurations\n(Orchard comes with default, blog and core recipes). They can also be included with\nmodules to specify additional operations that get executed after installation.\nFinally, the import/export feature uses this same recipe format to transfer contents.",
            "title": "Orchard.Recipes"
        },
        {
            "location": "/Documentation/Builtin-Features/#see-also_11",
            "text": "Making a web site recipe",
            "title": "See Also"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardredis",
            "text": "Provides Redis integration with Orchard.",
            "title": "Orchard.Redis"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_14",
            "text": "Orchard.Redis : Provides Redis integration with Orchard.  Orchard.Redis.MessageBus : A message bus implementation using Redis pub/sub.  Orchard.Redis.OutputCache : An output cache storage provider using Redis.  Orchard.Redis.Caching : Business data cache using Redis.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardresources",
            "text": "Provides a variety of third-party client-side libraries (stylesheets and scripts) used by other modules.  Added in Orchard v1.10, replaces the deprecated Orchard.jQuery module.",
            "title": "Orchard.Resources"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardroles",
            "text": "The roles module is adding the ability to assign roles to users. It's also providing a set of default roles for which other modules can define default permissions.",
            "title": "Orchard.Roles"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_15",
            "text": "Orchard.Roles : Standard user roles.  Orchard.Roles.Workflows : Provides a role based activities.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#see-also_12",
            "text": "Managing users and roles  Understanding permissions",
            "title": "See Also"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardrules-deprecated-off-by-default",
            "text": "Orchard events can be picked up by rules and trigger actions. For example, the publication\nevent on the comment content type can be picked-up by a user-defined rule and trigger\nthe action of sending an e-mail to the owner of the blog.\nThe Rules module provides simple admin UI to create and manage rules. This module is deprecated. \nWe recommend users switch to Orchard.Workflows Module.",
            "title": "Orchard.Rules (deprecated) (off by default)"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardscripting",
            "text": "In order to enable simple programmability of the application without requiring the\ndevelopment of a whole module, certain key areas of Orchard expose extensibility through\nscripting. For example, widget layer visibility is defined by rules that are written\nas simple script expressions. The scripting infrastructure is language-agnostic, and\nnew languages could be added by a module. Orchard comes with one implementation that\nis a simple expression language whose syntax is a subset of Ruby.",
            "title": "Orchard.Scripting"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_16",
            "text": "Scripting: the scripting infrastructure.  Lightweight Scripting: a simple expression language that is a subset of Ruby.  Scripting Rules: makes it possible for rules to be triggered by arbitrary scripted expressions.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardscriptingcsharp",
            "text": "Provides C# compiler services.",
            "title": "Orchard.Scripting.CSharp"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_17",
            "text": "Orchard.Scripting.CSharp : Provides C# compiler services.  Orchard.Scripting.CSharp.Validation : Provides a Script Validation part.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardscriptingdlr",
            "text": "This module, built on Orchard.Scripting, enables the possibility to use DLR languages\nsuch as Ruby and Python as scripting languages.",
            "title": "Orchard.Scripting.DLR"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardsetup-off-after-setup",
            "text": "This module is always disabled except before the application has been setup. It is responsible\nfor implementing the setup mechanism. It contains the original recipes in its Recipes subfolder.",
            "title": "Orchard.Setup (off after setup)"
        },
        {
            "location": "/Documentation/Builtin-Features/#see-also_13",
            "text": "Installing Orchard  Making a web site recipe",
            "title": "See Also"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardsearch",
            "text": "Standard interface to Orchard's built-in search.",
            "title": "Orchard.Search"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_18",
            "text": "Orchard.Search : Standard interface to Orchard's built-in search.  Orchard.Search.Content : Provides a Content Search tab in Admin.  Orchard.Search.ContentPicker : Provides a search tab in Content Picker.  Orchard.Search.MediaLibrary : Provides search menu item in the Media Library explorer.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardsecuresocketslayer",
            "text": "This module will ensure SSL is used when accessing specific parts of the website like the dashboard, authentication pages or custom pages.",
            "title": "Orchard.SecureSocketsLayer"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardtags",
            "text": "Tags are a very simple way to categorize contents. It is a flat and easily extensible structure.",
            "title": "Orchard.Tags"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_19",
            "text": "Orchard.Tags : The tags module is providing basic tagging for arbitrary content types.  Orchard.Tags.Feeds : Adds tags to the RSS feeds.   Orchard.Tags.TagCloud : Adds a tag cloud widget.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#see-also_14",
            "text": "Organizing content with tags",
            "title": "See Also"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardtasklease",
            "text": "In web farm environments, it's often useful to send messages across all servers in the farm. This\nmodule implements a way for code to communicate tasks to the whole server farm.  This module is available from source code packages or  from the gallery .",
            "title": "Orchard.TaskLease"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardtaxonomies",
            "text": "The taxonomy module is providing custom categorization of arbitrary content types. The taxonomy module provides a taxonomy field which can be attached to any Content Type.",
            "title": "Orchard.Taxonomies"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardthemes",
            "text": "This module provides the infrastructure for easy customization of the look and feel of the site\nthrough the definition of themes, which are a set of scripts, stylesheets and template overrides.",
            "title": "Orchard.Themes"
        },
        {
            "location": "/Documentation/Builtin-Features/#see-also_15",
            "text": "Installing themes  Previewing and applying a theme  Customizing the default theme",
            "title": "See Also"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardtemplates",
            "text": "Provides a Template type that can be used to store template code and used as a shape.",
            "title": "Orchard.Templates"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_20",
            "text": "Orchard.Templates : Provides a Template type that represents a shape template, stored as a content item.  Orchard.Templates.Razor : Extends Templates with Razor templates.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardtokens-off-by-default",
            "text": "Provides a system for performing string replacements with common site values. Tokens are contextual environment variables that are used in dynamic expressions. For example,\nthe Autoroute feature makes it possible to define URL patterns for content items of a given\ntype. Those patterns rely on tokens that will be dynamically evaluated in a specific context.\nThe \"{Content.Date.Format:yyyy}/{Content.Slug}\" would be evaluated for the specific content item\nit applies to and would be resolved to something like \"2012/the-title\".",
            "title": "Orchard.Tokens (off by default)"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_21",
            "text": "Orchard.Tokens : Provides a system for performing string replacements with common site values.  Orchard.Tokens.Feeds : Provides a content part to customize RSS fields based on tokens.  Orchard.Tokens.HtmlFilter : Evaluates tokens in a body.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardusers",
            "text": "This is the module that implements the default user management in Orchard.",
            "title": "Orchard.Users"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_22",
            "text": "Orchard.Users : default user management in Orchard.  Orchard.Users.Workflows : Provides User based Workflow Activites.  Orchard.Users.PasswordEditor : Adds the ability for admins to edit users' passwords.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#see-also_16",
            "text": "Managing users and roles",
            "title": "See Also"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardwarmup-off-by-default",
            "text": "Cold starts in ASP.NET applications can be slow, and shared hosting environments create the\nconditions for frequent such cold starts. In order to mitigate this situation, the warmup\nfeature can prepare static versions of the most common pages of the site so those can be served\nas soon as possible even if the application is not entirely done warming up.",
            "title": "Orchard.Warmup (off by default)"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardwidgets",
            "text": "Widgets are reusable pieces of UI that can be positioned on any page of the site. Which widgets\nget displayed on what pages is determined by layer rules.",
            "title": "Orchard.Widgets"
        },
        {
            "location": "/Documentation/Builtin-Features/#features_23",
            "text": "Widgets: the core widget feature and admin UI.  Page Layer Hinting: adds a message when publishing a new page that prompts the user to create a new layer for that page.  Widget Control Wrapper: Adds an edit button on the front-end for easier modification.",
            "title": "Features"
        },
        {
            "location": "/Documentation/Builtin-Features/#see-also_17",
            "text": "Managing widgets  Getting Started with Modules course  Writing a widget",
            "title": "See Also"
        },
        {
            "location": "/Documentation/Builtin-Features/#orchardworkflows",
            "text": "Orchard.Workflows module provides tools to create custom workflows.",
            "title": "Orchard.Workflows"
        },
        {
            "location": "/Documentation/Builtin-Features/#syscache",
            "text": "Enables database caching using the SysCache provider.",
            "title": "SysCache"
        },
        {
            "location": "/Documentation/Builtin-Features/#tinymce",
            "text": "Used as a dependency by other features, this provides the scripts necessary to implement the TinyMCE WYSYWYG HTML editor.",
            "title": "TinyMCE"
        },
        {
            "location": "/Documentation/Builtin-Features/#upgrade-upgradeto16-upgradeto15-upgradeto14-off-by-default",
            "text": "Provides actions for upgrading Orchard instances.  Orchard 1.4 brought breaking changes in the way URLs and titles are managed. 1.3 and previous versions\nwere using the Route part to handle a static URL and title. 1.4 deprecated this in favor of the new\nalias, autoroute and title part. The upgrade module contains special scripts that upgrade old content\nto the new way of doing things.\nOrchard 1.4 also introduced new field types (see Orchard.Fields), and because some users may have\nused equivalent Contrib.* fields from gallery modules, the upgrade module provides an upgrade path\nto the new fields.",
            "title": "Upgrade / UpgradeTo16 /UpgradeTo15 / UpgradeTo14 (off by default)"
        },
        {
            "location": "/Documentation/Feature-roadmap/",
            "text": "In the near term, we'll be focused on servicing the V1 release and planning for the next version.\nThe feature roadmap is subject to change as the project evolves, and we welcome your input.\n\n\nCurrent Priorities\n\n\nPriorities for Orchard 1.11:\n\n\nThis release is expected for Q4 2016\n\n\nSuggested features\n\n\nOn-track\n\n\n\n\nDeployment feature (OneStop will integrate this feature)\n\n\nNew admin theme (\nSzymon\n owns this contribution) \n\n\nCustomizable dashboard\n\n\nAccessibility\n\n\nGlimpse (\nChris\n owns this contribution) \n\n\nImproved Workflow module\n\n\nError/Exception branches support\n\n\nLoop activities\n\n\nPiotr (\npszmyd\n) owns this contribution\n\n\nNew base theme (\nDaniel\n and \nRyan\n own this contribution) \n\n\nRemove Cloud Services as a supported target (\nDaniel\n owns this contribution)\n\n\n\n\nLooking for owners\n\n\n\n\nNew front facing website\n\n\nOwin identity providers\n\n\nOAuth, AAD ...\n\n\nJavascript integration\n\n\nRules engine\n\n\nScript activity\n\n\nJint\n\n\n\n\nContent tree\n\n\n\n\n\n\nREST APIs (\ndesign notes\n)\n\n\n\n\nRefactor output cache module as an Owin middleware\n\n\n\n\nCurrently Implemented (Partially or in Full)\n\n\n\n\nBasic admin panel and login\n\n\nCMS page creation and management\n\n\nContent zones within pages\n\n\nContent - Different content types/metadata, viewers and editors for content \n\n\nContent editing and publication (drafts, scheduling, preview)\n\n\nExtensibility - Initial content type and composability infrastructure (based on MVC areas)\n\n\nMedia management (support for any media type, extensibility, thumbnails, online image editor)\n\n\nUsers, roles, membership and profile data (Users/Roles/Permissions, Mgmt)\n\n\nXML-RPC (Live Writer, MetaWebBlog) support for blogs\n\n\nBasic blog (create and manage blogs and posts, RSS/Atom, draft/publish, archives)\n\n\nComments - Associate comments with content types, manage comments, spam protection\n\n\nTags - Associate tags with content types, browse by tag\n\n\nSettings - App-level, extension-level settings definition and UI/management\n\n\nThemes - Theming model, UI to install/remove themes, preview themes\n\n\nSetup\n\n\nSimple navigation\n\n\nMulti-tenancy\n\n\nAzure support (Blob Storage, Cache, Database Cache)\n\n\nCommand-line tooling\n\n\nEvent model (a.k.a. plugins)\n\n\nApp Localization (of admin panel, modules, themes)\n\n\nContent Localization (multi-lingual sites)\n\n\nSearch and Indexing (with search API)\n\n\nModule extensibility API and packaging\n\n\nScaffolding of Modules (cmd-line)\n\n\nCreation of arbitrary content types and items - fields, parts\n\n\nDefine content types, parts, and fields using the admin panel or code\n\n\nAdd fields to content types using the admin panel or code\n\n\nAssociate content parts to types using the admin panel or code\n\n\nAdd fields or parts to existing content types using the admin panel or code\n\n\nCommand-line support (bin/orchard.exe)\n\n\nEnabling features of modules\n\n\nData migrations on module activation/upgrade\n\n\nReporting (event logs)\n\n\nSearch (based on Lucene)\n\n\nModule packaging\n\n\nDynamic compilation of modules\n\n\nTheme re-foundation: Razor integration, Page Object Model, naming conventions and helpers\n\n\nScript and stylesheet registration\n\n\nTheme packaging\n\n\nContent item lists\n\n\nMedium trust\n\n\nEmail notifications\n\n\nWidgets - Admin UI and management for widgets, widget groups, mapping to zones\n\n\nMarketplace - Ability to browse/install extensions from online gallery\n\n\nEditor-integrated media picker\n\n\nSetup recipes\n\n\nModule Recipes\n\n\nImport/Export\n\n\nTokens\n\n\nRules\n\n\nForms API\n\n\nAutoroute\n\n\nProjections\n\n\nCore Field Types\n\n\nAdmin placement\n\n\nSpam Protection\n\n\nNHibernate 3 and 2nd level caching\n\n\nASP.NET MVC 5 / WebAPI\n\n\nMySQL provider\n\n\nWorkflows\n\n\nOutput cache\n\n\nTokens\n\n\nCustom forms\n\n\nContent permissions\n\n\nSSL\n\n\n.NET 4.5 support\n\n\nLists\n\n\nTimezones and Calendars\n\n\nJobs Queue\n\n\nTemplates management \n\n\nBusiness data caching \n\n\nConfigurable dashboard\n\n\n\n\nAreas of Focus for Future Iterations (Backlog, Not in Priority Order)\n\n\n\n\nREST APIs (\ndesign notes\n)\n\n\nDeployment module (\ndesign notes\n)\n\n\nImproved content navigation and filtering\n\n\nSEO - Semantic URLs, metas/keywords, Web standards, sitemap\n\n\nAdmin - UI improvements, dashboard, notifications/email\n\n\nImproved admin theme (Based on Bootstrap)\n\n\nProfiles - User profiles, avatars, reputation system, using the dynamic forms module\n\n\nThemes - Additional themes improvements (in-browser editing, etc)\n\n\nPerformance - Caching, optimization, script combining/minification\n\n\nAnalytics - Reporting, site-use statistics\n\n\nMobile - Support for management, moderation, publishing from mobile device\n\n\nOther Domain-specific packages - Wiki, Ads, etc\n\n\nForums \n\n\nCommerce",
            "title": "Feature roadmap"
        },
        {
            "location": "/Documentation/Feature-roadmap/#current-priorities",
            "text": "",
            "title": "Current Priorities"
        },
        {
            "location": "/Documentation/Feature-roadmap/#priorities-for-orchard-111",
            "text": "This release is expected for Q4 2016",
            "title": "Priorities for Orchard 1.11:"
        },
        {
            "location": "/Documentation/Feature-roadmap/#suggested-features",
            "text": "",
            "title": "Suggested features"
        },
        {
            "location": "/Documentation/Feature-roadmap/#on-track",
            "text": "Deployment feature (OneStop will integrate this feature)  New admin theme ( Szymon  owns this contribution)   Customizable dashboard  Accessibility  Glimpse ( Chris  owns this contribution)   Improved Workflow module  Error/Exception branches support  Loop activities  Piotr ( pszmyd ) owns this contribution  New base theme ( Daniel  and  Ryan  own this contribution)   Remove Cloud Services as a supported target ( Daniel  owns this contribution)",
            "title": "On-track"
        },
        {
            "location": "/Documentation/Feature-roadmap/#looking-for-owners",
            "text": "New front facing website  Owin identity providers  OAuth, AAD ...  Javascript integration  Rules engine  Script activity  Jint   Content tree    REST APIs ( design notes )   Refactor output cache module as an Owin middleware",
            "title": "Looking for owners"
        },
        {
            "location": "/Documentation/Feature-roadmap/#currently-implemented-partially-or-in-full",
            "text": "Basic admin panel and login  CMS page creation and management  Content zones within pages  Content - Different content types/metadata, viewers and editors for content   Content editing and publication (drafts, scheduling, preview)  Extensibility - Initial content type and composability infrastructure (based on MVC areas)  Media management (support for any media type, extensibility, thumbnails, online image editor)  Users, roles, membership and profile data (Users/Roles/Permissions, Mgmt)  XML-RPC (Live Writer, MetaWebBlog) support for blogs  Basic blog (create and manage blogs and posts, RSS/Atom, draft/publish, archives)  Comments - Associate comments with content types, manage comments, spam protection  Tags - Associate tags with content types, browse by tag  Settings - App-level, extension-level settings definition and UI/management  Themes - Theming model, UI to install/remove themes, preview themes  Setup  Simple navigation  Multi-tenancy  Azure support (Blob Storage, Cache, Database Cache)  Command-line tooling  Event model (a.k.a. plugins)  App Localization (of admin panel, modules, themes)  Content Localization (multi-lingual sites)  Search and Indexing (with search API)  Module extensibility API and packaging  Scaffolding of Modules (cmd-line)  Creation of arbitrary content types and items - fields, parts  Define content types, parts, and fields using the admin panel or code  Add fields to content types using the admin panel or code  Associate content parts to types using the admin panel or code  Add fields or parts to existing content types using the admin panel or code  Command-line support (bin/orchard.exe)  Enabling features of modules  Data migrations on module activation/upgrade  Reporting (event logs)  Search (based on Lucene)  Module packaging  Dynamic compilation of modules  Theme re-foundation: Razor integration, Page Object Model, naming conventions and helpers  Script and stylesheet registration  Theme packaging  Content item lists  Medium trust  Email notifications  Widgets - Admin UI and management for widgets, widget groups, mapping to zones  Marketplace - Ability to browse/install extensions from online gallery  Editor-integrated media picker  Setup recipes  Module Recipes  Import/Export  Tokens  Rules  Forms API  Autoroute  Projections  Core Field Types  Admin placement  Spam Protection  NHibernate 3 and 2nd level caching  ASP.NET MVC 5 / WebAPI  MySQL provider  Workflows  Output cache  Tokens  Custom forms  Content permissions  SSL  .NET 4.5 support  Lists  Timezones and Calendars  Jobs Queue  Templates management   Business data caching   Configurable dashboard",
            "title": "Currently Implemented (Partially or in Full)"
        },
        {
            "location": "/Documentation/Feature-roadmap/#areas-of-focus-for-future-iterations-backlog-not-in-priority-order",
            "text": "REST APIs ( design notes )  Deployment module ( design notes )  Improved content navigation and filtering  SEO - Semantic URLs, metas/keywords, Web standards, sitemap  Admin - UI improvements, dashboard, notifications/email  Improved admin theme (Based on Bootstrap)  Profiles - User profiles, avatars, reputation system, using the dynamic forms module  Themes - Additional themes improvements (in-browser editing, etc)  Performance - Caching, optimization, script combining/minification  Analytics - Reporting, site-use statistics  Mobile - Support for management, moderation, publishing from mobile device  Other Domain-specific packages - Wiki, Ads, etc  Forums   Commerce",
            "title": "Areas of Focus for Future Iterations (Backlog, Not in Priority Order)"
        },
        {
            "location": "/Documentation/Frequently-asked-questions/",
            "text": "What is Orchard?\n\n\nOrchard is a free, open source, community-focused project aimed at delivering applications and reusable components on the ASP.NET platform. It will create shared components for building ASP.NET applications and extensions, and specific applications that leverage these components to meet the needs of end-users, scripters, and developers. Additionally, it will provide help for existing .NET applications to be successful in achieving their goals. Orchard is currently licensed under a New BSD license, which is approved by the OSI. The intended output of the Orchard project is three-fold:\n\n\n\n\nIndividual .NET-based applications that appeal to end-users, scripters, and developers \n\n\nA set of re-usable components that makes it easy to build such applications \n\n\nPartnerships with the .NET community to help define these applications and extensions\n\n\n\n\nIn the near term, the Orchard project is focused on delivering a .NET-based CMS application that will allow users to rapidly create content-driven Websites, and an underlying framework that will allow developers and customizers to provide additional functionality through extensions and themes. \n\n\nWhat is the Orchard CMS application? How does it compare with Microsoft SharePoint?\n\n\nOrchard CMS is an open source project which aims to provide a simple solution for small web agencies who want to quickly create Internet-facing Web sites. For corporations wanting a fully-featured, Microsoft-supported, enterprise-level CMS solution out-of-the-box, including Workflow, Digital Asset Management, Advanced Search, Web Analytics, and Social Networking, Microsoft SharePoint\u2122 is a more natural choice. SharePoint also provides capabilities beyond CMS including Team Collaboration, Document and Records Management, Business Process Integration and Business Intelligence. \n\n\nMicrosoft SharePoint is the Business Collaboration Platform for the Enterprise and the Web. SharePoint today runs many large Internet-facing websites that require the robust CMS, Search, Workflow and Analytics capabilities that SharePoint provides. Examples include Kraft, Viacom, Hawaiian Airlines, US Government, and United States Marine Corp. \n\n\nWhat is Microsoft's involvement in Orchard? Is Orchard a Microsoft-supported project?\n\n\nOrchard is a community-focused open source project delivered through the Outercurve Foundation. Like any open source project, we intend to expand the project through community contributions and enlist new members from many different organizations. Although Microsoft is sponsoring this project by providing full-time development resources to the effort, the Orchard CMS is not officially supported through Microsoft. Orchard is supported primarily by the project team through community forums and email. If you are looking for a Microsoft-supported CMS product, Microsoft SharePoint is a better choice. \n\n\nWhat is the status of the Orchard project? What is available to use today?\n\n\nThe Orchard project is published on our \nOrchard CMS GitHub repository\n and Microsoft Web Application Gallery installable by the Web Platform Installer. \n\n\nThis is a production-ready release for powering live sites. It is the result of many years of development effort and contribution from the Orchard Team and our active community. \n\n\nOrchard also includes a flexible extensibility model to customize the behavior of Orchard using modules and themes, and a gallery website (and related open source project) for uploading and sharing your custom extensions with others.\n\n\nWho is the audience for the Orchard effort? Are you focused on developers, users, or both?\n\n\nOrchard seeks to appeal to a variety of audiences, from end-users who want to quickly build a site using only an application's interface, to designers, scripters and developers who want to extend the application though markup or code customizations in the form of themes or modules. It also aims to appeal to Web development and consulting shops who build and customize sites for small-to-medium sized businesses, starting with an open source CMS. At this early stage of the project, we are primarily engaging with a .NET developer audience, as Orchard is firmly rooted in ASP.NET MVC and other .NET Framework technologies.\n\n\nWill Orchard applications run well in shared hosting environments?\n\n\nOrchard is tailored for today's shared hosting environments, where users potentially have less control over what software is running on the server. As an open source solution, Orchard will retain the flexibility to run on a number of different technologies, making it suitable for a wide range of hosters running different platforms or database servers. In dedicated hosting environments where it is possible to run the entire Windows, .NET + IIS + SQL Server stack, SharePoint offers an optimized solution that takes advantage of the unique strengths of this combined platform. \n\n\nHow does Orchard compare with DotNetNuke\u00ae? What is Microsoft's relationship with existing partners?\n\n\nDNN is a mature and successful .NET-based project, a key partner for Microsoft, and a vital contributor to the .NET open source ecosystem. Our hope is that new technology investments made by Orchard will serve existing applications like DNN in the long run, and ultimately provide infrastructure and components that our partners can leverage to enrich their own offerings. \n\n\nOrchard aims to help our .NET partners, not to compete directly with them. Orchard is already working with several partners in the .NET open source space, including DNN, to identify opportunities to work together for mutual benefit. In addition to providing shared infrastructure that can be leveraged within existing apps, we will continually seek opportunities for the Orchard team to contribute to existing projects and help our partners be successful in achieving their own goals. Orchard's extensibility model also presents partners with another vehicle for delivering their solutions and expanding their audience. \n\n\nWhat about Oxite? Aren't they building a CMS application too? How does Oxite relate to the Orchard effort?\n\n\nOxite started out as a blogging engine to support the Mix '09 conference website, and has since evolved into a mature open source project in its own right. Oxite recently began introducing general extensibility support (modules, plug-ins) and some lightweight CMS content-editing features, and Orchard began partnering with them to share scenarios and code. Ultimately we concluded our efforts were better served by working together, and two of the principal developers on Oxite, Erik Porter and Nathan Heskew, have officially joined the Orchard team. Together we will take the lessons learned from early Orchard prototyping and Oxite development, borrowing code where appropriate from those efforts, to deliver a fundamentally new architecture that is the Orchard CMS. We have deliberately chosen to start development anew, with the guidance and contribution from the community, rather than build on the existing code, in order to involve the community up-front as well as create a sustainable architecture that can meet the ambitious Orchard project goals.",
            "title": "Frequently Asked Questions"
        },
        {
            "location": "/Documentation/Frequently-asked-questions/#what-is-orchard",
            "text": "Orchard is a free, open source, community-focused project aimed at delivering applications and reusable components on the ASP.NET platform. It will create shared components for building ASP.NET applications and extensions, and specific applications that leverage these components to meet the needs of end-users, scripters, and developers. Additionally, it will provide help for existing .NET applications to be successful in achieving their goals. Orchard is currently licensed under a New BSD license, which is approved by the OSI. The intended output of the Orchard project is three-fold:   Individual .NET-based applications that appeal to end-users, scripters, and developers   A set of re-usable components that makes it easy to build such applications   Partnerships with the .NET community to help define these applications and extensions   In the near term, the Orchard project is focused on delivering a .NET-based CMS application that will allow users to rapidly create content-driven Websites, and an underlying framework that will allow developers and customizers to provide additional functionality through extensions and themes.",
            "title": "What is Orchard?"
        },
        {
            "location": "/Documentation/Frequently-asked-questions/#what-is-the-orchard-cms-application-how-does-it-compare-with-microsoft-sharepoint",
            "text": "Orchard CMS is an open source project which aims to provide a simple solution for small web agencies who want to quickly create Internet-facing Web sites. For corporations wanting a fully-featured, Microsoft-supported, enterprise-level CMS solution out-of-the-box, including Workflow, Digital Asset Management, Advanced Search, Web Analytics, and Social Networking, Microsoft SharePoint\u2122 is a more natural choice. SharePoint also provides capabilities beyond CMS including Team Collaboration, Document and Records Management, Business Process Integration and Business Intelligence.   Microsoft SharePoint is the Business Collaboration Platform for the Enterprise and the Web. SharePoint today runs many large Internet-facing websites that require the robust CMS, Search, Workflow and Analytics capabilities that SharePoint provides. Examples include Kraft, Viacom, Hawaiian Airlines, US Government, and United States Marine Corp.",
            "title": "What is the Orchard CMS application? How does it compare with Microsoft SharePoint?"
        },
        {
            "location": "/Documentation/Frequently-asked-questions/#what-is-microsofts-involvement-in-orchard-is-orchard-a-microsoft-supported-project",
            "text": "Orchard is a community-focused open source project delivered through the Outercurve Foundation. Like any open source project, we intend to expand the project through community contributions and enlist new members from many different organizations. Although Microsoft is sponsoring this project by providing full-time development resources to the effort, the Orchard CMS is not officially supported through Microsoft. Orchard is supported primarily by the project team through community forums and email. If you are looking for a Microsoft-supported CMS product, Microsoft SharePoint is a better choice.",
            "title": "What is Microsoft's involvement in Orchard? Is Orchard a Microsoft-supported project?"
        },
        {
            "location": "/Documentation/Frequently-asked-questions/#what-is-the-status-of-the-orchard-project-what-is-available-to-use-today",
            "text": "The Orchard project is published on our  Orchard CMS GitHub repository  and Microsoft Web Application Gallery installable by the Web Platform Installer.   This is a production-ready release for powering live sites. It is the result of many years of development effort and contribution from the Orchard Team and our active community.   Orchard also includes a flexible extensibility model to customize the behavior of Orchard using modules and themes, and a gallery website (and related open source project) for uploading and sharing your custom extensions with others.",
            "title": "What is the status of the Orchard project? What is available to use today?"
        },
        {
            "location": "/Documentation/Frequently-asked-questions/#who-is-the-audience-for-the-orchard-effort-are-you-focused-on-developers-users-or-both",
            "text": "Orchard seeks to appeal to a variety of audiences, from end-users who want to quickly build a site using only an application's interface, to designers, scripters and developers who want to extend the application though markup or code customizations in the form of themes or modules. It also aims to appeal to Web development and consulting shops who build and customize sites for small-to-medium sized businesses, starting with an open source CMS. At this early stage of the project, we are primarily engaging with a .NET developer audience, as Orchard is firmly rooted in ASP.NET MVC and other .NET Framework technologies.",
            "title": "Who is the audience for the Orchard effort? Are you focused on developers, users, or both?"
        },
        {
            "location": "/Documentation/Frequently-asked-questions/#will-orchard-applications-run-well-in-shared-hosting-environments",
            "text": "Orchard is tailored for today's shared hosting environments, where users potentially have less control over what software is running on the server. As an open source solution, Orchard will retain the flexibility to run on a number of different technologies, making it suitable for a wide range of hosters running different platforms or database servers. In dedicated hosting environments where it is possible to run the entire Windows, .NET + IIS + SQL Server stack, SharePoint offers an optimized solution that takes advantage of the unique strengths of this combined platform.",
            "title": "Will Orchard applications run well in shared hosting environments?"
        },
        {
            "location": "/Documentation/Frequently-asked-questions/#how-does-orchard-compare-with-dotnetnuke-what-is-microsofts-relationship-with-existing-partners",
            "text": "DNN is a mature and successful .NET-based project, a key partner for Microsoft, and a vital contributor to the .NET open source ecosystem. Our hope is that new technology investments made by Orchard will serve existing applications like DNN in the long run, and ultimately provide infrastructure and components that our partners can leverage to enrich their own offerings.   Orchard aims to help our .NET partners, not to compete directly with them. Orchard is already working with several partners in the .NET open source space, including DNN, to identify opportunities to work together for mutual benefit. In addition to providing shared infrastructure that can be leveraged within existing apps, we will continually seek opportunities for the Orchard team to contribute to existing projects and help our partners be successful in achieving their own goals. Orchard's extensibility model also presents partners with another vehicle for delivering their solutions and expanding their audience.",
            "title": "How does Orchard compare with DotNetNuke&reg;? What is Microsoft's relationship with existing partners?"
        },
        {
            "location": "/Documentation/Frequently-asked-questions/#what-about-oxite-arent-they-building-a-cms-application-too-how-does-oxite-relate-to-the-orchard-effort",
            "text": "Oxite started out as a blogging engine to support the Mix '09 conference website, and has since evolved into a mature open source project in its own right. Oxite recently began introducing general extensibility support (modules, plug-ins) and some lightweight CMS content-editing features, and Orchard began partnering with them to share scenarios and code. Ultimately we concluded our efforts were better served by working together, and two of the principal developers on Oxite, Erik Porter and Nathan Heskew, have officially joined the Orchard team. Together we will take the lessons learned from early Orchard prototyping and Oxite development, borrowing code where appropriate from those efforts, to deliver a fundamentally new architecture that is the Orchard CMS. We have deliberately chosen to start development anew, with the guidance and contribution from the community, rather than build on the existing code, in order to involve the community up-front as well as create a sustainable architecture that can meet the ambitious Orchard project goals.",
            "title": "What about Oxite? Aren't they building a CMS application too? How does Oxite relate to the Orchard effort?"
        },
        {
            "location": "/Documentation/Orchard-TV/",
            "text": "Introduction Training Videos\n\n\nCommercial\n\n\nPluralsight has an introductory training course available here:\n\nhttp://pluralsight.com/training/courses/tableofcontents?courseName=orchard-fundamentals\n\n\nThe first part of the Pluralsight video course is free, and subsequent episodes require a subscription.\n\n\nFree\n\n\nDojo Course\n\n\nCourse for beginners interested in developing on Orchard, starting with how to use Orchard from the UI.\n\n\n\n\n\nOrchard CMS for Absolute Beginners\n\n\nOrchard CMS for Absolute Beginners\n by Abhishek Luv\n\n\nOrchard CMS Tutorial : Recipes in Orchard CMS\n\n\nOrchard CMS Tutorial : Recipes in Orchard CMS\n by Abhishek Luv\n\n\n\n\n\nOrchard CMS Theme Development For Beginners\n\n\nOrchard CMS Theme Development for Beginners\n by Abhishek Luv\n\n\n\n\n\nOrchard CMS Tutorial : Workflows in Orchard CMS\n\n\nOrchard CMS Tutorial : Workflows in Orchard CMS\n by Abhishek Luv\n\n\n\n\n\nIntroduction to Orchard 1.5 by S\u00e9bastien Ros\n\n\n\n\n\nA 4-part series by Brent Arias:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to Orchard 1.4 by Bertrand Le Roy:\n\n\n\n\n\nHands-on Labs\n\n\nKris van der Mast made his hands-on lab material available to anyone for free:\n\nhttp://www.krisvandermast.com/downloads.html\n\n\nConferences\n\n\nCodeStock 11\n\n\nGrow Your Website using Orchard\n by Jason Gaylord\n\n\nTechEd 11\n\n\nOrchard 1.1: Build,Customize,Extend,Ship\n by S\u00e9bastien Ros\n\n\nTechDays 11\n\n\nTechDays 11 Basel - Develop and maintain CMS solutions using WebMatrix and Orchard\n by Ken Casada\n\n\nMix11\n\n\nDeconstructing Orchard: Build, Customize, Extend, Ship\n by Brad Millington\n\n\nThemes\n\n\nGetting Started With Custom Theme Development\n\n\n\n\n\nDeployment\n\n\nDeploying an Orchard site using WebMatrix\n\n\n\n\n\nMigrating from SqlCe to SQL Express\n\n\n\n\n\nTaxonomies\n\n\nGetting Started With Taxonomies\n\n\n\n\n\nProjector\n\n\nLive demo of Projector by S\u00e9bastien Ros\n\n\n\n\n\nDevelopment\n\n\nSetting up a source code environment\n\n\n\n\n\nLocalization\n\n\nBuilding a Multilanguage Website Structure",
            "title": "Tutorial Videos"
        },
        {
            "location": "/Documentation/Orchard-TV/#introduction-training-videos",
            "text": "",
            "title": "Introduction Training Videos"
        },
        {
            "location": "/Documentation/Orchard-TV/#commercial",
            "text": "Pluralsight has an introductory training course available here: http://pluralsight.com/training/courses/tableofcontents?courseName=orchard-fundamentals  The first part of the Pluralsight video course is free, and subsequent episodes require a subscription.",
            "title": "Commercial"
        },
        {
            "location": "/Documentation/Orchard-TV/#free",
            "text": "",
            "title": "Free"
        },
        {
            "location": "/Documentation/Orchard-TV/#dojo-course",
            "text": "Course for beginners interested in developing on Orchard, starting with how to use Orchard from the UI.",
            "title": "Dojo Course"
        },
        {
            "location": "/Documentation/Orchard-TV/#orchard-cms-for-absolute-beginners",
            "text": "Orchard CMS for Absolute Beginners  by Abhishek Luv",
            "title": "Orchard CMS for Absolute Beginners"
        },
        {
            "location": "/Documentation/Orchard-TV/#orchard-cms-tutorial-recipes-in-orchard-cms",
            "text": "Orchard CMS Tutorial : Recipes in Orchard CMS  by Abhishek Luv",
            "title": "Orchard CMS Tutorial : Recipes in Orchard CMS"
        },
        {
            "location": "/Documentation/Orchard-TV/#orchard-cms-theme-development-for-beginners",
            "text": "Orchard CMS Theme Development for Beginners  by Abhishek Luv",
            "title": "Orchard CMS Theme Development For Beginners"
        },
        {
            "location": "/Documentation/Orchard-TV/#orchard-cms-tutorial-workflows-in-orchard-cms",
            "text": "Orchard CMS Tutorial : Workflows in Orchard CMS  by Abhishek Luv",
            "title": "Orchard CMS Tutorial : Workflows in Orchard CMS"
        },
        {
            "location": "/Documentation/Orchard-TV/#introduction-to-orchard-15-by-sebastien-ros",
            "text": "",
            "title": "Introduction to Orchard 1.5 by S\u00e9bastien Ros"
        },
        {
            "location": "/Documentation/Orchard-TV/#a-4-part-series-by-brent-arias",
            "text": "",
            "title": "A 4-part series by Brent Arias:"
        },
        {
            "location": "/Documentation/Orchard-TV/#introduction-to-orchard-14-by-bertrand-le-roy",
            "text": "",
            "title": "Introduction to Orchard 1.4 by Bertrand Le Roy:"
        },
        {
            "location": "/Documentation/Orchard-TV/#hands-on-labs",
            "text": "Kris van der Mast made his hands-on lab material available to anyone for free: http://www.krisvandermast.com/downloads.html",
            "title": "Hands-on Labs"
        },
        {
            "location": "/Documentation/Orchard-TV/#conferences",
            "text": "",
            "title": "Conferences"
        },
        {
            "location": "/Documentation/Orchard-TV/#codestock-11",
            "text": "Grow Your Website using Orchard  by Jason Gaylord",
            "title": "CodeStock 11"
        },
        {
            "location": "/Documentation/Orchard-TV/#teched-11",
            "text": "Orchard 1.1: Build,Customize,Extend,Ship  by S\u00e9bastien Ros",
            "title": "TechEd 11"
        },
        {
            "location": "/Documentation/Orchard-TV/#techdays-11",
            "text": "TechDays 11 Basel - Develop and maintain CMS solutions using WebMatrix and Orchard  by Ken Casada",
            "title": "TechDays 11"
        },
        {
            "location": "/Documentation/Orchard-TV/#mix11",
            "text": "Deconstructing Orchard: Build, Customize, Extend, Ship  by Brad Millington",
            "title": "Mix11"
        },
        {
            "location": "/Documentation/Orchard-TV/#themes",
            "text": "",
            "title": "Themes"
        },
        {
            "location": "/Documentation/Orchard-TV/#getting-started-with-custom-theme-development",
            "text": "",
            "title": "Getting Started With Custom Theme Development"
        },
        {
            "location": "/Documentation/Orchard-TV/#deployment",
            "text": "",
            "title": "Deployment"
        },
        {
            "location": "/Documentation/Orchard-TV/#deploying-an-orchard-site-using-webmatrix",
            "text": "",
            "title": "Deploying an Orchard site using WebMatrix"
        },
        {
            "location": "/Documentation/Orchard-TV/#migrating-from-sqlce-to-sql-express",
            "text": "",
            "title": "Migrating from SqlCe to SQL Express"
        },
        {
            "location": "/Documentation/Orchard-TV/#taxonomies",
            "text": "",
            "title": "Taxonomies"
        },
        {
            "location": "/Documentation/Orchard-TV/#getting-started-with-taxonomies",
            "text": "",
            "title": "Getting Started With Taxonomies"
        },
        {
            "location": "/Documentation/Orchard-TV/#projector",
            "text": "",
            "title": "Projector"
        },
        {
            "location": "/Documentation/Orchard-TV/#live-demo-of-projector-by-sebastien-ros",
            "text": "",
            "title": "Live demo of Projector by S\u00e9bastien Ros"
        },
        {
            "location": "/Documentation/Orchard-TV/#development",
            "text": "",
            "title": "Development"
        },
        {
            "location": "/Documentation/Orchard-TV/#setting-up-a-source-code-environment",
            "text": "",
            "title": "Setting up a source code environment"
        },
        {
            "location": "/Documentation/Orchard-TV/#localization",
            "text": "",
            "title": "Localization"
        },
        {
            "location": "/Documentation/Orchard-TV/#building-a-multilanguage-website-structure",
            "text": "",
            "title": "Building a Multilanguage Website Structure"
        },
        {
            "location": "/Documentation/Blogging-with-LiveWriter/",
            "text": "While Orchard provides a simple way to write blog posts using the built-in features of the admin panel, many people prefer to author posts using a client application, such as \nWindows Live Writer\n.  These clients use an XML-RPC interface to publish posts remotely, and offer additional capabilities like saving offline drafts (for example, to write your blog posts on an airplane and sync-up your site later).\n\n\nTo enable Remote Blog Publishing, click \nFeatures\n in the Orchard admin panel.\n\n\nTo use Windows Live Writer with Orchard, you need to enable the \nRemote Blog Publishing\n feature. To enable \nRemote Blog Publishing\n click the \nEnable\n link on the feature box. Note that if you haven't already created a blog on your site, you'll want to do so.\n\n\n\n\nNow, launch Live Writer from your \nStart\n menu in Windows.\n\n\n\n\nChoose \nAdd blog account...\n from the \nBlogs\n menu.\n\n\n\n\nChoose \nOther blog service\n from the available options and click \nNext\n.\n\n\n\n\nType the URL to your Orchard blog, along with the admin user name and password that you defined when you set-up Orchard for the first time.\n\n\n\n\nNote: it is possible to publish using other XML-RPC aware client applications, but you might have to provide the URL of the xmlrpc endpoint rather than the blog URL. For example, http://myimaginaryorchardsite.com/xmlrpc.\n\n\n\n\n\n\nLive Writer will connect to your blog in order to read the XML-RPC capabilities that Orchard supports and download the current Theme (for previewing posts before publishing).  If you are prompted to create a temporary post during this step, select \"Yes\" in the dialog.\n\n\n\n\nAfter Live Writer is configured, click \nFinish\n.\n\n\n\n\nWrite a title and some content for your blog post in the Live Writer editor area.\n\n\n\n\nYou can also insert pictures to your post using the \nInsert Picture\n button on the toolbar.\n\n\n\n\n\n\nTo edit the URL for your post, select \nView / Properties\n in the Live Writer menu.\n\n\n\n\nThe \nSlug\n input appears at the bottom of the editor, where you can type the portion of the URL that refers to this post.\n\n\n\n\nTo preview your post in the context of the currently applied Theme in Orchard, select the \nPreview\n tab in Live Writer. When you are satisfied with the way your post looks, click the \nPublish\n button.\n\n\n\n\nLive Writer publishes your post, and will automatically load the URL for the post in your browser for viewing.",
            "title": "Blogging with LiveWriter"
        },
        {
            "location": "/Documentation/Creating-global-ready-applications/",
            "text": "Orchard's localization management is hosted on an external service \n(Crowdin)\n, \nthe project is available for the public\n and contributions are welcome!\n\n\nOrchard supports two kinds of localization: \n\n\n\n\nLocalization of text strings in the Orchard application and in installed modules.\n\n\nLocalization of database-driven content items.\n\n\n\n\nThis topic describes both of these features. \n\n\nLocalizing the Orchard Application and Orchard Modules\n\n\nAll strings in the Orchard application are output through a single \nT()\n method that can look up a translated string based on the default site culture. By default, Orchard includes strings for  English (en-US), but you can add support for additional cultures. Translations for the dashboard UI and all static strings in the front end can also be added to the application through translation files in \n.po\n format. To localize a site for a culture, you download and install the appropriate set of \n.po\n files, and then you update your site settings as shown in this section.\n\n\n\n\nNote\n In .NET Framework applications, localization is usually done using \n.resx\n files and satellite assemblies. Orchard takes a more lightweight approach that uses \n.po\n files. In Orchard, the number of translation files is the number of modules multiplied by the number of supported cultures. That number could rapidly grow, and the satellite-assembly design wasn't built for that kind of usage. On the other hand, \n.po\n files can be loaded and unloaded on demand. Like \n.resx\n files, \n.po\n files are a standard format for which many tools exist.\n\n\n\n\nInstalling translation files\n\n\nAs an example, download a set of \n.po\n translation files for French (fr-FR). Browse to the page for the files at the following URL:\n\n\nhttps://crowdin.net/download/project/orchard-cms/fr.zip\n. \n\n\nClick the link to download the \n.po\n files and save the \n.zip\n file to your computer.\n\n\nMethod 1: Extracting the zip\n\n\nExtract the downloaded \n.zip\n file into the root folder of your website. Make sure you extract the contents to the actual Orchard root folder, and not to a subfolder named for the \n.zip\n file. When Windows opens a \nConfirm Folder Replace\n window and asks whether you want to merge the extracted contents into the Orchard folders of the same names in your website, select \nDo this for all current items\n and then click \nYes\n to merge in the translation files.\n\n\nThis method of extracting the po files by expanding the zip file into your site's directory is very simple but if your site does not have all the translated modules that are in the file, you may end up with some additional directories that you don't need. In order to avoid that, you can use the following alternative method.\n\n\nMethod 2: Using Translation Manager\n\n\nThe Translation Manager Feature in \nVandelay Industries\n module, available from the gallery, adds commands to install translation files more parsimoniously.\n\n\nOnce you have the module installed and the po file that you want to install downloaded, enter the following command, replacing the path to the po file as necessary:\n\n\ninstall translation c:\\temp\\fr.zip\n\n\n\nThis should have only extracted those resources for the modules that are actually installed that it has translations for. If a module is not found, running the command won't create unnecessary directories and your Orchard site will remain clean.\n\n\nIf you later install additional modules for which a translation exists, it is possible to re-run the command.\n\n\nSwitching the site to another culture\n\n\nTo change the default culture for the application, go to the \nSettings => General\n screen in the Orchard dashboard. Under \nDefault Site Culture\n, click \nAdd or remove supported cultures for the site\n. \n\n\n\n\nIn the \nCultures\n screen, select a culture from the \nAdd a culture\n list (for example, \nfr-FR\n) and then click \nAdd\n. The culture code is added under \nCultures this site supports\n. To remove a culture, click the \nx\n button next to it. \n\n\n\n\nAfter you've added one or more cultures, click \nGeneral\n on the dashboard to return to the \nManage Settings\n screen.\n\n\nIn the \nDefault Site Culture\n list, select the culture to set as the default. When you're done, click \nSave\n.\n\n\n\n\nAssuming that you have the appropriate set of \n.po\n files installed, applying a new culture has the effect of translating the text in the dashboard menu and UI text. The following illustration shows the effect of changing the culture to \nfr-FR\n.  \n\n\n\n\nNote: The translation files might not be complete.\n\n\n\n\n\n\nSetting the default site culture to a specific culture won't have any effect unless you have a corresponding translation file installed.  Orchard searches the following paths to find translation files, from most to least specific:\n\n\n\n\nCore localization file path\n \n~/Core/App_Data/Localization/<culture-code>/orchard.core.po\n\n\nModules localization file path\n \n~/Modules/<module-name>/App_Data/Localization/<culture-code>/orchard.module.po\n\n\nTheme localization file path\n \n~/Themes/<theme-name>/App_Data/Localization/<culture-code>/orchard.theme.po\n\n\nRoot localization file path\n \n~/App_Data/Localization/<culture-code>/orchard.root.po\n\n\nTenant localization file path\n \n~/App_Data/Sites/<tenant name>/Localization/<culture-code>/orchard.po\n\n\n\n\nTranslation availability\n\n\nYou can download additional \n.po\n files for other cultures from \nhttp://orchardproject.net/localization\n. Translations are provided by the community. If you don't find the culture you're looking for, please consider contributing it. It's a few hours of work and it will benefit the whole community.\n\n\nContributing new translations\n\n\nWorking with a plain text editor\n\n\nThe localization tool available at \nhttps://crowdin.net/project/orchard-cms\n can prepare stub files for a specific language. Orchard's translations are stored in the form of PO-files in packages, that you can add to your own Orchard instance. These packages are regenerated at the beginning of every hour (the process takes 2-3 minutes). Please visit the project home page on Crowdin to see the progress of the translations for each language.\n\n\nYou can download all the translations for each language for both projects: \nOrchard CMS\n, \nOrchard CMS Gallery\n.\n\n\nThe downloaded \n.zip\n file contains the set of \n.po\n files that you can edit using a text editor. When you're done, please subscribe to our localization mailing list by sending email to \njoin-orchard-localization@lists.outercurve.org\n, and then \nsend the zipped package of \n.po\n files to the list\n.\n\n\nPlease make sure when working with \n.po\n files that the files are saved in UTF-8 with Byte Order Mark. This is usually a setting in your text editor (in Notepad it is under the Encoding drop-down in the \"Save As\" dialog).\n\n\nTranslation File Format\n\n\nThe following illustration shows the format of a translation file. Each text string is represented by elements listed in the following table.\n\n\n\n\n\n\n\n\nA reference (see below)\n\n\n#: reference-string\n\n\n\n\n\n\n\n\n\n\nAn ID, which is often the original (untranslated) string. After the ID is set, this string should not be changed even if the English string changes, so that existing translations continue to work even if they're not immediately updated.\n\n\n#| msgid \"id-string\"\n\n\n\n\n\n\nThe current English string for reference. This helps the translator.\n\n\nmsgid \"English-string\"\n\n\n\n\n\n\nThe translated string.\n\n\nmsgstr \"translated-string\"\n\n\n\n\n\n\n\n\n\n\nHow to contribute\n\n\n\n\nRegister on \nCrowdin\n.\n\n\nGo to the project page of \nOrchard CMS\n and \nOrchard CMS Gallery\n and apply to join the project.\n\n\nYour application will be accepted shortly and you'll be added to the project as \"Proofreader\" for the selected languages. This means that you'll be able to edit and approve translations (which is necessary for the translated strings to be included in the downloadable packages).\n\n\nIf you are new to the Orchard translations, please consult with other translators of the same language and make sure you follow the same conventions.\n\n\n\n\nResource String Reference\n\n\nThe reference for a resource string in a \n.po\n file (the \nreference-string\n value described in the previous section) is optional. If no reference is specified, the resource string will be used as a fallback whenever a resource with the same ID is queried with a reference that can't be found. This is a useful way to create generic resource strings that are used in multiple places in the application and are not context-sensitive. You can always override a generic fallback like this as needed.\n\n\nThe reference strings can be stored in different locations, depending on how the string is used in the application:\n\n\n\n\nStrings from views\n:  Use the virtual path of the view from the root of the application (for example, \n~/Themes/TheThemeMachine/Views/User.cshtml\n).\n\n\nStrings from \n.cs\n files\n:  Use the fully qualified type name of the class where the string is being used (for example, \nOrchard.Packaging.AdminMenu\n).\n\n\nStrings from module manifests or theme manifests\n:  Use the virtual path of the manifest from the root of the application (for example, \n~Themes/TheThemeMachine/Theme.txt\n). Note that module and theme manifest localization uses a path for fields as the key. For example, the Author field uses the key \"Author\" and the Description field of the Gallery feature would be under the key \"Gallery Description\".\n\n\n\n\nContributing files for third party modules\n\n\nOur localization infrastructure is built to host translations for third party modules. If you are the author of a module or want to contribute translations for a module, you can generate po files for it using the \nTranslation Manager\n module.\n\n\nFrom an Orchard command line, type the following command (for the example of the Bing.Maps module):\n\n\nextract default translation /Extensions:Bing.Maps /Output:\\temp\n\n\n\nThis will create a new Orchard.en-us.po.zip file with the strings for the module. The command looks at the source code for the module and creates entries for T-wrapped strings, manifest strings and everything that should be localizable.\n\n\nPlease send this file to \njoin-orchard-localization@lists.outercurve.org\n so that we can add it to the online localization database.\n\n\nLocalizing Database-Driven Content Items\n\n\nIn addition to application and module localization, Orchard provides the ability to translate content items that are stored in the database. To localize content items, you must enable the \nLocalization\n feature. In the dashboard, click \nModules\n, and then on the \nFeatures\n tab you will see \nLocalization\n. Click the \nEnable\n link. \n\n\n\n\nBy default, both the \nPage\n and \nBlog Post\n content types are localizable, because they both contain the \nLocalization\n part. You can add the \nLocalization\n part to other content types that need translation. Click \nContent\n on the dashboard, and then view the items in the \nManage Content\n screen. Notice the \n+ New Translation\n link for each content item.\n\n\n\n\n\n\nNote\n This link appears only if you have more than one culture enabled on the site (see previous section), and if you have enabled the \nLocalization\n feature.\n\n\n\n\nClicking the \n+ New Translation\n link allows you to define a translated version of the content item to be associated with the \"parent\" content item (in the site's default culture). Each translated content item is treated as a unique content item in the system. On the \nTranslate Content\n editor screen, you can define the culture code for the content item.  The permalink will change accordingly in order to ensure that URLs are unqiue for each translation. You can then translate the content item from the default site culture to the selected culture.\n\n\n\n\nAdd some translation text in the body of the page, and then click \nSave\n. After the content item is saved, the current culture code is indicated, along with links to any related content items in different cultures.\n\n\nWhen you browse content items on the site, if there are translations available for a content item, links to those content items will be displayed. This makes it easy for your site visitors to switch between translations of the item.  This is what the site looks like when you view the English (en-US) item:\n\n\n\n\nClick the culture code link to see translated version of the page. When you do, the original cultural code (en-US) appears as a link to the original page.\n\n\n\n\nTo enable localization for custom content types, add the \nLocalization\n part to the content type. For example, to add localization to a custom content type named \nMyEvent\n, click \nContent\n on the dashboard, and then click the \nContent Types\n tab.  Click \nEdit\n on the \nMyEvent\n type (this example assumes the custom type already exists).  Click \nAdd\n in the \nParts\n section of the type.  The \nAdd\n screen is displayed, and you can select \nLocalization\n or other parts to add.\n\n\n\n\nFor more information about creating and working with custom content types, refer to the \nCreating Custom Content Types\n topic.\n\n\n\n\nNote\n The localization feature is a work in progress, and not all parts of the Orchard application are yet localizable. For example, Orchard does not yet provide an automatic way to filter and display only content items in a given culture (one instance of this is the browser's default culture). We will address this in a future release. In the meantime you can provide your own implementation of \nICultureSelector\n in a module. If you want to give us feedback on localization support in Orchard (for example, to help us understand the scenarios that are important for your site), please contact at \njoin-orchard-localization@lists.outercurve.org\n and drop us a line!\n\n\n\n\nTranslating an Html Widget\n\n\n\n\nNote\n these steps apply to a clean installation using the default theme 'The Theme Machine'\n\n\n\n\nIn the admin panel, navigate to \nModules\n and verify that you have the \nLocalization\n module installed and enabled. The next step is to navigate to \nContent\n in the admin panel. Select the \nContent Types\n tab page on top and click \nEdit\n to adjust the \nHtml Widget\n. Our goal is to translate a Html Widget. Click \nAdd Parts\n in the Parts section. Here we select the \nLocalization\n part and click \nSave\n to add this part. At the bottom of the page click \nSave\n again to save your Content Item adjustments.\n\n\nNow we need to navigate to the \nSettings\n menu item in the admin panel. Under the section \nDefault Site Culture\n you can add the cultures that you want to support. In our case we have nl-BE and en-US. Click \nSave\n to apply your culture settings.\n\n\nNavigate to the \nWidgets\n menu item.\nOn the \nDefault\n layer find for example the \nFooterQuadThrid\n section and click \nAdd\n to add a Widget.\nNow you need to \nChoose A Widget\n, select the \nHtml Widget\n, because this is the one that we adjust.\nNow fill in the needed information (Title and Content) and click \nSave\n. \nYour Html Widget is now added to the FooterQuadThird section.\nNow we are ready to translate the item. Select you newly added widget to edit it. On top of the \nEdit Widget\n page you will find the following text: \n+ New translation\n. Click this to add the translation for another culture.\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.8\n\n\n11-03-14: Updated Localization steps and procedure (aka Crowdin)\n\n\n3-17-11:  Updated for references to dashboard.\n\n\n3-17-11:  Updated screens and procedures in section on localizing database-driven content items.\n\n\n3-18-11:  Updated screens and procedures in section on localizing the Orchard application and modules.\n\n\n4-12-11:  Structure of the document modified. Added online tool tutorial.",
            "title": "Creating Global-Ready Applications"
        },
        {
            "location": "/Documentation/Creating-global-ready-applications/#localizing-the-orchard-application-and-orchard-modules",
            "text": "All strings in the Orchard application are output through a single  T()  method that can look up a translated string based on the default site culture. By default, Orchard includes strings for  English (en-US), but you can add support for additional cultures. Translations for the dashboard UI and all static strings in the front end can also be added to the application through translation files in  .po  format. To localize a site for a culture, you download and install the appropriate set of  .po  files, and then you update your site settings as shown in this section.   Note  In .NET Framework applications, localization is usually done using  .resx  files and satellite assemblies. Orchard takes a more lightweight approach that uses  .po  files. In Orchard, the number of translation files is the number of modules multiplied by the number of supported cultures. That number could rapidly grow, and the satellite-assembly design wasn't built for that kind of usage. On the other hand,  .po  files can be loaded and unloaded on demand. Like  .resx  files,  .po  files are a standard format for which many tools exist.",
            "title": "Localizing the Orchard Application and Orchard Modules"
        },
        {
            "location": "/Documentation/Creating-global-ready-applications/#installing-translation-files",
            "text": "As an example, download a set of  .po  translation files for French (fr-FR). Browse to the page for the files at the following URL:  https://crowdin.net/download/project/orchard-cms/fr.zip .   Click the link to download the  .po  files and save the  .zip  file to your computer.",
            "title": "Installing translation files"
        },
        {
            "location": "/Documentation/Creating-global-ready-applications/#method-1-extracting-the-zip",
            "text": "Extract the downloaded  .zip  file into the root folder of your website. Make sure you extract the contents to the actual Orchard root folder, and not to a subfolder named for the  .zip  file. When Windows opens a  Confirm Folder Replace  window and asks whether you want to merge the extracted contents into the Orchard folders of the same names in your website, select  Do this for all current items  and then click  Yes  to merge in the translation files.  This method of extracting the po files by expanding the zip file into your site's directory is very simple but if your site does not have all the translated modules that are in the file, you may end up with some additional directories that you don't need. In order to avoid that, you can use the following alternative method.",
            "title": "Method 1: Extracting the zip"
        },
        {
            "location": "/Documentation/Creating-global-ready-applications/#method-2-using-translation-manager",
            "text": "The Translation Manager Feature in  Vandelay Industries  module, available from the gallery, adds commands to install translation files more parsimoniously.  Once you have the module installed and the po file that you want to install downloaded, enter the following command, replacing the path to the po file as necessary:  install translation c:\\temp\\fr.zip  This should have only extracted those resources for the modules that are actually installed that it has translations for. If a module is not found, running the command won't create unnecessary directories and your Orchard site will remain clean.  If you later install additional modules for which a translation exists, it is possible to re-run the command.",
            "title": "Method 2: Using Translation Manager"
        },
        {
            "location": "/Documentation/Creating-global-ready-applications/#switching-the-site-to-another-culture",
            "text": "To change the default culture for the application, go to the  Settings => General  screen in the Orchard dashboard. Under  Default Site Culture , click  Add or remove supported cultures for the site .    In the  Cultures  screen, select a culture from the  Add a culture  list (for example,  fr-FR ) and then click  Add . The culture code is added under  Cultures this site supports . To remove a culture, click the  x  button next to it.    After you've added one or more cultures, click  General  on the dashboard to return to the  Manage Settings  screen.  In the  Default Site Culture  list, select the culture to set as the default. When you're done, click  Save .   Assuming that you have the appropriate set of  .po  files installed, applying a new culture has the effect of translating the text in the dashboard menu and UI text. The following illustration shows the effect of changing the culture to  fr-FR .     Note: The translation files might not be complete.    Setting the default site culture to a specific culture won't have any effect unless you have a corresponding translation file installed.  Orchard searches the following paths to find translation files, from most to least specific:   Core localization file path   ~/Core/App_Data/Localization/<culture-code>/orchard.core.po  Modules localization file path   ~/Modules/<module-name>/App_Data/Localization/<culture-code>/orchard.module.po  Theme localization file path   ~/Themes/<theme-name>/App_Data/Localization/<culture-code>/orchard.theme.po  Root localization file path   ~/App_Data/Localization/<culture-code>/orchard.root.po  Tenant localization file path   ~/App_Data/Sites/<tenant name>/Localization/<culture-code>/orchard.po",
            "title": "Switching the site to another culture"
        },
        {
            "location": "/Documentation/Creating-global-ready-applications/#translation-availability",
            "text": "You can download additional  .po  files for other cultures from  http://orchardproject.net/localization . Translations are provided by the community. If you don't find the culture you're looking for, please consider contributing it. It's a few hours of work and it will benefit the whole community.",
            "title": "Translation availability"
        },
        {
            "location": "/Documentation/Creating-global-ready-applications/#contributing-new-translations",
            "text": "",
            "title": "Contributing new translations"
        },
        {
            "location": "/Documentation/Creating-global-ready-applications/#working-with-a-plain-text-editor",
            "text": "The localization tool available at  https://crowdin.net/project/orchard-cms  can prepare stub files for a specific language. Orchard's translations are stored in the form of PO-files in packages, that you can add to your own Orchard instance. These packages are regenerated at the beginning of every hour (the process takes 2-3 minutes). Please visit the project home page on Crowdin to see the progress of the translations for each language.  You can download all the translations for each language for both projects:  Orchard CMS ,  Orchard CMS Gallery .  The downloaded  .zip  file contains the set of  .po  files that you can edit using a text editor. When you're done, please subscribe to our localization mailing list by sending email to  join-orchard-localization@lists.outercurve.org , and then  send the zipped package of  .po  files to the list .  Please make sure when working with  .po  files that the files are saved in UTF-8 with Byte Order Mark. This is usually a setting in your text editor (in Notepad it is under the Encoding drop-down in the \"Save As\" dialog).",
            "title": "Working with a plain text editor"
        },
        {
            "location": "/Documentation/Creating-global-ready-applications/#translation-file-format",
            "text": "The following illustration shows the format of a translation file. Each text string is represented by elements listed in the following table.     A reference (see below)  #: reference-string      An ID, which is often the original (untranslated) string. After the ID is set, this string should not be changed even if the English string changes, so that existing translations continue to work even if they're not immediately updated.  #| msgid \"id-string\"    The current English string for reference. This helps the translator.  msgid \"English-string\"    The translated string.  msgstr \"translated-string\"",
            "title": "Translation File Format"
        },
        {
            "location": "/Documentation/Creating-global-ready-applications/#how-to-contribute",
            "text": "Register on  Crowdin .  Go to the project page of  Orchard CMS  and  Orchard CMS Gallery  and apply to join the project.  Your application will be accepted shortly and you'll be added to the project as \"Proofreader\" for the selected languages. This means that you'll be able to edit and approve translations (which is necessary for the translated strings to be included in the downloadable packages).  If you are new to the Orchard translations, please consult with other translators of the same language and make sure you follow the same conventions.",
            "title": "How to contribute"
        },
        {
            "location": "/Documentation/Creating-global-ready-applications/#resource-string-reference",
            "text": "The reference for a resource string in a  .po  file (the  reference-string  value described in the previous section) is optional. If no reference is specified, the resource string will be used as a fallback whenever a resource with the same ID is queried with a reference that can't be found. This is a useful way to create generic resource strings that are used in multiple places in the application and are not context-sensitive. You can always override a generic fallback like this as needed.  The reference strings can be stored in different locations, depending on how the string is used in the application:   Strings from views :  Use the virtual path of the view from the root of the application (for example,  ~/Themes/TheThemeMachine/Views/User.cshtml ).  Strings from  .cs  files :  Use the fully qualified type name of the class where the string is being used (for example,  Orchard.Packaging.AdminMenu ).  Strings from module manifests or theme manifests :  Use the virtual path of the manifest from the root of the application (for example,  ~Themes/TheThemeMachine/Theme.txt ). Note that module and theme manifest localization uses a path for fields as the key. For example, the Author field uses the key \"Author\" and the Description field of the Gallery feature would be under the key \"Gallery Description\".",
            "title": "Resource String Reference"
        },
        {
            "location": "/Documentation/Creating-global-ready-applications/#contributing-files-for-third-party-modules",
            "text": "Our localization infrastructure is built to host translations for third party modules. If you are the author of a module or want to contribute translations for a module, you can generate po files for it using the  Translation Manager  module.  From an Orchard command line, type the following command (for the example of the Bing.Maps module):  extract default translation /Extensions:Bing.Maps /Output:\\temp  This will create a new Orchard.en-us.po.zip file with the strings for the module. The command looks at the source code for the module and creates entries for T-wrapped strings, manifest strings and everything that should be localizable.  Please send this file to  join-orchard-localization@lists.outercurve.org  so that we can add it to the online localization database.",
            "title": "Contributing files for third party modules"
        },
        {
            "location": "/Documentation/Creating-global-ready-applications/#localizing-database-driven-content-items",
            "text": "In addition to application and module localization, Orchard provides the ability to translate content items that are stored in the database. To localize content items, you must enable the  Localization  feature. In the dashboard, click  Modules , and then on the  Features  tab you will see  Localization . Click the  Enable  link.    By default, both the  Page  and  Blog Post  content types are localizable, because they both contain the  Localization  part. You can add the  Localization  part to other content types that need translation. Click  Content  on the dashboard, and then view the items in the  Manage Content  screen. Notice the  + New Translation  link for each content item.    Note  This link appears only if you have more than one culture enabled on the site (see previous section), and if you have enabled the  Localization  feature.   Clicking the  + New Translation  link allows you to define a translated version of the content item to be associated with the \"parent\" content item (in the site's default culture). Each translated content item is treated as a unique content item in the system. On the  Translate Content  editor screen, you can define the culture code for the content item.  The permalink will change accordingly in order to ensure that URLs are unqiue for each translation. You can then translate the content item from the default site culture to the selected culture.   Add some translation text in the body of the page, and then click  Save . After the content item is saved, the current culture code is indicated, along with links to any related content items in different cultures.  When you browse content items on the site, if there are translations available for a content item, links to those content items will be displayed. This makes it easy for your site visitors to switch between translations of the item.  This is what the site looks like when you view the English (en-US) item:   Click the culture code link to see translated version of the page. When you do, the original cultural code (en-US) appears as a link to the original page.   To enable localization for custom content types, add the  Localization  part to the content type. For example, to add localization to a custom content type named  MyEvent , click  Content  on the dashboard, and then click the  Content Types  tab.  Click  Edit  on the  MyEvent  type (this example assumes the custom type already exists).  Click  Add  in the  Parts  section of the type.  The  Add  screen is displayed, and you can select  Localization  or other parts to add.   For more information about creating and working with custom content types, refer to the  Creating Custom Content Types  topic.   Note  The localization feature is a work in progress, and not all parts of the Orchard application are yet localizable. For example, Orchard does not yet provide an automatic way to filter and display only content items in a given culture (one instance of this is the browser's default culture). We will address this in a future release. In the meantime you can provide your own implementation of  ICultureSelector  in a module. If you want to give us feedback on localization support in Orchard (for example, to help us understand the scenarios that are important for your site), please contact at  join-orchard-localization@lists.outercurve.org  and drop us a line!",
            "title": "Localizing Database-Driven Content Items"
        },
        {
            "location": "/Documentation/Creating-global-ready-applications/#translating-an-html-widget",
            "text": "Note  these steps apply to a clean installation using the default theme 'The Theme Machine'   In the admin panel, navigate to  Modules  and verify that you have the  Localization  module installed and enabled. The next step is to navigate to  Content  in the admin panel. Select the  Content Types  tab page on top and click  Edit  to adjust the  Html Widget . Our goal is to translate a Html Widget. Click  Add Parts  in the Parts section. Here we select the  Localization  part and click  Save  to add this part. At the bottom of the page click  Save  again to save your Content Item adjustments.  Now we need to navigate to the  Settings  menu item in the admin panel. Under the section  Default Site Culture  you can add the cultures that you want to support. In our case we have nl-BE and en-US. Click  Save  to apply your culture settings.  Navigate to the  Widgets  menu item.\nOn the  Default  layer find for example the  FooterQuadThrid  section and click  Add  to add a Widget.\nNow you need to  Choose A Widget , select the  Html Widget , because this is the one that we adjust.\nNow fill in the needed information (Title and Content) and click  Save . \nYour Html Widget is now added to the FooterQuadThird section.\nNow we are ready to translate the item. Select you newly added widget to edit it. On top of the  Edit Widget  page you will find the following text:  + New translation . Click this to add the translation for another culture.",
            "title": "Translating an Html Widget"
        },
        {
            "location": "/Documentation/Creating-global-ready-applications/#change-history",
            "text": "Updates for Orchard 1.8  11-03-14: Updated Localization steps and procedure (aka Crowdin)  3-17-11:  Updated for references to dashboard.  3-17-11:  Updated screens and procedures in section on localizing database-driven content items.  3-18-11:  Updated screens and procedures in section on localizing the Orchard application and modules.  4-12-11:  Structure of the document modified. Added online tool tutorial.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Search-and-indexing/",
            "text": "Orchard provides the ability to index and search content items in the application. The indexing functionality is provided by enabling the \nIndexing\n feature, along with a specific implementation of indexing (Lucene-based is included by default). In addition to the \nIndexing\n, the \nSearch\n feature provides the ability to query the index (by keyword or using Lucene query syntax) to return a list of content items matching the query on the front end.\n\n\nYou must enable all the following Modules \nSearch\n, \nIndexing\n, and \nLucene\n.\n\n\n\n\nBecause search depends on indexing, enabling search will automatically enable indexing as well.  Note that you must also enable Lucene before search and indexing will work.\n\n\n\n\nWhen the indexing feature is enabled, a new \nSearch\n and \nIndexes\n item becomes available under the \nSettings\n section of the dashboard. The indexer runs as a background task, once per minute by default, and you can optionally update or rebuild the index from this screen.  The \nIndexes\n screen also displays the number of documents (content items) indexed and the \nSearch\n screen displays the indexed fields.\n\n\n\n\n\n\n\n\nAfter enabling the \nSearch\n feature goto the \nContent Definition\n section and click on any Content Type which you want to index and then check the check box for the available index. For e.g. Page Content Type\n\n\n\n\nWhen the search feature is enabled, the \nSettings\n screen in the dashboard displays the fields that will be queried from the index (listed on the Search screen).  \n\n\n\n\nThe front end of the site does not have the searching UI yet at this point. To add it, you need to add a widget. Click \nWidgets\n in the admin menu. With the default layer selected, click \nAdd to zone\n next to \nSearchForm\n in the list of available widgets.\n\n\nKeep \"Header\" selected as the zone and \"Default\" as the layer so that your search widget appears on top of all pages (the default layer applies to all pages in the site).\n\n\nGive it a title such as \"Search\" and click the \nSave\n button.\n\n\n\n\nFor more information about widgets, see \nManaging widgets\n.\n\n\n\n\nIf you navigate now to any page in the front end of the site, you will see the search form.\n\n\n\n\nWhen you type a keyword or query into this input box, a list of matching content items is displayed.\n\n\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.8\n\n\n9-05-14: Updated all screen shots for Search , Indexing and Lucene",
            "title": "Search and Indexing"
        },
        {
            "location": "/Documentation/Search-and-indexing/#change-history",
            "text": "Updates for Orchard 1.8  9-05-14: Updated all screen shots for Search , Indexing and Lucene",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Saving-scheduling-and-publishing-drafts/",
            "text": "This topic has been updated for the Orchard 1.0 release.\n\n\n\n\nOrchard lets you save a page as a draft or publish it to your web site. When you publish a page, you can either publish immediately or specify a time when the page should be published. The options for saving or publishing a page are available at the bottom of the \nCreate Page\n page.\n\n\n\n\nSave a Draft Option\n\n\nWhen you want to save a page but do not want the page to be visible to visitors, you can save the page as a draft. You can continue working on the file until it is ready to be published. In the \nManage Content\n page, you can see the files that are currently saved as drafts.\n\n\n\n\nA draft is listed as \nNot Published\n and you can use the links to publish, edit, or remove the page. Clicking the \nPublish\n link immediately changes the draft to a published page, and visitors will be able to see it immediately.\n\n\nPublish Now Option\n\n\nTo publish a page immediately, click \nPublish Now\n. For a draft page, click the \nPublish\n link in \nManage Content\n. In the \nManage Content\n page, you see the files that are published.\n\n\n\n\nYou can click links to view, unpublish, edit, or remove the page. Clicking \nUnpublish\n immediately turns the published page into a draft.\n\n\nPublish Later Option\n\n\nYou can schedule the publication of a page for a future time by setting a date and time, and clicking the \nPublish Later\n option.\n\n\n\n\nThe page will remain as a draft until the publication date and time. No further action is needed to publish the page.\n\n\nIn the \nManage Content\n page, you can see the date and time the draft is scheduled to be published.\n\n\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.8\n\n\n9-05-14: Updated all screen shots for Scheduling and Publishing Draft",
            "title": "Publishing Drafts"
        },
        {
            "location": "/Documentation/Saving-scheduling-and-publishing-drafts/#save-a-draft-option",
            "text": "When you want to save a page but do not want the page to be visible to visitors, you can save the page as a draft. You can continue working on the file until it is ready to be published. In the  Manage Content  page, you can see the files that are currently saved as drafts.   A draft is listed as  Not Published  and you can use the links to publish, edit, or remove the page. Clicking the  Publish  link immediately changes the draft to a published page, and visitors will be able to see it immediately.",
            "title": "Save a Draft Option"
        },
        {
            "location": "/Documentation/Saving-scheduling-and-publishing-drafts/#publish-now-option",
            "text": "To publish a page immediately, click  Publish Now . For a draft page, click the  Publish  link in  Manage Content . In the  Manage Content  page, you see the files that are published.   You can click links to view, unpublish, edit, or remove the page. Clicking  Unpublish  immediately turns the published page into a draft.",
            "title": "Publish Now Option"
        },
        {
            "location": "/Documentation/Saving-scheduling-and-publishing-drafts/#publish-later-option",
            "text": "You can schedule the publication of a page for a future time by setting a date and time, and clicking the  Publish Later  option.   The page will remain as a draft until the publication date and time. No further action is needed to publish the page.  In the  Manage Content  page, you can see the date and time the draft is scheduled to be published.",
            "title": "Publish Later Option"
        },
        {
            "location": "/Documentation/Saving-scheduling-and-publishing-drafts/#change-history",
            "text": "Updates for Orchard 1.8  9-05-14: Updated all screen shots for Scheduling and Publishing Draft",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Creating-custom-content-types/",
            "text": "Although Orchard includes the Page and Blog Post content types by default, it is very easy to create a custom content type (or even extend the definition of an existing content type) using the admin panel. By default, the \nContent Types\n feature is enabled. This feature must be enabled to create a custom content types. If needed, you can manually enable the feature in the \nManage Features\n page.\n\n\n\n\nTo create a content type, Click \nContent Definition\n and select the \nContent Types\n link in the admin panel.\n\n\n\n\nOn this screen, you can see the available content types in the system.  Notice that it is possible to create and list content items of some of these types (such as \"Page\"), whereas others only allow you to edit the definition of the type here (such as Comments and Widgets, since these have a dedicated/custom admin experience for creating and listing these items instead). \n\n\n\n\nIf you click \"List Items\", to list the items of the \"Page\" type, you can see the available content items of this type (\"Page\") in the site, similar to the \"Manage Content\" screen in the admin menu).\n\n\n\n\nYou can also edit the definition of the Page type by clicking \"Edit\" for this type.\n\n\n\n\nA content type in Orchard is made up of fields and parts.  An good overview of these concepts is described in \nBasic Orchard Concepts\n.  A field is something specific to the type; for example, a Product type might have SKU and Price fields.  A part, however, is a reusable component that can be attached to one or more types.  For example, the Autoroute part gives a type the ability to be addressed on the front-end via a route/url.  In some ways, you can think of a type as \nhaving\n fields, and \nbeing\n made up of one or more parts.  This is actually reflected in the underlying code in Orchard as well.  To treat a blog post as a AutoroutePart and access it's AutoroutePart.Slug property, you would write something like this: post.As<AutoroutePart>.Slug.  Fortunately you don't have to write code to have fun with types and parts.  We are going to look at this in more detail by way of example in the next section.\n\n\nDefining a New Content Type\n\n\nLet's define a custom content type.  Suppose you wanted to define an \"Event\" type, for listing events with location and date fields.  To do this in the \nManage Content Types\n screen, click on \nCreate new type\n.\n\n\nType the name \"Event\" for the content type. The \nContent Type Id\n field is automatically populated with \"Event\" which you can keep.\n\n\n\n\nClick \nAdd\n to add a field.\n\n\n\n\nCurrently Orchard only includes a single field type (TextField), but \nmore can be created\n as extensions to Orchard (for example, CheckBoxField, EmailField, TextAreaField, DateTimeField, etc), and a number of additional fields are available under \nGallery\n > \nModules\n as optional downloads.  Type \"Location\" for the name of the field, and click \nSave\n.  \n\n\n\n\n\n\nThe field is now listed in the Event type screen.\n\n\n\n\nGo ahead and repeat the previous two steps to add a second field named \"Date\".\n\n\nTo add a part to your type, click \"Add\" in the \"Parts\" section of the Event type.\n\n\nHere you can see the available parts in Orchard (as of the current release).  For our Event type, we want to be able to comment on the event (\"Comments\" part), tag the event (\"Tags part\"), access the event from the front-end via a URL/route (\"Autoroute\" part), add the event to the main menu (\"Menu\" part), and be able to publish the event immediately, on a schedule, or as a draft (\"PublishLater\" part).\n\n\nAlso add the \"Common\" part so that your items can appear in lists of content items.\n\n\n\n\nTypes, fields and parts can have settings as well.  The specific settings that are available on the fields or parts is determined by the features that are activated in Orchard.  If we have enabled the \"Indexing\" feature, there is a setting to \"Index this content type for search\" and on each field, a setting to \"Include in the index\".  Select these options for the \"Location\" field of the custom \"Event\" type.  This will enable visitors of your site to search by location on the front-end (when the \"Search\" feature is enabled). Hit Save.\n\n\n\n\n\n\nNow that we have defined our custom content type, let's create a new item of this type.  Notice the \"Create New Event\" link in \"Manage Content Types\".\n\n\n\n\nSimilarly, there is a new admin menu link entitled \nEvent\n under \nNew\n.  Click either one of these links to create a new \"Event\" content item.\n\n\n\n\nWe can see that the editor for our \"Event\" type has all the fields and parts we defined.  It has a \nTitle\n because of the \nTitlePart\n and \nPermalink\n because of the \nAutoroutePart\n, a \nLocation\n because of the fields we added, a \nTags\n input from the \nTags\n part, a \nShow on main menu\n checkbox from the \nMenu\n part, and the ability to enable comments from the \nComments\n part.  The fact that we can \nPublish Now\n, \nPublish Later\n or \nSave As Draft\n is given by the \nPublish Later\n part.  Once you have filled in these fields, go ahead and publish the event.\n\n\n\n\nLooking at the \"Manage Content\" screen in the Orchard admin panel, we can see our event item listed among the pages in the site!\n\n\n\n\nOn the site's front-end notice the event has been added to the main menu (as expected), and that our fields and parts are being displayed correctly here as well.\n\n\nIt is possible to customize the way the event appears and template its rendering. See \nTemplate File Syntax Guide\n for more information on how to do that.\n\n\n\n\nLet's try out the Search capability against our new content type.  Make sure you have first enabled the \nIndexing\n, \nSearch\n, and \nLucene\n features in the \nFeatures\n admin screen.  Now visit the \nSearch Index\n page to view the available fields that are indexed.  You should see the \nevent-location\n field in the index as expected (if not, just rebuild the index and you'll see it).\n\n\n\n\nWe can tell the Search feature to query this field by going to the \nSettings\n admin screen and adding this field to the Search settings.\n\n\n\n\nOn the front-end type a keyword that matches the location of your event.\n\n\nSearch indexing has indexed our Location field and our event appears in search results as expected!\n\n\n\n\nThis concludes the tutorial on custom content types.  If you are interested in delving further, check out the related tutorials on this site for how to build a custom type, field or part using code.\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.8\n\n\n9-6-14: Updated all screen shots for creating custom content type.",
            "title": "Creating Custom Content Types"
        },
        {
            "location": "/Documentation/Creating-custom-content-types/#defining-a-new-content-type",
            "text": "Let's define a custom content type.  Suppose you wanted to define an \"Event\" type, for listing events with location and date fields.  To do this in the  Manage Content Types  screen, click on  Create new type .  Type the name \"Event\" for the content type. The  Content Type Id  field is automatically populated with \"Event\" which you can keep.   Click  Add  to add a field.   Currently Orchard only includes a single field type (TextField), but  more can be created  as extensions to Orchard (for example, CheckBoxField, EmailField, TextAreaField, DateTimeField, etc), and a number of additional fields are available under  Gallery  >  Modules  as optional downloads.  Type \"Location\" for the name of the field, and click  Save .      The field is now listed in the Event type screen.   Go ahead and repeat the previous two steps to add a second field named \"Date\".  To add a part to your type, click \"Add\" in the \"Parts\" section of the Event type.  Here you can see the available parts in Orchard (as of the current release).  For our Event type, we want to be able to comment on the event (\"Comments\" part), tag the event (\"Tags part\"), access the event from the front-end via a URL/route (\"Autoroute\" part), add the event to the main menu (\"Menu\" part), and be able to publish the event immediately, on a schedule, or as a draft (\"PublishLater\" part).  Also add the \"Common\" part so that your items can appear in lists of content items.   Types, fields and parts can have settings as well.  The specific settings that are available on the fields or parts is determined by the features that are activated in Orchard.  If we have enabled the \"Indexing\" feature, there is a setting to \"Index this content type for search\" and on each field, a setting to \"Include in the index\".  Select these options for the \"Location\" field of the custom \"Event\" type.  This will enable visitors of your site to search by location on the front-end (when the \"Search\" feature is enabled). Hit Save.    Now that we have defined our custom content type, let's create a new item of this type.  Notice the \"Create New Event\" link in \"Manage Content Types\".   Similarly, there is a new admin menu link entitled  Event  under  New .  Click either one of these links to create a new \"Event\" content item.   We can see that the editor for our \"Event\" type has all the fields and parts we defined.  It has a  Title  because of the  TitlePart  and  Permalink  because of the  AutoroutePart , a  Location  because of the fields we added, a  Tags  input from the  Tags  part, a  Show on main menu  checkbox from the  Menu  part, and the ability to enable comments from the  Comments  part.  The fact that we can  Publish Now ,  Publish Later  or  Save As Draft  is given by the  Publish Later  part.  Once you have filled in these fields, go ahead and publish the event.   Looking at the \"Manage Content\" screen in the Orchard admin panel, we can see our event item listed among the pages in the site!   On the site's front-end notice the event has been added to the main menu (as expected), and that our fields and parts are being displayed correctly here as well.  It is possible to customize the way the event appears and template its rendering. See  Template File Syntax Guide  for more information on how to do that.   Let's try out the Search capability against our new content type.  Make sure you have first enabled the  Indexing ,  Search , and  Lucene  features in the  Features  admin screen.  Now visit the  Search Index  page to view the available fields that are indexed.  You should see the  event-location  field in the index as expected (if not, just rebuild the index and you'll see it).   We can tell the Search feature to query this field by going to the  Settings  admin screen and adding this field to the Search settings.   On the front-end type a keyword that matches the location of your event.  Search indexing has indexed our Location field and our event appears in search results as expected!   This concludes the tutorial on custom content types.  If you are interested in delving further, check out the related tutorials on this site for how to build a custom type, field or part using code.",
            "title": "Defining a New Content Type"
        },
        {
            "location": "/Documentation/Creating-custom-content-types/#change-history",
            "text": "Updates for Orchard 1.8  9-6-14: Updated all screen shots for creating custom content type.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Previewing-and-applying-a-theme/",
            "text": "Orchard provides a powerful but simple theming system for customizing the look and feel of your site. Orchard includes one theme in the default installation to help you get started. \n\n\nManaging Themes\n\n\nTo manage themes, click \nThemes\n in the dashboard.\n\n\n\n\nThe main \nThemes\n screen defaults to the \nInstalled\n tab, which displays the current theme, shows any other available themes, and lets you upload a new theme.  There are also tabs for the \nGallery\n (which shows additional online themes you can install), \nUpdates\n (which shows available updates for installed themes), and a link to \nInstall a theme from your computer\n (use this to install a theme package from your local computer to your site). For more information on options for adding new themes, see \nInstalling Themes\n.\n\n\nTo download and install additional themes, click the \nGallery\n tab. Click \nInstall\n on a theme to install it in your site. To see how themes work, install the \nContoso\n and the \nClassic\n themes. \n\n\n\n\nAfter you have installed a theme, click the \nInstalled\n tab on the \nThemes\n screen. Any newly installed themes appear in the \nAvailable\n section. \n\n\n\n\nAs you can see from the links and buttons on the available themes, you have the following options for  each theme:\n\n\n\n\nPreview\n. Lets you preview a theme before you apply it. This lets you see how a theme will look on your site, but site visitors do not see the new theme until you apply it.\n\n\nSet Current\n.  Changes the current theme of the site to the selected theme.\n\n\nUninstall\n.  Removes a theme from the \nAvailable\n themes section.\n\n\nEnable\n.  Used for two cases:  dependent themes and multiple themes. For dependent themes, you can create a set of themes that depend on each other (by specifying a \nBaseTheme\n value in the \nTheme.txt\n file), so that activating that theme automatically enables the others. For multiple themes, you can enable several themes at once (even though only one theme is set as the current theme), which lets you dynamically change the current theme based on an incoming request. These are advanced topics that aren't covered here.\n\n\nNote\n You do not have to click the \nEnable\n link to carry out the other operations on themes, such as previewing a theme or setting the current theme.\n\n\n\n\n\n\n\n\nPreviewing and Applying Themes\n\n\nTo experiment with the theme features, click \nPreview\n on an available theme.  The following illustration shows a site in preview mode for the \nContoso\n theme. The drop-down list lets you preview other themes.\n\n\n\n\nClick \nCancel\n to exit preview mode and return to the \nThemes\n screen. \n\n\n\n\nNote:\n  By default, a newly installed theme is not enabled. When you preview a theme it is automatically enabled. Only enabled themes are shown in the drop-down list of themes available for preview. \n\n\n\n\nClick \nSet Current\n on an available theme. The following illustration shows the \nThemes\n screen after you click \nSet Current\n on the \nContoso\n theme. \n\n\n\n\nWhen return to the home page for your site, the new theme is applied to your pages. \n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.1\n\n\n3-21-11:  Updated screen shots and reworked text for installing, applying, and previewing themes.",
            "title": "Previewing and Applying a Theme"
        },
        {
            "location": "/Documentation/Previewing-and-applying-a-theme/#managing-themes",
            "text": "To manage themes, click  Themes  in the dashboard.   The main  Themes  screen defaults to the  Installed  tab, which displays the current theme, shows any other available themes, and lets you upload a new theme.  There are also tabs for the  Gallery  (which shows additional online themes you can install),  Updates  (which shows available updates for installed themes), and a link to  Install a theme from your computer  (use this to install a theme package from your local computer to your site). For more information on options for adding new themes, see  Installing Themes .  To download and install additional themes, click the  Gallery  tab. Click  Install  on a theme to install it in your site. To see how themes work, install the  Contoso  and the  Classic  themes.    After you have installed a theme, click the  Installed  tab on the  Themes  screen. Any newly installed themes appear in the  Available  section.    As you can see from the links and buttons on the available themes, you have the following options for  each theme:   Preview . Lets you preview a theme before you apply it. This lets you see how a theme will look on your site, but site visitors do not see the new theme until you apply it.  Set Current .  Changes the current theme of the site to the selected theme.  Uninstall .  Removes a theme from the  Available  themes section.  Enable .  Used for two cases:  dependent themes and multiple themes. For dependent themes, you can create a set of themes that depend on each other (by specifying a  BaseTheme  value in the  Theme.txt  file), so that activating that theme automatically enables the others. For multiple themes, you can enable several themes at once (even though only one theme is set as the current theme), which lets you dynamically change the current theme based on an incoming request. These are advanced topics that aren't covered here.  Note  You do not have to click the  Enable  link to carry out the other operations on themes, such as previewing a theme or setting the current theme.",
            "title": "Managing Themes"
        },
        {
            "location": "/Documentation/Previewing-and-applying-a-theme/#previewing-and-applying-themes",
            "text": "To experiment with the theme features, click  Preview  on an available theme.  The following illustration shows a site in preview mode for the  Contoso  theme. The drop-down list lets you preview other themes.   Click  Cancel  to exit preview mode and return to the  Themes  screen.    Note:   By default, a newly installed theme is not enabled. When you preview a theme it is automatically enabled. Only enabled themes are shown in the drop-down list of themes available for preview.    Click  Set Current  on an available theme. The following illustration shows the  Themes  screen after you click  Set Current  on the  Contoso  theme.    When return to the home page for your site, the new theme is applied to your pages.",
            "title": "Previewing and Applying Themes"
        },
        {
            "location": "/Documentation/Previewing-and-applying-a-theme/#change-history",
            "text": "Updates for Orchard 1.1  3-21-11:  Updated screen shots and reworked text for installing, applying, and previewing themes.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Installing-themes/",
            "text": "There are two ways to add a theme to Orchard. The first and easiest is to use the \nGallery\n tab on the \nThemes\n page in the dashboard to browse and install themes from an online feed of available themes. The second is to go to the dashboard \nThemes\n page and click the link to install a theme, which allows you to browse for a theme package on your local computer and install it.\n\n\n\n\nNote\n If your site is running under IIS, make sure you have granted read/write permissions to the \n~/Themes\n folder under the root of your site for the service account that is being used as the IIS application pool identity. However, you should remove the write permissions on a production server.\n\n\n\n\nInstalling a Theme from the Gallery\n\n\nWhen the gallery feature is enabled, as it is by default in Orchard, a \nGallery\n tab appears at the top of the both the \nThemes\n screen and the \nModules\n screen in the dashboard. \n\n\n\n\n\n\nNote:  If the gallery feature has been disabled, there will be no \nGallery\n tab visible in the \nThemes\n or \nModules\n dashboard screens. To enable a disabled gallery, click \nModules\n in the dashboard, and click \nEnable\n on the Gallery feature. \n\n\n\n\nIn the \nThemes\n screen of the dashboard, click the \nGallery\n tab. A set of themes appears with a pair of \nInstall\n and \nDownload\n links next to each theme. \n\n\n\n\nTo install a theme in your site, click the \nInstall\n link next to the theme. Installing a theme adds it to your site in the \nAvailable\n list of themes on the \nThemes\n page in the dashboard. From there, you can preview a theme or set it as the current site theme, as described \nPreviewing and Applying a Theme\n.\n\n\nInstalling a Theme from your Local Computer\n\n\nTo install a theme from your local computer, in the \nThemes\n screen of the dashboard, click the link to \nInstall a theme from your computer\n. This displays a screen that lets you install a theme.\n\n\n\n\nBrowse to a local package file that contains a theme (the file will have a \n.nupkg\n extension), select it, and then click \nInstall\n.  The theme package is installed in your site, and you will see the theme listed in the \nAvailable\n section of the \nThemes\n screen. \n\n\n\n\nNote\n  A theme contains a number of files and folders packaged in a ZIP file that has a \n.nupkg\n file extension. The packaging feature is provided by the NuGet package management system. Packaging themes and other add-ons is beyond the scope of this topic, but you can learn more at \nhttp://nuget.codeplex.com/\n.\n\n\n\n\nThe following illustration shows the Terra theme, which was previously downloaded to the local computer from the Gallery, after clicking the \nInstall a theme from your computer\n link and installing it to an Orchard site. The installed theme appears in the \nAvailable\n section.\n\n\n\n\nTo use an example theme to test this feature, download an existing theme from the \nGallery\n tab on the \nThemes\n page, then browse to the saved \n.nupkg\n file on your computer and install it as described previously.\n\n\nWhen a theme is installed, the theme files are placed in the \n~/Themes\n folder. You can see the installed themes in your site by checking the \nAvailable\n section on the \nThemes\n page in the dashboard. For more information about how to preview themes and apply them to your site, see \nPreviewing and Applying a Theme\n.\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.1\n\n\n3-21-11:  Updated screen shots and text for installing themes.",
            "title": "Installing Themes"
        },
        {
            "location": "/Documentation/Installing-themes/#installing-a-theme-from-the-gallery",
            "text": "When the gallery feature is enabled, as it is by default in Orchard, a  Gallery  tab appears at the top of the both the  Themes  screen and the  Modules  screen in the dashboard.     Note:  If the gallery feature has been disabled, there will be no  Gallery  tab visible in the  Themes  or  Modules  dashboard screens. To enable a disabled gallery, click  Modules  in the dashboard, and click  Enable  on the Gallery feature.    In the  Themes  screen of the dashboard, click the  Gallery  tab. A set of themes appears with a pair of  Install  and  Download  links next to each theme.    To install a theme in your site, click the  Install  link next to the theme. Installing a theme adds it to your site in the  Available  list of themes on the  Themes  page in the dashboard. From there, you can preview a theme or set it as the current site theme, as described  Previewing and Applying a Theme .",
            "title": "Installing a Theme from the Gallery"
        },
        {
            "location": "/Documentation/Installing-themes/#installing-a-theme-from-your-local-computer",
            "text": "To install a theme from your local computer, in the  Themes  screen of the dashboard, click the link to  Install a theme from your computer . This displays a screen that lets you install a theme.   Browse to a local package file that contains a theme (the file will have a  .nupkg  extension), select it, and then click  Install .  The theme package is installed in your site, and you will see the theme listed in the  Available  section of the  Themes  screen.    Note   A theme contains a number of files and folders packaged in a ZIP file that has a  .nupkg  file extension. The packaging feature is provided by the NuGet package management system. Packaging themes and other add-ons is beyond the scope of this topic, but you can learn more at  http://nuget.codeplex.com/ .   The following illustration shows the Terra theme, which was previously downloaded to the local computer from the Gallery, after clicking the  Install a theme from your computer  link and installing it to an Orchard site. The installed theme appears in the  Available  section.   To use an example theme to test this feature, download an existing theme from the  Gallery  tab on the  Themes  page, then browse to the saved  .nupkg  file on your computer and install it as described previously.  When a theme is installed, the theme files are placed in the  ~/Themes  folder. You can see the installed themes in your site by checking the  Available  section on the  Themes  page in the dashboard. For more information about how to preview themes and apply them to your site, see  Previewing and Applying a Theme .",
            "title": "Installing a Theme from your Local Computer"
        },
        {
            "location": "/Documentation/Installing-themes/#change-history",
            "text": "Updates for Orchard 1.1  3-21-11:  Updated screen shots and text for installing themes.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Customizing-the-default-theme/",
            "text": "The default Orchard theme is called The Theme Machine. It is designed as a versatile starting point for customizing and developing themes. \n\n\nThis article introduces The Theme Machine and demonstrates how to create your own theme by customizing The Theme Machine style sheet (Site.css).\n\n\nIntroducing the Theme Machine\n\n\nThe Theme Machine provides a flexible and powerful foundation for themes. The following image shows the file structure.\n\n\n\n\nThe files at the heart of the Theme Machine are the layout page (Layout.cshtml) and style sheet (Site.css).\n\n\nOverview of the Layout Page\n\n\nThe layout page defines multiple zones. Each zone has a conditional statements, so that it renders if and only if it has content. If you don't provide the content, the rendered page will not contain the zone. The following images show the zones.\n\n\n\n\nThis live demo site\n shows the anatomy of a theme.\n\n\n\n\nZones and their children have an aqua background,\n\n\nwidgets & content-items have a red border, and\n\n\na gradual lightening from black indicates the topography.\n\n\nYou can click through the menu to view zones collapse when they lack content.\n\n\n\n\nYou will typically provide content for zones by using the Admin Panel. \n\n\nOverview of the CSS Styles\n\n\nThe style sheet (Site.css) for the Theme Machine provides an extensive set of styles for fine-grained control of the look and feel of your website. The style sheet groups styles to make it easier for you to locate a style that you want to customize. The following table shows the groupings and describes the type of styles available to you.\n\n\n\n\n\n\n\n\nGrouping\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nGeneral\n\n\nContains the default styles for the body, headings, lists, and text elements.\n\n\n\n\n\n\nForms\n\n\nContains styles related to HTML forms, such as \nform\n, \nlegend\n, \nfieldset\n, \nlabel\n, and \ninput\n.\n\n\n\n\n\n\nStructure\n\n\nContains page layout styles for each of the zones defined in the Theme Machine.\n\n\n\n\n\n\nMain\n\n\nContains styles defined for blog posts, comments, tagged search, and search results.\n\n\n\n\n\n\nSecondary\n\n\nContains additional layout styles for secondary content in aside zones, tripel zones, and footer quad zones.\n\n\n\n\n\n\nWidgets\n\n\nContains styles for selected widgets such as the search widget, edit-mode widgets, and content mode.\n\n\n\n\n\n\nPager\n\n\nContains styles related to a pager shape.\n\n\n\n\n\n\nMisc\n\n\nContains styles for miscellaneous formatting, such as small, large, quiet, and highlight.\n\n\n\n\n\n\n\n\nCreating a Child Theme\n\n\nYou can create your own theme by customizing the Theme Machine. However, you should not edit the Theme Machine files directly. Instead, you should create a child theme and copy any files that you intend to change into the child theme. You don't need to copy any files that you do not intend to change -- a child theme inherits from its parent theme, and overrides just the files from the parent theme that you have customized.  When your child theme is active as the current theme, Orchard first looks to that theme to resolve files, and if not found, it will look to the parent (BaseTheme) to find the files instead (and so on... even your parent theme can have it's own parent).\n\n\nThe process of creating a child theme is this:\n\n\n\n\nGenerate the child theme's code structure using the command-line CodeGen utility.\n\n\nCopy the files you want to change from the Theme Machine to your child theme.\n\n\nEdit the files in the new child theme.\n\n\nApply the new theme to your website.\n\n\n\n\nGenerating the Theme Structure\n\n\nTo generate the code structure for your new theme, we are going to use the \nCode Generation\n feature, which can be obtained from the \nGallery\n > \nModules\n page in the admin panel.  Once you have installed and activated the code generation feature, you will be able to generate a new theme from the Orchard command-line.  Refer to the \nUsing the command-line interface\n topic if you need to know more about using commands in Orchard.\n\n\nOpen the Orchard command-line utility and enter the following command:\n\n\ncodegen theme MyTheme /BasedOn:TheThemeMachine\n\n\n\nIf you are using Visual Studio for editing (or if you plan for your Theme to eventually contain code files too), you may also want specify the CreateProject and IncludeInSolution options as follows:\n\n\ncodegen theme MyTheme /BasedOn:TheThemeMachine /CreateProject:true /IncludeInSolution:true\n\n\n\nThis line tells Orchard to create the code structure for a new theme, sets the name of the theme to \nMyTheme\n, and directs Orchard to base the theme on \nTheThemeMachine\n. The CodeGen command generates the following folder structure:\n\n\n\n\nThe only files created are the Theme.txt and Views\\Web.config files. The Theme.txt file (the theme manifest) is where the Admin Panel looks for information such as the name of the theme.  This is also where your BaseTheme is specified. Web.config is a configuration file that ASP.NET MVC requires for rendering any views placed in the Views folder. You seldom have to make changes in the Web.config file. \n\n\nCopying Files from the Theme Machine\n\n\nTo keep this example simple, the only file you will customize will be the Site.css file. Copy the Site.css file from TheThemeMachine\\Styles folder to the MyTheme\\Styles folder.\n\n\nCurrently, you must also copy the TheThemeMachine\\Views\\Layout.cshtml file to the MyTheme\\Views folder. (It's anticipated that this step will not be required in later releases.)\n\n\nCustomizing Theme Files\n\n\nAfter copying the files you want to customize into your new theme folder, you can make changes to those files. You can also create new files as needed. In this example, the only change you will make is the background color for the body of the page. \n\n\nIn the Site.css file that you copied, find the \nbody\n style in the \nGeneral\n section. Then change the background color from \n#fff\n to \n#fff8dc\n as shown in the following example:\n\n\nbody { \n  font-size: 81.3%;\n  color: #434343;\n  background: #fff8dc; \n  font-family: Tahoma, \"Helvetica Neue\", Arial, Helvetica, sans-serif;\n}\n\n\n\nThis will change the background color to cornsilk, which is a light yellow.\n\n\nYou can also provide a thumbnail image of your new theme in the theme's root folder. The image file must be named Theme.png. The image will be displayed in the Admin Panel to help users select a theme.\n\n\nThe following image was copied from TheThemeMachine and changed to show the light-yellow background color. \n\n\n\nApplying Your New Theme\n\n\nIn the Admin Panel, under \nThemes\n, select \nInstalled\n. The \nInstalled\n tab will display the new theme under the \nAvailable Themes\n:\n\n\n \n\n\nClick \nSet Current\n. The \nInstalled\n tab is redisplayed showing \nMyTheme\n as the current theme.\n\n\nYou can now go to your website to see the new theme in action. \n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.8\n\n\n9-8-14: Updated screen shots for Customizing Default Theme.",
            "title": "Customizing Themes"
        },
        {
            "location": "/Documentation/Customizing-the-default-theme/#introducing-the-theme-machine",
            "text": "The Theme Machine provides a flexible and powerful foundation for themes. The following image shows the file structure.   The files at the heart of the Theme Machine are the layout page (Layout.cshtml) and style sheet (Site.css).",
            "title": "Introducing the Theme Machine"
        },
        {
            "location": "/Documentation/Customizing-the-default-theme/#overview-of-the-layout-page",
            "text": "The layout page defines multiple zones. Each zone has a conditional statements, so that it renders if and only if it has content. If you don't provide the content, the rendered page will not contain the zone. The following images show the zones.   This live demo site  shows the anatomy of a theme.   Zones and their children have an aqua background,  widgets & content-items have a red border, and  a gradual lightening from black indicates the topography.  You can click through the menu to view zones collapse when they lack content.   You will typically provide content for zones by using the Admin Panel.",
            "title": "Overview of the Layout Page"
        },
        {
            "location": "/Documentation/Customizing-the-default-theme/#overview-of-the-css-styles",
            "text": "The style sheet (Site.css) for the Theme Machine provides an extensive set of styles for fine-grained control of the look and feel of your website. The style sheet groups styles to make it easier for you to locate a style that you want to customize. The following table shows the groupings and describes the type of styles available to you.     Grouping  Description      General  Contains the default styles for the body, headings, lists, and text elements.    Forms  Contains styles related to HTML forms, such as  form ,  legend ,  fieldset ,  label , and  input .    Structure  Contains page layout styles for each of the zones defined in the Theme Machine.    Main  Contains styles defined for blog posts, comments, tagged search, and search results.    Secondary  Contains additional layout styles for secondary content in aside zones, tripel zones, and footer quad zones.    Widgets  Contains styles for selected widgets such as the search widget, edit-mode widgets, and content mode.    Pager  Contains styles related to a pager shape.    Misc  Contains styles for miscellaneous formatting, such as small, large, quiet, and highlight.",
            "title": "Overview of the CSS Styles"
        },
        {
            "location": "/Documentation/Customizing-the-default-theme/#creating-a-child-theme",
            "text": "You can create your own theme by customizing the Theme Machine. However, you should not edit the Theme Machine files directly. Instead, you should create a child theme and copy any files that you intend to change into the child theme. You don't need to copy any files that you do not intend to change -- a child theme inherits from its parent theme, and overrides just the files from the parent theme that you have customized.  When your child theme is active as the current theme, Orchard first looks to that theme to resolve files, and if not found, it will look to the parent (BaseTheme) to find the files instead (and so on... even your parent theme can have it's own parent).  The process of creating a child theme is this:   Generate the child theme's code structure using the command-line CodeGen utility.  Copy the files you want to change from the Theme Machine to your child theme.  Edit the files in the new child theme.  Apply the new theme to your website.",
            "title": "Creating a Child Theme"
        },
        {
            "location": "/Documentation/Customizing-the-default-theme/#generating-the-theme-structure",
            "text": "To generate the code structure for your new theme, we are going to use the  Code Generation  feature, which can be obtained from the  Gallery  >  Modules  page in the admin panel.  Once you have installed and activated the code generation feature, you will be able to generate a new theme from the Orchard command-line.  Refer to the  Using the command-line interface  topic if you need to know more about using commands in Orchard.  Open the Orchard command-line utility and enter the following command:  codegen theme MyTheme /BasedOn:TheThemeMachine  If you are using Visual Studio for editing (or if you plan for your Theme to eventually contain code files too), you may also want specify the CreateProject and IncludeInSolution options as follows:  codegen theme MyTheme /BasedOn:TheThemeMachine /CreateProject:true /IncludeInSolution:true  This line tells Orchard to create the code structure for a new theme, sets the name of the theme to  MyTheme , and directs Orchard to base the theme on  TheThemeMachine . The CodeGen command generates the following folder structure:   The only files created are the Theme.txt and Views\\Web.config files. The Theme.txt file (the theme manifest) is where the Admin Panel looks for information such as the name of the theme.  This is also where your BaseTheme is specified. Web.config is a configuration file that ASP.NET MVC requires for rendering any views placed in the Views folder. You seldom have to make changes in the Web.config file.",
            "title": "Generating the Theme Structure"
        },
        {
            "location": "/Documentation/Customizing-the-default-theme/#copying-files-from-the-theme-machine",
            "text": "To keep this example simple, the only file you will customize will be the Site.css file. Copy the Site.css file from TheThemeMachine\\Styles folder to the MyTheme\\Styles folder.  Currently, you must also copy the TheThemeMachine\\Views\\Layout.cshtml file to the MyTheme\\Views folder. (It's anticipated that this step will not be required in later releases.)",
            "title": "Copying Files from the Theme Machine"
        },
        {
            "location": "/Documentation/Customizing-the-default-theme/#customizing-theme-files",
            "text": "After copying the files you want to customize into your new theme folder, you can make changes to those files. You can also create new files as needed. In this example, the only change you will make is the background color for the body of the page.   In the Site.css file that you copied, find the  body  style in the  General  section. Then change the background color from  #fff  to  #fff8dc  as shown in the following example:  body { \n  font-size: 81.3%;\n  color: #434343;\n  background: #fff8dc; \n  font-family: Tahoma, \"Helvetica Neue\", Arial, Helvetica, sans-serif;\n}  This will change the background color to cornsilk, which is a light yellow.  You can also provide a thumbnail image of your new theme in the theme's root folder. The image file must be named Theme.png. The image will be displayed in the Admin Panel to help users select a theme.  The following image was copied from TheThemeMachine and changed to show the light-yellow background color.",
            "title": "Customizing Theme Files"
        },
        {
            "location": "/Documentation/Customizing-the-default-theme/#applying-your-new-theme",
            "text": "In the Admin Panel, under  Themes , select  Installed . The  Installed  tab will display the new theme under the  Available Themes :     Click  Set Current . The  Installed  tab is redisplayed showing  MyTheme  as the current theme.  You can now go to your website to see the new theme in action.",
            "title": "Applying Your New Theme"
        },
        {
            "location": "/Documentation/Customizing-the-default-theme/#change-history",
            "text": "Updates for Orchard 1.8  9-8-14: Updated screen shots for Customizing Default Theme.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Gallery-overview/",
            "text": "Orchard is a modular web-based CMS that's designed to be extended by installing additional module packages and by enabling features contained in those modules. A module package consists of a ZIP file in the \n.nupkg\n format. In Orchard, a theme is also a module. To facilitate sharing for modules and themes, Orchard lets you search for modules and themes online and install them directly to your site.\n\n\nBrowsing the Gallery Web Site\n\n\nTo find available modules and themes and download them to your computer, you can browse the \nOrchard Gallery\n website.  For more information, see \nBrowsing the Gallery Website\n.\n\n\nInstalling Modules and Themes from the Gallery\n\n\nYou can also access the Gallery from within your Orchard site in order to download or install modules and themes. To do so, click \nThemes\n or \nModules\n on the dashboard and then click the \nGallery\n tab.  \n\n\n\n\nNote:\n  The \nGallery\n feature is enabled by default. For more information about working with the \nGallery\n feature, including how to enable or disable it, see \nInstalling Modules and Themes from the Gallery\n.\n\n\n\n\nContributing a Module or Theme to the Gallery\n\n\nIf you are a developer who writes modules or themes for Orchard, you are probably interested in sharing your module with others in the gallery. For information about how to do this, see \nContributing a Module or Theme to the Gallery\n.\n\n\nRegistering Additional Gallery Feeds\n\n\nThe Orchard Gallery is just one gallery that you can browse. By default, a single feed is exposed from \nhttp://packages.orchardproject.net/FeedService.svc\n. Orchard allows you to register additional feeds for other galleries. To register a feed, expand the dashboard \nSettings\n section and then click \nGallery\n.  On the \nGallery Feeds\n page you can add new feeds or delete existing ones. For more information, see \nRegistering Additional Gallery Feeds\n.\n\n\nIf you want to set up your own gallery, a reference implementation for exposing a gallery feed and website is available on \nOrchardGallery.CodePlex.com\n and \nGalleryServer.CodePlex.com\n.  \n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.1\n\n\n3-22-11: Updated dashboard and UI references in the text.",
            "title": "Gallery Overview"
        },
        {
            "location": "/Documentation/Gallery-overview/#browsing-the-gallery-web-site",
            "text": "To find available modules and themes and download them to your computer, you can browse the  Orchard Gallery  website.  For more information, see  Browsing the Gallery Website .",
            "title": "Browsing the Gallery Web Site"
        },
        {
            "location": "/Documentation/Gallery-overview/#installing-modules-and-themes-from-the-gallery",
            "text": "You can also access the Gallery from within your Orchard site in order to download or install modules and themes. To do so, click  Themes  or  Modules  on the dashboard and then click the  Gallery  tab.     Note:   The  Gallery  feature is enabled by default. For more information about working with the  Gallery  feature, including how to enable or disable it, see  Installing Modules and Themes from the Gallery .",
            "title": "Installing Modules and Themes from the Gallery"
        },
        {
            "location": "/Documentation/Gallery-overview/#contributing-a-module-or-theme-to-the-gallery",
            "text": "If you are a developer who writes modules or themes for Orchard, you are probably interested in sharing your module with others in the gallery. For information about how to do this, see  Contributing a Module or Theme to the Gallery .",
            "title": "Contributing a Module or Theme to the Gallery"
        },
        {
            "location": "/Documentation/Gallery-overview/#registering-additional-gallery-feeds",
            "text": "The Orchard Gallery is just one gallery that you can browse. By default, a single feed is exposed from  http://packages.orchardproject.net/FeedService.svc . Orchard allows you to register additional feeds for other galleries. To register a feed, expand the dashboard  Settings  section and then click  Gallery .  On the  Gallery Feeds  page you can add new feeds or delete existing ones. For more information, see  Registering Additional Gallery Feeds .  If you want to set up your own gallery, a reference implementation for exposing a gallery feed and website is available on  OrchardGallery.CodePlex.com  and  GalleryServer.CodePlex.com .",
            "title": "Registering Additional Gallery Feeds"
        },
        {
            "location": "/Documentation/Gallery-overview/#change-history",
            "text": "Updates for Orchard 1.1  3-22-11: Updated dashboard and UI references in the text.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Installing-modules-and-themes-from-the-gallery/",
            "text": "Orchard makes it easy to browse available modules and themes from an online gallery and install them using the Orchard dashboard.  This topic shows how to install both modules and themes from the gallery.\n\n\n\n\nNote:\n If your site is running under IIS, make sure you have granted read/write permissions to the ~/Themes folder under the root of your site for the service account that is being used as the IIS application pool identity. However, you should remove the write permissions on a production server.\n\n\n\n\nAccessing and Enabling the Gallery\n\n\nThe gallery feature is enabled by default in Orchard. When the gallery is enabled, a \nGallery\n tab appears at the top of the both the \nThemes\n screen and the \nModules\n screen in the dashboard. \n\n\n\n\n\n\nNote:  If the gallery feature has been disabled, there will be no \nGallery\n tab visible in the \nThemes\n or \nModules\n dashboard screens. To enable the gallery, click \nModules\n in the dashboard, find the gallery feature, and then click \nEnable\n on the feature. \n\n\n\n\nInstalling a Theme from the Gallery\n\n\nTo access the gallery for themes, click \nThemes\n in the dashboard. On the \nThemes\n screen click the \nGallery\n tab. A set of themes appears with a pair of \nInstall\n and \nDownload\n links next to each theme. \n\n\n\n\nIf you install a theme, it becomes available to apply to your site. If you download a theme, you save the theme package file to your local computer. You can then use the \nThemes\n screen in the Orchard dashboard to install the downloaded theme package. For more information, see \nInstalling Themes\n.\n\n\nPreviewing and Applying an Installed Theme\n\n\nAfter installing a new theme, you can preview, enable, and apply that theme to your site by clicking \nThemes\n in the dashboard. For more information, see \nPreviewing and Applying a Theme\n. \n\n\nInstalling a Module from the Gallery\n\n\nTo access the gallery for modules, click \nModules\n on the dashboard and then click the \nGallery\n tab. A set of modules appears with a pair of \nInstall\n and \nDownload\n links next to each module.\n\n\n\n\nAs with themes, if you install a module it becomes available to use on your site. If you download a module, you save the module package file to your local computer. You can then go to the \nModules\n screen on the dashboard, click the \nInstalled\n tab, and then click \nUpload\n to install the module in an Orchard site. For more information about how to activate a module after installing it, see \nInstalling and Upgrading Modules\n and \nEnabling and Disabling Features\n.\n\n\nOn the dashboard \nModules\n screen, click the \nInstalled\n tab. This tab displays all the modules that are installed in an Orchard site.\n\n\n\n\nNotice that on every page in the \nInstalled\n tab, there is a link that lets you upload a module package to the site.\n\n\nDisplaying Additional Gallery Feeds\n\n\nThe \nGallery\n tabs on the \nModules\n page and the \nThemes\n page of the dashboard together display the aggregated list of themes and modules exposed by all feeds registered on your site. On the \nGallery\n tabs for both themes and modules, you can use the \nFeed\n drop-down list to filter the display so that it shows all available items, or only the items from a selected feed. (This is only useful if you have multiple feeds registered.) \n\n\n\n\nBy default, the \nOrchard Gallery feed\n is registered for an Orchard site. To register additional gallery feeds see \nRegistering Additional Gallery Feeds\n.\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.1\n\n\n3-22-11:  Updated screen shots and menu or UI options.",
            "title": "Installing Modules and Themes"
        },
        {
            "location": "/Documentation/Installing-modules-and-themes-from-the-gallery/#accessing-and-enabling-the-gallery",
            "text": "The gallery feature is enabled by default in Orchard. When the gallery is enabled, a  Gallery  tab appears at the top of the both the  Themes  screen and the  Modules  screen in the dashboard.     Note:  If the gallery feature has been disabled, there will be no  Gallery  tab visible in the  Themes  or  Modules  dashboard screens. To enable the gallery, click  Modules  in the dashboard, find the gallery feature, and then click  Enable  on the feature.",
            "title": "Accessing and Enabling the Gallery"
        },
        {
            "location": "/Documentation/Installing-modules-and-themes-from-the-gallery/#installing-a-theme-from-the-gallery",
            "text": "To access the gallery for themes, click  Themes  in the dashboard. On the  Themes  screen click the  Gallery  tab. A set of themes appears with a pair of  Install  and  Download  links next to each theme.    If you install a theme, it becomes available to apply to your site. If you download a theme, you save the theme package file to your local computer. You can then use the  Themes  screen in the Orchard dashboard to install the downloaded theme package. For more information, see  Installing Themes .",
            "title": "Installing a Theme from the Gallery"
        },
        {
            "location": "/Documentation/Installing-modules-and-themes-from-the-gallery/#previewing-and-applying-an-installed-theme",
            "text": "After installing a new theme, you can preview, enable, and apply that theme to your site by clicking  Themes  in the dashboard. For more information, see  Previewing and Applying a Theme .",
            "title": "Previewing and Applying an Installed Theme"
        },
        {
            "location": "/Documentation/Installing-modules-and-themes-from-the-gallery/#installing-a-module-from-the-gallery",
            "text": "To access the gallery for modules, click  Modules  on the dashboard and then click the  Gallery  tab. A set of modules appears with a pair of  Install  and  Download  links next to each module.   As with themes, if you install a module it becomes available to use on your site. If you download a module, you save the module package file to your local computer. You can then go to the  Modules  screen on the dashboard, click the  Installed  tab, and then click  Upload  to install the module in an Orchard site. For more information about how to activate a module after installing it, see  Installing and Upgrading Modules  and  Enabling and Disabling Features .  On the dashboard  Modules  screen, click the  Installed  tab. This tab displays all the modules that are installed in an Orchard site.   Notice that on every page in the  Installed  tab, there is a link that lets you upload a module package to the site.",
            "title": "Installing a Module from the Gallery"
        },
        {
            "location": "/Documentation/Installing-modules-and-themes-from-the-gallery/#displaying-additional-gallery-feeds",
            "text": "The  Gallery  tabs on the  Modules  page and the  Themes  page of the dashboard together display the aggregated list of themes and modules exposed by all feeds registered on your site. On the  Gallery  tabs for both themes and modules, you can use the  Feed  drop-down list to filter the display so that it shows all available items, or only the items from a selected feed. (This is only useful if you have multiple feeds registered.)    By default, the  Orchard Gallery feed  is registered for an Orchard site. To register additional gallery feeds see  Registering Additional Gallery Feeds .",
            "title": "Displaying Additional Gallery Feeds"
        },
        {
            "location": "/Documentation/Installing-modules-and-themes-from-the-gallery/#change-history",
            "text": "Updates for Orchard 1.1  3-22-11:  Updated screen shots and menu or UI options.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Browsing-the-gallery-web-site/",
            "text": "The \nOrchard Gallery web site\n allows you to browse and search for available modules and themes to extend and customize the behavior of any Orchard site.  It also provides a convenient way for developers and designers to \nupload and share modules and themes with others\n. \n\n\n\n\nYou can also browse modules and themes from the gallery using the Orchard admin panel.  Refer to \nInstalling modules and themes from the gallery\n for more information. \n\n\n\n\nTo view the gallery website, navigate to \nhttp://gallery.orchardproject.net/\n in your browser.\n\n\n\n\nOn the \nModules\n tab of the website, you can browse and search for available modules. \n\n\n\n\nModules are categorized, so you can quickly find what you are looking for by clicking any category link or selecting from the category dropdown next to the search input box.  \n\n\n\n\nThe \nThemes\n tab displays a list of themes, similar to the modules section. Unlike modules, themes are not categorized.  However, both modules and themes support tags that can be specified by the author/submitter, and you can click any tag link on the site to find other items that share that tag.\n\n\n\n\nYou can search for available themes or modules by typing keywords in the search input box.  For modules, you can also search within a specific category or across all categories.\n\n\n\n\nEach module or theme in the gallery has a details page that displays more information about the package, such as screenshots, the package version, number of downloads, license information, or a project site where you can learn more.  There is a Report Abuse link on every details page that you can use to contact the gallery administrator to report inappropriate content or malware.  Please use this for abuse reports only.  If you want to report a bug or issue to the package author, please use the Project Site link instead.\n\n\n\n\n\n\nNote that a few key gallery features are remaining to implement, and those will be available on the website as soon as they are ready.  See \"About the Orchard Gallery Project\" below for more information\n\n\n\n\nMultiple Versions of the Same Package\n\n\nCurrently, each version of a package (module or theme) is listed as a unique entry in the web site, which can make it somewhat difficult to know whether you are downloading the most recent version.  \n\n\n\n\nWe have plans to address this in a future update to the gallery website (see \"About the Orchard Gallery Project\" below). For now, we recommend that you search for the name of the package (without the version number) in order to list all versions of a given package before selecting one to download. \n\n\nAbout the Orchard Gallery Project\n\n\nThe gallery website (and related feed) implementation are being developed as an open source project under the same New BSD license and contribution terms as Orchard itself, and the source code is available to you on \nOrchardGallery.CodePlex.com\n and \nGalleryServer.CodePlex.com\n).  The open source gallery project is meant to provide a reference implementation for exposing a gallery feed and website, and can be used to set up your own gallery site.  For example, the \nNuGet.org\n website uses this gallery implementation too.\n\n\nThe gallery project is a work-in-progress, and there are a number of improvements we will be making to the gallery over time.  In the near future, we are planning to implement these features:\n\n\n\n\nReviews and ratings\n\n\nCollapse all versions of a package under a single details page\n\n\nDisplay aggregate rating and download stats across all versions of a package\n\n\nBetter management and submission interface for package submitters\n\n\n\n\nIf you want to log a bug (or submit a patch) for the gallery website, or if you have a great feature suggestion we should consider, please post it to \nOrchardGallery.CodePlex.com\n.",
            "title": "Browsing the Gallery Web Site"
        },
        {
            "location": "/Documentation/Browsing-the-gallery-web-site/#multiple-versions-of-the-same-package",
            "text": "Currently, each version of a package (module or theme) is listed as a unique entry in the web site, which can make it somewhat difficult to know whether you are downloading the most recent version.     We have plans to address this in a future update to the gallery website (see \"About the Orchard Gallery Project\" below). For now, we recommend that you search for the name of the package (without the version number) in order to list all versions of a given package before selecting one to download.",
            "title": "Multiple Versions of the Same Package"
        },
        {
            "location": "/Documentation/Browsing-the-gallery-web-site/#about-the-orchard-gallery-project",
            "text": "The gallery website (and related feed) implementation are being developed as an open source project under the same New BSD license and contribution terms as Orchard itself, and the source code is available to you on  OrchardGallery.CodePlex.com  and  GalleryServer.CodePlex.com ).  The open source gallery project is meant to provide a reference implementation for exposing a gallery feed and website, and can be used to set up your own gallery site.  For example, the  NuGet.org  website uses this gallery implementation too.  The gallery project is a work-in-progress, and there are a number of improvements we will be making to the gallery over time.  In the near future, we are planning to implement these features:   Reviews and ratings  Collapse all versions of a package under a single details page  Display aggregate rating and download stats across all versions of a package  Better management and submission interface for package submitters   If you want to log a bug (or submit a patch) for the gallery website, or if you have a great feature suggestion we should consider, please post it to  OrchardGallery.CodePlex.com .",
            "title": "About the Orchard Gallery Project"
        },
        {
            "location": "/Documentation/Contributing-a-module-or-theme-to-the-gallery/",
            "text": "Have you created an Orchard module or theme that you want to share with other Orchard users?  The \nOrchard Gallery\n makes this easy, and you can always update and manage your contributions to the gallery as you have new versions to share, or when you want to make changes to existing contributions.  \n\n\nTo get started, click on the \nContribute\n tab of the gallery site.\n\n\n\n\nCreating a User Account\n\n\nTo submit a module or theme to the gallery, you must first create a user account on the gallery.  Click the \nSign In\n link in the header area of the site to get to the \nLog On\n page.  In the sidebar for the site, click the  link to \nRegister Now\n.\n\n\n\n\nOn the account registration page, specify your account details. \n\n\n\n\nUpon submitting this form, you will receive a notification that email has been sent to you.\n\n\n\n\nClick the verification link in the email in order to activate your account.\n\n\n\n\nThis will return you to the web site, where you can now sign in.\n\n\n\n\nSubmitting a Package to the Gallery\n\n\nA package is just a zipped up file (in \n.nupkg\n format) containing your module or theme, and it is easy to create a package using the orchard command-line utility.  For instructions on how to create a package, refer to these topics:\n\n\n\n\nPackaging and sharing a module\n\n\nPackaging and sharing a theme\n\n\n\n\nOnce you have packaged your module or theme, visit the \nContribute\n page on the gallery site and click the \nAdd a New Module or Theme\n link.\n\n\n\n\nUploading a package is done in three simple steps: \n\n\n\n\nUpload a package file (or specify a remote URL to the package file)\n\n\nEnter the details about your package (description, tags, license, etc)\n\n\nSpecify an optional logo and/or screenshots. \n\n\n\n\nSpecifying a Package File\n\n\nIn the first step, you will be asked to specify a package file, either by uploading from your local computer or by a specifying a URL.\n\n\n\n\nTo upload a package file, browse for a .nupkg file on your local computer that you created using the Orchard command-line utility.  You can also specify a URL to a package file if you have published it elsewhere.  For example, if you have released your package on a \nCodePlex.com\n site, you could specify the URL to your release. \n\n\n\n\nExample URL: \nhttp://orchardmaps.codeplex.com/Project/Download/FileDownload.aspx?DownloadId=187223\n\n\n\n\nIn this walkthrough, we will assume you are browsing for the package on your local computer.  Click the \nBrowse\n button to find the .nupkg file.\n\n\n\n\nSpecifying the Package Details\n\n\nOnce you upload your package, click \nNext\n and you will be presented with a form for specifying the details of your package.  One of the advantages of using the .nupkg format is that the gallery can automatically extract many details about your package from the file itself.  These details are determined by the Module.txt or Theme.txt file in your module or theme. \n\n\nMany of the fields on this form are optional, but allow you to specify tags, license information, a project web site, and other information that will help visitors of the gallery to find and learn more about your package.  \n\n\n\n\nThere are a couple key fields worth calling out:\n\n\n\n\n\n\nPackage ID\n is the unique name for your package.  It is obtained from the package when you upload it, and if you are the first person to submit a package with this ID, you will given exclusive ownership for that ID.  While you can upload additional versions of packages sharing this ID, no other submitter will be able to use this ID for their package uploads unless you grant explicit owner rights to that user. It is also possible to register a package ID in advance of uploading your module, to be sure you can claim the name that you want.\n\n\n\n\n\n\nPackage Version\n is a version number for the package, and must be unique among all other packages in the gallery that same the same package ID.  Every time you submit a package to the gallery, you will need to increment the version number for your package.  This allows users of your package to know when a new version is available.\n\n\n\n\n\n\nPackage Type\n is what determines whether your package will appear on the Modules or Themes tab of the gallery site.  Be sure to pick the right type for your package!\n\n\n\n\n\n\nSpecifying a Logo and Screenshots\n\n\nIn the final step of the submission process, you can specify a custom logo image and zero or more screenshot images, which users will be able to see on the details page for your package.  Both of these are optional, so feel free to skip this step, if you prefer not to customize the default images.\n\n\n\n\nWhen you finish the submission, you will be notified that your package will appear on the gallery shortly.  Normally, your package will appear on the site in 60 seconds or less.\n\n\n\n\nManaging your Contributions to the Gallery\n\n\nOnce your package appears on the web site, you will notice that you can perform additional tasks for this package when you are logged in:\n\n\n\n\n\n\nEdit\n allows you to return to the package details form and update information about your package.\n\n\nManage Owners\n allows you to assign additional owners for your package.\n\n\nDelete\n allows you to delete a submission from the gallery. Note: When you delete a submission, you will lose the download count history for that package version.\n\n\n\n\nTo see all of the packages that you previously uploaded to the gallery, visit the \nContribute\n tab and click the \nManage My Contributions\n link.\n\n\n\n\nAssigning Additional Owners to a Package\n\n\nBy default, you will be the only owner for packages that you contribute, and only you can edit, delete, or manage owners for the package.  However, by assigning additional owners, you can grant permissions to other users of the gallery to perform these operations on your package too.  \n\n\n\n\nBe careful that you trust users you grant ownership rights, as they will be able to perform all of the same operations on the package that you can perform, including deleting your package from the gallery.  Also, anyone with ownership rights to your package can upload additional versions of this package to the gallery.\n\n\n\n\n\n\nRegistering a Package ID in Advance\n\n\nYou may want to register a package ID ahead of time, because you want to claim the name of an idea, before you've implemented your module or theme.  You can do this from the \nContribute\n tab of the site.\n\n\n\n\n\n\nIt is a known issue that you cannot see the packages that you have previously claimed.  This will be fixed in a future update to the gallery site.\n\n\n\n\nManaging Your Account\n\n\nThe \nMy Account\n link allows you to manage your gallery account.\n\n\n\n\nYou can view your account key and reset your password from here.  You account key is used when using the \nNuGet.org\n command-line utility to upload a package to the gallery feed.",
            "title": "Contributing to the Gallery"
        },
        {
            "location": "/Documentation/Contributing-a-module-or-theme-to-the-gallery/#creating-a-user-account",
            "text": "To submit a module or theme to the gallery, you must first create a user account on the gallery.  Click the  Sign In  link in the header area of the site to get to the  Log On  page.  In the sidebar for the site, click the  link to  Register Now .   On the account registration page, specify your account details.    Upon submitting this form, you will receive a notification that email has been sent to you.   Click the verification link in the email in order to activate your account.   This will return you to the web site, where you can now sign in.",
            "title": "Creating a User Account"
        },
        {
            "location": "/Documentation/Contributing-a-module-or-theme-to-the-gallery/#submitting-a-package-to-the-gallery",
            "text": "A package is just a zipped up file (in  .nupkg  format) containing your module or theme, and it is easy to create a package using the orchard command-line utility.  For instructions on how to create a package, refer to these topics:   Packaging and sharing a module  Packaging and sharing a theme   Once you have packaged your module or theme, visit the  Contribute  page on the gallery site and click the  Add a New Module or Theme  link.   Uploading a package is done in three simple steps:    Upload a package file (or specify a remote URL to the package file)  Enter the details about your package (description, tags, license, etc)  Specify an optional logo and/or screenshots.",
            "title": "Submitting a Package to the Gallery"
        },
        {
            "location": "/Documentation/Contributing-a-module-or-theme-to-the-gallery/#specifying-a-package-file",
            "text": "In the first step, you will be asked to specify a package file, either by uploading from your local computer or by a specifying a URL.   To upload a package file, browse for a .nupkg file on your local computer that you created using the Orchard command-line utility.  You can also specify a URL to a package file if you have published it elsewhere.  For example, if you have released your package on a  CodePlex.com  site, you could specify the URL to your release.    Example URL:  http://orchardmaps.codeplex.com/Project/Download/FileDownload.aspx?DownloadId=187223   In this walkthrough, we will assume you are browsing for the package on your local computer.  Click the  Browse  button to find the .nupkg file.",
            "title": "Specifying a Package File"
        },
        {
            "location": "/Documentation/Contributing-a-module-or-theme-to-the-gallery/#specifying-the-package-details",
            "text": "Once you upload your package, click  Next  and you will be presented with a form for specifying the details of your package.  One of the advantages of using the .nupkg format is that the gallery can automatically extract many details about your package from the file itself.  These details are determined by the Module.txt or Theme.txt file in your module or theme.   Many of the fields on this form are optional, but allow you to specify tags, license information, a project web site, and other information that will help visitors of the gallery to find and learn more about your package.     There are a couple key fields worth calling out:    Package ID  is the unique name for your package.  It is obtained from the package when you upload it, and if you are the first person to submit a package with this ID, you will given exclusive ownership for that ID.  While you can upload additional versions of packages sharing this ID, no other submitter will be able to use this ID for their package uploads unless you grant explicit owner rights to that user. It is also possible to register a package ID in advance of uploading your module, to be sure you can claim the name that you want.    Package Version  is a version number for the package, and must be unique among all other packages in the gallery that same the same package ID.  Every time you submit a package to the gallery, you will need to increment the version number for your package.  This allows users of your package to know when a new version is available.    Package Type  is what determines whether your package will appear on the Modules or Themes tab of the gallery site.  Be sure to pick the right type for your package!",
            "title": "Specifying the Package Details"
        },
        {
            "location": "/Documentation/Contributing-a-module-or-theme-to-the-gallery/#specifying-a-logo-and-screenshots",
            "text": "In the final step of the submission process, you can specify a custom logo image and zero or more screenshot images, which users will be able to see on the details page for your package.  Both of these are optional, so feel free to skip this step, if you prefer not to customize the default images.   When you finish the submission, you will be notified that your package will appear on the gallery shortly.  Normally, your package will appear on the site in 60 seconds or less.",
            "title": "Specifying a Logo and Screenshots"
        },
        {
            "location": "/Documentation/Contributing-a-module-or-theme-to-the-gallery/#managing-your-contributions-to-the-gallery",
            "text": "Once your package appears on the web site, you will notice that you can perform additional tasks for this package when you are logged in:    Edit  allows you to return to the package details form and update information about your package.  Manage Owners  allows you to assign additional owners for your package.  Delete  allows you to delete a submission from the gallery. Note: When you delete a submission, you will lose the download count history for that package version.   To see all of the packages that you previously uploaded to the gallery, visit the  Contribute  tab and click the  Manage My Contributions  link.",
            "title": "Managing your Contributions to the Gallery"
        },
        {
            "location": "/Documentation/Contributing-a-module-or-theme-to-the-gallery/#assigning-additional-owners-to-a-package",
            "text": "By default, you will be the only owner for packages that you contribute, and only you can edit, delete, or manage owners for the package.  However, by assigning additional owners, you can grant permissions to other users of the gallery to perform these operations on your package too.     Be careful that you trust users you grant ownership rights, as they will be able to perform all of the same operations on the package that you can perform, including deleting your package from the gallery.  Also, anyone with ownership rights to your package can upload additional versions of this package to the gallery.",
            "title": "Assigning Additional Owners to a Package"
        },
        {
            "location": "/Documentation/Contributing-a-module-or-theme-to-the-gallery/#registering-a-package-id-in-advance",
            "text": "You may want to register a package ID ahead of time, because you want to claim the name of an idea, before you've implemented your module or theme.  You can do this from the  Contribute  tab of the site.    It is a known issue that you cannot see the packages that you have previously claimed.  This will be fixed in a future update to the gallery site.",
            "title": "Registering a Package ID in Advance"
        },
        {
            "location": "/Documentation/Contributing-a-module-or-theme-to-the-gallery/#managing-your-account",
            "text": "The  My Account  link allows you to manage your gallery account.   You can view your account key and reset your password from here.  You account key is used when using the  NuGet.org  command-line utility to upload a package to the gallery feed.",
            "title": "Managing Your Account"
        },
        {
            "location": "/Documentation/Module-gallery-feeds/",
            "text": "To facilitate sharing of modules and themes, Orchard lets you register gallery feeds. When gallery feeds are registered in an Orchard site, you can browse, install, or download the available modules and themes from the feeds by using the Orchard dashboard. This topic shows you how to register new gallery feeds and remove existing feeds from an Orchard site.\n\n\nTo see the gallery feed registration screen, expand the dashboard \nSettings\n section and then click \nGallery\n.  \n\n\n\n\nThe \nGallery Feeds\n screen displays currently registered feeds. \n\n\n\n\nAs the illustration shows, by default an Orchard site provides a single registered gallery feed from \nhttp://packages.orchardproject.net/FeedService.svc\n. You can add feeds or delete existing feeds.\n\n\nTo register an additional feed, click the \nAdd Feed\n button.\n\n\nIn the \nAdd a Feed\n screen, enter a URL and then click \nAdd Feed\n.\n\n\n\n\n\n\nNote\n For information about publishing a module or theme to the default Orchard gallery feed, visit the \ngallery website\n. To learn how to create and expose a custom gallery of themes or modules, see the reference implementation of a gallery website at \nOrchardGallery.CodePlex.com\n and \nGalleryServer.CodePlex.com\n.  \n\n\n\n\nTo view the contents of a feed in your browser, click the feed link in the \nGallery Feeds\n screen. (If you are using Internet Explorer and it renders the gallery instead of displaying the feed contents, go to \nInternet Options\n and turn off the feed-reading feature.) \n\n\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.8\n\n\n9-04-14: Updated the gallery feed and the screen shots.\n\n\n\n\n\n\nUpdates for Orchard 1.1\n\n\n3-23-11: Updated screens and UI options for registering feeds.",
            "title": "Registering Additional Gallery Feeds"
        },
        {
            "location": "/Documentation/Module-gallery-feeds/#change-history",
            "text": "Updates for Orchard 1.8  9-04-14: Updated the gallery feed and the screen shots.    Updates for Orchard 1.1  3-23-11: Updated screens and UI options for registering feeds.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Enabling-and-disabling-features/",
            "text": "You can add additional functionality to your site by enabling and disabling features exposed by the modules that are installed to Orchard.  To view the available features, click \nFeatures\n under the \nModules\n heading in the Orchard admin panel.\n\n\n\n\nThe \nFeatures\n screen displays the available features that can be enabled or disabled. Depending on which features are enabled or disabled, your site will have different admin panel options, front-end user interface elements, and other behaviors. The default view of available features displays in \"Box\" view (to maximize the number of features displayed at a glance).\n\n\nYou can also switch views to \"List\" view if you prefer to see your features as a list of items with more verbose descriptions.\n\n\n\n\nTo enable a feature, simply click \nEnable\n for that feature.\n\n\n\n\nWhen a feature is enabled a message appears at the top of the \nFeatures\n screen telling you the feature was enabled successfully.\n\n\n\n\nA feature can depend on one or more other features (listed under the feature name). When a feature with dependencies is enabled, the dependencies are also automatically enabled.  For example, the \nGallery\n feature depends on the \nPackaging Commands\n feature, which in turn depends on \nPackaging\n. \n\n\n\n\nEnabling \nGallery\n will enable \nPackaging Commands\n and \nPackaging\n.\n\n\n\n\nEnabling a feature (such as \nGallery\n), will sometimes add additional menu items in the admin panel, as shown in the previous image.\n\n\nOrchard also provides a command-line interface, from which you can also list, enable, and disable features. You can find the Orchard command-line tool in the bin directory of the application, and run it from the root of the website by typing \nbin\\orchard.exe\n at the Windows command-prompt.  To list available features, type \nfeature list\n  or \nfeature list /Summary:true\n at the command-prompt. \n\n\n\n\nEnable a feature from the command-line by \ntyping feature enable &lt;feature-name&gt;\n, for example: \nfeature enable Gallery\n.\n\n\n\n\nFor more information about the Orchard command-line interface, see \nUsing the command-line interface\n.\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.8\n\n\n9-07-14: Updated all the screen shots for Enabling/Disabling feaures",
            "title": "Enabling and Disabling Features"
        },
        {
            "location": "/Documentation/Enabling-and-disabling-features/#change-history",
            "text": "Updates for Orchard 1.8  9-07-14: Updated all the screen shots for Enabling/Disabling feaures",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Using-the-command-line-interface/",
            "text": "Orchard provides a command-line interface for performing many of the functions that are available from the admin panel (and some that aren't).  The command-line tool is named \"orchard.exe\" and is located in the bin directory underneath to root of your site.  To run the command-line tool, first open a command prompt on the root of the site (i.e. Orchard.Web). This can be done for example by SHIFT+right-clicking on the folder in Windows Explorer and choosing \"Open command window here\". From there, type \"bin\\orchard.exe\".  Note that you need to run this tool from the root of your site.\n\n\nUsing Commands\n\n\n\n\nTo view a list of available commands, type \"help commands\" at the prompt.  \n\n\n\n\nIf you run Orchard.exe before you have set up your site, the only command you can run is the setup command.  This performs exactly the same function as running Orchard in the browser and completing the setup form (to enter a site name, admin user name, password, and database options).  Additionally, the setup command takes an optional argument, which is a list of features to enable at setup-time.\n\n\n\n\nAfter running the setup command, you can type \"help commands\" again to reveal more commands.   \n\n\norchard> help commands\nList of available commands:\n---------------------------\n\nblog create /Slug:<slug> /Title:<title> /Owner:<username> [/MenuText:<menu text>]\n        Creates a new Blog\n\nblog import /Slug:<slug> /FeedUrl:<feed url> /Owner:<username>\n        Import all items from <feed url> into the blog at the specified <slug>\n\ncultures get site culture\n        Get culture for the site\n\ncultures list\n        List site cultures\n\ncultures set site culture <culture-name>\n        Set culture for the site\n\nfeature disable <feature-name-1> ... <feature-name-n>\n        Disable one or more features\n\nfeature enable <feature-name-1> ... <feature-name-n>\n        Enable one or more features\n\nfeature list [/Summary:true|false]\n        Display list of available features\n\nhelp <command>\n        Display help text for <command>\n\nhelp commands\n        Display help text for all available commands\n\npackage create <extensionName> <path>\n    Create a package for the extension <extensionName>\n    (an extension being a module or a theme).\n    The package will be output at the <path> specified.\n    The default filename is Orchard.[Module|Theme].<extensionName>.<extensionVersion>.nupkg.\n    For example, \"package create SampleModule c:\\temp\" will create the package\n    \"c:\\temp\\Orchard.Module.SampleModule.1.0.0.nupkg\".\n\npackage install <packageId> <location> /Version:<version>\n        Install a module or a theme from a package file.\n\npackage uninstall <packageId>\n    Uninstall a module or a theme.\n    The <packageId> should take the format Orchard.[Module|Theme].<extensionName>.\n    For example, \"package uninstall Orchard.Module.SampleModule\" will uninstall the Module under the \"~/Modules/SampleModule\" directory and\n    \"package uninstall Orchard.Theme.SampleTheme\" will uninstall the Theme under the \"~/Themes/SampleTheme\" directory.\n\nuser create /UserName:<username> /Password:<password> /Email:<email>\n        Creates a new User\n\n\n\nThe available commands depends on the features that are currently enabled for your site. To list the features that you can enable or disable, type \"feature list\" or \"feature list /Summary:true\". You can enable additional features (and thus, additional commands), by typing \"feature enable <feature-name> at the command-prompt.\n\n\norchard> feature list /Summary:true\nCommon, Enabled\nContainers, Enabled\nContents, Enabled\nDashboard, Enabled\nDatabaseUpdate, Disabled\nFeeds, Enabled\nGallery, Enabled\nHomePage, Enabled\nLucene, Disabled\nNavigation, Enabled\nOrchard.ArchiveLater, Disabled\nOrchard.Blogs, Enabled\nOrchard.Blogs.RemotePublishing, Disabled\nOrchard.CodeGeneration, Enabled\nOrchard.Comments, Enabled\nOrchard.ContentTypes, Enabled\nOrchard.Email, Disabled\nOrchard.Experimental, Disabled\nOrchard.Experimental.TestingLists, Disabled\nOrchard.Experimental.WebCommandLine, Disabled\nOrchard.Indexing, Disabled\nOrchard.jQuery, Enabled\nOrchard.Lists, Enabled\nOrchard.Localization, Disabled\nOrchard.Media, Enabled\nOrchard.Messaging, Disabled\nOrchard.Migrations, Disabled\nOrchard.Modules, Enabled\nOrchard.MultiTenancy, Disabled\nOrchard.Packaging, Enabled\nOrchard.Pages, Enabled\nOrchard.PublishLater, Enabled\nOrchard.Roles, Enabled\nOrchard.Scripting, Enabled\nOrchard.Scripting.Dlr, Disabled\nOrchard.Scripting.Lightweight, Enabled\nOrchard.Search, Disabled\nOrchard.Setup, Disabled\nOrchard.Tags, Enabled\nOrchard.Themes, Enabled\nOrchard.Users, Enabled\nOrchard.Widgets, Enabled\nPackagingServices, Enabled\nProfiling, Disabled\nReports, Enabled\nRoutable, Enabled\nSafeMode, Disabled\nScheduling, Enabled\nSettings, Enabled\nShapes, Enabled\nTheAdmin, Disabled\nTheThemeMachine, Enabled\nTinyMce, Enabled\nXmlRpc, Disabled\n\n\n\nBatched or scripted Commands\n\n\nThere are two specific \"Non-interactive\" modes; single command and response file. Each allow for useful batching of commands in a non-interactive context.\nCommands still need to have been enabled, and orchard.exe still needs to be launched from the correct location for each command type.\n\n\nSingle Command\n\n\nSingle command is exactly as you would expect. A single command can be run and the orchard.exe tool will exit directly after completion.\n\n\nFrom the Orchard.Web/bin path\n\n\norchard package create \"Orchard.Blogs\" \"c:\\\\temp\\\\\"\n\n\n\nResponse File\n\n\nA response file simply contains a series of lines, each one representing a command to be executed. This is an excellent way\nto run multiple commands without the large footprint of the orchard context initialisation.\n\n\nExample response file text (myfile.txt):\n\n\npackage create \"Orchard.Blogs\" \"c:\\\\temp\\\\\"\npackage create \"Orchard.Users\" \"c:\\\\temp\\\\\"\n\n\n\nTo execute this response file run the orchard.exe in the single command mode as above, but note the \"@\" prefix on the parameter, \nindicating a response file\n\n\norchard @myfile.txt\n\n\n\nAdding Commands\n\n\nModules developers can add their own commands to the system by implementing a new class deriving from Orchard.Commands.DefaultOrchardCommandHandler. A command is simply a method on that class that has the CommandName attribute. The following code creates a new \"hello world\" command that takes a name as a parameter and can take an optional \"YouRock\" switch.\n\n\n[CommandName(\"hello world\")]\n[CommandHelp(@\"hello world <name> [/YouRock:true|false]\nSays hello and whether you rock or not.\")]\n[OrchardSwitches(\"YouRock\")]\npublic void HelloWorld(string name) {\n    Context.Output.WriteLine(T(\"Hello {0}.\", name ?? \"world\"));\n    Context.Output.WriteLine(YouRock ? \"You rock.\" : \"You do not rock.\");\n}\n\n\n\nThe switch itself is declared as a property of the class:\n\n\n[OrchardSwitch]\npublic bool YouRock { get; set; }\n\n\n\nCommands run in the full Orchard environment and can query the database, inject dependencies, and in general do almost anything that can be done from code running in the web site.\n\n\nThrowing Exceptions From Commands\n\n\nThrowing from a command handler is not recommended. Instead, whenever possible, write to the context output and return. If you do want to throw a generic exception, you should throw an OrchardException.",
            "title": "Using the Command-Line Interface"
        },
        {
            "location": "/Documentation/Using-the-command-line-interface/#using-commands",
            "text": "To view a list of available commands, type \"help commands\" at the prompt.     If you run Orchard.exe before you have set up your site, the only command you can run is the setup command.  This performs exactly the same function as running Orchard in the browser and completing the setup form (to enter a site name, admin user name, password, and database options).  Additionally, the setup command takes an optional argument, which is a list of features to enable at setup-time.   After running the setup command, you can type \"help commands\" again to reveal more commands.     orchard> help commands\nList of available commands:\n---------------------------\n\nblog create /Slug:<slug> /Title:<title> /Owner:<username> [/MenuText:<menu text>]\n        Creates a new Blog\n\nblog import /Slug:<slug> /FeedUrl:<feed url> /Owner:<username>\n        Import all items from <feed url> into the blog at the specified <slug>\n\ncultures get site culture\n        Get culture for the site\n\ncultures list\n        List site cultures\n\ncultures set site culture <culture-name>\n        Set culture for the site\n\nfeature disable <feature-name-1> ... <feature-name-n>\n        Disable one or more features\n\nfeature enable <feature-name-1> ... <feature-name-n>\n        Enable one or more features\n\nfeature list [/Summary:true|false]\n        Display list of available features\n\nhelp <command>\n        Display help text for <command>\n\nhelp commands\n        Display help text for all available commands\n\npackage create <extensionName> <path>\n    Create a package for the extension <extensionName>\n    (an extension being a module or a theme).\n    The package will be output at the <path> specified.\n    The default filename is Orchard.[Module|Theme].<extensionName>.<extensionVersion>.nupkg.\n    For example, \"package create SampleModule c:\\temp\" will create the package\n    \"c:\\temp\\Orchard.Module.SampleModule.1.0.0.nupkg\".\n\npackage install <packageId> <location> /Version:<version>\n        Install a module or a theme from a package file.\n\npackage uninstall <packageId>\n    Uninstall a module or a theme.\n    The <packageId> should take the format Orchard.[Module|Theme].<extensionName>.\n    For example, \"package uninstall Orchard.Module.SampleModule\" will uninstall the Module under the \"~/Modules/SampleModule\" directory and\n    \"package uninstall Orchard.Theme.SampleTheme\" will uninstall the Theme under the \"~/Themes/SampleTheme\" directory.\n\nuser create /UserName:<username> /Password:<password> /Email:<email>\n        Creates a new User  The available commands depends on the features that are currently enabled for your site. To list the features that you can enable or disable, type \"feature list\" or \"feature list /Summary:true\". You can enable additional features (and thus, additional commands), by typing \"feature enable <feature-name> at the command-prompt.  orchard> feature list /Summary:true\nCommon, Enabled\nContainers, Enabled\nContents, Enabled\nDashboard, Enabled\nDatabaseUpdate, Disabled\nFeeds, Enabled\nGallery, Enabled\nHomePage, Enabled\nLucene, Disabled\nNavigation, Enabled\nOrchard.ArchiveLater, Disabled\nOrchard.Blogs, Enabled\nOrchard.Blogs.RemotePublishing, Disabled\nOrchard.CodeGeneration, Enabled\nOrchard.Comments, Enabled\nOrchard.ContentTypes, Enabled\nOrchard.Email, Disabled\nOrchard.Experimental, Disabled\nOrchard.Experimental.TestingLists, Disabled\nOrchard.Experimental.WebCommandLine, Disabled\nOrchard.Indexing, Disabled\nOrchard.jQuery, Enabled\nOrchard.Lists, Enabled\nOrchard.Localization, Disabled\nOrchard.Media, Enabled\nOrchard.Messaging, Disabled\nOrchard.Migrations, Disabled\nOrchard.Modules, Enabled\nOrchard.MultiTenancy, Disabled\nOrchard.Packaging, Enabled\nOrchard.Pages, Enabled\nOrchard.PublishLater, Enabled\nOrchard.Roles, Enabled\nOrchard.Scripting, Enabled\nOrchard.Scripting.Dlr, Disabled\nOrchard.Scripting.Lightweight, Enabled\nOrchard.Search, Disabled\nOrchard.Setup, Disabled\nOrchard.Tags, Enabled\nOrchard.Themes, Enabled\nOrchard.Users, Enabled\nOrchard.Widgets, Enabled\nPackagingServices, Enabled\nProfiling, Disabled\nReports, Enabled\nRoutable, Enabled\nSafeMode, Disabled\nScheduling, Enabled\nSettings, Enabled\nShapes, Enabled\nTheAdmin, Disabled\nTheThemeMachine, Enabled\nTinyMce, Enabled\nXmlRpc, Disabled",
            "title": "Using Commands"
        },
        {
            "location": "/Documentation/Using-the-command-line-interface/#batched-or-scripted-commands",
            "text": "There are two specific \"Non-interactive\" modes; single command and response file. Each allow for useful batching of commands in a non-interactive context.\nCommands still need to have been enabled, and orchard.exe still needs to be launched from the correct location for each command type.",
            "title": "Batched or scripted Commands"
        },
        {
            "location": "/Documentation/Using-the-command-line-interface/#single-command",
            "text": "Single command is exactly as you would expect. A single command can be run and the orchard.exe tool will exit directly after completion.  From the Orchard.Web/bin path  orchard package create \"Orchard.Blogs\" \"c:\\\\temp\\\\\"",
            "title": "Single Command"
        },
        {
            "location": "/Documentation/Using-the-command-line-interface/#response-file",
            "text": "A response file simply contains a series of lines, each one representing a command to be executed. This is an excellent way\nto run multiple commands without the large footprint of the orchard context initialisation.  Example response file text (myfile.txt):  package create \"Orchard.Blogs\" \"c:\\\\temp\\\\\"\npackage create \"Orchard.Users\" \"c:\\\\temp\\\\\"  To execute this response file run the orchard.exe in the single command mode as above, but note the \"@\" prefix on the parameter, \nindicating a response file  orchard @myfile.txt",
            "title": "Response File"
        },
        {
            "location": "/Documentation/Using-the-command-line-interface/#adding-commands",
            "text": "Modules developers can add their own commands to the system by implementing a new class deriving from Orchard.Commands.DefaultOrchardCommandHandler. A command is simply a method on that class that has the CommandName attribute. The following code creates a new \"hello world\" command that takes a name as a parameter and can take an optional \"YouRock\" switch.  [CommandName(\"hello world\")]\n[CommandHelp(@\"hello world <name> [/YouRock:true|false]\nSays hello and whether you rock or not.\")]\n[OrchardSwitches(\"YouRock\")]\npublic void HelloWorld(string name) {\n    Context.Output.WriteLine(T(\"Hello {0}.\", name ?? \"world\"));\n    Context.Output.WriteLine(YouRock ? \"You rock.\" : \"You do not rock.\");\n}  The switch itself is declared as a property of the class:  [OrchardSwitch]\npublic bool YouRock { get; set; }  Commands run in the full Orchard environment and can query the database, inject dependencies, and in general do almost anything that can be done from code running in the web site.",
            "title": "Adding Commands"
        },
        {
            "location": "/Documentation/Using-the-command-line-interface/#throwing-exceptions-from-commands",
            "text": "Throwing from a command handler is not recommended. Instead, whenever possible, write to the context output and return. If you do want to throw a generic exception, you should throw an OrchardException.",
            "title": "Throwing Exceptions From Commands"
        },
        {
            "location": "/Documentation/Installing-and-upgrading-modules/",
            "text": "Orchard is a modular web-based CMS, designed to be extended easily by installing additional modules and enabling module features. A \nmodule\n is a package that can be installed and uninstalled. A \npackage\n consists of a ZIP  file in the \n.nupkg\n file format.) A \nfeature\n is a behavior that's exposed by an installed module that you can individually enable or disable. \n\n\nThis topic shows you how to install or download modules from the online gallery, how to install a module from your local computer, and how to work with the features of an installed module. It also shows you how to update installed modules. \n\n\n\n\nNote\n If your site is running under IIS, make sure you have granted read/write permissions to the \n~/Themes\n folder under the root of your site for the service account that is being used as the IIS application pool identity. However, you should remove the write permissions on a production server.\n\n\n\n\nViewing Installed Modules\n\n\nTo view the modules that have been installed for your site, click \nModules\n on the dashboard, and then in the \nModules\n screen, click the \nInstalled\n tab.\n\n\n\n\nThe \nInstalled\n tab displays a list of the modules that are included with Orchard, along with properties of each module such as version, author, a description, and a list of features. It also provides a link that you can use to upload and install a module package.\n\n\nYou can add modules to Orchard in two ways. The first and easiest is to install a module from the online gallery. The second is to upload a module package from your local computer and install it in your site. If you simply want to use an existing module in your Orchard site, you can install the module directly from the gallery to your site. If you want to modify a module package, or if you want to upload it to multiple Orchard sites, you will probably want to download the module from the gallery to your local computer.\n\n\nInstalling a Module from the Gallery\n\n\nWhen you install a module, its package file is downloaded from the gallery, and the source files are extracted from the package and added to your site. After you install a module, its features are available for use. \n\n\nTo install a module from the gallery, click \nModules\n on the dashboard, then click the \nGallery\n tab. The \nGallery\n tab displays a list of available online modules from the gallery feed (or feeds) registered for your site. \n\n\n\n\nThe gallery displays the aggregated list of modules exposed by all \nregistered feeds\n. You can also use the \nFeed\n drop-down list in the \nGallery\n tab to display all feeds or to filter and display only the modules from a particular feed.\n\n\nTo install a module, click the \nInstall\n link for the module. This topic uses the \nBing.Maps\n module as an example. \n\n\n\n\nAfter the module has been installed, Orchard prompts you to enable features in the module. Select the features you want to enable and then click \nOK\n.\n\n\n\n\nWhen you return to the \nInstalled\n tab, you can see the module that you just installed. \n\n\nDownloading a Module from the Gallery\n\n\nAt times you may want to simply download a module package to your computer rather than installing it in a site. To download a module, return to the \nGallery\n tab and click \nDownload\n for a specific module. (For example, download the \nContact Form\n module.) The download process lets you save the \n.nupkg\n file that contains the module contents to your local machine. You can then optionally modify the module, or install it in an Orchard site.\n\n\n\n\nInstalling a Module from your Local Computer\n\n\nTo install a module from your local computer to an Orchard site, go to the \nModules > Installed\n tab and then click the link to \nInstall a module from your computer\n.  \n\n\n\n\nBrowse to the local module (a \n.nupkg\n file), select it, and then click \nInstall\n. This installs the module package to your site the same way that clicking \nInstall\n does for an online module in the gallery.\n\n\n\n\nWorking with Module Features\n\n\nWhen you install a module in an Orchard site, the module contains one or more features. You can enable or disable each feature individually, either when you first install the module, or later. The \nBing.Maps\n module used as an example in the previous section contains a single feature, also called \nBing.Maps\n. (Remember that a module can have one or many features, and that the features do not have to have the same name as their parent module.) In this section, you'll see how to enable or disable an individual feature (the \nBing.Maps\n feature), and how to add that feature to a content type, such as a page.\n\n\nBegin by observing how to enable or disable the \nBing.Maps\n feature. To do this, go to the \nModules > Features\n tab, find the \nBing.Maps\n feature. Note that it is enabled, and that you can disable it by clicking a \nDisable\n link on the feature.  If the feature is disabled, then an \nEnable\n link appears for enabling the feature.  Leave the feature enabled for this tutorial. \n\n\n\n\nNow you can add a new content part (a \nBing Map\n part, which is included in the disabled \nBing.Maps\n feature) to the page content type. On the dashboard, click \nContent\n, and then click the \nContent Types\n tab. Find the \nPage\n content type, and then click \nEdit\n next to the type. In the \nEdit Content Type\n screen, click \nAdd Parts\n in the \nParts\n section. The \nAdd Parts to Page\n screen is displayed. \n\n\n\n\nSelect the \nBing Map\n content part from the list of available parts, and then save the updated page content type. \n\n\nNow you can see the effect of adding the \nBing Maps\n content part to the page type. On the dashboard in the \nNew\n menu, click \nPage\n to create a new page. Because you installed the \nBing Maps\n module, enabled the feature, and added the \nBing Map\n content part to the page, when you create a new page instance, a number of map-related fields appear.\n\n\n\n\nUpdating an Installed Module\n\n\nOccasionally modules will be updated with fixes or new features. You can update an installed module by clicking \nModules\n on the dashboard and then clicking the \nUpdates\n tab. If there are no updates available for your installed modules, the \nUpdates\n tab is empty. If there are updates available, you can install or download the updates the same way that you installed the module originally.\n\n\n\n\nChange History\n\n\n\n\nUpdated for Orchard 1.1\n\n\n3-23-11: Reordered sections of the topic, added new section on enabling and disabling features, plus another section on updating a module. Updated screens and text in existing sections.",
            "title": "Installing and Upgrading Modules"
        },
        {
            "location": "/Documentation/Installing-and-upgrading-modules/#viewing-installed-modules",
            "text": "To view the modules that have been installed for your site, click  Modules  on the dashboard, and then in the  Modules  screen, click the  Installed  tab.   The  Installed  tab displays a list of the modules that are included with Orchard, along with properties of each module such as version, author, a description, and a list of features. It also provides a link that you can use to upload and install a module package.  You can add modules to Orchard in two ways. The first and easiest is to install a module from the online gallery. The second is to upload a module package from your local computer and install it in your site. If you simply want to use an existing module in your Orchard site, you can install the module directly from the gallery to your site. If you want to modify a module package, or if you want to upload it to multiple Orchard sites, you will probably want to download the module from the gallery to your local computer.",
            "title": "Viewing Installed Modules"
        },
        {
            "location": "/Documentation/Installing-and-upgrading-modules/#installing-a-module-from-the-gallery",
            "text": "When you install a module, its package file is downloaded from the gallery, and the source files are extracted from the package and added to your site. After you install a module, its features are available for use.   To install a module from the gallery, click  Modules  on the dashboard, then click the  Gallery  tab. The  Gallery  tab displays a list of available online modules from the gallery feed (or feeds) registered for your site.    The gallery displays the aggregated list of modules exposed by all  registered feeds . You can also use the  Feed  drop-down list in the  Gallery  tab to display all feeds or to filter and display only the modules from a particular feed.  To install a module, click the  Install  link for the module. This topic uses the  Bing.Maps  module as an example.    After the module has been installed, Orchard prompts you to enable features in the module. Select the features you want to enable and then click  OK .   When you return to the  Installed  tab, you can see the module that you just installed.",
            "title": "Installing a Module from the Gallery"
        },
        {
            "location": "/Documentation/Installing-and-upgrading-modules/#downloading-a-module-from-the-gallery",
            "text": "At times you may want to simply download a module package to your computer rather than installing it in a site. To download a module, return to the  Gallery  tab and click  Download  for a specific module. (For example, download the  Contact Form  module.) The download process lets you save the  .nupkg  file that contains the module contents to your local machine. You can then optionally modify the module, or install it in an Orchard site.",
            "title": "Downloading a Module from the Gallery"
        },
        {
            "location": "/Documentation/Installing-and-upgrading-modules/#installing-a-module-from-your-local-computer",
            "text": "To install a module from your local computer to an Orchard site, go to the  Modules > Installed  tab and then click the link to  Install a module from your computer .     Browse to the local module (a  .nupkg  file), select it, and then click  Install . This installs the module package to your site the same way that clicking  Install  does for an online module in the gallery.",
            "title": "Installing a Module from your Local Computer"
        },
        {
            "location": "/Documentation/Installing-and-upgrading-modules/#working-with-module-features",
            "text": "When you install a module in an Orchard site, the module contains one or more features. You can enable or disable each feature individually, either when you first install the module, or later. The  Bing.Maps  module used as an example in the previous section contains a single feature, also called  Bing.Maps . (Remember that a module can have one or many features, and that the features do not have to have the same name as their parent module.) In this section, you'll see how to enable or disable an individual feature (the  Bing.Maps  feature), and how to add that feature to a content type, such as a page.  Begin by observing how to enable or disable the  Bing.Maps  feature. To do this, go to the  Modules > Features  tab, find the  Bing.Maps  feature. Note that it is enabled, and that you can disable it by clicking a  Disable  link on the feature.  If the feature is disabled, then an  Enable  link appears for enabling the feature.  Leave the feature enabled for this tutorial.    Now you can add a new content part (a  Bing Map  part, which is included in the disabled  Bing.Maps  feature) to the page content type. On the dashboard, click  Content , and then click the  Content Types  tab. Find the  Page  content type, and then click  Edit  next to the type. In the  Edit Content Type  screen, click  Add Parts  in the  Parts  section. The  Add Parts to Page  screen is displayed.    Select the  Bing Map  content part from the list of available parts, and then save the updated page content type.   Now you can see the effect of adding the  Bing Maps  content part to the page type. On the dashboard in the  New  menu, click  Page  to create a new page. Because you installed the  Bing Maps  module, enabled the feature, and added the  Bing Map  content part to the page, when you create a new page instance, a number of map-related fields appear.",
            "title": "Working with Module Features"
        },
        {
            "location": "/Documentation/Installing-and-upgrading-modules/#updating-an-installed-module",
            "text": "Occasionally modules will be updated with fixes or new features. You can update an installed module by clicking  Modules  on the dashboard and then clicking the  Updates  tab. If there are no updates available for your installed modules, the  Updates  tab is empty. If there are updates available, you can install or download the updates the same way that you installed the module originally.",
            "title": "Updating an Installed Module"
        },
        {
            "location": "/Documentation/Installing-and-upgrading-modules/#change-history",
            "text": "Updated for Orchard 1.1  3-23-11: Reordered sections of the topic, added new section on enabling and disabling features, plus another section on updating a module. Updated screens and text in existing sections.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Modifying-site-settings/",
            "text": "You can configure the general, global, and feature-specific settings for your site in the \nSettings\n panel (the menu items contained in the  \nSettings\n section) of the Orchard dashboard. This topic describes these site-level settings. \n\n\nIn the \nSettings\n panel in the dashboard, the settings are arranged into categories, including \nGeneral\n, \nGallery\n, \nComments\n, \nMedia\n, \nUsers\n, and \nCache\n.\n\n\n\n\nGeneral Settings\n\n\nTo access general settings, click \nSettings\n in the \nSettings\n panel. This opens the following screen:\n\n\n\n\nNote\n The general settings screen also displays options that are specific to the features that are enabled for your site. \n\n\n\n\n\n\nIn the general settings category, you can modify the following global and site-wide settings: \n\n\n\n\nSite Name\n. The name of your site, which is usually displayed by the applied theme. \n\n\nDefault Site Culture\n. The default culture for the site.  You can also add culture codes here. For more information, see \nCreating Global-Ready Applications\n.\n\n\nPage title separator\n. The character that is used to separate sections of a page title. For example, the default separator character for the \nen-US\n locale is a hyphen (-).\n\n\nSuper user\n. A user who has administrative capability on the site, regardless of configured roles. This is usually the user who ran the Orchard installation and setup. The default user is the admin account. \n\n\nResource Debug Mode\n. The mode that determines whether scripts and style sheets are loaded in a \"debuggable\" form or in their minimal form.\n\n\nDefault number of items per page\n. Determines the default number of items that are shown per page.\n\n\nBase URL\n. The base URL for your site.\n\n\nMaximum number of items per page\n. Determines the maximum number of items that are shown per page. Leave 0 for unlimited.\n\n\nDefault Time Zone\n. Determines the default time zone used when displaying and editing dates and times.\n\n\nDefault Site Calendar\n. Determines the default calendar used when displaying and editing dates and times. The 'Culture calendar' option means the default calendar for the culture of the current request will be used (not necessarily the configured default site culture).\n\n\n\n\nGallery Settings\n\n\nTo access settings for the gallery, click \nGallery\n in the \nSettings\n panel. This opens the following screen:\n\n\n\n\nIn the gallery feed settings, you can add or delete a feed using the following settings:\n\n\n\n\nAdd Feed\n. Lets you specify the URL to a gallery feed.\n\n\nDelete\n. Lets you remove an existing gallery feed.\n\n\n\n\nFor more information about how to add feeds to the gallery, see \nRegistering Additional Gallery Feeds\n.\n\n\nComments Settings\n\n\nTo access settings for comments, click \nComments\n in the \nSettings\n panel. This opens the following screen: \n\n\n\n\nIn the comments settings, you can enable or disable the following features:\n\n\n\n\nComments must be approved before they appear\n. Requires user comments to be approved by an administrator or moderator before they become visible on the site. \n\n\nAutomatically close comments after\n. Number of days after comments are automatically closed. Leave to 0 to have them always available.\n\n\n\n\nFor more information about how to work with comments, see \nModerating Comments\n.\n\n\nUser Settings\n\n\nTo access user settings, click \nUsers\n in the \nSettings\n panel. This opens the following screen:\n\n\n\n\nIn the user settings, you can enable or disable the following settings in order to customize user registration:\n\n\n\n\nUsers can create new accounts on the site\n. Configures the site to let users create a new account.\n\n\nDisplay a link to enable users to reset their password\n. Provides users with a way to reset their password.\n\n\nUsers must verify their email address\n. Requires users to confirm their email address during registration.\n\n\nUsers must be approved before they can log in\n. Requires administrative approval of new accounts before users can log in.\n\n\n\n\nCache\n\n\nTo access caches settings like Default Cache Duration, Max Age, Vary Query String Parameters, Vary Request Headers and Ignored Urls.\n\n\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.8\n\n\n9-8-14: Updated screen shots for dashboard settings. Added cache section. \n\n\n\n\n\n\nUpdates for Orchard 1.1\n\n\n3-29-11: Added sections for new screens in the dashboard.  Updated existing screen shots.",
            "title": "Modifying Site Settings"
        },
        {
            "location": "/Documentation/Modifying-site-settings/#general-settings",
            "text": "To access general settings, click  Settings  in the  Settings  panel. This opens the following screen:   Note  The general settings screen also displays options that are specific to the features that are enabled for your site.     In the general settings category, you can modify the following global and site-wide settings:    Site Name . The name of your site, which is usually displayed by the applied theme.   Default Site Culture . The default culture for the site.  You can also add culture codes here. For more information, see  Creating Global-Ready Applications .  Page title separator . The character that is used to separate sections of a page title. For example, the default separator character for the  en-US  locale is a hyphen (-).  Super user . A user who has administrative capability on the site, regardless of configured roles. This is usually the user who ran the Orchard installation and setup. The default user is the admin account.   Resource Debug Mode . The mode that determines whether scripts and style sheets are loaded in a \"debuggable\" form or in their minimal form.  Default number of items per page . Determines the default number of items that are shown per page.  Base URL . The base URL for your site.  Maximum number of items per page . Determines the maximum number of items that are shown per page. Leave 0 for unlimited.  Default Time Zone . Determines the default time zone used when displaying and editing dates and times.  Default Site Calendar . Determines the default calendar used when displaying and editing dates and times. The 'Culture calendar' option means the default calendar for the culture of the current request will be used (not necessarily the configured default site culture).",
            "title": "General Settings"
        },
        {
            "location": "/Documentation/Modifying-site-settings/#gallery-settings",
            "text": "To access settings for the gallery, click  Gallery  in the  Settings  panel. This opens the following screen:   In the gallery feed settings, you can add or delete a feed using the following settings:   Add Feed . Lets you specify the URL to a gallery feed.  Delete . Lets you remove an existing gallery feed.   For more information about how to add feeds to the gallery, see  Registering Additional Gallery Feeds .",
            "title": "Gallery Settings"
        },
        {
            "location": "/Documentation/Modifying-site-settings/#comments-settings",
            "text": "To access settings for comments, click  Comments  in the  Settings  panel. This opens the following screen:    In the comments settings, you can enable or disable the following features:   Comments must be approved before they appear . Requires user comments to be approved by an administrator or moderator before they become visible on the site.   Automatically close comments after . Number of days after comments are automatically closed. Leave to 0 to have them always available.   For more information about how to work with comments, see  Moderating Comments .",
            "title": "Comments Settings"
        },
        {
            "location": "/Documentation/Modifying-site-settings/#user-settings",
            "text": "To access user settings, click  Users  in the  Settings  panel. This opens the following screen:   In the user settings, you can enable or disable the following settings in order to customize user registration:   Users can create new accounts on the site . Configures the site to let users create a new account.  Display a link to enable users to reset their password . Provides users with a way to reset their password.  Users must verify their email address . Requires users to confirm their email address during registration.  Users must be approved before they can log in . Requires administrative approval of new accounts before users can log in.",
            "title": "User Settings"
        },
        {
            "location": "/Documentation/Modifying-site-settings/#cache",
            "text": "To access caches settings like Default Cache Duration, Max Age, Vary Query String Parameters, Vary Request Headers and Ignored Urls.",
            "title": "Cache"
        },
        {
            "location": "/Documentation/Modifying-site-settings/#change-history",
            "text": "Updates for Orchard 1.8  9-8-14: Updated screen shots for dashboard settings. Added cache section.     Updates for Orchard 1.1  3-29-11: Added sections for new screens in the dashboard.  Updated existing screen shots.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Moderating-comments/",
            "text": "The \nComments\n feature of Orchard provides the ability to monitor and manage the comments for content items on your site. This topic describes two sets of tools that Orchard provides for working with site comments: tools for managing existing comments, and site-level settings for comments.\n\n\nManaging Comments\n\n\nTo access the comment management screen, click \nComments\n on the Orchard dashboard.\n\n\n\n\nThe \nComments\n screen lists the comments across all content items in your site. It can also display a filtered list that shows all comments by administrative category (\"pending\", \"approved\", or \"spam\"). If you want to carry out a bulk administrative task that applies to many comments, select the comments you want, and then use the \nActions\n drop-down list to apply an action such as \nApprove\n or \nUnapprove\n. \n\n\n\n\nNote\n If you want to manage just the comments for a specific content item, such as a page or a blog post, edit the content item. In edit mode, there is an option to display and manage comments for that item. The screen for editing comments that are linked to a content item is identical to the \nComments\n screen, except that it only shows comments from the specific content item.\n\n\n\n\nIn the \nComments\n screen, click \nEdit\n next to an approved comment.  A screen for editing the comment is displayed. \n\n\n\n\nClick \nPending\n to change the comment status, and then save the comment.  Browse to your site and view the content item for which you changed the comment category to \"pending\".  The pending comment is no longer visible. \n\n\nYou can assign comments to the following categories:\n\n\n\n\nPending\n. The comment is pending administrator approval. The comment will not be visible to users unless an administrator marks it as \"Approved\".\n\n\nApproved\n. The comment is approved and will appear on the site. This is the default category for new comments unless you enable the site-level setting to require approval of all comments. (See the next section.) \n\n\nMark as spam\n. The comment is spam and will not displayed. For more information, see the next section.  \n\n\n\n\nSetting Site-Level Comment Options\n\n\nOrchard provides two site-level features for comments: administrative approval of comments and spam protection. You can access both features by clicking \nSettings > Comments\n on the dashboard to open the screen for setting comment options. \n\n\nRequiring Approval for Comments\n\n\nYou might want to require moderator approval of comments before they become visible on the site. As the previous illustration for editing comments shows, by default, comments are approved and visible. However, if you enable the site-level setting to require approval of comments, new comments will default to the \"pending\" category and will not be displayed until they are approved.\n\n\nTo require approval of comments, click \nSettings > Comments\n in the dashboard. A screen appears for managing site-level comment settings. \n\n\n\n\nSelect \nComments must be approved before they appear\n and then save the settings.  After you have enabled this setting, you will need to review all new user comments in the \nComments\n screen, and for the comments that you want to allow on the site, change their status from \"pending\" to \"approved\". \n\n\nEnabling Spam Protection\n\n\nThe spam-protection feature helps to automatically categorize certain comments as spam so that you can prevent them from being displayed in your site. \n\n\n\n\nTo implement spam protection, Orchard uses \nAkismet spam protection\n, which reviews comments as they are posted. When Akismet detects a comment that fits the criteria for spam, it automatically assigns it to the \nMark as spam\n category. \n\n\nTo enable the Akismet spam protection feature on a site, do the following:\n\n\n\n\nObtain an Akismet key from \nAkismet.com\n. \n\n\nEnter your Akismet key in the field.\n\n\nSave the updated setting.\n\n\n\n\n\n\nAfter you enable spam protection in your site, you can use the \nComments\n screen described earlier to select the comments that are marked as spam, review them, and delete the comments that really are spam.\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.8\n\n\n3-28-11:  Updated existing screens for site level comment and anti-spam settings.\n\n\n\n\n\n\nUpdates for Orchard 1.1\n\n\n3-28-11:  Updated existing screens, added new step showing how to require pre-approval of comments.",
            "title": "Moderating Comments"
        },
        {
            "location": "/Documentation/Moderating-comments/#managing-comments",
            "text": "To access the comment management screen, click  Comments  on the Orchard dashboard.   The  Comments  screen lists the comments across all content items in your site. It can also display a filtered list that shows all comments by administrative category (\"pending\", \"approved\", or \"spam\"). If you want to carry out a bulk administrative task that applies to many comments, select the comments you want, and then use the  Actions  drop-down list to apply an action such as  Approve  or  Unapprove .    Note  If you want to manage just the comments for a specific content item, such as a page or a blog post, edit the content item. In edit mode, there is an option to display and manage comments for that item. The screen for editing comments that are linked to a content item is identical to the  Comments  screen, except that it only shows comments from the specific content item.   In the  Comments  screen, click  Edit  next to an approved comment.  A screen for editing the comment is displayed.    Click  Pending  to change the comment status, and then save the comment.  Browse to your site and view the content item for which you changed the comment category to \"pending\".  The pending comment is no longer visible.   You can assign comments to the following categories:   Pending . The comment is pending administrator approval. The comment will not be visible to users unless an administrator marks it as \"Approved\".  Approved . The comment is approved and will appear on the site. This is the default category for new comments unless you enable the site-level setting to require approval of all comments. (See the next section.)   Mark as spam . The comment is spam and will not displayed. For more information, see the next section.",
            "title": "Managing Comments"
        },
        {
            "location": "/Documentation/Moderating-comments/#setting-site-level-comment-options",
            "text": "Orchard provides two site-level features for comments: administrative approval of comments and spam protection. You can access both features by clicking  Settings > Comments  on the dashboard to open the screen for setting comment options.",
            "title": "Setting Site-Level Comment Options"
        },
        {
            "location": "/Documentation/Moderating-comments/#requiring-approval-for-comments",
            "text": "You might want to require moderator approval of comments before they become visible on the site. As the previous illustration for editing comments shows, by default, comments are approved and visible. However, if you enable the site-level setting to require approval of comments, new comments will default to the \"pending\" category and will not be displayed until they are approved.  To require approval of comments, click  Settings > Comments  in the dashboard. A screen appears for managing site-level comment settings.    Select  Comments must be approved before they appear  and then save the settings.  After you have enabled this setting, you will need to review all new user comments in the  Comments  screen, and for the comments that you want to allow on the site, change their status from \"pending\" to \"approved\".",
            "title": "Requiring Approval for Comments"
        },
        {
            "location": "/Documentation/Moderating-comments/#enabling-spam-protection",
            "text": "The spam-protection feature helps to automatically categorize certain comments as spam so that you can prevent them from being displayed in your site.    To implement spam protection, Orchard uses  Akismet spam protection , which reviews comments as they are posted. When Akismet detects a comment that fits the criteria for spam, it automatically assigns it to the  Mark as spam  category.   To enable the Akismet spam protection feature on a site, do the following:   Obtain an Akismet key from  Akismet.com .   Enter your Akismet key in the field.  Save the updated setting.    After you enable spam protection in your site, you can use the  Comments  screen described earlier to select the comments that are marked as spam, review them, and delete the comments that really are spam.",
            "title": "Enabling Spam Protection"
        },
        {
            "location": "/Documentation/Moderating-comments/#change-history",
            "text": "Updates for Orchard 1.8  3-28-11:  Updated existing screens for site level comment and anti-spam settings.    Updates for Orchard 1.1  3-28-11:  Updated existing screens, added new step showing how to require pre-approval of comments.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Managing-users-and-roles/",
            "text": "Orchard provides the ability to manage users and roles for your site, with users assigned to one or more roles, and different permissions associated to each role.\n\n\nTo manage the users in your site, click the \nUsers\n link in admin panel.\n\n\n\n\nBy default, there is ony one user, which is the admin user that is configured in the Orchard setup screen on first install. To add an additional user, click \nAdd a new user\n. You can also edit, remove, and disable user accounts from this screen.\n\n\n\n\nWhen adding a new user, specify a user name, email and password, along with one or more roles for the user.  The roles determine what permissions a user has on your site, in other words, what operations they are allowed to perform.  The effective permissions for a user are the union of permissions for all applied roles.  Permissions only grant operations to a user; they never deny them.\n\n\n\n\nYou can also configure the roles in your site by clicking the \nRoles\n link in the admin panel.\n\n\n\n\nBy default, Orchard includes a number of roles with default permissions:\n\n\n\n\nAdministrator\n - Can perform any operation (has all permissions)\n\n\nEditor\n - Can author, publish and edit his own and others' content items.\n\n\nModerator\n - Can moderate comments and tags only.  No authoring permissions.\n\n\nAuthor\n - Can author, publish and edit his own content items\n\n\nContributor\n - Can author and edit his own content items, but not publish them (save draft only)\n\n\nAnonymous\n - Can view the front-end of the site only.\n\n\nAuthenticated\n - Can view the site front-end, and perform other operations depending on the site and other role permission settings.\n\n\n\n\nTo edit the permission for a given role, click \nEdit\n next to the role name.\n\n\n\n\nTo permit a limited number of self-management options expand the \nSettings\n tab and click \nUsers\n:\n\n\n\n\nUsers can create new accounts on the site\n\n\nDisplay a link to enable users to reset their password \n\n\nUsers must verify their email address \n\n\nUsers must be approved before they can log in \n\n\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.8\n\n\n9-8-14: Updated screen shots for Managing users and roles.",
            "title": "Managing Users and Roles"
        },
        {
            "location": "/Documentation/Managing-users-and-roles/#change-history",
            "text": "Updates for Orchard 1.8  9-8-14: Updated screen shots for Managing users and roles.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Understanding-permissions/",
            "text": "This topic has been updated for the Orchard 1.8.1 release.\n\n\n\n\nEach role has a set of permissions assigned to it, and these permissions indicate which actions a user in that role can perform. For each role, you can only grant permissions; you cannot specifically deny a permission. A user's permission set consists of all granted permissions for all roles that the user belongs to.\n\n\nTo assign or review permissions for a role, click the \nRoles\n link.\n\n\nClick \nEdit\n for the role you want to modify or review.\n\n\n\n\nBy default, Orchard includes a number of roles with default permissions:\n\n\n\n\nAdministrator\n - Can perform any operation (has all permissions)\n\n\nEditor\n - Can author, publish and edit his own and others' content items.\n\n\nModerator\n - Can moderate comments and tags only.  No authoring permissions.\n\n\nAuthor\n - Can author, publish and edit his own content items\n\n\nContributor\n - Can author and edit his own content items, but not publish them (save draft only)\n\n\nAnonymous\n - Can view the front-end of the site only.\n\n\nAuthenticated\n - Can view the site front-end, and perform other operations depending on the site and other role permission settings.\n\n\n\n\nImplied Permissions\n\n\nSome permissions specify whether a user is allowed to perform a single action; other permissions specify whether the user is allowed to perform a group of actions. The permissions that pertain to a group of actions are typically higher-level permissions that logically include lower-level actions. When you grant a higher-level permission that relates to a group of actions, the lower-level permissions are implicitly included. For example, if you grant a role permission to manage blogs, you are also granting that role  permission to edit, publish, and delete blogs.\n\n\nYou can see which permissions are explicitly or implicitly granted by examining the check boxes in the \nAllow\n and \nEffective\n columns. The \nAllow\n column shows which permissions are explicitly granted and the \nEffective\n column indicates which permissions are explicitly or implicitly granted. The following image shows that \nManage blogs\n was specifically granted to the role and the other permissions were implicitly granted.\n\n\n\nIf you unselect the \nManage blogs\n permission, all of the other permissions are also revoked.\n\n\nThe following image shows a role with \nEdit any blog posts\n granted. \nEdit own blog posts\n is implicitly granted.\n\n\n\nThe following image shows a role with only \nEdit own blog posts\n granted. No permissions are implicitly granted with this selection.\n\n\n\n\n\n\nOrchard.ContentPermissions\n\n\n\n\nThis applies to the Orchard.ContentPermissions Module, available since Orchard 1.5.1\n\n\n\n\nWhen enabling the ContentPermissions module, you can define item-level permissions for the front end.\nThis allows you to protect your Projections or own Content Types.",
            "title": "Understanding Permissions"
        },
        {
            "location": "/Documentation/Understanding-permissions/#implied-permissions",
            "text": "Some permissions specify whether a user is allowed to perform a single action; other permissions specify whether the user is allowed to perform a group of actions. The permissions that pertain to a group of actions are typically higher-level permissions that logically include lower-level actions. When you grant a higher-level permission that relates to a group of actions, the lower-level permissions are implicitly included. For example, if you grant a role permission to manage blogs, you are also granting that role  permission to edit, publish, and delete blogs.  You can see which permissions are explicitly or implicitly granted by examining the check boxes in the  Allow  and  Effective  columns. The  Allow  column shows which permissions are explicitly granted and the  Effective  column indicates which permissions are explicitly or implicitly granted. The following image shows that  Manage blogs  was specifically granted to the role and the other permissions were implicitly granted.  If you unselect the  Manage blogs  permission, all of the other permissions are also revoked.  The following image shows a role with  Edit any blog posts  granted.  Edit own blog posts  is implicitly granted.  The following image shows a role with only  Edit own blog posts  granted. No permissions are implicitly granted with this selection.",
            "title": "Implied Permissions"
        },
        {
            "location": "/Documentation/Understanding-permissions/#orchardcontentpermissions",
            "text": "This applies to the Orchard.ContentPermissions Module, available since Orchard 1.5.1   When enabling the ContentPermissions module, you can define item-level permissions for the front end.\nThis allows you to protect your Projections or own Content Types.",
            "title": "Orchard.ContentPermissions"
        },
        {
            "location": "/Documentation/Making-a-Web-Site-Recipe/",
            "text": "Orchard simplifies the process of setting up a new website by letting you use \nwebsite recipes\n. A recipe is an XML file that contains the startup configuration for an Orchard website. When you start Orchard for the first time, you can select a recipe that best matches the type of site you want to set up. For example, if you want your website to be a blog, you can select the \nBlog\n recipe, and much of the configuration work will be done for you.\n\n\nYou can create your own recipes and customize the process of setting a website and configuring Orchard features. Recipes can also instruct Orchard to download and install modules and themes from the Orchard Gallery during website setup. \n\n\nThis article describes how to use recipes, how to create custom recipes, export or import recipes, and how to create a specialized distribution of Orchard using recipes. \n\n\nUsing a Recipe to Create a Website\n\n\nWhen you first set up an Orchard website, the setup page that is displayed contains a list of recipes. You can choose a recipe to base your new website on. \n\n\n\n\nThe initial list contains the following recipes:\n\n\n\n\nDefault\n. The default recipe for an Orchard site that includes pages, blogs, custom content types, comments, tags, widgets, and basic navigation.\n\n\nBlog\n. A recipe that provides an installation profile with features for a personal blog.\n\n\nCore\n. A recipe that provides the Orchard framework with limited end-user functionality that can be used during development.\n\n\n\n\nAfter you choose a recipe and click \nFinish Setup\n, Orchard creates the website using the selected recipe and opens the home page.\n\n\nHow Recipes Work\n\n\nAn Orchard recipe is an XML file that contains website configuration information. The following example shows the contents of the default recipe file.\n\n\n<?xml version=\"1.0\"?>\n<Orchard>\n  <Recipe>\n    <Name>Default</Name>\n    <Description>The default recipe for an Orchard site that includes pages, blogs, custom content types, comments, tags, widgets and basic navigation.</Description>\n    <Author>The Orchard Team</Author>\n    <WebSite>http://orchardproject.net</WebSite>\n    <Tags></Tags>\n    <Version>1.0</Version>\n    <IsSetupRecipe>true</IsSetupRecipe>\n  </Recipe>\n\n  <Feature enable=\"Orchard.Blogs,Orchard.Comments,Orchard.Tags,Orchard.Alias,Orchard.Autoroute,\n                   TinyMce,Orchard.MediaLibrary,Orchard.ContentPicker,Orchard.PublishLater,\n                   Orchard.jQuery,Orchard.Widgets,Orchard.ContentTypes,\n                   Orchard.Scripting,Orchard.Scripting.Lightweight,PackagingServices,Orchard.Packaging,\n                   Orchard.Projections,Orchard.Fields,Orchard.OutputCache,Orchard.Taxonomies,Orchard.Workflows,\n                   Orchard.Layouts,Orchard.Layouts.Tokens,\n                   TheThemeMachine\" />\n\n  <Metadata>\n    <Types>\n      <Page ContentTypeSettings.Draftable=\"True\" TypeIndexing.Indexes=\"Search\">\n        <TagsPart />\n        <LocalizationPart />\n        <TitlePart/>\n        <AutoroutePart />\n        <MenuPart />\n      </Page>\n      <BlogPost ContentTypeSettings.Draftable=\"True\" TypeIndexing.Indexes=\"Search\">\n        <CommentsPart />\n        <TagsPart />\n        <LocalizationPart />\n        <TitlePart/>\n        <AutoroutePart />\n      </BlogPost>\n    </Types>\n    <Parts>\n      <BodyPart BodyPartSettings.FlavorDefault=\"html\" />\n    </Parts>\n  </Metadata>\n\n  <Settings />\n\n  <Migration features=\"*\" />\n\n  <Command>\n    layer create Default /LayerRule:\"true\" /Description:\"The widgets in this layer are displayed on all pages\"\n    layer create Authenticated /LayerRule:\"authenticated\" /Description:\"The widgets in this layer are displayed when the user is authenticated\"\n    layer create Anonymous /LayerRule:\"not authenticated\" /Description:\"The widgets in this layer are displayed when the user is anonymous\"\n    layer create Disabled /LayerRule:\"false\" /Description:\"The widgets in this layer are never displayed\"\n    layer create TheHomepage /LayerRule:\"url '~/'\" /Description:\"The widgets in this layer are displayed on the home page\"\n    site setting set baseurl\n    menu create /MenuName:\"Main Menu\"\n    page create /Slug:\"welcome-to-orchard\" /Title:\"Welcome to Orchard!\" /Path:\"welcome-to-orchard\" /Homepage:true /Publish:true /UseWelcomeText:true\n    menuitem create /MenuPosition:\"0\" /MenuText:\"Home\" /Url:\"~/\" /MenuName:\"Main Menu\"\n    widget create MenuWidget /Title:\"Main Menu\" /RenderTitle:false /Zone:\"Navigation\" /Position:\"1\" /Layer:\"Default\" /Identity:\"MenuWidget1\" /MenuName:\"Main Menu\"\n    theme activate \"The Theme Machine\"\n  </Command>\n</Orchard>\n\n\n\nThe following sections of a recipe file are the elements that are most important to understand:\n\n\n\n\nRecipe\n. This section contains metadata about the recipe, such as its name and description.\n\n\nFeature\n. This section lists module features that Orchard will enable.\n\n\nMetadata\n. This section provides configuration for the types, parts, and fields that Orchard contains.\n\n\nSettings\n. This section provides a way to configure website settings.\n\n\nCommand\n. This section lists commands that Orchard will run against your website in order to complete the setup. For more information about Orchard commands, see \nUsing the Command-line Interface\n.\n\n\n\n\nCreating a Custom Recipe\n\n\nYou can create your own recipe, which can then be added to the setup page or to your own module. Recipes added to the setup page can be selected by the user only during site setup; recipes added to a module can be executed by the user after site setup.\n\n\nTo get started with creating a custom recipe, you can select an existing recipe that you can tailor to your purposes. The following example shows how to start with the default recipe \n(default.recipe.xml)\n and add the \nBing.Maps\n module and a theme, both of which will be downloaded and enabled during setup. The recipe also creates a blog and a page that displays the map widget. Finally, the recipe adds layers and menu tabs for the blog and map page.\n\n\n<?xml version=\"1.0\"?>\n<Orchard>\n  <Recipe>\n    <Name>Custom Recipe</Name>\n    <Description>A recipe that includes a landing page with blog on a second tab.</Description>\n    <Author>The Orchard Team</Author>\n    <WebSite>http://orchardproject.net</WebSite>\n    <Tags></Tags>\n    <Version>1.0</Version>\n    <IsSetupRecipe>true</IsSetupRecipe>\n  </Recipe>\n\n  <Module packageId=\"Orchard.Module.Bing.Maps\" />\n\n  <Theme packageId=\"Orchard.Theme.Dark\" current=\"true\" />\n\n  <Feature enable=\"Orchard.Blogs,Orchard.Comments,Orchard.Tags,\n                   Orchard.Lists,TinyMce,Orchard.Media,Orchard.MediaPicker,Orchard.PublishLater,\n                   Orchard.jQuery,Orchard.Widgets,Orchard.Widgets.PageLayerHinting,Orchard.ContentTypes,\n                   Orchard.Scripting,Orchard.Scripting.Lightweight,\n                   PackagingServices,Orchard.Packaging,Gallery,Gallery.Updates,\n                   TheThemeMachine,Bing.Maps\" />\n\n  <Metadata>\n    <Types>\n      <Page ContentTypeSettings.Draftable=\"True\" TypeIndexing.Included=\"true\">\n        <TagsPart />\n        <LocalizationPart />\n      </Page>\n      <BlogPost ContentTypeSettings.Draftable=\"True\" TypeIndexing.Included=\"true\">\n        <CommentsPart />\n        <TagsPart />\n        <LocalizationPart />\n      </BlogPost>\n    </Types>\n    <Parts>\n      <BodyPart BodyPartSettings.FlavorDefault=\"html\" />\n    </Parts>\n  </Metadata>\n\n  <Settings />\n\n  <Migration features=\"*\" />\n\n  <Command>\n    layer create Default /LayerRule:\"true\"\n    layer create Authenticated /LayerRule:\"authenticated\"\n    layer create Anonymous /LayerRule:\"not authenticated\"\n    layer create Disabled /LayerRule:\"false\"\n    layer create TheHomepage /LayerRule:\"url '~/'\"\n    layer create Blog /LayerRule:\"url '~/Blog'\"\n    layer create Maps /LayerRule:\"url '~/Maps'\"\n    page create /Slug:\"welcome-to-orchard\" /Title:\"Welcome to Orchard!\" /Path:\"welcome-to-orchard\" /Homepage:true /Publish:true /UseWelcomeText:true\n    blog create /Slug:\"blog\" /Title:\"Blog\" /Homepage:false /Description:\"This is your Orchard Blog.\"\n    page create /Slug:\"maps\" /Title:\"Bing Maps\" /Path:\"bing-maps\" /Homepage:false /Publish:true /UseWelcomeText:false\n    widget create HtmlWidget /Title:\"First Leader Aside\" /Zone:\"TripelFirst\" /Position:\"5\" /Layer:\"TheHomepage\" /UseLoremIpsumText:true\n    widget create HtmlWidget /Title:\"Second Leader Aside\" /Zone:\"TripelSecond\" /Position:\"5\" /Layer:\"TheHomepage\" /UseLoremIpsumText:true\n    widget create HtmlWidget /Title:\"Third Leader Aside\" /Zone:\"TripelThird\" /Position:\"5\" /Layer:\"TheHomepage\" /UseLoremIpsumText:true\n    menuitem create /MenuPosition:\"1\" /MenuText:\"Home\" /Url:\"\" /OnMainMenu:true\n    menuitem create /MenuPosition:\"2\" /MenuText:\"Blog\" /Url:\"~/Blog\" /OnMainMenu:true\n    menuitem create /MenuPosition:\"3\" /MenuText:\"Maps\" /Url:\"~/Maps\" /OnMainMenu:true\n  </Command>\n</Orchard>\n\n\n\nNote the following about the changes made to the default recipe:\n\n\n\n\nModule\n element. This element identifies a module that will be downloaded from the Orchard Gallery on the website. This does not enable the features in the module; it only downloads it. To enable a module feature, add it to the \nFeature\n element as shown in the example.\n\n\nTheme\n element. This element identifies a theme that will be downloaded from the Orchard Gallery. If the \ncurrent\n attribute is set to true, the theme becomes the current theme and is applied to the website. Otherwise, it will just be downloaded. It is also possible to enable a theme by using the \nenable=\"true\"\n attribute. Otherwise the theme is initially disabled. If you use \ncurrent=\"true\"\n, the theme is automatically enabled.\n\n\nImportant\n: The \nModule\n and \nTheme\n elements must appear in the recipe immediately after the \nRecipe\n element.\n\n\n\n\n\n\nlayer create\n command. This was added in order to create the \nBlog\n and \nMaps\n layer.\n\n\nblog create\n command. This was added in order to create the blog.\n\n\npage create\n command. This was added in order to create the \nMaps\n page.\n\n\nmenuitem create\n command. This was added in order to create the \nBlog\n and \nMaps\n menu tabs.\n\n\n\n\nIn addition to the attributes shown here for the \nModule\n and \nTheme\n elements, both elements support a \nversion\n attribute. If the version is specified, that version will be downloaded from the Orchard Gallery. Both elements also have a \nrepository\n attribute. By default, the \nrepository\n attribute points to the Orchard Gallery. However, you can set it to any feed URL.\n\n\nTo add your custom recipe to the setup page use the \nIsSetupRecipe\n attribute in the \nRecipe\n element as shown above, and put the recipe XML file into the \nRecipes\n folder (or its subfolder) of a module. Note that recipe files should have a name ending in \n.recipe.xml\n, e.g. \nCustom.recipe.xml\n. When you set up a new Orchard website, the recipe list will contain your setup recipe.\n\n\n\n\nNote that recipes used for importing mustn't contain an \nIsSetupRecipe\n element or it should be set to \nfalse\n.\n\n\nImporting and Exporting a Recipe\n\n\nOrchard enables you to import and export recipes from and to the web server. It uses the \nImport Export\n module, which is disabled by default. Therefore you must enable the module to use this feature.\n\n\nTo enable the \nImport Export\n module, open the dashboard and click \nModules\n. On the \nModules\n page, select the \nFeatures\n tab. Under \nContent\n, locate the \nImport Export\n feature and click \nEnable\n. A message at the top of the page will notify you when the feature is enabled. You will also see \nImport/Export\n listed in the dashboard feature list.  \n\n\n\n\nTo export a recipe, open the dashboard and click \nImport/Export\n. Click the \nExport\n tab and then choose the types, metadata, data, and settings to include in the export file. When you are finished, click \nExport\n.\n\n\n\n\nTo import a recipe, click \nImport/Export\n and then click the \nImport\n tab. Browse to the recipe file and click \nImport\n.\n\n\n\n\nCreating a Specialized Distribution of Orchard\n\n\nRecipes simplify the process of creating a specialized distribution of Orchard. Using recipes (and optionally custom modules), you can configure a version of the Orchard platform that is optimized for nearly any type of website you can envision.\n\n\nTo create a specialized distribution of Orchard\n\n\n\n\nEnlist in the Orchard source code. For information about how to enlist in Orchard, see \nSetting Up a Source Enlistment\n.\n\n\nSync to the latest build.\n\n\nCreate a custom recipe and add it to the \nOrchard.Web/Modules/Orchard.Setup/Recipes\n folder. If you want your recipe to be the only option, you can remove the other recipe files.\n\n\nAdd any custom modules to the \nOrchard.Web/Modules\n folder.\n\n\nCompile the project.\n\n\nDistribute all files under the \nOrchard.Web\n folder.",
            "title": "Making a Website Recipe"
        },
        {
            "location": "/Documentation/Making-a-Web-Site-Recipe/#using-a-recipe-to-create-a-website",
            "text": "When you first set up an Orchard website, the setup page that is displayed contains a list of recipes. You can choose a recipe to base your new website on.    The initial list contains the following recipes:   Default . The default recipe for an Orchard site that includes pages, blogs, custom content types, comments, tags, widgets, and basic navigation.  Blog . A recipe that provides an installation profile with features for a personal blog.  Core . A recipe that provides the Orchard framework with limited end-user functionality that can be used during development.   After you choose a recipe and click  Finish Setup , Orchard creates the website using the selected recipe and opens the home page.",
            "title": "Using a Recipe to Create a Website"
        },
        {
            "location": "/Documentation/Making-a-Web-Site-Recipe/#how-recipes-work",
            "text": "An Orchard recipe is an XML file that contains website configuration information. The following example shows the contents of the default recipe file.  <?xml version=\"1.0\"?>\n<Orchard>\n  <Recipe>\n    <Name>Default</Name>\n    <Description>The default recipe for an Orchard site that includes pages, blogs, custom content types, comments, tags, widgets and basic navigation.</Description>\n    <Author>The Orchard Team</Author>\n    <WebSite>http://orchardproject.net</WebSite>\n    <Tags></Tags>\n    <Version>1.0</Version>\n    <IsSetupRecipe>true</IsSetupRecipe>\n  </Recipe>\n\n  <Feature enable=\"Orchard.Blogs,Orchard.Comments,Orchard.Tags,Orchard.Alias,Orchard.Autoroute,\n                   TinyMce,Orchard.MediaLibrary,Orchard.ContentPicker,Orchard.PublishLater,\n                   Orchard.jQuery,Orchard.Widgets,Orchard.ContentTypes,\n                   Orchard.Scripting,Orchard.Scripting.Lightweight,PackagingServices,Orchard.Packaging,\n                   Orchard.Projections,Orchard.Fields,Orchard.OutputCache,Orchard.Taxonomies,Orchard.Workflows,\n                   Orchard.Layouts,Orchard.Layouts.Tokens,\n                   TheThemeMachine\" />\n\n  <Metadata>\n    <Types>\n      <Page ContentTypeSettings.Draftable=\"True\" TypeIndexing.Indexes=\"Search\">\n        <TagsPart />\n        <LocalizationPart />\n        <TitlePart/>\n        <AutoroutePart />\n        <MenuPart />\n      </Page>\n      <BlogPost ContentTypeSettings.Draftable=\"True\" TypeIndexing.Indexes=\"Search\">\n        <CommentsPart />\n        <TagsPart />\n        <LocalizationPart />\n        <TitlePart/>\n        <AutoroutePart />\n      </BlogPost>\n    </Types>\n    <Parts>\n      <BodyPart BodyPartSettings.FlavorDefault=\"html\" />\n    </Parts>\n  </Metadata>\n\n  <Settings />\n\n  <Migration features=\"*\" />\n\n  <Command>\n    layer create Default /LayerRule:\"true\" /Description:\"The widgets in this layer are displayed on all pages\"\n    layer create Authenticated /LayerRule:\"authenticated\" /Description:\"The widgets in this layer are displayed when the user is authenticated\"\n    layer create Anonymous /LayerRule:\"not authenticated\" /Description:\"The widgets in this layer are displayed when the user is anonymous\"\n    layer create Disabled /LayerRule:\"false\" /Description:\"The widgets in this layer are never displayed\"\n    layer create TheHomepage /LayerRule:\"url '~/'\" /Description:\"The widgets in this layer are displayed on the home page\"\n    site setting set baseurl\n    menu create /MenuName:\"Main Menu\"\n    page create /Slug:\"welcome-to-orchard\" /Title:\"Welcome to Orchard!\" /Path:\"welcome-to-orchard\" /Homepage:true /Publish:true /UseWelcomeText:true\n    menuitem create /MenuPosition:\"0\" /MenuText:\"Home\" /Url:\"~/\" /MenuName:\"Main Menu\"\n    widget create MenuWidget /Title:\"Main Menu\" /RenderTitle:false /Zone:\"Navigation\" /Position:\"1\" /Layer:\"Default\" /Identity:\"MenuWidget1\" /MenuName:\"Main Menu\"\n    theme activate \"The Theme Machine\"\n  </Command>\n</Orchard>  The following sections of a recipe file are the elements that are most important to understand:   Recipe . This section contains metadata about the recipe, such as its name and description.  Feature . This section lists module features that Orchard will enable.  Metadata . This section provides configuration for the types, parts, and fields that Orchard contains.  Settings . This section provides a way to configure website settings.  Command . This section lists commands that Orchard will run against your website in order to complete the setup. For more information about Orchard commands, see  Using the Command-line Interface .",
            "title": "How Recipes Work"
        },
        {
            "location": "/Documentation/Making-a-Web-Site-Recipe/#creating-a-custom-recipe",
            "text": "You can create your own recipe, which can then be added to the setup page or to your own module. Recipes added to the setup page can be selected by the user only during site setup; recipes added to a module can be executed by the user after site setup.  To get started with creating a custom recipe, you can select an existing recipe that you can tailor to your purposes. The following example shows how to start with the default recipe  (default.recipe.xml)  and add the  Bing.Maps  module and a theme, both of which will be downloaded and enabled during setup. The recipe also creates a blog and a page that displays the map widget. Finally, the recipe adds layers and menu tabs for the blog and map page.  <?xml version=\"1.0\"?>\n<Orchard>\n  <Recipe>\n    <Name>Custom Recipe</Name>\n    <Description>A recipe that includes a landing page with blog on a second tab.</Description>\n    <Author>The Orchard Team</Author>\n    <WebSite>http://orchardproject.net</WebSite>\n    <Tags></Tags>\n    <Version>1.0</Version>\n    <IsSetupRecipe>true</IsSetupRecipe>\n  </Recipe>\n\n  <Module packageId=\"Orchard.Module.Bing.Maps\" />\n\n  <Theme packageId=\"Orchard.Theme.Dark\" current=\"true\" />\n\n  <Feature enable=\"Orchard.Blogs,Orchard.Comments,Orchard.Tags,\n                   Orchard.Lists,TinyMce,Orchard.Media,Orchard.MediaPicker,Orchard.PublishLater,\n                   Orchard.jQuery,Orchard.Widgets,Orchard.Widgets.PageLayerHinting,Orchard.ContentTypes,\n                   Orchard.Scripting,Orchard.Scripting.Lightweight,\n                   PackagingServices,Orchard.Packaging,Gallery,Gallery.Updates,\n                   TheThemeMachine,Bing.Maps\" />\n\n  <Metadata>\n    <Types>\n      <Page ContentTypeSettings.Draftable=\"True\" TypeIndexing.Included=\"true\">\n        <TagsPart />\n        <LocalizationPart />\n      </Page>\n      <BlogPost ContentTypeSettings.Draftable=\"True\" TypeIndexing.Included=\"true\">\n        <CommentsPart />\n        <TagsPart />\n        <LocalizationPart />\n      </BlogPost>\n    </Types>\n    <Parts>\n      <BodyPart BodyPartSettings.FlavorDefault=\"html\" />\n    </Parts>\n  </Metadata>\n\n  <Settings />\n\n  <Migration features=\"*\" />\n\n  <Command>\n    layer create Default /LayerRule:\"true\"\n    layer create Authenticated /LayerRule:\"authenticated\"\n    layer create Anonymous /LayerRule:\"not authenticated\"\n    layer create Disabled /LayerRule:\"false\"\n    layer create TheHomepage /LayerRule:\"url '~/'\"\n    layer create Blog /LayerRule:\"url '~/Blog'\"\n    layer create Maps /LayerRule:\"url '~/Maps'\"\n    page create /Slug:\"welcome-to-orchard\" /Title:\"Welcome to Orchard!\" /Path:\"welcome-to-orchard\" /Homepage:true /Publish:true /UseWelcomeText:true\n    blog create /Slug:\"blog\" /Title:\"Blog\" /Homepage:false /Description:\"This is your Orchard Blog.\"\n    page create /Slug:\"maps\" /Title:\"Bing Maps\" /Path:\"bing-maps\" /Homepage:false /Publish:true /UseWelcomeText:false\n    widget create HtmlWidget /Title:\"First Leader Aside\" /Zone:\"TripelFirst\" /Position:\"5\" /Layer:\"TheHomepage\" /UseLoremIpsumText:true\n    widget create HtmlWidget /Title:\"Second Leader Aside\" /Zone:\"TripelSecond\" /Position:\"5\" /Layer:\"TheHomepage\" /UseLoremIpsumText:true\n    widget create HtmlWidget /Title:\"Third Leader Aside\" /Zone:\"TripelThird\" /Position:\"5\" /Layer:\"TheHomepage\" /UseLoremIpsumText:true\n    menuitem create /MenuPosition:\"1\" /MenuText:\"Home\" /Url:\"\" /OnMainMenu:true\n    menuitem create /MenuPosition:\"2\" /MenuText:\"Blog\" /Url:\"~/Blog\" /OnMainMenu:true\n    menuitem create /MenuPosition:\"3\" /MenuText:\"Maps\" /Url:\"~/Maps\" /OnMainMenu:true\n  </Command>\n</Orchard>  Note the following about the changes made to the default recipe:   Module  element. This element identifies a module that will be downloaded from the Orchard Gallery on the website. This does not enable the features in the module; it only downloads it. To enable a module feature, add it to the  Feature  element as shown in the example.  Theme  element. This element identifies a theme that will be downloaded from the Orchard Gallery. If the  current  attribute is set to true, the theme becomes the current theme and is applied to the website. Otherwise, it will just be downloaded. It is also possible to enable a theme by using the  enable=\"true\"  attribute. Otherwise the theme is initially disabled. If you use  current=\"true\" , the theme is automatically enabled.  Important : The  Module  and  Theme  elements must appear in the recipe immediately after the  Recipe  element.    layer create  command. This was added in order to create the  Blog  and  Maps  layer.  blog create  command. This was added in order to create the blog.  page create  command. This was added in order to create the  Maps  page.  menuitem create  command. This was added in order to create the  Blog  and  Maps  menu tabs.   In addition to the attributes shown here for the  Module  and  Theme  elements, both elements support a  version  attribute. If the version is specified, that version will be downloaded from the Orchard Gallery. Both elements also have a  repository  attribute. By default, the  repository  attribute points to the Orchard Gallery. However, you can set it to any feed URL.  To add your custom recipe to the setup page use the  IsSetupRecipe  attribute in the  Recipe  element as shown above, and put the recipe XML file into the  Recipes  folder (or its subfolder) of a module. Note that recipe files should have a name ending in  .recipe.xml , e.g.  Custom.recipe.xml . When you set up a new Orchard website, the recipe list will contain your setup recipe.   Note that recipes used for importing mustn't contain an  IsSetupRecipe  element or it should be set to  false .",
            "title": "Creating a Custom Recipe"
        },
        {
            "location": "/Documentation/Making-a-Web-Site-Recipe/#importing-and-exporting-a-recipe",
            "text": "Orchard enables you to import and export recipes from and to the web server. It uses the  Import Export  module, which is disabled by default. Therefore you must enable the module to use this feature.  To enable the  Import Export  module, open the dashboard and click  Modules . On the  Modules  page, select the  Features  tab. Under  Content , locate the  Import Export  feature and click  Enable . A message at the top of the page will notify you when the feature is enabled. You will also see  Import/Export  listed in the dashboard feature list.     To export a recipe, open the dashboard and click  Import/Export . Click the  Export  tab and then choose the types, metadata, data, and settings to include in the export file. When you are finished, click  Export .   To import a recipe, click  Import/Export  and then click the  Import  tab. Browse to the recipe file and click  Import .",
            "title": "Importing and Exporting a Recipe"
        },
        {
            "location": "/Documentation/Making-a-Web-Site-Recipe/#creating-a-specialized-distribution-of-orchard",
            "text": "Recipes simplify the process of creating a specialized distribution of Orchard. Using recipes (and optionally custom modules), you can configure a version of the Orchard platform that is optimized for nearly any type of website you can envision.  To create a specialized distribution of Orchard   Enlist in the Orchard source code. For information about how to enlist in Orchard, see  Setting Up a Source Enlistment .  Sync to the latest build.  Create a custom recipe and add it to the  Orchard.Web/Modules/Orchard.Setup/Recipes  folder. If you want your recipe to be the only option, you can remove the other recipe files.  Add any custom modules to the  Orchard.Web/Modules  folder.  Compile the project.  Distribute all files under the  Orchard.Web  folder.",
            "title": "Creating a Specialized Distribution of Orchard"
        },
        {
            "location": "/Documentation/Creating-an-image-gallery/",
            "text": "Draft topic \n\n\n\n\nThis document targets Orchard developers. Using only the admin dashboard, you will create a gallery that renders thumbnails of images that you select from the Media folder. Afterward, you can customize the gallery with CSS and an alternate HTML template.\n\n\nCreate the Image Gallery Content Type\n\n\n\n\nFrom the admin dashboard, click \nContent Definition\n.\n\n\nThe Manage Content Types page will open.\n\n\nClick \nCreate new type\n.\n\n\nGive the new type a Display Name (e.g. \nMy Image Gallery\n).\n\n\nClick \nCreate\n.\n\n\n\n\n\n\n\n\nWhen you click create, Orchard will open the Add Parts page.\n\n\nCheck \nWidget\n, then click \nSave\n.\n\n\nThe Edit Content Type page will now show.\n\n\nChange the \nStereotype\n to Widget and click \nSave\n.\n\n\nThen click \nAdd Field\n.\n\n\nThe Add New Field page will open.\n\n\nChoose \nMedia Library Picker Field\n.\n\n\nName the field (e.g. \nMy Media Library Picker Field\n.)\n\n\nClick \nSave\n.\n\n\n\n\n\n\n\n\nAfter you click save, click on the down carat beside the new field.\n\n\nCheck \"\nAllow multiple content items\n.\"\n\n\nClick \nSave\n at the bottom of the page.\n\n\nYou will now have the following Content Type. It has both a Widget Part and a Media Library Picker Field.\n\n\n\n\n\n\nAdd the Widget a Zone\n\n\n\n\nFrom the admin dashboard, click on \nWidgets\n.\n\n\nClick \nAdd\n beside any zone (e.g. BeforeContent.)\n\n\nThe Choose a Widget page will open.\n\n\nChoose the Widget that you just created (i.e. \nMy Image Gallery\n.)\n\n\nThe Add Widget page will open.\n\n\nGive the Widget a Title (e.g. \nMy Gallery Widget\n.)\n\n\nClick the \nAdd\n button below the \"My Media Library Picker Field\" label.\n\n\nThe Media Library Picker modal will show.\n\n\n\n\nIn this screen shot, we have already imported some images and created some folders. You can create folders using the \nCreate Folder\n button. You can import images by opening a folder and clicking the \nImport\n button. This tutorial assumes you know how to do that.\n\n\n\n\n\n\nSelect the images that you want to display.\n\n\nTip: Use ctrl + click to select multiple images at once.\n\n\n\n\n\n\nThen click the \nSelect\n button in the lower left of the modal (it's a bit hidden.)\n\n\nThe Add Widget page will again display. Click \nSave\n.\n\n\nVisit the front end of your site to see the scaffolding of an image gallery.\n\n\n\n\nCustomize the Look of the Gallery\n\n\n\n\nTurn on Shape Tracing\n\n\nCreate an Alternate for the Fields_MediaPickerLibrary\n\n\nEdit the HTML and add CSS.\n\n\nHere are example alternate templates, courtesy of Bertrand Le Roy's \nCodeplex Reply\n \n\n\n\n\nFields.MediaLibraryPicker.cshtml\n\n\n@using Orchard.ContentManagement\n@using Orchard.MediaLibrary.Fields\n@using Orchard.Utility.Extensions;    \n@{\n    var field = (MediaLibraryPickerField) Model.ContentField;\n    string name = field.DisplayName;\n    var contents = field.MediaParts;\n}\n<section class=\"media-library-picker-field media-library-picker-field @name.HtmlClassify()\">\n@foreach(var content in contents) \n{\n    <div>\n        @Display(BuildDisplay(content, \"Summary\"))\n    </div>\n}\n</section>\n\n\n\nMedia.Summary.cshtml\n\n\n@using Orchard.MediaLibrary.Models\n@using Orchard.Utility.Extensions;\n@{\n    MediaPart mediaPart = Model.ContentItem.MediaPart;\n}\n<a href=\"@mediaPart.MediaUrl\">\n<img \n    src=\"@Display.ResizeMediaUrl(Width: 200, Height: 200, Mode: \"crop\",     Alignment: \"middlecenter\", Path: mediaPart.MediaUrl)\"   \n    alt=\"@mediaPart.Caption\" class=\"thumbnail\"/>\n</a>",
            "title": "Creating an Image Gallery"
        },
        {
            "location": "/Documentation/Creating-an-image-gallery/#create-the-image-gallery-content-type",
            "text": "From the admin dashboard, click  Content Definition .  The Manage Content Types page will open.  Click  Create new type .  Give the new type a Display Name (e.g.  My Image Gallery ).  Click  Create .     When you click create, Orchard will open the Add Parts page.  Check  Widget , then click  Save .  The Edit Content Type page will now show.  Change the  Stereotype  to Widget and click  Save .  Then click  Add Field .  The Add New Field page will open.  Choose  Media Library Picker Field .  Name the field (e.g.  My Media Library Picker Field .)  Click  Save .     After you click save, click on the down carat beside the new field.  Check \" Allow multiple content items .\"  Click  Save  at the bottom of the page.  You will now have the following Content Type. It has both a Widget Part and a Media Library Picker Field.",
            "title": "Create the Image Gallery Content Type"
        },
        {
            "location": "/Documentation/Creating-an-image-gallery/#add-the-widget-a-zone",
            "text": "From the admin dashboard, click on  Widgets .  Click  Add  beside any zone (e.g. BeforeContent.)  The Choose a Widget page will open.  Choose the Widget that you just created (i.e.  My Image Gallery .)  The Add Widget page will open.  Give the Widget a Title (e.g.  My Gallery Widget .)  Click the  Add  button below the \"My Media Library Picker Field\" label.  The Media Library Picker modal will show.   In this screen shot, we have already imported some images and created some folders. You can create folders using the  Create Folder  button. You can import images by opening a folder and clicking the  Import  button. This tutorial assumes you know how to do that.    Select the images that you want to display.  Tip: Use ctrl + click to select multiple images at once.    Then click the  Select  button in the lower left of the modal (it's a bit hidden.)  The Add Widget page will again display. Click  Save .  Visit the front end of your site to see the scaffolding of an image gallery.",
            "title": "Add the Widget a Zone"
        },
        {
            "location": "/Documentation/Creating-an-image-gallery/#customize-the-look-of-the-gallery",
            "text": "Turn on Shape Tracing  Create an Alternate for the Fields_MediaPickerLibrary  Edit the HTML and add CSS.  Here are example alternate templates, courtesy of Bertrand Le Roy's  Codeplex Reply     Fields.MediaLibraryPicker.cshtml  @using Orchard.ContentManagement\n@using Orchard.MediaLibrary.Fields\n@using Orchard.Utility.Extensions;    \n@{\n    var field = (MediaLibraryPickerField) Model.ContentField;\n    string name = field.DisplayName;\n    var contents = field.MediaParts;\n}\n<section class=\"media-library-picker-field media-library-picker-field @name.HtmlClassify()\">\n@foreach(var content in contents) \n{\n    <div>\n        @Display(BuildDisplay(content, \"Summary\"))\n    </div>\n}\n</section>  Media.Summary.cshtml  @using Orchard.MediaLibrary.Models\n@using Orchard.Utility.Extensions;\n@{\n    MediaPart mediaPart = Model.ContentItem.MediaPart;\n}\n<a href=\"@mediaPart.MediaUrl\">\n<img \n    src=\"@Display.ResizeMediaUrl(Width: 200, Height: 200, Mode: \"crop\",     Alignment: \"middlecenter\", Path: mediaPart.MediaUrl)\"   \n    alt=\"@mediaPart.Caption\" class=\"thumbnail\"/>\n</a>",
            "title": "Customize the Look of the Gallery"
        },
        {
            "location": "/Documentation/Workflows/",
            "text": "This topic targets, and was tested with, the Orchard 1.8 release.\n\n\n\n\nThe \nOrchard.Workflows Module\n in Orchard provides us tools to create custom workflows for events or activities like \nContent Created, Content Published, Content Removed, Send Email, Timer\n and many more.  \n\n\nDependencies : Orchard.Tokens, Orchard.Forms, Orchard.jQuery\n\n\n\n\nIn this particular demo , we'll be creating a \nContact us Email Notification Workflow\n. The \nOrchard.EmailMessaging\n Module needs to be enabled in order to send email notifications using the \nOrchard.Workflows\n Module.\n\n\nEmail.Messaging\n\n\nLearn how to \nConfiguring Email\n\n\n\n\nCustom Form\n\n\nLearn how to \nCreating Custom Content Types\n\n\nLearn how to \nCreate Custom Forms\n\n\n\n\nWorkflows Demo\n\n\n1.\n \nCreating Workflow\n\n\n\n\n2.\n \nContact Us Email Notification Workflow\n\n\n\n\n3.\n \nEditing Contact Us Email Notification Workflow\n\n\n\n\n4.\n \nWorkflow Starting State\n\n\nThe workflow needs at least one activity to be set as a starting state.\n\n\n\n\n5.\n \nEditing Workflow Activity (Form Submitted)\n\n\n\n\n6.\n \nAdding a Timer Activity\n\n\nThe Timer Activity adds a delay so that the processing thread doesn't get blocked\n\n\n\n\n7.\n \nEditing Timer Activity\n\n\n\n\n8.\n \nAdding Send Email Activity\n\n\n\n\n9.\n \nEditing Send Email Activity\n\n\nUsing Tokens to access the form posted values by the end-user\n\n\nNew Contact Request by {Content.Fields.ContactUs.Name}\n\n<p>New Contact Request by {Content.Fields.ContactUs.Name}</p>\n\n<p>Email : {Content.Fields.ContactUs.EmailAddress}</p>\n\n<p>Message : {Content.Fields.ContactUs.Message}</p>\n\n\n\n\n\n10.\n \nSubmitting Form\n\n\n\n\n11.\n \nWorkflow Running\n\n\n\n\n12.\n \nBlocking Activity\n\n\nThe timer (Blocking Activity) has a delay period of 2 mins\n\n\n\n\n13.\n \nContact Us Email Notification Sent\n\n\n\n\n\n\nfor more on Workflows browse to the \nOrchard Tutorials Area",
            "title": "Workflows"
        },
        {
            "location": "/Documentation/Workflows/#emailmessaging",
            "text": "Learn how to  Configuring Email",
            "title": "Email.Messaging"
        },
        {
            "location": "/Documentation/Workflows/#custom-form",
            "text": "Learn how to  Creating Custom Content Types  Learn how to  Create Custom Forms",
            "title": "Custom Form"
        },
        {
            "location": "/Documentation/Workflows/#workflows-demo",
            "text": "1.   Creating Workflow   2.   Contact Us Email Notification Workflow   3.   Editing Contact Us Email Notification Workflow   4.   Workflow Starting State  The workflow needs at least one activity to be set as a starting state.   5.   Editing Workflow Activity (Form Submitted)   6.   Adding a Timer Activity  The Timer Activity adds a delay so that the processing thread doesn't get blocked   7.   Editing Timer Activity   8.   Adding Send Email Activity   9.   Editing Send Email Activity  Using Tokens to access the form posted values by the end-user  New Contact Request by {Content.Fields.ContactUs.Name}\n\n<p>New Contact Request by {Content.Fields.ContactUs.Name}</p>\n\n<p>Email : {Content.Fields.ContactUs.EmailAddress}</p>\n\n<p>Message : {Content.Fields.ContactUs.Message}</p>   10.   Submitting Form   11.   Workflow Running   12.   Blocking Activity  The timer (Blocking Activity) has a delay period of 2 mins   13.   Contact Us Email Notification Sent    for more on Workflows browse to the  Orchard Tutorials Area",
            "title": "Workflows Demo"
        },
        {
            "location": "/Documentation/Projection/",
            "text": "This topic targets, and was tested with, the Orchard 1.8 release.\n\n\nThe \nOrchard.Projections Module\n Provides methods to control how lists of content items are filtered and displayed.\n\n\nDependencies : Orchard.Tokens, Orchard.Forms, Feeds, Title\n\n\nIn this particular demo, we'll create an \nExternal Post\n functionality using \nQuery , Projection Page and Projection Widget\n.\n\n\nCreating External Post Content Type\n\n\nLearn how to \nCreate Custom Content Types\n\n\n1.\nExternal Post\n \nContent Type\n\n\n\n\n2.\nAdding 3 Fields Title, Author, Url\n and \n1 Part BodyPart\n\n\n\n\n3.Click on \nEdit Placement\n to place fields and parts accordingly\n\n\n\n\n4.Creating \nExternal Post\n\n\n\n\n\n\nCreating a Query\n\n\n1.Creating a \nQuery\n \"ExternalPostQuery\"\n\n\n\n\n\n\nEditing a Query : \nFilter, Sort, Layouts\n\n\n\n\n2.Click \nAdd a new Filter\n\n\n\n\nSelect \nExternal Post\n as the \nContent Type\n\n\n\n\n3.Click \nAdd a new Sort Criteria\n and Select \nPublication Date\n\n\n\n\n4.Click \nAdd a new Layout\n and Select \nHtml List\n\n\n\n\n5.Save the Layout with Display Type as \nDetail\n\n\n\n\n5.Previewing the query result\n\n\n\n\n\n\nAdding Properties to the Html List Layout\n\n\nChange \nDisplay Mode\n to \nProperties\n\n\n\n\n1.\nTitle Property\n\n\n\n\nOpen Rewrite Results -> Select \nRewrite output\n\n\nRewriting the output for the Title Property and using \nTokens\n to the Title and Url fields.\n\n\n<h1><a href=\"{Content.Fields.ExternalPost.Url}\" target=\"_blank\">{Content.Fields.ExternalPost.Title}</a></h1>\n\n\n\n\n\n2.\nAuthor Property\n\n\n\n\nRewriting the output for the Author Property and using \nTokens\n\n\n<p>Posted By <b>{Content.Fields.ExternalPost.Author}</b> on {Content.Date}</p>\n\n\n\n\n\nCreating a Projection Page for ExernalPostQuery(Unordered Html List)\n\n\n\n\nSelect the \nShow Pager\n check box to add a pager to the list.\n\n\n\n\nRendering Results using Projection Widget\n\n\n\n\nSelect \nExernalPostQuery(Unordered Html List)\n For Query\n\n\n\n\nRendered Result",
            "title": "Projection"
        },
        {
            "location": "/Documentation/Projection/#creating-external-post-content-type",
            "text": "Learn how to  Create Custom Content Types  1. External Post   Content Type   2. Adding 3 Fields Title, Author, Url  and  1 Part BodyPart   3.Click on  Edit Placement  to place fields and parts accordingly   4.Creating  External Post",
            "title": "Creating External Post Content Type"
        },
        {
            "location": "/Documentation/Projection/#creating-a-query",
            "text": "1.Creating a  Query  \"ExternalPostQuery\"",
            "title": "Creating a Query"
        },
        {
            "location": "/Documentation/Projection/#editing-a-query-filter-sort-layouts",
            "text": "2.Click  Add a new Filter   Select  External Post  as the  Content Type   3.Click  Add a new Sort Criteria  and Select  Publication Date   4.Click  Add a new Layout  and Select  Html List   5.Save the Layout with Display Type as  Detail   5.Previewing the query result",
            "title": "Editing a Query : Filter, Sort, Layouts"
        },
        {
            "location": "/Documentation/Projection/#adding-properties-to-the-html-list-layout",
            "text": "Change  Display Mode  to  Properties   1. Title Property   Open Rewrite Results -> Select  Rewrite output  Rewriting the output for the Title Property and using  Tokens  to the Title and Url fields.  <h1><a href=\"{Content.Fields.ExternalPost.Url}\" target=\"_blank\">{Content.Fields.ExternalPost.Title}</a></h1>   2. Author Property   Rewriting the output for the Author Property and using  Tokens  <p>Posted By <b>{Content.Fields.ExternalPost.Author}</b> on {Content.Date}</p>",
            "title": "Adding Properties to the Html List Layout"
        },
        {
            "location": "/Documentation/Projection/#creating-a-projection-page-for-exernalpostqueryunordered-html-list",
            "text": "Select the  Show Pager  check box to add a pager to the list.",
            "title": "Creating a Projection Page for ExernalPostQuery(Unordered Html List)"
        },
        {
            "location": "/Documentation/Projection/#rendering-results-using-projection-widget",
            "text": "Select  ExernalPostQuery(Unordered Html List)  For Query   Rendered Result",
            "title": "Rendering Results using Projection Widget"
        },
        {
            "location": "/Documentation/Creating-Dynamic-Forms/",
            "text": "The Dynamic Forms module is used to capture information from site visitors on the front end.  Dynamic Forms can work in combination with a Content Type or standalone.  Dynamic Forms can be used to create \nContact Us\n and \nSubscribe\n widgets/pages to name a couple. The information is then stored in Orchard and can be exported later.\n\n\nEnable the Dynamic Forms Module\n\n\nThe Dynamic Forms module is different from the custom forms module because it can work in combination with a Content Type to capture input on the front-end or you can choose to just store the form submission. If you choose to just store the submission you will find it in the \nForm Submissions\n section of the admin.  The information submitted is stored and can be exported using the Import-Export module.  Let's start by enabling the Dynamic Forms module that is shipped with Orchard by going to the Modules section in the admin.\n\n\n\n\nOnce the module has enabled the feature, a new content type called \nForm\n will appear in the create new content section of the admin.\n\n\nAs stated before, the Dynamic Forms module works with a content type either create a submission or create forms on the front-end of the site.  In the \nNew\n content section of the admin, you can click on \nForm\n to create a new form, an edit form screen will popup allowing you to create your form. In this screen is where you can choose to either store the submission or create content from the submitted values. However, let's say we are looking to add a new widget that will live in the right rail (AsideSecond zone) that is a call for visitors to join a mailing list.  The only input that will be captured will be the users email address.\n\n\nStore Form Submission as a Content Type\n\n\nIn order for Dynamic Forms to capture and save an email address from a visitor as \nContent\n we need to create a new content type in Orchard.  In the admin, browse to the \nContent Definitions\n tab and click on \nCreate new type\n button in the upper right. Let's call the new type 'Subscribe Form'.\n\n\n\n\nThe next screen asks if we'd like to save any Parts to the new \nSubscribe Form\n content type.  Since all we are looking to capture is an email address, click on the save button without selecting any of these options.  Now that we have our new content type we'll want to add an \ninput field\n for the email.\n\n\n\n\nAfter adding and saving the input field with the name 'Email' we can now customize the type of validation the new input field should have by selecting an input type of 'Email'.  Feel free to fill in the other information for the field as well.\n\n\n\n\nAt this point we have all the pieces we need to create out new widget in the right rail (AsideSecond zone).  We've enabled the \nDynamic Forms\n module and we've created a new content type (Subscribe Form) that will be used to capture the email address of visitors looking to enroll in the mailing list.  All that's left is to create the Widget.\n\n\nCreate a Form Widget\n\n\nSelect \nWidgets\n in the left menu of the admin and find the appropriate \nAdd\n button for the AsideSecond zone and add a Form Widget.\n\n\n\n\nThe only thing left to do is to adjust the settings on our new \nForm Widget\n.  In this example, the \nlayer\n is set to 'Default' and the position is set to '1'.  This will render the widget on the top of the right rail (AsideSecond zone) for all pages.  In the Layout section of the form you need to add your form fields and bind it to your content type.  In the layout section, see highlighted below, edit the form by dragging an \nEmail Field\n field from the \nLayout\n items on the right side of the screen.\n\n\n\n\nOnce it is dropped an \nEdit Email Field\n will pop up. Enter the value as shown in the screenshot below.\n\n\n\n\nThen click on the \nValidation\n tab and make sure to check the \nRequired\n checkbox.  Now you can save the form, but we are not finished yet.  After you save, now we can bind the form to your content type we created earlier.  Hover back over the form and click on the angle brackets.  You should see the \nEdit Form\n pop up. Make sure to check the \nCreate Content\n and then select your \nSubscribe Form\n from the dropdown. Now save the form. \n\n\n\n\nAlmost there, now hover on the \nEmail Field\n and click the angle brackets.  Click on the \nBindings\n tab and then check the field you want to bind it to, which in our case is the \nEmail.Text\n field of the \nSubscribe Form\n content type. If you do not see the bindings tab, then please save your form and go back to edit it.\n\n\n\n\nThese are some example settings:\n\n\n\n\nAfter saving the widget browse to a page on the site and check out the new feature!\n\n\n\n\nNOTE\n: If the input field for the owner is visible remove it by un-checking the 'Show editor for owner' option under the Common part of the Subscribe Form content type.\n\n\n\nStore Form Submission without a Content Type\n\n\nThis is easy to do, all you need to do is check the \nStore Submission\n option in the form layout.\n\n\n\n\nView Submitted Dynamic Forms Data\n\n\nAt this point, we have enabled the Dynamic Forms module, created a new content type for the Dynamic Forms to use and added a Dynamic Forms widget to draw the Subscribe Form content type in the right rail (AsideSecond zone) of all the pages.  The submissions are being saved in Orchard because the option in the Dynamic Forms widget 'Create Content' was checked.  So where are they being saved? Select the 'Content' link on the left in the admin section of Orchard.\n\n\n\n\nYou can view all submitted data without a content type by going to \nForm Submissions\n section in the admin.\n\n\n\n\nExport Dynamic Forms Data\n\n\nSince Dynamic Forms can be either saved as a content type or as a form submissions you have different steps when exporting and importing.\n\n\nExporting Forms saved as Content Type\n\n\nThe only thing left to do is to export our list of submissions so that the email addresses can be used by services like Publicaster, Campaign Monitor, MailChimp and the like.  The easiest way to export anything and everything from the Orchard CMS is to use the Import/Export module.  The Import/Export module is shipped with Orchard by default in version 1.6 and on but is not enabled by default.  Let's enable the Import/Export module.\n\n\n\n\nThe Import/Export functions are now available in the admin via the left navigation.  Selecting the 'Export' tab at the top of the Import/Export section of the admin shows all of the available content types in Orchard.  To export the list of emails that have been submitted check the box next to the \nSubscribe Form\n content type.  Towards the bottom of the page there are a few options for export.  The first option, \nMetadata\n, will include the definition of the content type.  One use for this option would be an easy way to copy a content type and it's records from one Orchard CMS site to another.  A prime example of this would be to move a new content type and data from a development site to a production site.  When importing an XML file that contains both the metadata and data, Orchard will create the content type copy in the included data.  \n\n\nIn the current situation we are only interested in exporting the data so there is no need to check the Metadata option.  Also, be sure to bullet 'Draft Only' since none of the items submitted from the front end would have a published state.\n\n\n\n\nThe exported file is and XML file that can be opened in MS Excel and manipulated to be made ready for the email campaign platform of your choice.  And that's it... The site is now able to collect visitor's email addresses and save them for export later for a newsletter.  The Dynamic Forms is also a great way to implement a Contact Us page or any other number of types of information a site should collect from it's users.\n\n\nExporting Forms saved as a Form Submission\n\n\nTo export form submissions you need to enable the Dynamic Forms Import Export module.\n\n\n\n\nOnce enabled, now when you perform an export, you need to enable the custom step called \"Forms\" to export your \nForm Submissions",
            "title": "Create Dynamic Forms"
        },
        {
            "location": "/Documentation/Creating-Dynamic-Forms/#enable-the-dynamic-forms-module",
            "text": "The Dynamic Forms module is different from the custom forms module because it can work in combination with a Content Type to capture input on the front-end or you can choose to just store the form submission. If you choose to just store the submission you will find it in the  Form Submissions  section of the admin.  The information submitted is stored and can be exported using the Import-Export module.  Let's start by enabling the Dynamic Forms module that is shipped with Orchard by going to the Modules section in the admin.   Once the module has enabled the feature, a new content type called  Form  will appear in the create new content section of the admin.  As stated before, the Dynamic Forms module works with a content type either create a submission or create forms on the front-end of the site.  In the  New  content section of the admin, you can click on  Form  to create a new form, an edit form screen will popup allowing you to create your form. In this screen is where you can choose to either store the submission or create content from the submitted values. However, let's say we are looking to add a new widget that will live in the right rail (AsideSecond zone) that is a call for visitors to join a mailing list.  The only input that will be captured will be the users email address.",
            "title": "Enable the Dynamic Forms Module"
        },
        {
            "location": "/Documentation/Creating-Dynamic-Forms/#store-form-submission-as-a-content-type",
            "text": "In order for Dynamic Forms to capture and save an email address from a visitor as  Content  we need to create a new content type in Orchard.  In the admin, browse to the  Content Definitions  tab and click on  Create new type  button in the upper right. Let's call the new type 'Subscribe Form'.   The next screen asks if we'd like to save any Parts to the new  Subscribe Form  content type.  Since all we are looking to capture is an email address, click on the save button without selecting any of these options.  Now that we have our new content type we'll want to add an  input field  for the email.   After adding and saving the input field with the name 'Email' we can now customize the type of validation the new input field should have by selecting an input type of 'Email'.  Feel free to fill in the other information for the field as well.   At this point we have all the pieces we need to create out new widget in the right rail (AsideSecond zone).  We've enabled the  Dynamic Forms  module and we've created a new content type (Subscribe Form) that will be used to capture the email address of visitors looking to enroll in the mailing list.  All that's left is to create the Widget.",
            "title": "Store Form Submission as a Content Type"
        },
        {
            "location": "/Documentation/Creating-Dynamic-Forms/#create-a-form-widget",
            "text": "Select  Widgets  in the left menu of the admin and find the appropriate  Add  button for the AsideSecond zone and add a Form Widget.   The only thing left to do is to adjust the settings on our new  Form Widget .  In this example, the  layer  is set to 'Default' and the position is set to '1'.  This will render the widget on the top of the right rail (AsideSecond zone) for all pages.  In the Layout section of the form you need to add your form fields and bind it to your content type.  In the layout section, see highlighted below, edit the form by dragging an  Email Field  field from the  Layout  items on the right side of the screen.   Once it is dropped an  Edit Email Field  will pop up. Enter the value as shown in the screenshot below.   Then click on the  Validation  tab and make sure to check the  Required  checkbox.  Now you can save the form, but we are not finished yet.  After you save, now we can bind the form to your content type we created earlier.  Hover back over the form and click on the angle brackets.  You should see the  Edit Form  pop up. Make sure to check the  Create Content  and then select your  Subscribe Form  from the dropdown. Now save the form.    Almost there, now hover on the  Email Field  and click the angle brackets.  Click on the  Bindings  tab and then check the field you want to bind it to, which in our case is the  Email.Text  field of the  Subscribe Form  content type. If you do not see the bindings tab, then please save your form and go back to edit it.   These are some example settings:   After saving the widget browse to a page on the site and check out the new feature!   NOTE : If the input field for the owner is visible remove it by un-checking the 'Show editor for owner' option under the Common part of the Subscribe Form content type.",
            "title": "Create a Form Widget"
        },
        {
            "location": "/Documentation/Creating-Dynamic-Forms/#store-form-submission-without-a-content-type",
            "text": "This is easy to do, all you need to do is check the  Store Submission  option in the form layout.",
            "title": "Store Form Submission without a Content Type"
        },
        {
            "location": "/Documentation/Creating-Dynamic-Forms/#view-submitted-dynamic-forms-data",
            "text": "At this point, we have enabled the Dynamic Forms module, created a new content type for the Dynamic Forms to use and added a Dynamic Forms widget to draw the Subscribe Form content type in the right rail (AsideSecond zone) of all the pages.  The submissions are being saved in Orchard because the option in the Dynamic Forms widget 'Create Content' was checked.  So where are they being saved? Select the 'Content' link on the left in the admin section of Orchard.   You can view all submitted data without a content type by going to  Form Submissions  section in the admin.",
            "title": "View Submitted Dynamic Forms Data"
        },
        {
            "location": "/Documentation/Creating-Dynamic-Forms/#export-dynamic-forms-data",
            "text": "Since Dynamic Forms can be either saved as a content type or as a form submissions you have different steps when exporting and importing.",
            "title": "Export Dynamic Forms Data"
        },
        {
            "location": "/Documentation/Creating-Dynamic-Forms/#exporting-forms-saved-as-content-type",
            "text": "The only thing left to do is to export our list of submissions so that the email addresses can be used by services like Publicaster, Campaign Monitor, MailChimp and the like.  The easiest way to export anything and everything from the Orchard CMS is to use the Import/Export module.  The Import/Export module is shipped with Orchard by default in version 1.6 and on but is not enabled by default.  Let's enable the Import/Export module.   The Import/Export functions are now available in the admin via the left navigation.  Selecting the 'Export' tab at the top of the Import/Export section of the admin shows all of the available content types in Orchard.  To export the list of emails that have been submitted check the box next to the  Subscribe Form  content type.  Towards the bottom of the page there are a few options for export.  The first option,  Metadata , will include the definition of the content type.  One use for this option would be an easy way to copy a content type and it's records from one Orchard CMS site to another.  A prime example of this would be to move a new content type and data from a development site to a production site.  When importing an XML file that contains both the metadata and data, Orchard will create the content type copy in the included data.    In the current situation we are only interested in exporting the data so there is no need to check the Metadata option.  Also, be sure to bullet 'Draft Only' since none of the items submitted from the front end would have a published state.   The exported file is and XML file that can be opened in MS Excel and manipulated to be made ready for the email campaign platform of your choice.  And that's it... The site is now able to collect visitor's email addresses and save them for export later for a newsletter.  The Dynamic Forms is also a great way to implement a Contact Us page or any other number of types of information a site should collect from it's users.",
            "title": "Exporting Forms saved as Content Type"
        },
        {
            "location": "/Documentation/Creating-Dynamic-Forms/#exporting-forms-saved-as-a-form-submission",
            "text": "To export form submissions you need to enable the Dynamic Forms Import Export module.   Once enabled, now when you perform an export, you need to enable the custom step called \"Forms\" to export your  Form Submissions",
            "title": "Exporting Forms saved as a Form Submission"
        },
        {
            "location": "/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard/",
            "text": "A new version of a CMS is an important event in the life of a site, and transitioning to it should ideally be simple. Unfortunately, Orchard does not currently have an automated upgrade mechanism. This topic will show how to upgrade to a new version as painlessly as possible today while focusing on making your data safe.\n\n\nA Word of Warning\n\n\nNo matter which method you choose to use to upgrade your site, you are going to have to overwrite a lot of files in the process. This should emphasize the requirement to backup first, but it should also call your attention to any modifications you made to common files. For example, if you made any modifications to core modules and/or the framework (something you shouldn't do: custom modules and themes should be used instead), you will lose them, or you will need to re-apply your changes after the upgrade. Any modification you made to web.config or other common files will also need to be re-applied after the process.\n\n\nIf you made modifications to permissions on the files and folders inside your site, they may also get reset in the upgrade and need to be re-applied.\n\n\nUpgrading a Running Instance of Orchard to a New Version\n\n\nThe instructions in this section only apply for a standalone Orchard web site. If you are working with the full source code of Orchard, please refer to \n#enlistment\n.\n\n\nIt is highly recommended that you work on a local copy of your site throughout the update process.\n\n\n\n\nMake a backup of everything in your site, including the database. This is extremely important so that you can roll back to a running site no matter what happens during migration.\n\n\nVisit the \nSettings\n pages on your current Orchard instance and make a note of the current settings. This information might not be needed during the migration process, but if it is, it will otherwise be difficult to get the information.\n\n\nVisit the \nModules/Features\n and the \nThemes\n pages on your current Orchard instance and make a note of all the modules and themes you have installed.\n\n\nDownload a copy of the site from the server to your local computer. If you are routinely working with a staging environment from which you publish to production, you already have that local copy, but the data and media might be out of date. Make sure you download the \nApp_Data\n and \nMedia\n folders from the server.\n\n\nIf you're using a SQL Server Compact database, you've copied the site data by downloading the \nApp_Data\n folder. If your site is using SQL Server, you can copy that data to a local server in order to work with up-to-date data. However, this isn't required for migration. If you want to work with a local database, you'll also need to edit the \nsettings.txt\n file for each of the tenants. The \nsettings.txt\n files can be found under \nApp_Data\\Sites\\Default\n or \nApp_Data\\Sites\\\\[NameOfTheTenant\\]\n.\n\n\nIn a new, empty directory, install a fresh copy of the latest version of Orchard, but don't go through setup. \n\n\nCopy your existing site's \nMedia\n folder into the new directory.\n\n\nCopy the remaining module and themes directories that you have on your existing site and that are not already in the new one into the new directory's \nModules\n and \nThemes\n directories.\n\n\nCopy the \nApp_Data\n folder from the existing site into the new directory.\n\n\nPoint a local web server to the new directory. You can use IIS; in that case, use IIS Manager to create a new web site that points at the directory and then navigate to it. Alternatively, you can use WebMatrix and IIS Express; to do that, right-click the directory in Windows Explorer and choose \nOpen as a Web Site with Microsoft WebMatrix\n and then run the site. Finally, you can open the site in Visual Studio as a web site and run it. The new site will have all the data from the old site and have all the new features.\n\n\nGo into the dashboard. Modules should have already upgraded themselves automatically. In rare cases, you may be prompted to upgrade features. Click \nModules\n and upgrade each of the modules one by one until they are all up to date. If this doesn't work, it means that something is wrong with your install and/or one of the modules you're using, and you should investigate further in \nApp_Data\\logs\n.\n\n\nGo to the Orchard Gallery and get the latest version of all the modules you have on your site.\n\n\nSome versions of Orchard come with version-specific upgrade features. Go to Modules and locate the \"Upgrade\" feature. Enable it, then click on the new upgrade menu entry that was added to the admin menu. Visit all the relevant tabs and execute the required upgrade actions they present. Once you're done, the feature can be disabled, which will remove the menu entry.\n\n\n\n\nPublishing the Upgraded Site\n\n\nYou can deploy the locally upgraded site to your production server using your preferred deployment solution. That might be Visual Studio Web deployment, WebMatrix, or even FTP. You again have a choice of wiping out the target directory before you deploy. Make your choice depending on your deployment method, how clean you want the resulting directory to be, and on how long it's acceptable to keep the site down.\n\n\nAs you deploy, make sure that the target \nsettings.txt\n files aren't overwritten, so that the production site continues to point to the production database.\n\n\nWhile you deploy, you might want to shut the site down by dropping an \napp_offline.htm\n file into the root. Remove that file once you're done.\n\n\nOnce deployed, manual upgrade actions (for example, those from the \"Upgrade\" feature) need to be performed again on the deployed production site.\n\n\nUpgrading An Orchard Site In-Place\n\n\nIt is possible to upgrade a site in-place, if you can't or don't want to work with a local copy and then publish it. The procedure is less clean but it works.\n\n\n\n\nBackup everything (site and database).\n\n\nDownload the new version to your local machine.\n\n\nAdd \napp_offline.htm\n to the root of the site during the upgrade. This effectively tells the web server to return this page for all requests. You should put a message such as \"The site is currently being updated. Thank you for your patience. Please try again later.\" in the file.\n\n\nDelete what's in bin. This ensures that old versions of binaries that won't get replaced will not continue to be picked up by the application.\n\n\nDelete the \nApp_Data\\Dependencies\n folder. Orchard will rebuild this folder on startup. This ensures that old versions of module assemblies will not be picked up by the application.\n\n\nExtract the new version's zip file and copy what's in its Orchard folder over the server's Orchard web directory (answer yes to all prompts to overwrite).\n\n\nRemove the \napp_offline.html\n file.\n\n\nThe site should be running now. Log-in and go into admin.\n\n\nGo into the dashboard. Modules should have already upgraded themselves automatically. In rare cases, you may be prompted to upgrade features. Click \nModules\n and upgrade each of the modules one by one until they are all up to date. If this doesn't work, it means that something is wrong with your install and/or one of the modules you're using, and you should investigate further in \nApp_Data\\logs\n.\n\n\nGo to the Orchard Gallery and get the latest version of all the modules you have on your site.\n\n\nSome versions of Orchard come with version-specific upgrade features. Go to Modules and locate the \"Upgrade\" feature. Enable it, then click on the new upgrade menu entry that was added to the admin menu. Visit all the relevant tabs and execute the required upgrade actions they present. Once you're done, the feature can be disabled, which will remove the menu entry.\n\n\n\n\nYou are done.\n\n\nUpgrading an Azure Instance of Orchard\n\n\n\n\nYou should already have the full source code, with your modifications if you had any (additional modules or themes). Upgrade that by copying the source of the new version over it (overwrite whenever asked), or by doing a Mercurial update to the desired version. If you do not already have the full source code, then that means you don't have any changes to the default distribution. In that case just get the source code for the new version. In any case, at this point you should have a local directory on your development machine that has the code for the new version, plus any themes and modules you may have added, and no data (be it media or database, as on Azure you are using blob storage for the former, and Sql Azure for the latter). All that remains to be done is to build the new package and deploy it.\n\n\nRun clickToBuildAzurePackage.cmd. This file should be at the root of your source code folder. If it's not there (it was missing from older release files), get it and other root files from the relevant version in http://orchard.codeplex.com/SourceControl/list/changesets\n\n\nUnzip artifacts/Azure/AzurePackage.zip\n\n\nOpen ServiceConfiguration.cscfg and replace the value of the DataConnectionString with your DefaultEndpointsProtocol=https;AccountName=your-account-name;AccountKey=your-account-key\n\n\nOpen the Azure Management Portal, go to Hosted Services, Storage Accounts & CDN and choose your deployment target. Click Upgrade. \n\n\nBrowse to the package and config file, click OK. \n\n\nLog-in and go to admin.\n\n\nGo into the dashboard. Modules should have already upgraded themselves automatically. In rare cases, you may be prompted to upgrade features. Click \nModules\n and upgrade each of the modules one by one until they are all up to date. If this doesn't work, it means that something is wrong with your install and/or one of the modules you're using, and you should investigate further in logs.\n\n\nSome versions of Orchard come with version-specific upgrade features. Go to Modules and locate the \"Upgrade\" feature. Enable it, then click on the new upgrade menu entry that was added to the admin menu. Visit all the relevant tabs and execute the required upgrade actions they present. Once you're done, the feature can be disabled, which will remove the menu entry.\n\n\n\n\nYou're done.\n\n\nIf You Have a Source Code Enlistment\n\n\nIf you are working with a source code enlistment, the update process is going to be extremely simple because you are already going through it every time you sync your source code directory with the repository. When the time comes to upgrade, just get the latest changes and sync to the latest in the default branch.\n\n\nImport/Export\n\n\nThe \nImport/Export\n module \ncan be used to do clean data migrations from one version to another.\n\n\nApplying a framework patch\n\n\nOccasionally, we may release small updates in the form of a patch to one or several dlls.\nThese patch files are regular zip files that contain updated dll files.\n\n\nTo install such a patch, first extract the zip, then make a copy of the version of those files that are already\nin the bin folder of your site. Then, replace the existing copy with the one from the patch file.",
            "title": "Upgrading a Site to a New Version"
        },
        {
            "location": "/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard/#a-word-of-warning",
            "text": "No matter which method you choose to use to upgrade your site, you are going to have to overwrite a lot of files in the process. This should emphasize the requirement to backup first, but it should also call your attention to any modifications you made to common files. For example, if you made any modifications to core modules and/or the framework (something you shouldn't do: custom modules and themes should be used instead), you will lose them, or you will need to re-apply your changes after the upgrade. Any modification you made to web.config or other common files will also need to be re-applied after the process.  If you made modifications to permissions on the files and folders inside your site, they may also get reset in the upgrade and need to be re-applied.",
            "title": "A Word of Warning"
        },
        {
            "location": "/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard/#upgrading-a-running-instance-of-orchard-to-a-new-version",
            "text": "The instructions in this section only apply for a standalone Orchard web site. If you are working with the full source code of Orchard, please refer to  #enlistment .  It is highly recommended that you work on a local copy of your site throughout the update process.   Make a backup of everything in your site, including the database. This is extremely important so that you can roll back to a running site no matter what happens during migration.  Visit the  Settings  pages on your current Orchard instance and make a note of the current settings. This information might not be needed during the migration process, but if it is, it will otherwise be difficult to get the information.  Visit the  Modules/Features  and the  Themes  pages on your current Orchard instance and make a note of all the modules and themes you have installed.  Download a copy of the site from the server to your local computer. If you are routinely working with a staging environment from which you publish to production, you already have that local copy, but the data and media might be out of date. Make sure you download the  App_Data  and  Media  folders from the server.  If you're using a SQL Server Compact database, you've copied the site data by downloading the  App_Data  folder. If your site is using SQL Server, you can copy that data to a local server in order to work with up-to-date data. However, this isn't required for migration. If you want to work with a local database, you'll also need to edit the  settings.txt  file for each of the tenants. The  settings.txt  files can be found under  App_Data\\Sites\\Default  or  App_Data\\Sites\\\\[NameOfTheTenant\\] .  In a new, empty directory, install a fresh copy of the latest version of Orchard, but don't go through setup.   Copy your existing site's  Media  folder into the new directory.  Copy the remaining module and themes directories that you have on your existing site and that are not already in the new one into the new directory's  Modules  and  Themes  directories.  Copy the  App_Data  folder from the existing site into the new directory.  Point a local web server to the new directory. You can use IIS; in that case, use IIS Manager to create a new web site that points at the directory and then navigate to it. Alternatively, you can use WebMatrix and IIS Express; to do that, right-click the directory in Windows Explorer and choose  Open as a Web Site with Microsoft WebMatrix  and then run the site. Finally, you can open the site in Visual Studio as a web site and run it. The new site will have all the data from the old site and have all the new features.  Go into the dashboard. Modules should have already upgraded themselves automatically. In rare cases, you may be prompted to upgrade features. Click  Modules  and upgrade each of the modules one by one until they are all up to date. If this doesn't work, it means that something is wrong with your install and/or one of the modules you're using, and you should investigate further in  App_Data\\logs .  Go to the Orchard Gallery and get the latest version of all the modules you have on your site.  Some versions of Orchard come with version-specific upgrade features. Go to Modules and locate the \"Upgrade\" feature. Enable it, then click on the new upgrade menu entry that was added to the admin menu. Visit all the relevant tabs and execute the required upgrade actions they present. Once you're done, the feature can be disabled, which will remove the menu entry.",
            "title": "Upgrading a Running Instance of Orchard to a New Version"
        },
        {
            "location": "/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard/#publishing-the-upgraded-site",
            "text": "You can deploy the locally upgraded site to your production server using your preferred deployment solution. That might be Visual Studio Web deployment, WebMatrix, or even FTP. You again have a choice of wiping out the target directory before you deploy. Make your choice depending on your deployment method, how clean you want the resulting directory to be, and on how long it's acceptable to keep the site down.  As you deploy, make sure that the target  settings.txt  files aren't overwritten, so that the production site continues to point to the production database.  While you deploy, you might want to shut the site down by dropping an  app_offline.htm  file into the root. Remove that file once you're done.  Once deployed, manual upgrade actions (for example, those from the \"Upgrade\" feature) need to be performed again on the deployed production site.",
            "title": "Publishing the Upgraded Site"
        },
        {
            "location": "/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard/#upgrading-an-orchard-site-in-place",
            "text": "It is possible to upgrade a site in-place, if you can't or don't want to work with a local copy and then publish it. The procedure is less clean but it works.   Backup everything (site and database).  Download the new version to your local machine.  Add  app_offline.htm  to the root of the site during the upgrade. This effectively tells the web server to return this page for all requests. You should put a message such as \"The site is currently being updated. Thank you for your patience. Please try again later.\" in the file.  Delete what's in bin. This ensures that old versions of binaries that won't get replaced will not continue to be picked up by the application.  Delete the  App_Data\\Dependencies  folder. Orchard will rebuild this folder on startup. This ensures that old versions of module assemblies will not be picked up by the application.  Extract the new version's zip file and copy what's in its Orchard folder over the server's Orchard web directory (answer yes to all prompts to overwrite).  Remove the  app_offline.html  file.  The site should be running now. Log-in and go into admin.  Go into the dashboard. Modules should have already upgraded themselves automatically. In rare cases, you may be prompted to upgrade features. Click  Modules  and upgrade each of the modules one by one until they are all up to date. If this doesn't work, it means that something is wrong with your install and/or one of the modules you're using, and you should investigate further in  App_Data\\logs .  Go to the Orchard Gallery and get the latest version of all the modules you have on your site.  Some versions of Orchard come with version-specific upgrade features. Go to Modules and locate the \"Upgrade\" feature. Enable it, then click on the new upgrade menu entry that was added to the admin menu. Visit all the relevant tabs and execute the required upgrade actions they present. Once you're done, the feature can be disabled, which will remove the menu entry.   You are done.",
            "title": "Upgrading An Orchard Site In-Place"
        },
        {
            "location": "/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard/#upgrading-an-azure-instance-of-orchard",
            "text": "You should already have the full source code, with your modifications if you had any (additional modules or themes). Upgrade that by copying the source of the new version over it (overwrite whenever asked), or by doing a Mercurial update to the desired version. If you do not already have the full source code, then that means you don't have any changes to the default distribution. In that case just get the source code for the new version. In any case, at this point you should have a local directory on your development machine that has the code for the new version, plus any themes and modules you may have added, and no data (be it media or database, as on Azure you are using blob storage for the former, and Sql Azure for the latter). All that remains to be done is to build the new package and deploy it.  Run clickToBuildAzurePackage.cmd. This file should be at the root of your source code folder. If it's not there (it was missing from older release files), get it and other root files from the relevant version in http://orchard.codeplex.com/SourceControl/list/changesets  Unzip artifacts/Azure/AzurePackage.zip  Open ServiceConfiguration.cscfg and replace the value of the DataConnectionString with your DefaultEndpointsProtocol=https;AccountName=your-account-name;AccountKey=your-account-key  Open the Azure Management Portal, go to Hosted Services, Storage Accounts & CDN and choose your deployment target. Click Upgrade.   Browse to the package and config file, click OK.   Log-in and go to admin.  Go into the dashboard. Modules should have already upgraded themselves automatically. In rare cases, you may be prompted to upgrade features. Click  Modules  and upgrade each of the modules one by one until they are all up to date. If this doesn't work, it means that something is wrong with your install and/or one of the modules you're using, and you should investigate further in logs.  Some versions of Orchard come with version-specific upgrade features. Go to Modules and locate the \"Upgrade\" feature. Enable it, then click on the new upgrade menu entry that was added to the admin menu. Visit all the relevant tabs and execute the required upgrade actions they present. Once you're done, the feature can be disabled, which will remove the menu entry.   You're done.",
            "title": "Upgrading an Azure Instance of Orchard"
        },
        {
            "location": "/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard/#if-you-have-a-source-code-enlistment",
            "text": "If you are working with a source code enlistment, the update process is going to be extremely simple because you are already going through it every time you sync your source code directory with the repository. When the time comes to upgrade, just get the latest changes and sync to the latest in the default branch.",
            "title": "If You Have a Source Code Enlistment"
        },
        {
            "location": "/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard/#importexport",
            "text": "The  Import/Export  module \ncan be used to do clean data migrations from one version to another.",
            "title": "Import/Export"
        },
        {
            "location": "/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard/#applying-a-framework-patch",
            "text": "Occasionally, we may release small updates in the form of a patch to one or several dlls.\nThese patch files are regular zip files that contain updated dll files.  To install such a patch, first extract the zip, then make a copy of the version of those files that are already\nin the bin folder of your site. Then, replace the existing copy with the one from the patch file.",
            "title": "Applying a framework patch"
        },
        {
            "location": "/Documentation/Optimizing-Performance-of-Orchard-with-Shared-Hosting/",
            "text": "This topic discusses various techniques for tuning a server environment to run Orchard efficiently. The optimal configuration depends on the type of site you're running and on usage patterns, so site administrators should pick from this list what applies best to their particular scenario. As always, improving performance should involve measuring and analyzing performance data so that changes you propose are demonstrably beneficial.\n\n\nTrust Level\n\n\nOrchard is configured out of the box to run in Full trust.\nMedium trust is no longer supported.\n\n\n<trust level=\"Full\" originUrl=\"\" />\n\n\n\nDebug/Release\n\n\nOn your production server, there is no reason to run in debug mode. Make sure that the application you deployed was compiled in release mode and that the \nweb.config\n file in \nOrchard.Web\n specifies release mode:\n\n\n<compilation debug=\"false\" targetFramework=\"4.0\"\n  batch=\"true\" numRecompilesBeforeAppRestart=\"250\">\n\n\n\nShared Versus Dedicated Versus Cloud Hosting\n\n\nShared Hosting\n\n\nShared hosting environments usually consist of web farms with load-balancing. The way this is implemented varies greatly between hosting companies and it is usually difficult for customers to get information on the specific configuration being used. How well these configurations perform depends on the load on hosted applications and on the architecture of the application itself.\n\n\nShared hosting is a nice solution for Orchard users on a budget, but there can be tradeoffs. There is a natural contention between the customer who wants his or her site to be immediately available and to run as fast as possible, and the hosting company that wants to support as many sites as possible on a single computer. In order improve site density, hosting companies can be very aggressive about app domain recycling, causing sites to shut down often if they are not accessed frequently or if they consume too much memory.\n\n\nThere are mitigations for these situations, such as using a pinging service or a module that accesses the site on a fixed interval to prevent the app domain from shutting down due to a timeout. A mitigation like this might seem like a good idea, but ultimately it ruins the site density objective and penalizes everyone.\n\n\nAnother mitigation is to improve the perceived startup time of the application so that a shutdown ceases to be a significant problem. The \nOrchard.Warmup\n module (new in Orchard 1.1) is a good way to make the most commonly accessed pages of your site immediately accessible even while the app domain is restarting.\n\n\nHosting companies can optimize for Orchard by setting up machine affinity so that a given instance always runs on the same server. This can in turn enable the local file system to be used rather than a network appliance. This can make a real difference, because Orchard can make a heavy use of the file system, such as when performing dynamic compilation or when using SQL Server Compact databases.\n\n\nDedicated Hosting\n\n\nA dedicated hosting environment is typically more expensive than a shared hosting account, but it might be worth the investment if your business depends on your application responding immediately to any request. A dedicated computer or a dedicated virtual machine offers the advantage of being configurable in exactly the way you want. You get guaranteed processing and bandwidth instead of sharing it with a varying load on other applications running on the same computer, and you get the opportunity to fine-tune all the parameters for the application.\n\n\nCloud Hosting\n\n\nCloud hosting such as Microsoft Azure offers most of the advantages of dedicated hosting plus the ability to scale to increased loads with the flip of a switch. If you are building a business that is expected to grow considerably, this might be the most secure way of ensuring the scalability that you need.\n\n\nSQL Server Compact Versus SQL Server\n\n\nAn Orchard instance can either run on SQL Server Compact or on full versions of SQL Server or SQL Server Express. SQL Server Compact is an embedded version of SQL Server that has the advantage of being deployable by simply copying its DLLs and database files.\n\n\nWhile SQL Server Compact is extremely lightweight and easy to use and deploy, full versions of SQL Server offer the guaranteed performance that you might need on your site. It might therefore be worth the cost of investing in a hosting solution that gives you access to a full edition of SQL Server.\n\n\nFile System\n\n\nThe file system itself can be a drag on application performance. Possible bottlenecks can include a fragmented file system or a congested network connection to a NAS. Checking the speed of the file system and then optimizing it can be a way to get better performance.\n\n\nMemory\n\n\nThe more memory is available on a server, the better it will perform. If you can afford it, increasing memory might be among the most efficient ways of improving performance (assuming it's properly configured). Increasing processing power is more expensive and often has a lower return on investment.\n\n\nApp Pool Recycling\n\n\nIf you have access to IIS settings and if your site has few hits over extended periods of time, consider increasing the default value for app pool recycling. This can be done by going into IIS Manager, going to \nApplication Pools\n, selecting the app pool for your application, and clicking \nRecycling\n:\n\n\n\n\nRemoving the timeout is generally a good idea if it is replaced by a limit on memory usage; recycling at an arbitrary interval has little benefit, whereas recycling if the application uses all available memory is a good practice.\n\n\nMulti-Tenancy\n\n\nOrchard has an optional module called \nMulti Tenancy\n that enables more than one site to exist on the same Orchard instance. The data for the sites is separated, and for all practical purposes they are distinct sites. There are a few limitations on what each tenant can do, such as installing new modules and themes.\n\n\nThe advantage of a multi-tenant installation over multiple instances of Orchard is that there is only one app domain, which hosting companies favor because it improves site density considerably. It also has advantages for each of the multi-tenant sites, because a hit on any of the tenants keeps the app domain alive. Therefore, even sites that receive very few hits will remain responsive if they share the app domain with enough other sites.\n\n\nThis results in the seemingly paradoxical notion that more sites on a single app domain might perform better in some cases than a single site per app domain. In shared hosting scenarios in particular, this configuration is optimal if it is an option.\n\n\nInstalled Modules\n\n\nFor both security and performance reasons, it's a good idea to keep the number of modules installed on your production server as low as compatible with your application. There's a cost to anything you add to the system, in particular in terms of dynamic compilation and loading additional assemblies.\n\n\nIf you are not using a module, it should be removed. Some modules, such as the gallery, will be useful on your development server but probably not on your production server and should be removed.\n\n\nGoing even further, some modules are a convenience that you might want to do without. For example, many modules do nothing more than render a pre-formatted bit of HTML to include some external script or embedded object. If so, it's a good to determine whether you couldn't achieve the same thing with an HTML widget or the body of content items by going into the HTML source and directly injecting HTML there.\n\n\nDepth of the Views Folders\n\n\nThe contents of \nViews\n folders are dynamically compiled and there is some overhead associated with each subfolder. This, combined with the multiplication of modules in a typical Orchard instance, means that it can have an impact on startup performance to flatten \nViews\n directories. Orchard gives a choice to module and theme authors to use subfolders or equivalent dotted names for templates (see \nAccessing and Rendering Shapes\n). It is generally preferable to use the dotted notation.\n\n\nIPv6, Development Servers, and Modern Browsers\n\n\nIf you are in an IPv6 environment and using a local development server such as the Visual Studio Development Server or IIS Express in WebMatrix, some browsers may have trouble handling more than one request at once. This results in slower performance because resources are fetched one after the other. If you are testing locally and see images appearing one by one, you are probably hitting this bug.\n\n\nAn easy workaround is to use \n127.0.0.1\n instead of \nlocalhost\n as the domain for the development server. Another is to disable IPv6 in the browser, although this change can have side effects. A third workaround is to make sure there's an explicit entry for \nlocalhost\n in your HOSTS file.\n\n\nFuture Perspectives\n\n\nThe Orchard team is planning more work for performance in the future. This might include versions of the core assemblies and main dependencies that can be put into the GAC as well as NGen optimizations.",
            "title": "Optimizing Server Performance"
        },
        {
            "location": "/Documentation/Optimizing-Performance-of-Orchard-with-Shared-Hosting/#trust-level",
            "text": "Orchard is configured out of the box to run in Full trust.\nMedium trust is no longer supported.  <trust level=\"Full\" originUrl=\"\" />",
            "title": "Trust Level"
        },
        {
            "location": "/Documentation/Optimizing-Performance-of-Orchard-with-Shared-Hosting/#debugrelease",
            "text": "On your production server, there is no reason to run in debug mode. Make sure that the application you deployed was compiled in release mode and that the  web.config  file in  Orchard.Web  specifies release mode:  <compilation debug=\"false\" targetFramework=\"4.0\"\n  batch=\"true\" numRecompilesBeforeAppRestart=\"250\">",
            "title": "Debug/Release"
        },
        {
            "location": "/Documentation/Optimizing-Performance-of-Orchard-with-Shared-Hosting/#shared-versus-dedicated-versus-cloud-hosting",
            "text": "",
            "title": "Shared Versus Dedicated Versus Cloud Hosting"
        },
        {
            "location": "/Documentation/Optimizing-Performance-of-Orchard-with-Shared-Hosting/#shared-hosting",
            "text": "Shared hosting environments usually consist of web farms with load-balancing. The way this is implemented varies greatly between hosting companies and it is usually difficult for customers to get information on the specific configuration being used. How well these configurations perform depends on the load on hosted applications and on the architecture of the application itself.  Shared hosting is a nice solution for Orchard users on a budget, but there can be tradeoffs. There is a natural contention between the customer who wants his or her site to be immediately available and to run as fast as possible, and the hosting company that wants to support as many sites as possible on a single computer. In order improve site density, hosting companies can be very aggressive about app domain recycling, causing sites to shut down often if they are not accessed frequently or if they consume too much memory.  There are mitigations for these situations, such as using a pinging service or a module that accesses the site on a fixed interval to prevent the app domain from shutting down due to a timeout. A mitigation like this might seem like a good idea, but ultimately it ruins the site density objective and penalizes everyone.  Another mitigation is to improve the perceived startup time of the application so that a shutdown ceases to be a significant problem. The  Orchard.Warmup  module (new in Orchard 1.1) is a good way to make the most commonly accessed pages of your site immediately accessible even while the app domain is restarting.  Hosting companies can optimize for Orchard by setting up machine affinity so that a given instance always runs on the same server. This can in turn enable the local file system to be used rather than a network appliance. This can make a real difference, because Orchard can make a heavy use of the file system, such as when performing dynamic compilation or when using SQL Server Compact databases.",
            "title": "Shared Hosting"
        },
        {
            "location": "/Documentation/Optimizing-Performance-of-Orchard-with-Shared-Hosting/#dedicated-hosting",
            "text": "A dedicated hosting environment is typically more expensive than a shared hosting account, but it might be worth the investment if your business depends on your application responding immediately to any request. A dedicated computer or a dedicated virtual machine offers the advantage of being configurable in exactly the way you want. You get guaranteed processing and bandwidth instead of sharing it with a varying load on other applications running on the same computer, and you get the opportunity to fine-tune all the parameters for the application.",
            "title": "Dedicated Hosting"
        },
        {
            "location": "/Documentation/Optimizing-Performance-of-Orchard-with-Shared-Hosting/#cloud-hosting",
            "text": "Cloud hosting such as Microsoft Azure offers most of the advantages of dedicated hosting plus the ability to scale to increased loads with the flip of a switch. If you are building a business that is expected to grow considerably, this might be the most secure way of ensuring the scalability that you need.",
            "title": "Cloud Hosting"
        },
        {
            "location": "/Documentation/Optimizing-Performance-of-Orchard-with-Shared-Hosting/#sql-server-compact-versus-sql-server",
            "text": "An Orchard instance can either run on SQL Server Compact or on full versions of SQL Server or SQL Server Express. SQL Server Compact is an embedded version of SQL Server that has the advantage of being deployable by simply copying its DLLs and database files.  While SQL Server Compact is extremely lightweight and easy to use and deploy, full versions of SQL Server offer the guaranteed performance that you might need on your site. It might therefore be worth the cost of investing in a hosting solution that gives you access to a full edition of SQL Server.",
            "title": "SQL Server Compact Versus SQL Server"
        },
        {
            "location": "/Documentation/Optimizing-Performance-of-Orchard-with-Shared-Hosting/#file-system",
            "text": "The file system itself can be a drag on application performance. Possible bottlenecks can include a fragmented file system or a congested network connection to a NAS. Checking the speed of the file system and then optimizing it can be a way to get better performance.",
            "title": "File System"
        },
        {
            "location": "/Documentation/Optimizing-Performance-of-Orchard-with-Shared-Hosting/#memory",
            "text": "The more memory is available on a server, the better it will perform. If you can afford it, increasing memory might be among the most efficient ways of improving performance (assuming it's properly configured). Increasing processing power is more expensive and often has a lower return on investment.",
            "title": "Memory"
        },
        {
            "location": "/Documentation/Optimizing-Performance-of-Orchard-with-Shared-Hosting/#app-pool-recycling",
            "text": "If you have access to IIS settings and if your site has few hits over extended periods of time, consider increasing the default value for app pool recycling. This can be done by going into IIS Manager, going to  Application Pools , selecting the app pool for your application, and clicking  Recycling :   Removing the timeout is generally a good idea if it is replaced by a limit on memory usage; recycling at an arbitrary interval has little benefit, whereas recycling if the application uses all available memory is a good practice.",
            "title": "App Pool Recycling"
        },
        {
            "location": "/Documentation/Optimizing-Performance-of-Orchard-with-Shared-Hosting/#multi-tenancy",
            "text": "Orchard has an optional module called  Multi Tenancy  that enables more than one site to exist on the same Orchard instance. The data for the sites is separated, and for all practical purposes they are distinct sites. There are a few limitations on what each tenant can do, such as installing new modules and themes.  The advantage of a multi-tenant installation over multiple instances of Orchard is that there is only one app domain, which hosting companies favor because it improves site density considerably. It also has advantages for each of the multi-tenant sites, because a hit on any of the tenants keeps the app domain alive. Therefore, even sites that receive very few hits will remain responsive if they share the app domain with enough other sites.  This results in the seemingly paradoxical notion that more sites on a single app domain might perform better in some cases than a single site per app domain. In shared hosting scenarios in particular, this configuration is optimal if it is an option.",
            "title": "Multi-Tenancy"
        },
        {
            "location": "/Documentation/Optimizing-Performance-of-Orchard-with-Shared-Hosting/#installed-modules",
            "text": "For both security and performance reasons, it's a good idea to keep the number of modules installed on your production server as low as compatible with your application. There's a cost to anything you add to the system, in particular in terms of dynamic compilation and loading additional assemblies.  If you are not using a module, it should be removed. Some modules, such as the gallery, will be useful on your development server but probably not on your production server and should be removed.  Going even further, some modules are a convenience that you might want to do without. For example, many modules do nothing more than render a pre-formatted bit of HTML to include some external script or embedded object. If so, it's a good to determine whether you couldn't achieve the same thing with an HTML widget or the body of content items by going into the HTML source and directly injecting HTML there.",
            "title": "Installed Modules"
        },
        {
            "location": "/Documentation/Optimizing-Performance-of-Orchard-with-Shared-Hosting/#depth-of-the-views-folders",
            "text": "The contents of  Views  folders are dynamically compiled and there is some overhead associated with each subfolder. This, combined with the multiplication of modules in a typical Orchard instance, means that it can have an impact on startup performance to flatten  Views  directories. Orchard gives a choice to module and theme authors to use subfolders or equivalent dotted names for templates (see  Accessing and Rendering Shapes ). It is generally preferable to use the dotted notation.",
            "title": "Depth of the Views Folders"
        },
        {
            "location": "/Documentation/Optimizing-Performance-of-Orchard-with-Shared-Hosting/#ipv6-development-servers-and-modern-browsers",
            "text": "If you are in an IPv6 environment and using a local development server such as the Visual Studio Development Server or IIS Express in WebMatrix, some browsers may have trouble handling more than one request at once. This results in slower performance because resources are fetched one after the other. If you are testing locally and see images appearing one by one, you are probably hitting this bug.  An easy workaround is to use  127.0.0.1  instead of  localhost  as the domain for the development server. Another is to disable IPv6 in the browser, although this change can have side effects. A third workaround is to make sure there's an explicit entry for  localhost  in your HOSTS file.",
            "title": "IPv6, Development Servers, and Modern Browsers"
        },
        {
            "location": "/Documentation/Optimizing-Performance-of-Orchard-with-Shared-Hosting/#future-perspectives",
            "text": "The Orchard team is planning more work for performance in the future. This might include versions of the core assemblies and main dependencies that can be put into the GAC as well as NGen optimizations.",
            "title": "Future Perspectives"
        },
        {
            "location": "/Documentation/Whats-new-for-Windows-Azure-in-Orchard-1-7-1/",
            "text": "The Windows Azure integration and deployment in Orchard have undergone a complete overhaul for version 1.7.1. This topic describes what's changed and the benefits of some of the new capabilities.\n\n\nVisual Studio tooling\n\n\nPrior to version 1.7.1, packaging and deploying to Windows Azure had to be done from the command line, outside of Visual Studio. The external custom MSBuild file \nAzurePackage.proj\n that was used to do this is no longer needed (but retained for people whose established build processes depend on it). The cloud service deployment configuration has been redesigned to work fully and seamlessly within \nVisual Studio Tools for Windows Azure\n. This has a number of benefits:\n\n\n\n\nWe now have \none-click publishing\n to Windows Azure from directly within Visual Studio, like the Azure gods intended.\n\n\nNewer releases of the Visual Studio Tools for Windows Azure \nautomate things\n like creating and connecting to a Windows Azure subscription, creating and provisioning the necessary certificates, and downloading subscription IDs and access keys. This functionality can now be utilized seamlessly. With the old deployment solution this had to be done manually.\n\n\nNewer \nSDK features\n such as \nrole content folders\n can now be utilized.\n\n\nAdding more roles to your deployment\n besides Orchard.Azure.Web is now as easy as right-clicking and selecting \"Add New Role\" in Solution Explorer. Before, they also had to be carefully worked into the \nAzurePackage.proj\n file which was far from trivial.\n\n\nPublish can now be done for either \nDebug or Release build configurations\n. Previous hard coded assumptions no longer apply. This can be very useful for things like collecting IntelliTrace logs from your cloud service deployment, or to simply get line numbers in exception stack traces.\n\n\nContinuous deployment\n from TFS to Windows Azure should now \"just work\" although this has not yet been tested.\n\n\n\n\nAdditionally, when building and publishing using \nRelease\n build configuration, \nconfiguration file transformations are now used\n instead of custom MSBuild logic. Configuration transform files are visible and editable directly in Solution Explorer (visualized as child items of the \nWeb.config\n, \nHost.config\n and \nLog4net.config\n files) and therefore much more discoverable and maintainable.\n\n\nSee the topic \nDeploying Orchard to Windows Azure\n topic for more information.\n\n\nWindows Azure SDK 2.1\n\n\nAll Azure-specific solution and project files have been migrated to Windows Azure SDK 2.1. You will need to install \nWindows Azure SDK for .NET (VS 2012) - 2.1\n using Web Platform Installer to open the \nOrchard.Azure.sln\n solution and to package and publish Orchard to Windows Azure.\n\n\nAll code that reads settings from Azure role configuration has been updated to use the new platform-agnostic \nCloudConfigurationManager\n class, so settings are now read from either Windows Azure Cloud Service role configuration, Windows Azure Web Site configuration settings, or the Web.config \n<appSettings>\n element.\n\n\nAll code that uses Windows Azure Blob Storage has been migrated to use version 2.0 of the Windows Azure Storage Client.\n\n\nThe Azure-specific solution \nOrchard.Azure.sln\n has been brought up to date with main solution \nOrchard.sln\n in terms of project structure etc.\n\n\nAll referenced assemblies from Windows Azure SDK has been placed in the \nlib\n folder, and are now referenced from there. This avoids having to install Windows Azure SDK just to compile and run Orchard from the main solution \nOrchard.sln\n.\n\n\nNew module Orchard.Azure\n\n\nA new module \nOrchard.Azure\n has been added. All Azure-specific functionality has been consolidated into this module. Some functionality is enabled automatically by configuration when publishing to a Windows Azure Cloud Service, while other functionality is packaged as features which can be enabled regardless of hosting. The module contains the following features:\n\n\n\n\nWindows Azure Media Storage\n: Provides an Orchard media storage provider that targets Windows Azure Blob Storage.\n\n\nWindows Azure Output Cache\n: Provides an Orchard output cache provider that targets Windows Azure Cache.\n\n\nWindows Azure Database Cache\n: Provides an NHibernate second-level cache provider that targets Windows Azure Cache.\n\n\n\n\nThese features are completely portable and can be used from any hosting environment, i.e. Windows Azure Cloud Services, Windows Azure Web Sites or some other hosting option.\n\n\nAs you might guess from above, as part of this work two new \nnative providers for Windows Azure Cache\n have been written and are shipped built-in with Orchard. No more need to add the \nmemcached shim\n to your deployment, and no more need to install custom modules with third-party \nmemcached\n providers in order to use Windows Azure Cache (which also means better performance as the \nmemcached\n compatibility layer is not used). The new native providers have been designed and tested to work with both Windows Azure Role-based Cache and the newly released Windows Azure Cache Service.\n\n\nSee the following topics for more information:\n\n\n\n\nUsing Windows Azure Blob Storage\n\n\nUsing Windows Azure Cache\n\n\n\n\nCloud services and web sites\n\n\nAs far as possible we now have \nfeature parity between Windows Azure Cloud Services and Windows Azure Web Sites\n. Things like media storage and output caching have been reimplemented and packaged as features in the \nOrchard.Azure\n module that can be enabled from either environment. Also, automated publishing from within Visual Studio has been overhauled and is supported for both target environments.\n\n\nFully loaded by default\n\n\nOrchard is now \npre-configured for Windows Azure Cache\n when deploying to a Windows Azure Cloud Service. If you scale out your deployment to more than one role instance, you can take advantage of this to keep your instances in sync.\n\n\nBy default the cloud service project is configured for co-located role-based caching with 30% of the role instance memory allowed for cache usage. Three named caches \nOutputCache\n, \nDatabaseCache\n and \nSessionStateCache\n are configured by default. Windows Azure Output Cache and Windows Azure Database Cache have to be enabled as features in the dashboard post-deployment, while the ASP.NET Session State Provider for Windows Azure Cache is configured and enabled by default in Web.config.\n\n\nWindows Azure Diagnostics\n is now fully configured by default when deploying Orchard to a Windows Azure Cloud Service. The Windows Azure Diagnostics appender is configured by default in the cloud service web role. You can use Server Explorer to download and examine diagnostics data from within your deployment. Additionally, the Windows Azure Diagnostics appender has been improved and now logs messages with their correct severity level (prior to 1.7.1 all Log4net entries were logged to Windows Azure Diagnostics as verbose messages).\n\n\nAs before, when deploying to a Windows Azure Cloud Service, Orchard is pre-configured to use Windows Azure Blob Storage as the underlying file system implementation for shell settings (the \nSettings.txt\n file). Unlike before, using Windows Azure Blob Storage for media storage is \nnot\n preconfigured, but easily activated by enabling the new \nWindows Azure Media Storage\n feature. Storage account credentials for these providers need to be specified in the cloud service project before deployment (Visual Studio will display warning messages if you don't). As before, containers are created automatically in the storage service if they don't already exist.",
            "title": "What's New for Windows Azure in Orchard 1.7.1"
        },
        {
            "location": "/Documentation/Whats-new-for-Windows-Azure-in-Orchard-1-7-1/#visual-studio-tooling",
            "text": "Prior to version 1.7.1, packaging and deploying to Windows Azure had to be done from the command line, outside of Visual Studio. The external custom MSBuild file  AzurePackage.proj  that was used to do this is no longer needed (but retained for people whose established build processes depend on it). The cloud service deployment configuration has been redesigned to work fully and seamlessly within  Visual Studio Tools for Windows Azure . This has a number of benefits:   We now have  one-click publishing  to Windows Azure from directly within Visual Studio, like the Azure gods intended.  Newer releases of the Visual Studio Tools for Windows Azure  automate things  like creating and connecting to a Windows Azure subscription, creating and provisioning the necessary certificates, and downloading subscription IDs and access keys. This functionality can now be utilized seamlessly. With the old deployment solution this had to be done manually.  Newer  SDK features  such as  role content folders  can now be utilized.  Adding more roles to your deployment  besides Orchard.Azure.Web is now as easy as right-clicking and selecting \"Add New Role\" in Solution Explorer. Before, they also had to be carefully worked into the  AzurePackage.proj  file which was far from trivial.  Publish can now be done for either  Debug or Release build configurations . Previous hard coded assumptions no longer apply. This can be very useful for things like collecting IntelliTrace logs from your cloud service deployment, or to simply get line numbers in exception stack traces.  Continuous deployment  from TFS to Windows Azure should now \"just work\" although this has not yet been tested.   Additionally, when building and publishing using  Release  build configuration,  configuration file transformations are now used  instead of custom MSBuild logic. Configuration transform files are visible and editable directly in Solution Explorer (visualized as child items of the  Web.config ,  Host.config  and  Log4net.config  files) and therefore much more discoverable and maintainable.  See the topic  Deploying Orchard to Windows Azure  topic for more information.",
            "title": "Visual Studio tooling"
        },
        {
            "location": "/Documentation/Whats-new-for-Windows-Azure-in-Orchard-1-7-1/#windows-azure-sdk-21",
            "text": "All Azure-specific solution and project files have been migrated to Windows Azure SDK 2.1. You will need to install  Windows Azure SDK for .NET (VS 2012) - 2.1  using Web Platform Installer to open the  Orchard.Azure.sln  solution and to package and publish Orchard to Windows Azure.  All code that reads settings from Azure role configuration has been updated to use the new platform-agnostic  CloudConfigurationManager  class, so settings are now read from either Windows Azure Cloud Service role configuration, Windows Azure Web Site configuration settings, or the Web.config  <appSettings>  element.  All code that uses Windows Azure Blob Storage has been migrated to use version 2.0 of the Windows Azure Storage Client.  The Azure-specific solution  Orchard.Azure.sln  has been brought up to date with main solution  Orchard.sln  in terms of project structure etc.  All referenced assemblies from Windows Azure SDK has been placed in the  lib  folder, and are now referenced from there. This avoids having to install Windows Azure SDK just to compile and run Orchard from the main solution  Orchard.sln .",
            "title": "Windows Azure SDK 2.1"
        },
        {
            "location": "/Documentation/Whats-new-for-Windows-Azure-in-Orchard-1-7-1/#new-module-orchardazure",
            "text": "A new module  Orchard.Azure  has been added. All Azure-specific functionality has been consolidated into this module. Some functionality is enabled automatically by configuration when publishing to a Windows Azure Cloud Service, while other functionality is packaged as features which can be enabled regardless of hosting. The module contains the following features:   Windows Azure Media Storage : Provides an Orchard media storage provider that targets Windows Azure Blob Storage.  Windows Azure Output Cache : Provides an Orchard output cache provider that targets Windows Azure Cache.  Windows Azure Database Cache : Provides an NHibernate second-level cache provider that targets Windows Azure Cache.   These features are completely portable and can be used from any hosting environment, i.e. Windows Azure Cloud Services, Windows Azure Web Sites or some other hosting option.  As you might guess from above, as part of this work two new  native providers for Windows Azure Cache  have been written and are shipped built-in with Orchard. No more need to add the  memcached shim  to your deployment, and no more need to install custom modules with third-party  memcached  providers in order to use Windows Azure Cache (which also means better performance as the  memcached  compatibility layer is not used). The new native providers have been designed and tested to work with both Windows Azure Role-based Cache and the newly released Windows Azure Cache Service.  See the following topics for more information:   Using Windows Azure Blob Storage  Using Windows Azure Cache",
            "title": "New module Orchard.Azure"
        },
        {
            "location": "/Documentation/Whats-new-for-Windows-Azure-in-Orchard-1-7-1/#cloud-services-and-web-sites",
            "text": "As far as possible we now have  feature parity between Windows Azure Cloud Services and Windows Azure Web Sites . Things like media storage and output caching have been reimplemented and packaged as features in the  Orchard.Azure  module that can be enabled from either environment. Also, automated publishing from within Visual Studio has been overhauled and is supported for both target environments.",
            "title": "Cloud services and web sites"
        },
        {
            "location": "/Documentation/Whats-new-for-Windows-Azure-in-Orchard-1-7-1/#fully-loaded-by-default",
            "text": "Orchard is now  pre-configured for Windows Azure Cache  when deploying to a Windows Azure Cloud Service. If you scale out your deployment to more than one role instance, you can take advantage of this to keep your instances in sync.  By default the cloud service project is configured for co-located role-based caching with 30% of the role instance memory allowed for cache usage. Three named caches  OutputCache ,  DatabaseCache  and  SessionStateCache  are configured by default. Windows Azure Output Cache and Windows Azure Database Cache have to be enabled as features in the dashboard post-deployment, while the ASP.NET Session State Provider for Windows Azure Cache is configured and enabled by default in Web.config.  Windows Azure Diagnostics  is now fully configured by default when deploying Orchard to a Windows Azure Cloud Service. The Windows Azure Diagnostics appender is configured by default in the cloud service web role. You can use Server Explorer to download and examine diagnostics data from within your deployment. Additionally, the Windows Azure Diagnostics appender has been improved and now logs messages with their correct severity level (prior to 1.7.1 all Log4net entries were logged to Windows Azure Diagnostics as verbose messages).  As before, when deploying to a Windows Azure Cloud Service, Orchard is pre-configured to use Windows Azure Blob Storage as the underlying file system implementation for shell settings (the  Settings.txt  file). Unlike before, using Windows Azure Blob Storage for media storage is  not  preconfigured, but easily activated by enabling the new  Windows Azure Media Storage  feature. Storage account credentials for these providers need to be specified in the cloud service project before deployment (Visual Studio will display warning messages if you don't). As before, containers are created automatically in the storage service if they don't already exist.",
            "title": "Fully loaded by default"
        },
        {
            "location": "/Documentation/Deploying-Orchard-to-Windows-Azure/",
            "text": "Orchard can be deployed to both Windows Azure Cloud Services and Windows Azure Web Sites. Orchard also ships with a number of integration features that takes advantage of Windows Azure services such as blob storage and caching, and that can be configured before deployment if needed. This topic walks you through the process of deploying Orchard to Windows Azure.\n\n\n\n\nNOTE: The Windows Azure deployment process in Orchard has undergone a complete overhaul for version 1.7.1. For more information about what's changed see the \nWhat's new for Windows Azure in Orchard 1.7.1\n topic.\n\n\n\n\nPrerequisites\n\n\nBefore you can deploy Orchard to Windows Azure you need the following:\n\n\n\n\nVisual Studio 2012\n\n\nWindows Azure SDK 2.1 for Visual Studio 2012\n\n\nThe Orchard source code\n\n\nAn active Windows Azure subscription\n\n\n\n\nDeploying Orchard to a Windows Azure Cloud Service\n\n\nIf you only plan to run a single role instance, deploying is extremely simple. Starting with version 1.7.1 of Orchard, deployment can be performed using the Windows Azure tooling in Visual Studio.\n\n\nBy default, Orchard uses a local file-based SQL Server CE database. This database won't suffice when running in a Windows Azure Cloud Service, because the Windows Azure fabric controller may decide to reimage your role instance at any time, without warning. When that happens, anything that has been written to the local hard drive in your role instance VM since it was created is lost, which means any changes made to the site since it was first deployed will be lost.\n\n\nObviously that's not acceptable, so we need to instead store the data in a shared database that will not be affected by role instance reimaging. To do this you need to create a Windows Azure SQL database that will be used to store Orchard data. You will configure Orchard to use this database later during setup.\n\n\nWith that out of the way, let's start by opening the \nOrchard.Azure.sln\n solution in Visual Studio.\n\n\n\n\nNOTE: If you have AppFabric installed on your local machine (or have AppFabric-related assemblies in the GAC for some other reason) you need to make sure all the following assembly references in the \nOrchard.Azure.Web\n project have \nCopy Local\n set to \nTrue\n before publishing: \nMicrosoft.ApplicationServer.\\*\n, \nMicrosoft.Data.\\*\n, \nMicrosoft.Web.\\*\n, \nMicrosoft.WindowsAzure.\\*\n and \nMicrosoft.WindowsFabric.\\*\n.\n\n\n\n\nThe only thing you have to configure before starting the deployment process is the storage account to use for shell settings. To do this, in \nSolution Explorer\n, navigate to \nOrchard.Azure.CloudService\n project, double click the \nOrchard.Azure.Web\n role and navigate to the \nSettings\n tab. Configure the connection string of the storage account you want to use:\n\n\n\n\nNow to deploy the cloud service, right click the \nOrchard.Azure.CloudService\n project in \nSolution Explorer\n and select \nPublish\n, and follow the instructions in the publishing wizard to select subscription, cloud service, storage account and other publishing options. How to use the Windows Azure publishing tools in Visual Studio is beyond the scope of this topic, but they are pretty self-explanatory:\n\n\n\n\nOnce deployment has successfully completed, browse to the newly deployed Orchard site and go through setup. Specify the connection string to the Windows Azure SQL Database you created earlier:\n\n\n\n\nCongratulations! Orchard is now fully configured for a single role instance on Windows Azure.\n\n\nUsing multiple role instances\n\n\nLet's take it up a notch. You may want to scale out your cloud service to run on more than one role instance, either because you want to support a higher workload, or because the site is mission critical and you need some fault tolerance (using only a single instance of any one role in a Windows Azure Cloud Service voids the Windows Azure SLA).\n\n\nUsing multiple instances (also known as a \nweb farm\n or a \nserver farm\n) with Orchard requires some extra consideration.\n\n\nIn the most basic default configuration of Orchard, multiple instances can cause problems: \n\n\n\n\nOrchard media files are stored in the local file system. This won't work as the file systems or the different instances will soon start to diverge as users add/remove media.\n\n\nOrchard output caching and database caching (NHibernate second-level cache) use local memory for storage. This won't work as content might be updated on one instance and any cached copies invalidated there, while other instances continue unaware of this change.\n\n\nSession state is stored in local memory. This won't work because the cloud service load balancer has no session affinity so users will lose their state when moving between instances.\n\n\n\n\nLuckily, Orchard has features to overcome each of these complications, but you must configure and enable them.\n\n\nPreparing for multiple instances\n\n\nFirst off, configure the number of instances you want to use in the cloud service project. In \nSolution Explorer\n, navigate to \nOrchard.Azure.CloudService\n project, double click the \nOrchard.Azure.Web\n role and navigate to the \nConfiguration\n tab. Change the \nInstance count\n value from \n1\n to some higher number:\n\n\n\n\n\n\nNOTE: You can also leave the instance count at \n1\n and change it after deployment through the Windows Azure management portal.\n\n\n\n\nProblem #1\n in the list above we will deal with by enable the \nWindows Azure Media Storage\n feature later. To prepare for this, configure the storage accounts to use for shell settings and media storage. To do this, navigate to the \nSettings\n tab. Change the following settings to the storage account connection strings you want to use. You can use the same storage account for both, or any combination of different storage accounts:\n\n\n\n\nProblem #2\n will be addressed by enabling the \nWindows Azure Output Cache\n and \nWindows Azure Database Cache\n features. These don't need any preparation, as the cloud service project is already preconfigured for co-located role-based caching with the appropriate named caches configured.\n\n\nProblem #3\n is already taken care of for us. The cloud service is preconfigured to use the ASP.NET session state provider for Windows Azure Cache. This takes effect immediately after we deploy.\n\n\nThis section above describes only the most basic configuration steps and options. More detailed steps for enabling the \nWindows Azure Media Storage\n, \nWindows Azure Output Cache\n and \nWindows Azure Database Cache\n features for a Windows Azure Cloud Service, as well as more advanced configuration options, are described the following topics:\n\n\n\n\nUsing Windows Azure Blob Storage\n\n\nUsing Windows Azure Cache\n\n\n\n\nDeploying\n\n\nAfter these few steps of preparation, you are now ready to deploy the cloud service. Right click the \nOrchard.Azure.CloudService\n project in \nSolution Explorer\n and select \nPublish\n, and follow the instructions in the publishing wizard to select subscription, cloud service, storage account and other publishing options. How to use the Windows Azure publishing tools in Visual Studio is beyond the scope of this topic, but they are pretty self-explanatory.\n\n\nOnce deployment has successfully completed, browse to the deployed Orchard site and go through setup. Specify the connection string to the Windows Azure SQL Database you created earlier:\n\n\n\n\nOnce setup has finished, navigate to the admin dashboard of the site and enable the following three features:\n\n\n\n\nWindows Azure Media Storage\n\n\nWindows Azure Output Cache\n\n\nWindows Azure Database Cache\n\n\n\n\nCongratulations! Orchard is now fully configured for multiple role instances on Windows Azure. You can now scale out to as many role instances as you need and things will be handled.\n\n\n\n\nNOTE: If you set the instance count to more than \n1\n before deploying, you must now restart all role instances once to make sure they pick up the new configuration.\n\n\n\n\nDeploying Orchard to a Windows Azure Web Site\n\n\nDeploying to a Windows Azure Web Site is also done using the Windows Azure tooling in Visual Studio. However, instead of using the \nOrchard.Azure.sln\n as described for Windows Azure Cloud Services above, for a Windows Azure Web Site we use the normal \nOrchard.sln\n solution and publish the normal \nOrchard.Web\n project.\n\n\nAs with a cloud service, if you only plan to run a single instance, deploying is extremely simple.\n\n\nThe steps for using Windows Azure SQL Database as the database are the same as for a cloud service (create a Windows Azure SQL database beforehand and specify its connection string during setup).\n\n\nStart by opening the \nOrchard.sln\n solution in Visual Studio.\n\n\nRight click the solution node in \nSolution Explorer\n and select \nRebuild\n. This step is necessary to get all modules and themes compiled, thereby having their resulting DLL files included in the published package; compilation of modules and themes does not happen automatically since they are not referenced by the \nOrchard.Web\n project being published.\n\n\nTo deploy the web site, right click the \nOrchard.Web\n project in \nSolution Explorer\n and select \nPublish\n, and follow the instructions in the publishing wizard. Click the \nImport\n button to import a web deploy publishing configuration from your Windows Azure subscriptions. How to use the Windows Azure publishing tools in Visual Studio is beyond the scope of this topic, but they are pretty self-explanatory.\n\n\nOnce deployment has successfully completed, browse to the newly deployed Orchard site and go through setup. Specify the connection string to the Windows Azure SQL Database you created earlier.\n\n\nCongratulations! Orchard is now fully configured for a single instance Windows Azure Web Site.\n\n\nUsing multiple instances\n\n\nAs with cloud services, you need to do a little more configuration if you plan to scale out your web site to more than one instance.\n\n\nThe steps for enabling the \nWindows Azure Media Storage\n, \nWindows Azure Output Cache\n and \nWindows Azure Database Cache\n features for a Windows Azure Web Site are described the following topics:\n\n\n\n\nUsing Windows Azure Blob Storage\n\n\nUsing Windows Azure Cache",
            "title": "Deploying Orchard to Windows Azure"
        },
        {
            "location": "/Documentation/Deploying-Orchard-to-Windows-Azure/#prerequisites",
            "text": "Before you can deploy Orchard to Windows Azure you need the following:   Visual Studio 2012  Windows Azure SDK 2.1 for Visual Studio 2012  The Orchard source code  An active Windows Azure subscription",
            "title": "Prerequisites"
        },
        {
            "location": "/Documentation/Deploying-Orchard-to-Windows-Azure/#deploying-orchard-to-a-windows-azure-cloud-service",
            "text": "If you only plan to run a single role instance, deploying is extremely simple. Starting with version 1.7.1 of Orchard, deployment can be performed using the Windows Azure tooling in Visual Studio.  By default, Orchard uses a local file-based SQL Server CE database. This database won't suffice when running in a Windows Azure Cloud Service, because the Windows Azure fabric controller may decide to reimage your role instance at any time, without warning. When that happens, anything that has been written to the local hard drive in your role instance VM since it was created is lost, which means any changes made to the site since it was first deployed will be lost.  Obviously that's not acceptable, so we need to instead store the data in a shared database that will not be affected by role instance reimaging. To do this you need to create a Windows Azure SQL database that will be used to store Orchard data. You will configure Orchard to use this database later during setup.  With that out of the way, let's start by opening the  Orchard.Azure.sln  solution in Visual Studio.   NOTE: If you have AppFabric installed on your local machine (or have AppFabric-related assemblies in the GAC for some other reason) you need to make sure all the following assembly references in the  Orchard.Azure.Web  project have  Copy Local  set to  True  before publishing:  Microsoft.ApplicationServer.\\* ,  Microsoft.Data.\\* ,  Microsoft.Web.\\* ,  Microsoft.WindowsAzure.\\*  and  Microsoft.WindowsFabric.\\* .   The only thing you have to configure before starting the deployment process is the storage account to use for shell settings. To do this, in  Solution Explorer , navigate to  Orchard.Azure.CloudService  project, double click the  Orchard.Azure.Web  role and navigate to the  Settings  tab. Configure the connection string of the storage account you want to use:   Now to deploy the cloud service, right click the  Orchard.Azure.CloudService  project in  Solution Explorer  and select  Publish , and follow the instructions in the publishing wizard to select subscription, cloud service, storage account and other publishing options. How to use the Windows Azure publishing tools in Visual Studio is beyond the scope of this topic, but they are pretty self-explanatory:   Once deployment has successfully completed, browse to the newly deployed Orchard site and go through setup. Specify the connection string to the Windows Azure SQL Database you created earlier:   Congratulations! Orchard is now fully configured for a single role instance on Windows Azure.",
            "title": "Deploying Orchard to a Windows Azure Cloud Service"
        },
        {
            "location": "/Documentation/Deploying-Orchard-to-Windows-Azure/#using-multiple-role-instances",
            "text": "Let's take it up a notch. You may want to scale out your cloud service to run on more than one role instance, either because you want to support a higher workload, or because the site is mission critical and you need some fault tolerance (using only a single instance of any one role in a Windows Azure Cloud Service voids the Windows Azure SLA).  Using multiple instances (also known as a  web farm  or a  server farm ) with Orchard requires some extra consideration.  In the most basic default configuration of Orchard, multiple instances can cause problems:    Orchard media files are stored in the local file system. This won't work as the file systems or the different instances will soon start to diverge as users add/remove media.  Orchard output caching and database caching (NHibernate second-level cache) use local memory for storage. This won't work as content might be updated on one instance and any cached copies invalidated there, while other instances continue unaware of this change.  Session state is stored in local memory. This won't work because the cloud service load balancer has no session affinity so users will lose their state when moving between instances.   Luckily, Orchard has features to overcome each of these complications, but you must configure and enable them.",
            "title": "Using multiple role instances"
        },
        {
            "location": "/Documentation/Deploying-Orchard-to-Windows-Azure/#preparing-for-multiple-instances",
            "text": "First off, configure the number of instances you want to use in the cloud service project. In  Solution Explorer , navigate to  Orchard.Azure.CloudService  project, double click the  Orchard.Azure.Web  role and navigate to the  Configuration  tab. Change the  Instance count  value from  1  to some higher number:    NOTE: You can also leave the instance count at  1  and change it after deployment through the Windows Azure management portal.   Problem #1  in the list above we will deal with by enable the  Windows Azure Media Storage  feature later. To prepare for this, configure the storage accounts to use for shell settings and media storage. To do this, navigate to the  Settings  tab. Change the following settings to the storage account connection strings you want to use. You can use the same storage account for both, or any combination of different storage accounts:   Problem #2  will be addressed by enabling the  Windows Azure Output Cache  and  Windows Azure Database Cache  features. These don't need any preparation, as the cloud service project is already preconfigured for co-located role-based caching with the appropriate named caches configured.  Problem #3  is already taken care of for us. The cloud service is preconfigured to use the ASP.NET session state provider for Windows Azure Cache. This takes effect immediately after we deploy.  This section above describes only the most basic configuration steps and options. More detailed steps for enabling the  Windows Azure Media Storage ,  Windows Azure Output Cache  and  Windows Azure Database Cache  features for a Windows Azure Cloud Service, as well as more advanced configuration options, are described the following topics:   Using Windows Azure Blob Storage  Using Windows Azure Cache",
            "title": "Preparing for multiple instances"
        },
        {
            "location": "/Documentation/Deploying-Orchard-to-Windows-Azure/#deploying",
            "text": "After these few steps of preparation, you are now ready to deploy the cloud service. Right click the  Orchard.Azure.CloudService  project in  Solution Explorer  and select  Publish , and follow the instructions in the publishing wizard to select subscription, cloud service, storage account and other publishing options. How to use the Windows Azure publishing tools in Visual Studio is beyond the scope of this topic, but they are pretty self-explanatory.  Once deployment has successfully completed, browse to the deployed Orchard site and go through setup. Specify the connection string to the Windows Azure SQL Database you created earlier:   Once setup has finished, navigate to the admin dashboard of the site and enable the following three features:   Windows Azure Media Storage  Windows Azure Output Cache  Windows Azure Database Cache   Congratulations! Orchard is now fully configured for multiple role instances on Windows Azure. You can now scale out to as many role instances as you need and things will be handled.   NOTE: If you set the instance count to more than  1  before deploying, you must now restart all role instances once to make sure they pick up the new configuration.",
            "title": "Deploying"
        },
        {
            "location": "/Documentation/Deploying-Orchard-to-Windows-Azure/#deploying-orchard-to-a-windows-azure-web-site",
            "text": "Deploying to a Windows Azure Web Site is also done using the Windows Azure tooling in Visual Studio. However, instead of using the  Orchard.Azure.sln  as described for Windows Azure Cloud Services above, for a Windows Azure Web Site we use the normal  Orchard.sln  solution and publish the normal  Orchard.Web  project.  As with a cloud service, if you only plan to run a single instance, deploying is extremely simple.  The steps for using Windows Azure SQL Database as the database are the same as for a cloud service (create a Windows Azure SQL database beforehand and specify its connection string during setup).  Start by opening the  Orchard.sln  solution in Visual Studio.  Right click the solution node in  Solution Explorer  and select  Rebuild . This step is necessary to get all modules and themes compiled, thereby having their resulting DLL files included in the published package; compilation of modules and themes does not happen automatically since they are not referenced by the  Orchard.Web  project being published.  To deploy the web site, right click the  Orchard.Web  project in  Solution Explorer  and select  Publish , and follow the instructions in the publishing wizard. Click the  Import  button to import a web deploy publishing configuration from your Windows Azure subscriptions. How to use the Windows Azure publishing tools in Visual Studio is beyond the scope of this topic, but they are pretty self-explanatory.  Once deployment has successfully completed, browse to the newly deployed Orchard site and go through setup. Specify the connection string to the Windows Azure SQL Database you created earlier.  Congratulations! Orchard is now fully configured for a single instance Windows Azure Web Site.",
            "title": "Deploying Orchard to a Windows Azure Web Site"
        },
        {
            "location": "/Documentation/Deploying-Orchard-to-Windows-Azure/#using-multiple-instances",
            "text": "As with cloud services, you need to do a little more configuration if you plan to scale out your web site to more than one instance.  The steps for enabling the  Windows Azure Media Storage ,  Windows Azure Output Cache  and  Windows Azure Database Cache  features for a Windows Azure Web Site are described the following topics:   Using Windows Azure Blob Storage  Using Windows Azure Cache",
            "title": "Using multiple instances"
        },
        {
            "location": "/Documentation/Using-Windows-Azure-Blob-Storage/",
            "text": "Orchard ships with providers for Microsoft Azure Blob Storage, allowing Orchard to use Microsoft Azure Blob Storage as the underlying file system implementation for shell settings (\nSettings.txt\n) and/or media storage. This topic describes how to configure and enable this functionality.\n\n\nUsing shell settings storage\n\n\nStoring shell settings in Microsoft Azure Blob Storage is useful when running Orchard in server farm where there is no shared file system storage. Microsoft Azure Cloud Services is an example of this. For this reason, when deploying Orchard to a Microsoft Azure Cloud Service using the \nOrchard.Azure.sln\n solution, the resulting package is already preconfigured to store shell settings in Microsoft Azure Blob Storage.\n\n\nThe only thing you need to change before deploying is the connection string of the storage account you want to use:\n\n\n\n\n\n\nOpen \nOrchard.Azure.sln\n.\n\n\nNavigate to \nOrchard.Azure.CloudService\n, double click the role \nOrchard.Azure.Web\n to bring up its property page, and navigate to the \nSettings\n tab.\n\n\nSet the \nOrchard.Azure.Settings.StorageConnectionString\n setting to be the connection string of the storage account you want to use.\n\n\nDeploy the cloud service.\n\n\n\n\n\n\nNOTE: It is \nnot\n necessary to use this feature when running Orchard in a Microsoft Azure Web Site, because in this environment the file system is shared among instances.\n\n\n\n\nIt is also possible to use this feature is any other hosting environment where you have a server farm with multiple nodes but no shared file system. To do this you need to do the following:\n\n\n\n\nAdd the \nOrchard.Azure.Settings.StorageConnectionString\n setting in the \n<appSettings>\n element of your \nWeb.config\n file and set it to the connection string of the storage account you want to use.\n\n\nConfigure Autofac to load the \nAzureBlobShellSettingsManager\n implementation in your \nConfig\\Host.config\n file.\n\n\n\n\nHere's an example \nConfig\\Host.config\n configuration:\n\n\n<autofac defaultAssembly=\"Orchard.Framework\">\n    <components>\n        <!-- Configure Orchard to store shell settings in Microsoft Azure Blob Storage. -->\n        <component instance-scope=\"single-instance\" type=\"Orchard.FileSystems.Media.ConfigurationMimeTypeProvider, Orchard.Framework\" service=\"Orchard.FileSystems.Media.IMimeTypeProvider\"></component>\n        <component instance-scope=\"single-instance\" type=\"Orchard.Azure.Services.Environment.Configuration.AzureBlobShellSettingsManager, Orchard.Azure\" service=\"Orchard.Environment.Configuration.IShellSettingsManager\"></component>\n    </components>\n</autofac>\n\n\n\nUsing Microsoft Azure Media Storage\n\n\nThe \nMicrosoft Azure Media Storage\n feature in the \nOrchard.Azure\n module configures Orchard to use Microsoft Azure Blob Storage is the underlying file system implementation for storing media:\n\n\nOrchard.Azure:\n    Name: Microsoft Azure Media Storage\n    Description: Activates an Orchard media storage provider that targets Microsoft Azure Blob Storage.\n    Category: Hosting\n\n\n\nThere are two main reasons to use this feature:\n\n\n\n\nRunning Orchard in a server farm configuration. Without using some form of shared storage, media content will become out of sync between the nodes in your farm as users add or remove media files.\n\n\nOffloading media requests from the Orchard web server. When \nMicrosoft Azure Media Storage\n is enabled all end user requests for media content are made directly to the public blob storage endpoint.\n\n\n\n\nEnabling for Microsoft Azure Cloud Services\n\n\nBefore the feature can be enabled you must configure the connection string to the storage account you want to use. When running Orchard in a Microsoft Azure Cloud Service this can be done either before deploying (in the cloud service project) or after deploying (in the Microsoft Azure management portal).\n\n\nTo configure the connection string \nbefore\n deploying:\n\n\n\n\nOpen \nOrchard.Azure.sln\n.\n\n\nNavigate to \nOrchard.Azure.CloudService\n, double click the role \nOrchard.Azure.Web\n to bring up its property page, and navigate to the \nSettings\n tab.\n\n\nSet the \nOrchard.Azure.Media.StorageConnectionString\n setting to be the connection string of the storage account in which you want to store media content.\n\n\nDeploy the cloud service.\n\n\n\n\nTo configure the connection string \nafter\n deploying:\n\n\n\n\nDeploy the cloud service.\n\n\nIn the management portal, navigate to your cloud service and select the \nConfigure\n tab.\n\n\nUnder \nOrchard.Azure.Web\n locate the setting \nOrchard.Azure.Media.StorageConnectionString\n.\n\n\nSet it to be the connection string of the storage account in which you want to store media content.\n\n\nClick \nSave\n.\n\n\n\n\nYou can now enable the feature \nMicrosoft Azure Media Storage\n in the admin dashboard.\n\n\n\n\nNOTE: For multi-tenancy scenarios the \nOrchard.Azure.Media.StorageConnectionString\n setting can optionally be prefixed with a tenant name. \n\n\n\n\nEnabling for Microsoft Azure Web Sites\n\n\nBefore the feature can be enabled you must configure the connection string to the storage account you want to use. When running Orchard in a Microsoft Azure Web Site this can be done either before deploying (in Web.config) or after deploying (in the Microsoft Azure management portal).\n\n\nTo configure the connection string \nbefore\n deploying:\n\n\n\n\nOpen \nOrchard.sln\n.\n\n\nNavigate to \nOrchard.Web\n and open the \nWeb.config\n file.\n\n\nIn the \n<appSettings>\n element add a setting named \nOrchard.Azure.Media.StorageConnectionString\n and set its value to be the connection string of the storage account in which you want to store media content (see example below).\n\n\nDeploy the web site.\n\n\n\n\nHere's an example configuration:\n\n\n<appSettings>\n    ...\n    <add key=\"Orchard.Azure.Media.StorageConnectionString\" value=\"[storageConnectionString]\"/>\n</appSettings>\n\n\n\nThe storage connections string will look something like the following:\n\n\nDefaultEndpointsProtocol=http;AccountName=myAccount;AccountKey=myKey;\n\n*You can get the account name and key from the Microsoft Azure management portal \n that you used to create your storage or ask you dev ops admin to provide them for you.\n\n\n\nTo configure the connection string \nafter\n deploying:\n\n\n\n\nDeploy the web site.\n\n\nIn the management portal, navigate to your web site and select the \nConfigure\n tab.\n\n\nUnder \nApp settings\n add a setting named \nOrchard.Azure.Media.StorageConnectionString\n and set its value to be the connection string of the storage account in which you want to store media content.\n\n\nClick \nSave\n.\n\n\n\n\nYou can now enable the feature \nMicrosoft Azure Media Storage\n in the admin dashboard.\n\n\n\n\nNOTE: For multi-tenancy scenarios the \nOrchard.Azure.Media.StorageConnectionString\n setting can optionally be prefixed with a tenant name. \n\n\n\n\nEnabling for any other hosting\n\n\nTo enable the feature when running Orchard in any other hosting environment, use the \nWeb.config\n method described above. Once the connection string has been added to the \n<appSettings>\n element, can enable the feature \nMicrosoft Azure Media Storage\n in the admin dashboard.\n\n\nUsing a custom domain name for blob storage\n\n\nMicrosoft Azure Blob Storage allows the use of your own custom domain instead of the default endpoint hostname \n[mystorageaccount].blob.core.windows.net\n.\n\n\nHowever, registering and configuring a custom domain in your storage account is not enough to make Orchard use it. Unless you also reconfigure your storage connection string to take advantage of your custom domain, Orchard will continue to generate public URLs for the media files stored in Microsoft Azure Blob Storage based on the default \n[mystorageaccount].blob.core.windows.net\n hostname.\n\n\nTo ensure the public URLs for your media files contain your custom domain name, modify your storage account connection string accordingly. See the topic \nConfiguring Connection Strings\n in the Microsoft Azure Storage documentation for details.\n\n\nHere's an example connection string using a custom domain name:\n\n\nBlobEndpoint=http://blobs.mycustomdomain.com;AccountName=mystorageaccount;AccountKey=KauG3A5f...An3QlW5dA==\n\n\n\nMulti-tenancy configuration\n\n\nFor multi-tenancy scenarios each setting can optionally be prefixed with a tenant name followed by colon, such as \nSomeTenant:Orchard.Azure.Media.StorageConnectionString\n. Whenever the media storage provider reads configuration settings it will always first look for a setting specific for the current tenant, and if no such setting exists, fallback to the default non-prefixed setting.\n\n\nHere's an example Azure Web Site configuration with two tenants, both using Microsoft Azure Blob Storage is the underlying file system implementation for storing media, but each using its own separate storage account:\n\n\n<appSettings>\n    <!-- Setting for Tenant1 -->\n    <add key=\"Tenant1:Orchard.Azure.Media.StorageConnectionString\" value=\"[storageConnectionString1]\" />\n    <!-- Setting for Tenant2 -->\n    <add key=\"Tenant2:Orchard.Azure.Media.StorageConnectionString\" value=\"[storageConnectionString2]\" />\n</appSettings>",
            "title": "Using Windows Azure Blob Storage"
        },
        {
            "location": "/Documentation/Using-Windows-Azure-Blob-Storage/#using-shell-settings-storage",
            "text": "Storing shell settings in Microsoft Azure Blob Storage is useful when running Orchard in server farm where there is no shared file system storage. Microsoft Azure Cloud Services is an example of this. For this reason, when deploying Orchard to a Microsoft Azure Cloud Service using the  Orchard.Azure.sln  solution, the resulting package is already preconfigured to store shell settings in Microsoft Azure Blob Storage.  The only thing you need to change before deploying is the connection string of the storage account you want to use:    Open  Orchard.Azure.sln .  Navigate to  Orchard.Azure.CloudService , double click the role  Orchard.Azure.Web  to bring up its property page, and navigate to the  Settings  tab.  Set the  Orchard.Azure.Settings.StorageConnectionString  setting to be the connection string of the storage account you want to use.  Deploy the cloud service.    NOTE: It is  not  necessary to use this feature when running Orchard in a Microsoft Azure Web Site, because in this environment the file system is shared among instances.   It is also possible to use this feature is any other hosting environment where you have a server farm with multiple nodes but no shared file system. To do this you need to do the following:   Add the  Orchard.Azure.Settings.StorageConnectionString  setting in the  <appSettings>  element of your  Web.config  file and set it to the connection string of the storage account you want to use.  Configure Autofac to load the  AzureBlobShellSettingsManager  implementation in your  Config\\Host.config  file.   Here's an example  Config\\Host.config  configuration:  <autofac defaultAssembly=\"Orchard.Framework\">\n    <components>\n        <!-- Configure Orchard to store shell settings in Microsoft Azure Blob Storage. -->\n        <component instance-scope=\"single-instance\" type=\"Orchard.FileSystems.Media.ConfigurationMimeTypeProvider, Orchard.Framework\" service=\"Orchard.FileSystems.Media.IMimeTypeProvider\"></component>\n        <component instance-scope=\"single-instance\" type=\"Orchard.Azure.Services.Environment.Configuration.AzureBlobShellSettingsManager, Orchard.Azure\" service=\"Orchard.Environment.Configuration.IShellSettingsManager\"></component>\n    </components>\n</autofac>",
            "title": "Using shell settings storage"
        },
        {
            "location": "/Documentation/Using-Windows-Azure-Blob-Storage/#using-microsoft-azure-media-storage",
            "text": "The  Microsoft Azure Media Storage  feature in the  Orchard.Azure  module configures Orchard to use Microsoft Azure Blob Storage is the underlying file system implementation for storing media:  Orchard.Azure:\n    Name: Microsoft Azure Media Storage\n    Description: Activates an Orchard media storage provider that targets Microsoft Azure Blob Storage.\n    Category: Hosting  There are two main reasons to use this feature:   Running Orchard in a server farm configuration. Without using some form of shared storage, media content will become out of sync between the nodes in your farm as users add or remove media files.  Offloading media requests from the Orchard web server. When  Microsoft Azure Media Storage  is enabled all end user requests for media content are made directly to the public blob storage endpoint.",
            "title": "Using Microsoft Azure Media Storage"
        },
        {
            "location": "/Documentation/Using-Windows-Azure-Blob-Storage/#enabling-for-microsoft-azure-cloud-services",
            "text": "Before the feature can be enabled you must configure the connection string to the storage account you want to use. When running Orchard in a Microsoft Azure Cloud Service this can be done either before deploying (in the cloud service project) or after deploying (in the Microsoft Azure management portal).  To configure the connection string  before  deploying:   Open  Orchard.Azure.sln .  Navigate to  Orchard.Azure.CloudService , double click the role  Orchard.Azure.Web  to bring up its property page, and navigate to the  Settings  tab.  Set the  Orchard.Azure.Media.StorageConnectionString  setting to be the connection string of the storage account in which you want to store media content.  Deploy the cloud service.   To configure the connection string  after  deploying:   Deploy the cloud service.  In the management portal, navigate to your cloud service and select the  Configure  tab.  Under  Orchard.Azure.Web  locate the setting  Orchard.Azure.Media.StorageConnectionString .  Set it to be the connection string of the storage account in which you want to store media content.  Click  Save .   You can now enable the feature  Microsoft Azure Media Storage  in the admin dashboard.   NOTE: For multi-tenancy scenarios the  Orchard.Azure.Media.StorageConnectionString  setting can optionally be prefixed with a tenant name.",
            "title": "Enabling for Microsoft Azure Cloud Services"
        },
        {
            "location": "/Documentation/Using-Windows-Azure-Blob-Storage/#enabling-for-microsoft-azure-web-sites",
            "text": "Before the feature can be enabled you must configure the connection string to the storage account you want to use. When running Orchard in a Microsoft Azure Web Site this can be done either before deploying (in Web.config) or after deploying (in the Microsoft Azure management portal).  To configure the connection string  before  deploying:   Open  Orchard.sln .  Navigate to  Orchard.Web  and open the  Web.config  file.  In the  <appSettings>  element add a setting named  Orchard.Azure.Media.StorageConnectionString  and set its value to be the connection string of the storage account in which you want to store media content (see example below).  Deploy the web site.   Here's an example configuration:  <appSettings>\n    ...\n    <add key=\"Orchard.Azure.Media.StorageConnectionString\" value=\"[storageConnectionString]\"/>\n</appSettings>  The storage connections string will look something like the following:  DefaultEndpointsProtocol=http;AccountName=myAccount;AccountKey=myKey;\n\n*You can get the account name and key from the Microsoft Azure management portal \n that you used to create your storage or ask you dev ops admin to provide them for you.  To configure the connection string  after  deploying:   Deploy the web site.  In the management portal, navigate to your web site and select the  Configure  tab.  Under  App settings  add a setting named  Orchard.Azure.Media.StorageConnectionString  and set its value to be the connection string of the storage account in which you want to store media content.  Click  Save .   You can now enable the feature  Microsoft Azure Media Storage  in the admin dashboard.   NOTE: For multi-tenancy scenarios the  Orchard.Azure.Media.StorageConnectionString  setting can optionally be prefixed with a tenant name.",
            "title": "Enabling for Microsoft Azure Web Sites"
        },
        {
            "location": "/Documentation/Using-Windows-Azure-Blob-Storage/#enabling-for-any-other-hosting",
            "text": "To enable the feature when running Orchard in any other hosting environment, use the  Web.config  method described above. Once the connection string has been added to the  <appSettings>  element, can enable the feature  Microsoft Azure Media Storage  in the admin dashboard.",
            "title": "Enabling for any other hosting"
        },
        {
            "location": "/Documentation/Using-Windows-Azure-Blob-Storage/#using-a-custom-domain-name-for-blob-storage",
            "text": "Microsoft Azure Blob Storage allows the use of your own custom domain instead of the default endpoint hostname  [mystorageaccount].blob.core.windows.net .  However, registering and configuring a custom domain in your storage account is not enough to make Orchard use it. Unless you also reconfigure your storage connection string to take advantage of your custom domain, Orchard will continue to generate public URLs for the media files stored in Microsoft Azure Blob Storage based on the default  [mystorageaccount].blob.core.windows.net  hostname.  To ensure the public URLs for your media files contain your custom domain name, modify your storage account connection string accordingly. See the topic  Configuring Connection Strings  in the Microsoft Azure Storage documentation for details.  Here's an example connection string using a custom domain name:  BlobEndpoint=http://blobs.mycustomdomain.com;AccountName=mystorageaccount;AccountKey=KauG3A5f...An3QlW5dA==",
            "title": "Using a custom domain name for blob storage"
        },
        {
            "location": "/Documentation/Using-Windows-Azure-Blob-Storage/#multi-tenancy-configuration",
            "text": "For multi-tenancy scenarios each setting can optionally be prefixed with a tenant name followed by colon, such as  SomeTenant:Orchard.Azure.Media.StorageConnectionString . Whenever the media storage provider reads configuration settings it will always first look for a setting specific for the current tenant, and if no such setting exists, fallback to the default non-prefixed setting.  Here's an example Azure Web Site configuration with two tenants, both using Microsoft Azure Blob Storage is the underlying file system implementation for storing media, but each using its own separate storage account:  <appSettings>\n    <!-- Setting for Tenant1 -->\n    <add key=\"Tenant1:Orchard.Azure.Media.StorageConnectionString\" value=\"[storageConnectionString1]\" />\n    <!-- Setting for Tenant2 -->\n    <add key=\"Tenant2:Orchard.Azure.Media.StorageConnectionString\" value=\"[storageConnectionString2]\" />\n</appSettings>",
            "title": "Multi-tenancy configuration"
        },
        {
            "location": "/Documentation/Using-Windows-Azure-Cache/",
            "text": "Windows Azure Caching is a distributed memory-based cache service that is part of Windows Azure. Orchard ships with two native providers for Windows Azure Caching, allowing Orchard to use Windows Azure Caching as the cache implementation for both output caching and database caching (NHibernate second-level caching). This topic describes how to configure and enable this functionality.\n\n\nOverview\n\n\nSupport for Windows Azure Caching comes in the form of two features in the \nOrchard.Azure\n module:\n\n\nOrchard.Azure.OutputCache:\n    Name: Windows Azure Output Cache\n    Description: Activates an Orchard output cache provider that targets Windows Azure Cache.\n    Dependencies: Orchard.OutputCache\n    Category: Performance\nOrchard.Azure.DatabaseCache:\n    Name: Windows Azure Database Cache\n    Description: Activates an NHibernate second-level cache provider that targets Windows Azure Cache.\n    Category: Performance\n\n\n\nThese two features can be enabled separately or in combination.\n\n\nThey both configure Orchard to use Windows Azure Caching as the cache implementation. This is primarily useful when running Orchard in a server farm configuration. As mentioned above, Windows Azure Caching is a distributed memory-based cache service. Without using some form of distributed cache, caches will become out of sync between the different nodes in your farm.\n\n\nRole-based Cache vs Cache Service\n\n\nBoth features have been designed to work with both \nWindows Azure Role-based Caching\n and \nWindows Azure Cache Service\n. Role-based Caching can be used only from within a Windows Azure Cloud Service. Cache Service is called via public HTTP endpoints and can be used from anywhere, irrespective of hosting environment.\n\n\nThe caching providers are configured slightly differently depending on which flavor to use. See the \nConfiguration reference section\n for more information.\n\n\nEnabling for Windows Azure Cloud Services\n\n\nWhen deploying Orchard to a Windows Azure Cloud Service using the \nOrchard.Azure.sln\n solution, the resulting package is already preconfigured with everything required to enable the caching features. By default the cloud service project is configured for co-located role-based caching with 30% of the role instance memory allowed for cache usage.\n\n\nThe only thing you need to change before deploying is the connection string of the storage account you want to use to maintain the cache cluster's runtime state:\n\n\n\n\n\n\nOpen \nOrchard.Azure.sln\n.\n\n\nNavigate to \nOrchard.Azure.CloudService\n, double click the role \nOrchard.Azure.Web\n to bring up its property page, and navigate to the \nCaching\n tab.\n\n\nConfigure the connection string of the storage account you want to use.\n\n\nDeploy the cloud service.\n\n\n\n\nAfter deploying you can simply enable the features \nWindows Azure Output Cache\n and/or \nWindows Azure Database Cache\n in the admin dashboard.\n\n\nCustomizing the configuration\n\n\nYou can customize any of the preconfigured settings according to your requirements. For example you might want to:\n\n\n\n\nChange the configuration from co-located to dedicated role-based caching by adding a dedicated caching role to the cloud service.\n\n\nChange the expiration settings of the preconfigured named caches.\n\n\nUse a different set of named caches.\n\n\nUse Cache Service instead of role-based cache (even if you're running in a cloud service).\n\n\n\n\nThis can all be done by reconfiguring the cloud service project.\n\n\nTo reconfigure the expiration settings or set of named caches, use the \nCaching\n tab of the cloud service project:\n\n\n\n\nJust remember that you must also reconfigure the provider settings to match whatever cache configuration you create, using the \nSettings\n tab of the cloud service project:\n\n\n\n\nEnabling for Windows Azure Web Sites\n\n\n\n\nNOTE: When running Orchard in a Windows Azure Web Site only Cache Service can be used - using Role-based Cache is not possible.\n\n\n\n\nBefore the caching features can be enabled you must configure the URL and credentials of the cache clusters you want to use. This can be done either before deploying (in Web.config) or after deploying (in the Windows Azure management portal).\n\n\nConfiguring cache cluster settings \nbefore\n deploying:\n\n\n\n\nOpen \nOrchard.sln\n.\n\n\nNavigate to \nOrchard.Web\n and open the \nWeb.config\n file.\n\n\nFor output caching, in the \n<appSettings>\n element add the following settings:\n\n\nOrchard.Azure.OutputCache.HostIdentifier\n\n\nOrchard.Azure.OutputCache.CacheName\n\n\nOrchard.Azure.OutputCache.AuthorizationToken\n\n\n\n\n\n\nFor database caching, in the \n<appSettings>\n element add the following settings:\n\n\nOrchard.Azure.DatabaseCache.HostIdentifier\n\n\nOrchard.Azure.DatabaseCache.CacheName\n\n\nOrchard.Azure.DatabaseCache.AuthorizationToken\n\n\n\n\n\n\nDeploy the web site.\n\n\n\n\nHere's an example configuration:\n\n\n<appSettings>\n    <!-- Output caching -->\n    <add key=\"Orchard.Azure.OutputCache.HostIdentifier\" value=\"mycache.cache.windows.net\" />\n    <add key=\"Orchard.Azure.OutputCache.CacheName\" value=\"MyOutputCache\" />\n    <add key=\"Orchard.Azure.OutputCache.AuthorizationToken\" value=\"YWNzO...ZXNzY29u\" />\n    <!-- Database caching -->\n    <add key=\"Orchard.Azure.DatabaseCache.HostIdentifier\" value=\"mycache.cache.windows.net\" />\n    <add key=\"Orchard.Azure.DatabaseCache.CacheName\" value=\"MyDatabaseCache\" />\n    <add key=\"Orchard.Azure.DatabaseCache.AuthorizationToken\" value=\"YWNzO...ZXNzY29u\" />\n</appSettings>\n\n\n\nIn the above example, the same cache service is used for both types of caching, but different named caches (\nMyOutputCache\n and \nMyDatabaseCache\n, respectively). Of course you are also free to use completely different cache services if you like. Note that if you want to use the \ndefault\n cache instead of a custom named cache, the setting for \nCacheName\n is optional and can be omitted.\n\n\nRefer to the \nConfiguration reference section\n for more details on how to configure each setting.\n\n\nYou can now enable the features \nWindows Azure Output Cache\n and/or \nWindows Azure Database Cache\n in the admin dashboard.\n\n\nConfiguring cache cluster settings \nafter\n deploying:\n\n\n\n\nDeploy the web site.\n\n\nIn the management portal, navigate to your web site and select the \nConfigure\n tab.\n\n\nFor output caching, under \nApp settings\n add the following settings:\n\n\nOrchard.Azure.OutputCache.HostIdentifier\n\n\nOrchard.Azure.OutputCache.CacheName\n\n\nOrchard.Azure.OutputCache.AuthorizationToken\n\n\n\n\n\n\nFor database caching, under \nApp settings\n element add the following settings:\n\n\nOrchard.Azure.DatabaseCache.HostIdentifier\n\n\nOrchard.Azure.DatabaseCache.CacheName\n\n\nOrchard.Azure.DatabaseCache.AuthorizationToken\n\n\n\n\n\n\nClick \nSave\n.\n\n\n\n\nHere's an example configuration:\n\n\n\n\nRefer to the \nConfiguration reference section\n for more details on how to configure each setting.\n\n\nYou can now enable the features \nWindows Azure Output Cache\n and/or \nWindows Azure Database Cache\n in the admin dashboard.\n\n\nEnabling for any other hosting\n\n\nTo enable the features when running Orchard in any other hosting environment, use the \nWeb.config\n method described above. Once the appropriate settings have been added to the \n<appSettings>\n element, can enable the features \nWindows Azure Output Cache\n and/or \nWindows Azure Database Cache\n in the admin dashboard.\n\n\nConfiguration reference\n\n\nBoth Windows Azure Output Cache and Windows Azure Database Cache share the same configuration structure, differing only by a prefix added to each setting. The prefix is \nOrchard.Azure.OutputCache.\n or \nOrchard.Azure.DatabaseCache.\n respectively.\n\n\nThese settings are read from platform configuration using the \nCloudConfigurationManager\n class, which means they can be configured either in cloud service role configuration settings, web site configuration settings or the \n<appSettings>\n element in Web.config.\n\n\n\n\n\n\n\n    \nSetting\n\n    \nDescription\n\n\n\n\n\n\n\n\n\n    \nHostIdentifier\n\n    \nWhen using role-based caching, set this to the name of the cloud service role hosting the cache cluster.  Auto discover will be used to resolve the cache cluster hostname at runtime. When using Windows Azure Cache Service, set this to the endpoint hostname of your cache service, e.g. \nfabrikam.cache.windows.net\n.\n\n\n\n\n\n    \nCacheName\n\n    \nSet this to the name of a named cache, or leave blank to use the \ndefault\n cache.\n\n\n\n\n\n    \nAuthorizationToken\n\n    \nWhen using Windows Azure Cache Service, set this to the authorization token used to connect to the cache service endpoint.\n\n\n\n\n\n\n\n\n\nHere's an example configuration using \nWeb.config\n. This configures Windows Azure Output Cache to use the \ndefault\n cache on a Windows Azure Cache Service endpoint:\n\n\n<appSettings>\n    <add key=\"Orchard.Azure.OutputCache.HostIdentifier\" value=\"mycache.cache.windows.net\" />\n    <add key=\"Orchard.Azure.OutputCache.CacheName\" value=\"\" />\n    <add key=\"Orchard.Azure.OutputCache.AuthorizationToken\" value=\"YWNzO...ZXNzY29u\" />\n</appSettings>\n\n\n\nHere's the default role configuration when deploying to a cloud service:\n\n\n\n\nMulti-tenancy configuration\n\n\nFor multi-tenancy scenarios each setting can optionally be prefixed with a tenant name followed by colon, such as \nSomeTenant:Orchard.Azure.OutputCache.HostIdentifier\n. Whenever the caching providers read configuration settings they will always first look for a setting specific for the current tenant, and if no such setting exists, fallback to the default non-prefixed setting.\n\n\nHere's an example Azure Web Site configuration with two tenants, both using output caching with a named cache \nOutputCache\n on the Windows Azure Cache Service, but each using its own cache service instance:\n\n\n<appSettings>\n    <!-- Settings for Tenant1 -->\n    <add key=\"Tenant1:Orchard.Azure.OutputCache.HostIdentifier\" value=\"mycache1.cache.windows.net\" />\n    <add key=\"Tenant1:Orchard.Azure.OutputCache.AuthorizationToken\" value=\"YWNzO...ZXNzY29u\" />\n    <!-- Settings for Tenant2 -->\n    <add key=\"Tenant2:Orchard.Azure.OutputCache.HostIdentifier\" value=\"mycache2.cache.windows.net\" />\n    <add key=\"Tenant2:Orchard.Azure.OutputCache.AuthorizationToken\" value=\"FQdOS...ImNXFtSJ\" />\n    <!-- Common settings -->\n    <add key=\"Orchard.Azure.OutputCache.CacheName\" value=\"OutputCache\" />\n</appSettings>\n\n\n\nSession state caching\n\n\nIn addition to output caching and database caching, session state storage is also sensitive to server farm scenarios, primarily in solutions where there is no session affinity in the load balancer. The load balancer used in Windows Azure Cloud Services is one example of this.\n\n\nFor this reason the web role in the cloud service project (\nOrchard.Azure.Web\n) is preconfigured through \nWeb.config\n to use an ASP.NET session state provider that targets Windows Azure Cache. While this provider is enabled, all session state is stored in the distributed cache. This means it is safe for the same user to end up at one farm node in one request and another farm node in the next request, without running the risk of losing her state.\n\n\n\n\nNOTE: This is not necessary when running Orchard in a Windows Azure Web Site as the load balancer here maintains session affinity using cookies.\n\n\n\n\nThe preconfigured settings in \nWeb.config\n when deploying to a cloud service is described below. To configure session state caching in any other hosting scenarios, you can modify your \nWeb.config\n file accordingly before deploying.\n\n\nFirst, a configuration section is added:\n\n\n<configSections>\n    ...\n    <section name=\"dataCacheClients\" type=\"Microsoft.ApplicationServer.Caching.DataCacheClientsSection, Microsoft.ApplicationServer.Caching.Core\" allowLocation=\"true\" allowDefinition=\"Everywhere\" />\n</configSections>\n\n\n\nNext, a cache client is configured:\n\n\n<dataCacheClients>\n    <dataCacheClient name=\"DefaultCacheClient\" useLegacyProtocol=\"false\" connectionPool=\"true\" maxConnectionsToServer=\"20\">\n        <autoDiscover isEnabled=\"true\" identifier=\"Orchard.Azure.Web\" />\n    </dataCacheClient>\n</dataCacheClients>\n\n\n\nFinally, session state is configured to use the Azure Cache provider and the cache client defined above:\n\n\n<sessionState mode=\"Custom\" timeout=\"60\" customProvider=\"CacheSessionStateProvider\">\n    <providers>\n        <!-- Set the cacheName attribute to be the name of the configured logical cache to use for session state storage. -->\n        <add name=\"CacheSessionStateProvider\" type=\"Microsoft.Web.DistributedCache.DistributedCacheSessionStateStoreProvider, Microsoft.Web.DistributedCache\" cacheName=\"SessionStateCache\" dataCacheClientName=\"DefaultCacheClient\" applicationName=\"Orchard\" />\n    </providers>\n</sessionState>\n\n\n\nThe configuration of the session state provider can be customized by editing \nWeb.config\n before deploying the cloud service. To disable the session state provider, simply comment out the above sections from \nWeb.config\n before deploying the cloud service.",
            "title": "Using Windows Azure Cache"
        },
        {
            "location": "/Documentation/Using-Windows-Azure-Cache/#overview",
            "text": "Support for Windows Azure Caching comes in the form of two features in the  Orchard.Azure  module:  Orchard.Azure.OutputCache:\n    Name: Windows Azure Output Cache\n    Description: Activates an Orchard output cache provider that targets Windows Azure Cache.\n    Dependencies: Orchard.OutputCache\n    Category: Performance\nOrchard.Azure.DatabaseCache:\n    Name: Windows Azure Database Cache\n    Description: Activates an NHibernate second-level cache provider that targets Windows Azure Cache.\n    Category: Performance  These two features can be enabled separately or in combination.  They both configure Orchard to use Windows Azure Caching as the cache implementation. This is primarily useful when running Orchard in a server farm configuration. As mentioned above, Windows Azure Caching is a distributed memory-based cache service. Without using some form of distributed cache, caches will become out of sync between the different nodes in your farm.",
            "title": "Overview"
        },
        {
            "location": "/Documentation/Using-Windows-Azure-Cache/#role-based-cache-vs-cache-service",
            "text": "Both features have been designed to work with both  Windows Azure Role-based Caching  and  Windows Azure Cache Service . Role-based Caching can be used only from within a Windows Azure Cloud Service. Cache Service is called via public HTTP endpoints and can be used from anywhere, irrespective of hosting environment.  The caching providers are configured slightly differently depending on which flavor to use. See the  Configuration reference section  for more information.",
            "title": "Role-based Cache vs Cache Service"
        },
        {
            "location": "/Documentation/Using-Windows-Azure-Cache/#enabling-for-windows-azure-cloud-services",
            "text": "When deploying Orchard to a Windows Azure Cloud Service using the  Orchard.Azure.sln  solution, the resulting package is already preconfigured with everything required to enable the caching features. By default the cloud service project is configured for co-located role-based caching with 30% of the role instance memory allowed for cache usage.  The only thing you need to change before deploying is the connection string of the storage account you want to use to maintain the cache cluster's runtime state:    Open  Orchard.Azure.sln .  Navigate to  Orchard.Azure.CloudService , double click the role  Orchard.Azure.Web  to bring up its property page, and navigate to the  Caching  tab.  Configure the connection string of the storage account you want to use.  Deploy the cloud service.   After deploying you can simply enable the features  Windows Azure Output Cache  and/or  Windows Azure Database Cache  in the admin dashboard.",
            "title": "Enabling for Windows Azure Cloud Services"
        },
        {
            "location": "/Documentation/Using-Windows-Azure-Cache/#customizing-the-configuration",
            "text": "You can customize any of the preconfigured settings according to your requirements. For example you might want to:   Change the configuration from co-located to dedicated role-based caching by adding a dedicated caching role to the cloud service.  Change the expiration settings of the preconfigured named caches.  Use a different set of named caches.  Use Cache Service instead of role-based cache (even if you're running in a cloud service).   This can all be done by reconfiguring the cloud service project.  To reconfigure the expiration settings or set of named caches, use the  Caching  tab of the cloud service project:   Just remember that you must also reconfigure the provider settings to match whatever cache configuration you create, using the  Settings  tab of the cloud service project:",
            "title": "Customizing the configuration"
        },
        {
            "location": "/Documentation/Using-Windows-Azure-Cache/#enabling-for-windows-azure-web-sites",
            "text": "NOTE: When running Orchard in a Windows Azure Web Site only Cache Service can be used - using Role-based Cache is not possible.   Before the caching features can be enabled you must configure the URL and credentials of the cache clusters you want to use. This can be done either before deploying (in Web.config) or after deploying (in the Windows Azure management portal).",
            "title": "Enabling for Windows Azure Web Sites"
        },
        {
            "location": "/Documentation/Using-Windows-Azure-Cache/#configuring-cache-cluster-settings-before-deploying",
            "text": "Open  Orchard.sln .  Navigate to  Orchard.Web  and open the  Web.config  file.  For output caching, in the  <appSettings>  element add the following settings:  Orchard.Azure.OutputCache.HostIdentifier  Orchard.Azure.OutputCache.CacheName  Orchard.Azure.OutputCache.AuthorizationToken    For database caching, in the  <appSettings>  element add the following settings:  Orchard.Azure.DatabaseCache.HostIdentifier  Orchard.Azure.DatabaseCache.CacheName  Orchard.Azure.DatabaseCache.AuthorizationToken    Deploy the web site.   Here's an example configuration:  <appSettings>\n    <!-- Output caching -->\n    <add key=\"Orchard.Azure.OutputCache.HostIdentifier\" value=\"mycache.cache.windows.net\" />\n    <add key=\"Orchard.Azure.OutputCache.CacheName\" value=\"MyOutputCache\" />\n    <add key=\"Orchard.Azure.OutputCache.AuthorizationToken\" value=\"YWNzO...ZXNzY29u\" />\n    <!-- Database caching -->\n    <add key=\"Orchard.Azure.DatabaseCache.HostIdentifier\" value=\"mycache.cache.windows.net\" />\n    <add key=\"Orchard.Azure.DatabaseCache.CacheName\" value=\"MyDatabaseCache\" />\n    <add key=\"Orchard.Azure.DatabaseCache.AuthorizationToken\" value=\"YWNzO...ZXNzY29u\" />\n</appSettings>  In the above example, the same cache service is used for both types of caching, but different named caches ( MyOutputCache  and  MyDatabaseCache , respectively). Of course you are also free to use completely different cache services if you like. Note that if you want to use the  default  cache instead of a custom named cache, the setting for  CacheName  is optional and can be omitted.  Refer to the  Configuration reference section  for more details on how to configure each setting.  You can now enable the features  Windows Azure Output Cache  and/or  Windows Azure Database Cache  in the admin dashboard.",
            "title": "Configuring cache cluster settings before deploying:"
        },
        {
            "location": "/Documentation/Using-Windows-Azure-Cache/#configuring-cache-cluster-settings-after-deploying",
            "text": "Deploy the web site.  In the management portal, navigate to your web site and select the  Configure  tab.  For output caching, under  App settings  add the following settings:  Orchard.Azure.OutputCache.HostIdentifier  Orchard.Azure.OutputCache.CacheName  Orchard.Azure.OutputCache.AuthorizationToken    For database caching, under  App settings  element add the following settings:  Orchard.Azure.DatabaseCache.HostIdentifier  Orchard.Azure.DatabaseCache.CacheName  Orchard.Azure.DatabaseCache.AuthorizationToken    Click  Save .   Here's an example configuration:   Refer to the  Configuration reference section  for more details on how to configure each setting.  You can now enable the features  Windows Azure Output Cache  and/or  Windows Azure Database Cache  in the admin dashboard.",
            "title": "Configuring cache cluster settings after deploying:"
        },
        {
            "location": "/Documentation/Using-Windows-Azure-Cache/#enabling-for-any-other-hosting",
            "text": "To enable the features when running Orchard in any other hosting environment, use the  Web.config  method described above. Once the appropriate settings have been added to the  <appSettings>  element, can enable the features  Windows Azure Output Cache  and/or  Windows Azure Database Cache  in the admin dashboard.",
            "title": "Enabling for any other hosting"
        },
        {
            "location": "/Documentation/Using-Windows-Azure-Cache/#configuration-reference",
            "text": "Both Windows Azure Output Cache and Windows Azure Database Cache share the same configuration structure, differing only by a prefix added to each setting. The prefix is  Orchard.Azure.OutputCache.  or  Orchard.Azure.DatabaseCache.  respectively.  These settings are read from platform configuration using the  CloudConfigurationManager  class, which means they can be configured either in cloud service role configuration settings, web site configuration settings or the  <appSettings>  element in Web.config.    \n     Setting \n     Description     \n     HostIdentifier \n     When using role-based caching, set this to the name of the cloud service role hosting the cache cluster.  Auto discover will be used to resolve the cache cluster hostname at runtime. When using Windows Azure Cache Service, set this to the endpoint hostname of your cache service, e.g.  fabrikam.cache.windows.net .   \n     CacheName \n     Set this to the name of a named cache, or leave blank to use the  default  cache.   \n     AuthorizationToken \n     When using Windows Azure Cache Service, set this to the authorization token used to connect to the cache service endpoint.     Here's an example configuration using  Web.config . This configures Windows Azure Output Cache to use the  default  cache on a Windows Azure Cache Service endpoint:  <appSettings>\n    <add key=\"Orchard.Azure.OutputCache.HostIdentifier\" value=\"mycache.cache.windows.net\" />\n    <add key=\"Orchard.Azure.OutputCache.CacheName\" value=\"\" />\n    <add key=\"Orchard.Azure.OutputCache.AuthorizationToken\" value=\"YWNzO...ZXNzY29u\" />\n</appSettings>  Here's the default role configuration when deploying to a cloud service:",
            "title": "Configuration reference"
        },
        {
            "location": "/Documentation/Using-Windows-Azure-Cache/#multi-tenancy-configuration",
            "text": "For multi-tenancy scenarios each setting can optionally be prefixed with a tenant name followed by colon, such as  SomeTenant:Orchard.Azure.OutputCache.HostIdentifier . Whenever the caching providers read configuration settings they will always first look for a setting specific for the current tenant, and if no such setting exists, fallback to the default non-prefixed setting.  Here's an example Azure Web Site configuration with two tenants, both using output caching with a named cache  OutputCache  on the Windows Azure Cache Service, but each using its own cache service instance:  <appSettings>\n    <!-- Settings for Tenant1 -->\n    <add key=\"Tenant1:Orchard.Azure.OutputCache.HostIdentifier\" value=\"mycache1.cache.windows.net\" />\n    <add key=\"Tenant1:Orchard.Azure.OutputCache.AuthorizationToken\" value=\"YWNzO...ZXNzY29u\" />\n    <!-- Settings for Tenant2 -->\n    <add key=\"Tenant2:Orchard.Azure.OutputCache.HostIdentifier\" value=\"mycache2.cache.windows.net\" />\n    <add key=\"Tenant2:Orchard.Azure.OutputCache.AuthorizationToken\" value=\"FQdOS...ImNXFtSJ\" />\n    <!-- Common settings -->\n    <add key=\"Orchard.Azure.OutputCache.CacheName\" value=\"OutputCache\" />\n</appSettings>",
            "title": "Multi-tenancy configuration"
        },
        {
            "location": "/Documentation/Using-Windows-Azure-Cache/#session-state-caching",
            "text": "In addition to output caching and database caching, session state storage is also sensitive to server farm scenarios, primarily in solutions where there is no session affinity in the load balancer. The load balancer used in Windows Azure Cloud Services is one example of this.  For this reason the web role in the cloud service project ( Orchard.Azure.Web ) is preconfigured through  Web.config  to use an ASP.NET session state provider that targets Windows Azure Cache. While this provider is enabled, all session state is stored in the distributed cache. This means it is safe for the same user to end up at one farm node in one request and another farm node in the next request, without running the risk of losing her state.   NOTE: This is not necessary when running Orchard in a Windows Azure Web Site as the load balancer here maintains session affinity using cookies.   The preconfigured settings in  Web.config  when deploying to a cloud service is described below. To configure session state caching in any other hosting scenarios, you can modify your  Web.config  file accordingly before deploying.  First, a configuration section is added:  <configSections>\n    ...\n    <section name=\"dataCacheClients\" type=\"Microsoft.ApplicationServer.Caching.DataCacheClientsSection, Microsoft.ApplicationServer.Caching.Core\" allowLocation=\"true\" allowDefinition=\"Everywhere\" />\n</configSections>  Next, a cache client is configured:  <dataCacheClients>\n    <dataCacheClient name=\"DefaultCacheClient\" useLegacyProtocol=\"false\" connectionPool=\"true\" maxConnectionsToServer=\"20\">\n        <autoDiscover isEnabled=\"true\" identifier=\"Orchard.Azure.Web\" />\n    </dataCacheClient>\n</dataCacheClients>  Finally, session state is configured to use the Azure Cache provider and the cache client defined above:  <sessionState mode=\"Custom\" timeout=\"60\" customProvider=\"CacheSessionStateProvider\">\n    <providers>\n        <!-- Set the cacheName attribute to be the name of the configured logical cache to use for session state storage. -->\n        <add name=\"CacheSessionStateProvider\" type=\"Microsoft.Web.DistributedCache.DistributedCacheSessionStateStoreProvider, Microsoft.Web.DistributedCache\" cacheName=\"SessionStateCache\" dataCacheClientName=\"DefaultCacheClient\" applicationName=\"Orchard\" />\n    </providers>\n</sessionState>  The configuration of the session state provider can be customized by editing  Web.config  before deploying the cloud service. To disable the session state provider, simply comment out the above sections from  Web.config  before deploying the cloud service.",
            "title": "Session state caching"
        },
        {
            "location": "/Documentation/Running-Orchard-on-Mono/",
            "text": "Orchard doesn't currently run on Mono, and hence can't run on Linux.\n\n\n\n\nAll command line examples in this article assume you are using a Linux machine.\n\n\nYou can test the CMS using our \nvirtual machine and/or Live CD\n SuSE Studio appliance.\n\n\nPrerequisites\n\n\nYou will need the following software in order to \nrun\n Orchard on your Linux distribution of choice:\n\n\n\n\nPostgreSQL RDBMS version 8.2 or newer (8.4 recommended) installed, with rights to create databases\n\n\nMono 2.10.1\n or newer\n\n\nApache 2 (optional, you can use \nMono's\n XSP development server for testing)\n\n\nA set of Linux utilities installed on your machine: wget, patch, unzip and sudo (for root access - you must have administrative/root rights on the machine)\n\n\n\n\nIf you want to compile Orchard from source on Linux (compiling with VisualStudio is, of course, also supported), you will also need:\n\n\n\n\nMonoDevelop 2.6 Beta 1\n or newer\n\n\nMono versions of certain assemblies\n used by Orchard\n\n\n\n\nCommon Setup Steps\n\n\nAdd a Host Name Alias for the Demo\n\n\nSince you are using a non-existing DNS name for this demo, you need to let the system know how to find the server. To do so, execute the following sequence of commands:\n\n\nsudo -i\necho \"127.0.0.1 orchard-demo\" >> /etc/hosts\n\n\n\nIf you want to visit the Orchard demo from another machine, you will need to modify the machine's \n/etc/hosts\n file in the similar way, replacing \n127.0.0.1\n with your server's IP address.\n\n\nDatabase Setup\n\n\nFirst, make sure you have PostgreSQL installed and running:\n\n\nps ax|grep postgres\n\n\n\nOutput of the command should be similar to:\n\n\n 1275 ?        Ss     0:00 postgres: logger process                  \n 1277 ?        Ss     0:00 postgres: writer process                  \n 1278 ?        Ss     0:00 postgres: wal writer process              \n 1279 ?        Ss     0:00 postgres: autovacuum launcher process     \n 1280 ?        Ss     0:00 postgres: stats collector process\n\n\n\nWhen PostgreSQL is running and ready, type the commands below to create the database and the user:\n\n\nsudo -i\nsu - postgres\ncreateuser -l -D -R -S -P orchard\n\n\n\nType the password when prompted and then create the database (it will be named \norchard\n):\n\n\ncreatedb -E UTF8 -O orchard orchard\n\n\n\nAt this point you must make sure the new \norchard\n user has access rights to the database. In order to do it, you need to find the \npg_hba.conf\n file and open it in the editor (you must be doing that with administrator/root rights). The file is located in \n/var/lib/pgsql/data/\n on SuSE and in \n/etc/postgresql/X.Y/main/\n on distributions derived from Debian (X.Y is the major.minor version number of your PostgreSQL server). After the file is found and opened, make sure it contains a line similar to this:\n\n\nhost    all             all             127.0.0.1/32            md5\n\n\n\nIt is \nextremely\n important that the last item in the line above is \nnot\n \nindent\n - it should be \nmd5\n, \npassword\n or \ntrust\n (for other authentication methods please refer to the PostgreSQL documentation). After the line is in the file, restart PostgreSQL and you're ready to use the new database from Orchard.\n\n\nConfiguring with Apache 2 and mod_mono\n\n\nMake sure you have Apache 2 (the Worker MPM is recommended) and mod-mono 2.10.1 (or newer) installed. Configuration paths given below are specific to OpenSuSE 11.4, you will need to adjust them for your distribution. Contents of the created files does not change (save for the filesystem paths, of course).\n\n\nCreate Apache Virtual Host Configuration File\n\n\nsudo -i\ncd /etc/apache2/vhosts.d\n\n\n\nAt this point you will need a working text editor. You can try typing any of the following commands to launch one: gedit, mcedit, joe, vi. \neditor\n below is used as a placeholder:\n\n\neditor /etc/apache2/vhosts.d/orchard-demo.conf\n\n\n\nOne of them should result in the editor starting. If you don't know how to use the started editor, refer to its online help. After the editor is started, paste the following code in it:\n\n\n<VirtualHost *:80>\n    ServerAdmin webmaster@orchard-demo\n    ServerName orchard-demo\n\n    # Change the path below to suit your configuration\n    DocumentRoot /srv/www/vhosts/orchard-demo\n\n    # The paths used here should be common for all Linux distributions\n    ErrorLog /var/log/apache2/orchard-demo_error.log\n    CustomLog /var/log/apache2/orchard-demo_access.log combined\n\n    HostnameLookups Off\n    UseCanonicalName Off\n    ServerSignature On\n\n    # Make ABSOLUTELY sure that the path in double quotes ends with a slash!\n    Alias / \"/srv/www/vhosts/orchard-demo/\"\n\n    AddMonoApplications OrchardDemo \"/:/srv/www/vhosts/orchard-demo\"\n\n    # Orchard is a .NET 4.0 application. If your Mono was installed in a different prefix, replace /usr/bin/ with that prefix below.\n    MonoServerPath OrchardDemo /usr/bin/mod-mono-server4\n\n    # Helps when you get stack traces\n    MonoDebug OrchardDemo True\n\n    # Orchard assumes a case-insensitive filesystem\n    MonoIOMAP OrchardDemo all\n\n    <Directory \"/srv/www/vhosts/orchard-demo\">\n    SetHandler mono\n    MonoSetServerAlias OrchardDemo\n    </Directory>\n</VirtualHost>\n\n\n\nSave the file, close the editor and type one the following commands to restart Apache (use only one of those):\n\n\nservice apache2 restart\n\n\n\n/etc/init.d/apache2 restart\n\n\n\nTo make sure Mono backend has been started correctly, type:\n\n\nps ax|grep OrchardDemo\n\n\n\nAs the result you should see output similar to:\n\n\n2252 ?        Ssl    0:00 /usr/bin/mono --debug /usr/lib/mono/4.0/mod-mono-server4.exe --filename /tmp/mod_mono_server_OrchardDemo --applications /:/srv/www/vhosts/orchard-demo --nonstop\n\n\n\nNow you are ready to start your favorite web browser and point it to \nhttp://orchard-demo/\n!\n\n\nConfiguring for XSP\n\n\nNo extra steps are necessary. You need to run \nxsp4\n in the \nOrchard.Web\n directory using the following command line:\n\n\nMONO_IOMAP=all xsp4\n\n\n\nUsing Binary Version of Orchard\n\n\nCurrently Orchard needs to be patched in order to run on Mono with PostgreSQL database, so for your convenience a \nprecompiled version is available\n. All you need to do is to download the archive, create a directory on your server in which you want to put the application and unzip the archive in that directory (locations used here are samples which would work without changing on a machine running \nOpenSuSE 11.4\n):\n\n\nsudo -i\nmkdir -p /srv/www/vhosts/orchard-demo\ncd /tmp\nwget http://dl.dropbox.com/u/22037511/orchard/orchard-1.0.20-mono_bin.zip\ncd /srv/www/vhosts/orchard-demo\nunzip /tmp/orchard-1.0.20-mono_bin.zip\n\n\n\nCompiling Orchard from Source\n\n\nWe will use the current (as of March 11 2011) version of Orchard sources - \n1.0.20\n. After downloading and unzipping them in a directory of your choice, you need to perform the steps outlined below in before compiling the application.\n\n\nPatching the Source\n\n\nIdeally, in the future Orchard will not need to be patched in order to work under Mono, but for the moment you need to \ndownload two little patches\n and apply them to the source. Unzip the archive in the directory where you unpacked the Orchard sources and issue the following commands:\n\n\npatch -p1 < 01.\\ orchard-1.0-mono-support.patch\npatch -p1 < 02.\\ orchard-1.0-postgresql-support.patch\n\n\n\nAnd Orchard is patched!\n\n\nOverlaying Mono Versions of Some Assemblies\n\n\nOrchard comes with a host of assemblies it depends upon both during compilation and the execution. Two of those assemblies (\nMicrosoft.Web.Infrastructure.dll\n and \nNHibernate.dll\n) have to be replaced because the versions shipped with Orchard will work only in the Microsoft .NET environment. The assemblies can be found in \nthis archive\n which has to be unzipped in the directory where you unpacked your Orchard sources.\n\n\nCompiling\n\n\nYou \nmust\n use MonoDevelop 2.6 or newer to compile on Orchard on Linux (you can also use VisualStudio after performing the steps above) since its earlier versions had a bug which would require you to edit assembly references in all of the Orchard projects. Compilation using Mono's xbuild is also currently not possible because of missing features (but we're working on it and soon you should be able to compile Orchard from command line).\n\n\nYou must make absolutely sure that the full Mono 2.10.1 (or newer) stack is installed - all of the development files, assemblies, compilers have to be present on your system.\n\n\nAfter opening the solution in MonoDevelop just type \nF8\n (or use the \nBuild -> Build All\n menu option) and after a while you should have Orchard compiled and ready to run.\n\n\nDeploying\n\n\nUnfortunately at the time of this writing MonoDevelop will not deploy Orchard properly, so you need to do it manually. To do so, copy contents of the \nsrc/Orchard.Web/\n directory to your website root. If you want to remove the source and binary files which aren't necessary for the CMS to run, please consult the \nbinary release of Orchard\n and use it as a template of what has to remain and what can be removed safely.\n\n\nResources\n\n\nSuSE Studio Appliance with Orchard and Mono\n\n\nWe have prepared a \nvirtual machine and a Live CD\n based on OpenSuSE 11.4 with Orchard 1.0.20 and Mono 2.10.1 preinstalled so that you can test the CMS without having to go through any of the steps above.\n\n\nThe Virtual Machine can be loaded both in Virtual Box (recommended, tested with version 4.0.4) and VMware.\n\n\nAfter starting the VM/Live CD, type \nhttp://orchard-demo/\n in the browser (FireFox will auto-start) and watch it work!\n\n\nThe first time you browse the above URL you will be greeted with Orchard setup screen and prompted for database connection string. You need to use the following:\n\n\nServer=localhost;Database=orchard;User ID=orchard;Password=orchard\n\n\n\nKnown Issues\n\n\n\n\nOrchard requires \nMono IOMAP\n to be active since there are a few files and directories that use inconsistent name case.\n\n\nAfter a few requests you might get \nnpgsql\n (PostgreSQL ADO.NET provider) connection errors. Only restarting the application will cure it.",
            "title": "Running Orchard on Mono"
        },
        {
            "location": "/Documentation/Running-Orchard-on-Mono/#prerequisites",
            "text": "You will need the following software in order to  run  Orchard on your Linux distribution of choice:   PostgreSQL RDBMS version 8.2 or newer (8.4 recommended) installed, with rights to create databases  Mono 2.10.1  or newer  Apache 2 (optional, you can use  Mono's  XSP development server for testing)  A set of Linux utilities installed on your machine: wget, patch, unzip and sudo (for root access - you must have administrative/root rights on the machine)   If you want to compile Orchard from source on Linux (compiling with VisualStudio is, of course, also supported), you will also need:   MonoDevelop 2.6 Beta 1  or newer  Mono versions of certain assemblies  used by Orchard",
            "title": "Prerequisites"
        },
        {
            "location": "/Documentation/Running-Orchard-on-Mono/#common-setup-steps",
            "text": "",
            "title": "Common Setup Steps"
        },
        {
            "location": "/Documentation/Running-Orchard-on-Mono/#add-a-host-name-alias-for-the-demo",
            "text": "Since you are using a non-existing DNS name for this demo, you need to let the system know how to find the server. To do so, execute the following sequence of commands:  sudo -i\necho \"127.0.0.1 orchard-demo\" >> /etc/hosts  If you want to visit the Orchard demo from another machine, you will need to modify the machine's  /etc/hosts  file in the similar way, replacing  127.0.0.1  with your server's IP address.",
            "title": "Add a Host Name Alias for the Demo"
        },
        {
            "location": "/Documentation/Running-Orchard-on-Mono/#database-setup",
            "text": "First, make sure you have PostgreSQL installed and running:  ps ax|grep postgres  Output of the command should be similar to:   1275 ?        Ss     0:00 postgres: logger process                  \n 1277 ?        Ss     0:00 postgres: writer process                  \n 1278 ?        Ss     0:00 postgres: wal writer process              \n 1279 ?        Ss     0:00 postgres: autovacuum launcher process     \n 1280 ?        Ss     0:00 postgres: stats collector process  When PostgreSQL is running and ready, type the commands below to create the database and the user:  sudo -i\nsu - postgres\ncreateuser -l -D -R -S -P orchard  Type the password when prompted and then create the database (it will be named  orchard ):  createdb -E UTF8 -O orchard orchard  At this point you must make sure the new  orchard  user has access rights to the database. In order to do it, you need to find the  pg_hba.conf  file and open it in the editor (you must be doing that with administrator/root rights). The file is located in  /var/lib/pgsql/data/  on SuSE and in  /etc/postgresql/X.Y/main/  on distributions derived from Debian (X.Y is the major.minor version number of your PostgreSQL server). After the file is found and opened, make sure it contains a line similar to this:  host    all             all             127.0.0.1/32            md5  It is  extremely  important that the last item in the line above is  not   indent  - it should be  md5 ,  password  or  trust  (for other authentication methods please refer to the PostgreSQL documentation). After the line is in the file, restart PostgreSQL and you're ready to use the new database from Orchard.",
            "title": "Database Setup"
        },
        {
            "location": "/Documentation/Running-Orchard-on-Mono/#configuring-with-apache-2-and-mod_mono",
            "text": "Make sure you have Apache 2 (the Worker MPM is recommended) and mod-mono 2.10.1 (or newer) installed. Configuration paths given below are specific to OpenSuSE 11.4, you will need to adjust them for your distribution. Contents of the created files does not change (save for the filesystem paths, of course).",
            "title": "Configuring with Apache 2 and mod_mono"
        },
        {
            "location": "/Documentation/Running-Orchard-on-Mono/#create-apache-virtual-host-configuration-file",
            "text": "sudo -i\ncd /etc/apache2/vhosts.d  At this point you will need a working text editor. You can try typing any of the following commands to launch one: gedit, mcedit, joe, vi.  editor  below is used as a placeholder:  editor /etc/apache2/vhosts.d/orchard-demo.conf  One of them should result in the editor starting. If you don't know how to use the started editor, refer to its online help. After the editor is started, paste the following code in it:  <VirtualHost *:80>\n    ServerAdmin webmaster@orchard-demo\n    ServerName orchard-demo\n\n    # Change the path below to suit your configuration\n    DocumentRoot /srv/www/vhosts/orchard-demo\n\n    # The paths used here should be common for all Linux distributions\n    ErrorLog /var/log/apache2/orchard-demo_error.log\n    CustomLog /var/log/apache2/orchard-demo_access.log combined\n\n    HostnameLookups Off\n    UseCanonicalName Off\n    ServerSignature On\n\n    # Make ABSOLUTELY sure that the path in double quotes ends with a slash!\n    Alias / \"/srv/www/vhosts/orchard-demo/\"\n\n    AddMonoApplications OrchardDemo \"/:/srv/www/vhosts/orchard-demo\"\n\n    # Orchard is a .NET 4.0 application. If your Mono was installed in a different prefix, replace /usr/bin/ with that prefix below.\n    MonoServerPath OrchardDemo /usr/bin/mod-mono-server4\n\n    # Helps when you get stack traces\n    MonoDebug OrchardDemo True\n\n    # Orchard assumes a case-insensitive filesystem\n    MonoIOMAP OrchardDemo all\n\n    <Directory \"/srv/www/vhosts/orchard-demo\">\n    SetHandler mono\n    MonoSetServerAlias OrchardDemo\n    </Directory>\n</VirtualHost>  Save the file, close the editor and type one the following commands to restart Apache (use only one of those):  service apache2 restart\n\n\n\n/etc/init.d/apache2 restart  To make sure Mono backend has been started correctly, type:  ps ax|grep OrchardDemo  As the result you should see output similar to:  2252 ?        Ssl    0:00 /usr/bin/mono --debug /usr/lib/mono/4.0/mod-mono-server4.exe --filename /tmp/mod_mono_server_OrchardDemo --applications /:/srv/www/vhosts/orchard-demo --nonstop  Now you are ready to start your favorite web browser and point it to  http://orchard-demo/ !",
            "title": "Create Apache Virtual Host Configuration File"
        },
        {
            "location": "/Documentation/Running-Orchard-on-Mono/#configuring-for-xsp",
            "text": "No extra steps are necessary. You need to run  xsp4  in the  Orchard.Web  directory using the following command line:  MONO_IOMAP=all xsp4",
            "title": "Configuring for XSP"
        },
        {
            "location": "/Documentation/Running-Orchard-on-Mono/#using-binary-version-of-orchard",
            "text": "Currently Orchard needs to be patched in order to run on Mono with PostgreSQL database, so for your convenience a  precompiled version is available . All you need to do is to download the archive, create a directory on your server in which you want to put the application and unzip the archive in that directory (locations used here are samples which would work without changing on a machine running  OpenSuSE 11.4 ):  sudo -i\nmkdir -p /srv/www/vhosts/orchard-demo\ncd /tmp\nwget http://dl.dropbox.com/u/22037511/orchard/orchard-1.0.20-mono_bin.zip\ncd /srv/www/vhosts/orchard-demo\nunzip /tmp/orchard-1.0.20-mono_bin.zip",
            "title": "Using Binary Version of Orchard"
        },
        {
            "location": "/Documentation/Running-Orchard-on-Mono/#compiling-orchard-from-source",
            "text": "We will use the current (as of March 11 2011) version of Orchard sources -  1.0.20 . After downloading and unzipping them in a directory of your choice, you need to perform the steps outlined below in before compiling the application.",
            "title": "Compiling Orchard from Source"
        },
        {
            "location": "/Documentation/Running-Orchard-on-Mono/#patching-the-source",
            "text": "Ideally, in the future Orchard will not need to be patched in order to work under Mono, but for the moment you need to  download two little patches  and apply them to the source. Unzip the archive in the directory where you unpacked the Orchard sources and issue the following commands:  patch -p1 < 01.\\ orchard-1.0-mono-support.patch\npatch -p1 < 02.\\ orchard-1.0-postgresql-support.patch  And Orchard is patched!",
            "title": "Patching the Source"
        },
        {
            "location": "/Documentation/Running-Orchard-on-Mono/#overlaying-mono-versions-of-some-assemblies",
            "text": "Orchard comes with a host of assemblies it depends upon both during compilation and the execution. Two of those assemblies ( Microsoft.Web.Infrastructure.dll  and  NHibernate.dll ) have to be replaced because the versions shipped with Orchard will work only in the Microsoft .NET environment. The assemblies can be found in  this archive  which has to be unzipped in the directory where you unpacked your Orchard sources.",
            "title": "Overlaying Mono Versions of Some Assemblies"
        },
        {
            "location": "/Documentation/Running-Orchard-on-Mono/#compiling",
            "text": "You  must  use MonoDevelop 2.6 or newer to compile on Orchard on Linux (you can also use VisualStudio after performing the steps above) since its earlier versions had a bug which would require you to edit assembly references in all of the Orchard projects. Compilation using Mono's xbuild is also currently not possible because of missing features (but we're working on it and soon you should be able to compile Orchard from command line).  You must make absolutely sure that the full Mono 2.10.1 (or newer) stack is installed - all of the development files, assemblies, compilers have to be present on your system.  After opening the solution in MonoDevelop just type  F8  (or use the  Build -> Build All  menu option) and after a while you should have Orchard compiled and ready to run.",
            "title": "Compiling"
        },
        {
            "location": "/Documentation/Running-Orchard-on-Mono/#deploying",
            "text": "Unfortunately at the time of this writing MonoDevelop will not deploy Orchard properly, so you need to do it manually. To do so, copy contents of the  src/Orchard.Web/  directory to your website root. If you want to remove the source and binary files which aren't necessary for the CMS to run, please consult the  binary release of Orchard  and use it as a template of what has to remain and what can be removed safely.",
            "title": "Deploying"
        },
        {
            "location": "/Documentation/Running-Orchard-on-Mono/#resources",
            "text": "",
            "title": "Resources"
        },
        {
            "location": "/Documentation/Running-Orchard-on-Mono/#suse-studio-appliance-with-orchard-and-mono",
            "text": "We have prepared a  virtual machine and a Live CD  based on OpenSuSE 11.4 with Orchard 1.0.20 and Mono 2.10.1 preinstalled so that you can test the CMS without having to go through any of the steps above.  The Virtual Machine can be loaded both in Virtual Box (recommended, tested with version 4.0.4) and VMware.  After starting the VM/Live CD, type  http://orchard-demo/  in the browser (FireFox will auto-start) and watch it work!  The first time you browse the above URL you will be greeted with Orchard setup screen and prompted for database connection string. You need to use the following:  Server=localhost;Database=orchard;User ID=orchard;Password=orchard",
            "title": "SuSE Studio Appliance with Orchard and Mono"
        },
        {
            "location": "/Documentation/Running-Orchard-on-Mono/#known-issues",
            "text": "Orchard requires  Mono IOMAP  to be active since there are a few files and directories that use inconsistent name case.  After a few requests you might get  npgsql  (PostgreSQL ADO.NET provider) connection errors. Only restarting the application will cure it.",
            "title": "Known Issues"
        },
        {
            "location": "/Documentation/Setting-up-a-multi-tenant-Orchard-site/",
            "text": "When running Orchard, you most often will run a single site in a single application domain (app domain),\nwhich in ASP.NET terms is an isolation boundary between applications.\nHowever, Orchard provides an additional isolation boundary between sites,\nreferred to as \nmulti-tenancy\n, that allows you to run multiple Orchard sites within a single ASP.NET app domain.\nThis is useful because app domains are generally expensive to initialize, tear down,\nand recycle from memory usage standpoint.\nRunning multiple isolated Orchard sites in a single app domain can allow more sites to fit on a single server,\nwhich is favored by hosting providers to keep costs down.\nThe assumption is that cost savings for hosting providers result in lower cost for hosting customers.\nMulti-tenancy is particularly nice in a \nWindows Azure environment\n,\nbecause one deployment to Azure can easily support multiple websites.\n\n\n\n\nNote:\n If you want to set up a multi-tenant test site on your local machine, first read\n\nTesting Multi-Tenancy on a Local Machine\n later in this article.\n\n\n\n\nEnabling Multi-Tenancy\n\n\nBy default, the multi-tenancy feature is not enabled when you install Orchard.\nTo enable multi-tenancy, open the Orchard dashboard, click \nModules\n,\nfind the \nMulti Tenancy\n feature under \nHosting\n, and then click \nEnable\n.\n\n\n\n\nOnce multi-tenancy is enabled, you see a \nTenants\n dashboard menu section.\nA \ntenant\n refers to a separate site configuration inside of the default tenant,\nwhich is initial site created after you install Orchard.\nYou can think of the default tenant as the landlord of an apartment building\nwho can provision new apartments and decide the terms for each tenant,\nand the individual tenants as inhabitants of each apartment.\n\n\nAdding Tenants\n\n\nInitially, you will only have a single tenant, which is the \nDefault\n tenant. \n\n\n\n\nTo provision another tenant site, click \nAdd a Tenant\n.\n\n\n\n\nThe \nAdd New Tenant\n screen asks for the name of the tenant (the name may not contain spaces),\nand the host domain that will map to the tenant. As the landlord for your tenants,\nyou decide whether the tenant should be allowed to configure the database (on the Orchard setup screen),\nor whether you want to configure the database on behalf of the tenant. \n\n\nAfter you've decided how to provision your new tenant site, click \nSave\n.\nUnder \nList of Site's Tenants\n you see the new tenant.\n\n\n\n\nTo provision the new tenant site, click \nSet Up\n.\nThe Orchard setup screen is displayed, as if you were setting up a brand new Orchard installation.\nHowever, the database options are not displayed, because they were decided when the tenant was added.\n\n\n\n\nNote:\n If you decide to use an existing database for your tenant, you will be asked for the connection\nstring and for a table prefix. The table prefix will be added to each of the tenant's tables within the database:\n\n\n\n\n\n\nWorking with Tenant Sites\n\n\nIsolated tenants can each have a unique configuration of content items, enabled features, and applied themes.\nTenants all share the same file system view of the application, however, so the list of available modules\nand themes will be the same for each tenant.\nIn the following screenshots, the \nAlpha\n tenant and the \nBeta\n tenant have different themes applied.\n\n\n\n\n\n\nYou can take a tenant site offline at any time.\nUnder \nList of Site's Tenants\n for your default site, click \nSuspend\n for the site you want to take offline.\n\n\n\n\nTo bring the tenant site back online, click \nResume\n.\n\n\nRemoving Tenants\n\n\nCurrently, there is no UI to remove a tenant, but it can be done by going to the \nApp_Data/Sites\n\ndirectory of the site, locating the subdirectory for the tenant to remove, and then deleting it.\nYou might want to move the folder to a backup location in case you need to restore it later.\n\n\n\n\nNote:\n On Azure, there is currently no way to remove a tenant except by removing the actual\ndatabase and the configuration from BLOB storage.\n\n\n\n\nTesting Multi-Tenancy on a Local Machine\n\n\nIf you are running locally and do not have a domain to map, you can edit your\n\n\\Windows\\System32\\drivers\\etc\\hosts\n file to create a sample host.\n\n\nThe following advice is for Windows 7 or Windows Vista and was taken from\n\nOrchard Issue Tracker on GitHub\n).\nThese instructions assume that you're using WebMatrix and IIS Express to work with Orchard.\n\n\n\n\n\n\nOpen the \n\\Windows\\System32\\drivers\\etc\\\n folder.  \n\n\n\n\n\n\nRight-click the \nhosts\n file and give yourself modify permissions to that file.  \n\n\n\n\n\n\nOpen the \nhosts\n file in a text editor.  \n\n\n\n\n\n\nAdd the following line, replacing \nmydemo\n with the domain name you want to use:  \n\n\n127.0.0.1 mydemo\n\n\n\n\n\n\nOpen the \n\\Users\\\\[YourUserName\\]\\Documents\\IISExpress\\config\\\n folder.  \n\n\n\n\n\n\nOpen the \nApplicationhost.config\n file in a text editor.  \n\n\n\n\n\n\nLocate the section for your existing Orchard site, such as the following:  \n\n\n<site name=\"mydemo\" id=\"nnnnnnnnn\"/>\n\n\n\n\n\n\nUnder the \n<bindings>\n section, leave the default localhost binding,\nbut copy it onto the next line and edit it to read:  \n\n\n<binding protocol=\"http\" bindingInformation=\"*:28923:mydemo\" />\n\n\n\n\n\n\nSubstitute the port number above for the one you copied from the default localhost binding.  \n\n\n\n\n\n\nIf you do not want to run WebMatrix with admin privileges (which is not a good practice for security reasons),\nyou need to follow the steps outlined in the article\n\nHandling URL Binding Failures in IIS Express\n as follows:\n\n\n\n\n\n\nOpen a command window that has administrative privileges.\n(In \nAll Programs\n > \nAccessories\n > \nCommand Prompt\n, right-click the program shortcut\nand then click \nRun as administrator\n.)  \n\n\n\n\n\n\nRun the following command:\n\n\n> netsh http add urlacl url=http://mydemo:28923/ user=everyone\n\nThis can later be removed with the following command:\n\n\n> netsh http delete urlacl url=http://mydemo:28923/\n\n\n\n\n\n\nAlternatively, you could run WebMatrix using admin privileges as follows:\n\n\n\n\nOpen WebMatrix with admin privileges. (Right-click the shortcut in Windows, then click \nRun as administrator\n.)\n\n\n\n\nFinally:\n\n\n\n\n\n\nOpen your site and attempt to start it.  \n\n\n\n\n\n\nLocate the IIS Express icon in the taskbar and right-click it. You see your site name,\nwhere you can select to open it via its additional URL.\n\n\n\n\n\n\nRemember to remove the item from the \nhosts\n file or comment out the line using\nthe \n#\n character if you want to view the live site from the same domain name after you've deployed it to an ISP.\nYou need to be very careful that you are looking at the remote site rather than the local one.\nConsider adding something to one or other of the themes to make the difference immediately apparent.\n\n\n\n\nNote:\n Alternatively, instead of editing the \nhosts\n file, you can use the URL \n*.127-0-0-1.org.uk\n,\nwhere * is the name of your tenant or another name of your choosing.\nThis will loop back to localhost and is sufficient for testing multi-tenancy locally.",
            "title": "Setting Up a Multi-Tenant Orchard Site"
        },
        {
            "location": "/Documentation/Setting-up-a-multi-tenant-Orchard-site/#enabling-multi-tenancy",
            "text": "By default, the multi-tenancy feature is not enabled when you install Orchard.\nTo enable multi-tenancy, open the Orchard dashboard, click  Modules ,\nfind the  Multi Tenancy  feature under  Hosting , and then click  Enable .   Once multi-tenancy is enabled, you see a  Tenants  dashboard menu section.\nA  tenant  refers to a separate site configuration inside of the default tenant,\nwhich is initial site created after you install Orchard.\nYou can think of the default tenant as the landlord of an apartment building\nwho can provision new apartments and decide the terms for each tenant,\nand the individual tenants as inhabitants of each apartment.",
            "title": "Enabling Multi-Tenancy"
        },
        {
            "location": "/Documentation/Setting-up-a-multi-tenant-Orchard-site/#adding-tenants",
            "text": "Initially, you will only have a single tenant, which is the  Default  tenant.    To provision another tenant site, click  Add a Tenant .   The  Add New Tenant  screen asks for the name of the tenant (the name may not contain spaces),\nand the host domain that will map to the tenant. As the landlord for your tenants,\nyou decide whether the tenant should be allowed to configure the database (on the Orchard setup screen),\nor whether you want to configure the database on behalf of the tenant.   After you've decided how to provision your new tenant site, click  Save .\nUnder  List of Site's Tenants  you see the new tenant.   To provision the new tenant site, click  Set Up .\nThe Orchard setup screen is displayed, as if you were setting up a brand new Orchard installation.\nHowever, the database options are not displayed, because they were decided when the tenant was added.   Note:  If you decide to use an existing database for your tenant, you will be asked for the connection\nstring and for a table prefix. The table prefix will be added to each of the tenant's tables within the database:",
            "title": "Adding Tenants"
        },
        {
            "location": "/Documentation/Setting-up-a-multi-tenant-Orchard-site/#working-with-tenant-sites",
            "text": "Isolated tenants can each have a unique configuration of content items, enabled features, and applied themes.\nTenants all share the same file system view of the application, however, so the list of available modules\nand themes will be the same for each tenant.\nIn the following screenshots, the  Alpha  tenant and the  Beta  tenant have different themes applied.    You can take a tenant site offline at any time.\nUnder  List of Site's Tenants  for your default site, click  Suspend  for the site you want to take offline.   To bring the tenant site back online, click  Resume .",
            "title": "Working with Tenant Sites"
        },
        {
            "location": "/Documentation/Setting-up-a-multi-tenant-Orchard-site/#removing-tenants",
            "text": "Currently, there is no UI to remove a tenant, but it can be done by going to the  App_Data/Sites \ndirectory of the site, locating the subdirectory for the tenant to remove, and then deleting it.\nYou might want to move the folder to a backup location in case you need to restore it later.   Note:  On Azure, there is currently no way to remove a tenant except by removing the actual\ndatabase and the configuration from BLOB storage.",
            "title": "Removing Tenants"
        },
        {
            "location": "/Documentation/Setting-up-a-multi-tenant-Orchard-site/#testing-multi-tenancy-on-a-local-machine",
            "text": "If you are running locally and do not have a domain to map, you can edit your \\Windows\\System32\\drivers\\etc\\hosts  file to create a sample host.  The following advice is for Windows 7 or Windows Vista and was taken from Orchard Issue Tracker on GitHub ).\nThese instructions assume that you're using WebMatrix and IIS Express to work with Orchard.    Open the  \\Windows\\System32\\drivers\\etc\\  folder.      Right-click the  hosts  file and give yourself modify permissions to that file.      Open the  hosts  file in a text editor.      Add the following line, replacing  mydemo  with the domain name you want to use:    127.0.0.1 mydemo    Open the  \\Users\\\\[YourUserName\\]\\Documents\\IISExpress\\config\\  folder.      Open the  Applicationhost.config  file in a text editor.      Locate the section for your existing Orchard site, such as the following:    <site name=\"mydemo\" id=\"nnnnnnnnn\"/>    Under the  <bindings>  section, leave the default localhost binding,\nbut copy it onto the next line and edit it to read:    <binding protocol=\"http\" bindingInformation=\"*:28923:mydemo\" />    Substitute the port number above for the one you copied from the default localhost binding.      If you do not want to run WebMatrix with admin privileges (which is not a good practice for security reasons),\nyou need to follow the steps outlined in the article Handling URL Binding Failures in IIS Express  as follows:    Open a command window that has administrative privileges.\n(In  All Programs  >  Accessories  >  Command Prompt , right-click the program shortcut\nand then click  Run as administrator .)      Run the following command:  > netsh http add urlacl url=http://mydemo:28923/ user=everyone \nThis can later be removed with the following command:  > netsh http delete urlacl url=http://mydemo:28923/    Alternatively, you could run WebMatrix using admin privileges as follows:   Open WebMatrix with admin privileges. (Right-click the shortcut in Windows, then click  Run as administrator .)   Finally:    Open your site and attempt to start it.      Locate the IIS Express icon in the taskbar and right-click it. You see your site name,\nwhere you can select to open it via its additional URL.    Remember to remove the item from the  hosts  file or comment out the line using\nthe  #  character if you want to view the live site from the same domain name after you've deployed it to an ISP.\nYou need to be very careful that you are looking at the remote site rather than the local one.\nConsider adding something to one or other of the themes to make the difference immediately apparent.   Note:  Alternatively, instead of editing the  hosts  file, you can use the URL  *.127-0-0-1.org.uk ,\nwhere * is the name of your tenant or another name of your choosing.\nThis will loop back to localhost and is sufficient for testing multi-tenancy locally.",
            "title": "Testing Multi-Tenancy on a Local Machine"
        },
        {
            "location": "/Documentation/Setting-up-a-machine-key/",
            "text": "We recommend that deployed versions of Orchard are configured with a fixed machine key rather than the default setting, which is to automatically generate the key at runtime. This default setting can cause the key to change unexpectedly, which can cause validation errors.\n\n\nSetting Up the Machine Key Using IIS Manager\n\n\nIf you have access to the IIS management console for the server where Orchard is installed, it is the easiest way to set-up a machine key.\n\n\nStart the management console and then select the web site. Open the machine key configuration:\n\n\n\n\nThe machine key control panel has the following settings:\n\n\n\n\nUncheck \"Automatically generate at runtime\" for both the validation key and the decryption key.\n\n\nClick \"Generate Keys\" under \"Actions\" on the right side of the panel.\n\n\nClick \"Apply\".\n\n\nSetting Up the Machine Key Directly in the Web.config File\n\n\nIf you do not have access to the IIS management console, it is still possible to set-up a machine key for an Orchard application.\n\n\nTo do so, open the web.config file that is at the root of the Orchard web site. The machine key settings can be found or created under configuration/system.web:\n\n\n<configuration>\n  <system.web>\n    <machineKey decryptionKey=\"Decryption key goes here,IsolateApps\" \n                validationKey=\"Validation key goes here,IsolateApps\" />\n  </system.web>\n</configuration>\n\n\n\nTo create the keys that go into the placeholders above, you can use one of the available online generators, such as:\n\n\n\n\nhttp://www.eggheadcafe.com/articles/GenerateMachineKey/GenerateMachineKey.aspx\n\n\nhttp://www.betterbuilt.com/machinekey/\n\n\nhttp://www.codeproject.com/KB/aspnet/Machine_Key_Generator.aspx\n\n\nhttp://www.developerfusion.com/tools/generatemachinekey/",
            "title": "Setting Up a Machine Key"
        },
        {
            "location": "/Documentation/Setting-up-a-machine-key/#setting-up-the-machine-key-using-iis-manager",
            "text": "If you have access to the IIS management console for the server where Orchard is installed, it is the easiest way to set-up a machine key.  Start the management console and then select the web site. Open the machine key configuration:   The machine key control panel has the following settings:   Uncheck \"Automatically generate at runtime\" for both the validation key and the decryption key.  Click \"Generate Keys\" under \"Actions\" on the right side of the panel.  Click \"Apply\".",
            "title": "Setting Up the Machine Key Using IIS Manager"
        },
        {
            "location": "/Documentation/Setting-up-a-machine-key/#setting-up-the-machine-key-directly-in-the-webconfig-file",
            "text": "If you do not have access to the IIS management console, it is still possible to set-up a machine key for an Orchard application.  To do so, open the web.config file that is at the root of the Orchard web site. The machine key settings can be found or created under configuration/system.web:  <configuration>\n  <system.web>\n    <machineKey decryptionKey=\"Decryption key goes here,IsolateApps\" \n                validationKey=\"Validation key goes here,IsolateApps\" />\n  </system.web>\n</configuration>  To create the keys that go into the placeholders above, you can use one of the available online generators, such as:   http://www.eggheadcafe.com/articles/GenerateMachineKey/GenerateMachineKey.aspx  http://www.betterbuilt.com/machinekey/  http://www.codeproject.com/KB/aspnet/Machine_Key_Generator.aspx  http://www.developerfusion.com/tools/generatemachinekey/",
            "title": "Setting Up the Machine Key Directly in the Web.config File"
        },
        {
            "location": "/Documentation/First-steps-into-Orchard/",
            "text": "The goal of this article is to ease you into Orchard. There are so many concepts to understand that I think it is necessary to give a high level view of the whole thing before digging in. So, this article starts with a common ground that any web user should understand and progressively deepens while introducing relevant technical terms.\n\n\nWhen you finish reading this, you should have a good enough understanding to start playing with Orchard (as a designer/developer) without getting confused by its high level architecture and its terminology. When introduced, each new term is put in bold so that you make sure to understand it before moving forward.\n\n\nThis article also contains a lot of links to other pages with more specific explanation; so you can use it as a starting point. To answer some general questions about what Orchard is and where it comes from, read the \nFrequently Asked Questions\n. For a more technical presentation, read \nHow Orchard works\n.\n\n\nLooking at Orchard as...\n\n\nThe best way to introduce the basics of Orchard is to look at the roles that a user can have when access it: normal user (aka reader/visitor/guest), administrator, designer and developer.\n\n\nUser\n\n\nAs a \nuser\n, an Orchard website is just like any \nwebsite\n: It starts with a front page, from which you can access other pages by following links. Depending on what the website is about, the content will vary (can be static pages, blog, wiki, e-commerce, etc.)\n\n\nAdministrator\n\n\nThe \nadministrator\n has access to a few more aspects of the website:\n\n\n\n\n\n\nWhen \ninstalling Orchard\n, they will see the installation page. This step results in the creation of a database where all the content and settings of the website are stored.\n\n\n\n\n\n\n\n\nOf course, as users, they can see the front-end as well\n\n\n\n\n\n\nThey can open the \ndashboard\n (aka control panel/back-end) for two reasons:\n\n\n\n\nConfigure the website\n: Edit settings around the behavior and look of the website (or install/disable/upgrade them)\n\n\n\n\n\n\n\n\nEdit the content\n of the website\n\n\n\n\n\n\n\n\n\n\nCommand line\n: It is possible to script most admin stuff from the command line, making it easy to automate certain operations.\n\n\n\n\n\n\n\n\nDesigner\n\n\nThe \ndesigner\n can modify the \nlook of the website\n. He can edit the settings of an existing theme (if provided) or create one.\nA \ntheme\n is everything that plays in the visual representation of the website. It is sometimes called skin or template. It transforms the \ncontent\n (user-generated data) into HTML that can be displayed in a browser. Eg: When you write a blog post, the theme defines where and how to show the menu, title, body, comments, etc.\n\n\nDepending on how much customization is required, the designer may \nedit some or all elements of the theme\n. These elements are of the following types:\n\n\n\n\n\n\nDocuments defining the \nlayout\n and its zones: This is the overall representation of a page on the website (without any actual content). Eg: It says if the website should have one, two or three columns. So, a \nzone\n is a container that is part of the layout and ready to receive any content. Note that a flexible theme (like the one provided by Orchard) can adapt to hide empty zones. So, although Figure 6 shows a lot of zones, most of them will not be visible on actual pages because they aren't being used.\n\n\n\n\n\n\n\n\nViews\n: Visual representation of a specific content. A view is typically a file with the extension .CSHTML or .ASPX. It provides the HTML code to use when displaying a specific type of content. So, a page with many contents (menu, blog post, comments, etc) will be created by using the composition of all the relevant individual views.\n\n\n\n\n\n\n\n\nStylesheets\n, \nJavascript\n and Media files: They are used to modify the look defined in the views. They are files like \"Site.css\", jQuery or the images for background, borders and icons\n\n\n\n\n\n\nWidget\n: A web page typically presents one main content (like a blog post), but it often also has small pieces of information on the sides. Eg: a tag cloud, a list of recent posts, a twitter feed, etc\n\n\n\n\n\n\nLayers and the binding between content to specific zones: A \nlayer\n is like the description of a group of pages. Once defined, you can tell where to put each content (or widget). Eg: A layer grouping all the blog posts can be defined, then we can make a Tag cloud widget appear on the side.\n\n\n\n\n\n\n\n\nMore advanced themes may also include some programming code to further customize the look.\n\n\nDeveloper\n\n\nThe \ndeveloper\n has a complete insight of the architecture of Orchard and can extend it.\n\n\nOrchard is organized in modules. Each \nmodule\n provides a building block (aka add on/plugin) to the website with a high level distinct goal. For example, you can have:\n\n\n\n\n\n\nExtension module: Adds some (low-level) features that will benefit the website. Eg: Ability to \nsearch your content\n or to \nuse an external editor to write blog posts (like Live Writer)\n\n\n\n\n\n\nContent module: Adds everything (code and visual) required to view/edit some type of content (like blog posts)\n\n\n\n\n\n\nWidget module: Adds a small visual content that can be displayed on the side of existing content modules (like a Tag cloud next to a blog)\n\n\n\n\n\n\nElement module: Adds a small contained element for use in the Orchard.Layouts module, a core module that lets you design page layouts in the browser.\n\n\n\n\n\n\nTheme module: Changes the look of existing content modules (This is what the designer would typically create)\n\n\n\n\n\n\nAll the above: A module can have many extensions, content types, widgets and themes all in one package \n\n\n\n\n\n\nOrchard is designed to be highly extensible; this means that almost anything that you interact with can be extended, replaced or disabled.\nOut of the box, Orchard comes with a number of modules to provide a good user/administrator experience; but a designer/developer can change them or \ncreate more\n. It is also possible to \nshare your modules\n with the Orchard community and to \ninstall modules\n developed by others.\n\n\nOrchard comes with only one theme (called \"\nThe Theme Machine\n\"). However, it has enough zones to allow various arrangements. This is important because a site can only have one theme active at a time. This means the theme must be flexible enough to allow pages to have different layouts. If you are not satisfied, you can copy it and add more zones.\n\n\nThe Orchard Gallery\n contains a lot more themes and modules ready to install. Make sure to browse it to find out what extra features are available.\n\n\nContent\n\n\nIn order to fill your website, Orchard allows you to edit and display content. It comes with the ability to create pages and blog posts out of the box. But it also allows you to define your own content. This is important because you may want to have events or profiles or anything else that isn't supported out of the box. This section explains the various elements that plays into providing that capability.\n\n\n\n\n\n\nContent:\n Data that is typically displayed on the front-end website. I use this term as a generic way of calling anything that is user-generated.\n\n\n\n\n\n\nContent Type & Item\n: A \ncontent type\n is like a dynamic class; it defines a structure of data for a specific type of content. That structure can be changed, even by the administrator. A \ncontent item\n is an instance of content type. So, BlogPost can be a content type, and when you write one, that one is a content item.\n\n\n\n\n\n\nContent Part\n: Because many content types share many aspects; these aspects can be created independently and reused in each content type. That's what a content part is. Eg: A blog post can have comments; a photo can also have comments; so, instead of implementing the \"comments\" feature twice, we can create it as a content part and reuse it for both content types.\n\n\n\n\n\n\nContent Field\n: In the same spirit of reusability, we can have smaller types that must behave in a certain way. Eg: Most content types will need Date, phone number, email address, etc. They aren't simple properties since we can attach some behavior (like validation rules) but they aren't content parts either (too \"small\").\n\n\n\n\nRecord\n: In order to be able to save a content type/part (in a SQL database), it needs to be \"linked\" to a record. It is a class with all the properties that should be saved. Eg: A Map part must save its coordinates (Latitude & Longitude), so it will be linked to a record with these two properties; and Orchard will do the rest to load/save it. You will not have to deal with records unless you \ndevelop your own module\n. But it is useful to understand this concept in case you encounter it.\n\n\nRecord\n: In order to be able to save a content type/part (in a database), it needs to be \"linked\" to a record. It is a class with all the properties that should be saved. Eg: A Map part must save its coordinates (Latitude & Longitude), so it will be linked to a record with these two properties; and Orchard will do the rest to load/save it. You will not have to deal with records unless you \ndevelop your own module\n. But it is useful to understand this concept in case you encounter it.\n\n\n\n\nNote that a content type can only have one of each kind of content parts. But it can have many fields of the same kind. The reason is in the semantic meaning of these concepts. For example, a blog post can only have one commenting aspect and it can have many dates (creation date, last update date, etc.).\n\n\nSince Orchard is an \nopen source project\n, feel free to \ncontribute\n any feature/module you would like.\n\n\nConclusion\n\n\nWe are going to stop here. At this point, you should have a good understanding of what is Orchard. The next step is to get into a bit more details about modules, themes and the \nlow-level architecture of Orchard\n. This would be useful when you start learning \nhow to extend Orchard\n.",
            "title": "First Steps into Orchard"
        },
        {
            "location": "/Documentation/First-steps-into-Orchard/#looking-at-orchard-as",
            "text": "The best way to introduce the basics of Orchard is to look at the roles that a user can have when access it: normal user (aka reader/visitor/guest), administrator, designer and developer.",
            "title": "Looking at Orchard as..."
        },
        {
            "location": "/Documentation/First-steps-into-Orchard/#user",
            "text": "As a  user , an Orchard website is just like any  website : It starts with a front page, from which you can access other pages by following links. Depending on what the website is about, the content will vary (can be static pages, blog, wiki, e-commerce, etc.)",
            "title": "User"
        },
        {
            "location": "/Documentation/First-steps-into-Orchard/#administrator",
            "text": "The  administrator  has access to a few more aspects of the website:    When  installing Orchard , they will see the installation page. This step results in the creation of a database where all the content and settings of the website are stored.     Of course, as users, they can see the front-end as well    They can open the  dashboard  (aka control panel/back-end) for two reasons:   Configure the website : Edit settings around the behavior and look of the website (or install/disable/upgrade them)     Edit the content  of the website      Command line : It is possible to script most admin stuff from the command line, making it easy to automate certain operations.",
            "title": "Administrator"
        },
        {
            "location": "/Documentation/First-steps-into-Orchard/#designer",
            "text": "The  designer  can modify the  look of the website . He can edit the settings of an existing theme (if provided) or create one.\nA  theme  is everything that plays in the visual representation of the website. It is sometimes called skin or template. It transforms the  content  (user-generated data) into HTML that can be displayed in a browser. Eg: When you write a blog post, the theme defines where and how to show the menu, title, body, comments, etc.  Depending on how much customization is required, the designer may  edit some or all elements of the theme . These elements are of the following types:    Documents defining the  layout  and its zones: This is the overall representation of a page on the website (without any actual content). Eg: It says if the website should have one, two or three columns. So, a  zone  is a container that is part of the layout and ready to receive any content. Note that a flexible theme (like the one provided by Orchard) can adapt to hide empty zones. So, although Figure 6 shows a lot of zones, most of them will not be visible on actual pages because they aren't being used.     Views : Visual representation of a specific content. A view is typically a file with the extension .CSHTML or .ASPX. It provides the HTML code to use when displaying a specific type of content. So, a page with many contents (menu, blog post, comments, etc) will be created by using the composition of all the relevant individual views.     Stylesheets ,  Javascript  and Media files: They are used to modify the look defined in the views. They are files like \"Site.css\", jQuery or the images for background, borders and icons    Widget : A web page typically presents one main content (like a blog post), but it often also has small pieces of information on the sides. Eg: a tag cloud, a list of recent posts, a twitter feed, etc    Layers and the binding between content to specific zones: A  layer  is like the description of a group of pages. Once defined, you can tell where to put each content (or widget). Eg: A layer grouping all the blog posts can be defined, then we can make a Tag cloud widget appear on the side.     More advanced themes may also include some programming code to further customize the look.",
            "title": "Designer"
        },
        {
            "location": "/Documentation/First-steps-into-Orchard/#developer",
            "text": "The  developer  has a complete insight of the architecture of Orchard and can extend it.  Orchard is organized in modules. Each  module  provides a building block (aka add on/plugin) to the website with a high level distinct goal. For example, you can have:    Extension module: Adds some (low-level) features that will benefit the website. Eg: Ability to  search your content  or to  use an external editor to write blog posts (like Live Writer)    Content module: Adds everything (code and visual) required to view/edit some type of content (like blog posts)    Widget module: Adds a small visual content that can be displayed on the side of existing content modules (like a Tag cloud next to a blog)    Element module: Adds a small contained element for use in the Orchard.Layouts module, a core module that lets you design page layouts in the browser.    Theme module: Changes the look of existing content modules (This is what the designer would typically create)    All the above: A module can have many extensions, content types, widgets and themes all in one package     Orchard is designed to be highly extensible; this means that almost anything that you interact with can be extended, replaced or disabled.\nOut of the box, Orchard comes with a number of modules to provide a good user/administrator experience; but a designer/developer can change them or  create more . It is also possible to  share your modules  with the Orchard community and to  install modules  developed by others.  Orchard comes with only one theme (called \" The Theme Machine \"). However, it has enough zones to allow various arrangements. This is important because a site can only have one theme active at a time. This means the theme must be flexible enough to allow pages to have different layouts. If you are not satisfied, you can copy it and add more zones.  The Orchard Gallery  contains a lot more themes and modules ready to install. Make sure to browse it to find out what extra features are available.",
            "title": "Developer"
        },
        {
            "location": "/Documentation/First-steps-into-Orchard/#content",
            "text": "In order to fill your website, Orchard allows you to edit and display content. It comes with the ability to create pages and blog posts out of the box. But it also allows you to define your own content. This is important because you may want to have events or profiles or anything else that isn't supported out of the box. This section explains the various elements that plays into providing that capability.    Content:  Data that is typically displayed on the front-end website. I use this term as a generic way of calling anything that is user-generated.    Content Type & Item : A  content type  is like a dynamic class; it defines a structure of data for a specific type of content. That structure can be changed, even by the administrator. A  content item  is an instance of content type. So, BlogPost can be a content type, and when you write one, that one is a content item.    Content Part : Because many content types share many aspects; these aspects can be created independently and reused in each content type. That's what a content part is. Eg: A blog post can have comments; a photo can also have comments; so, instead of implementing the \"comments\" feature twice, we can create it as a content part and reuse it for both content types.    Content Field : In the same spirit of reusability, we can have smaller types that must behave in a certain way. Eg: Most content types will need Date, phone number, email address, etc. They aren't simple properties since we can attach some behavior (like validation rules) but they aren't content parts either (too \"small\").   Record : In order to be able to save a content type/part (in a SQL database), it needs to be \"linked\" to a record. It is a class with all the properties that should be saved. Eg: A Map part must save its coordinates (Latitude & Longitude), so it will be linked to a record with these two properties; and Orchard will do the rest to load/save it. You will not have to deal with records unless you  develop your own module . But it is useful to understand this concept in case you encounter it.  Record : In order to be able to save a content type/part (in a database), it needs to be \"linked\" to a record. It is a class with all the properties that should be saved. Eg: A Map part must save its coordinates (Latitude & Longitude), so it will be linked to a record with these two properties; and Orchard will do the rest to load/save it. You will not have to deal with records unless you  develop your own module . But it is useful to understand this concept in case you encounter it.   Note that a content type can only have one of each kind of content parts. But it can have many fields of the same kind. The reason is in the semantic meaning of these concepts. For example, a blog post can only have one commenting aspect and it can have many dates (creation date, last update date, etc.).  Since Orchard is an  open source project , feel free to  contribute  any feature/module you would like.",
            "title": "Content"
        },
        {
            "location": "/Documentation/First-steps-into-Orchard/#conclusion",
            "text": "We are going to stop here. At this point, you should have a good understanding of what is Orchard. The next step is to get into a bit more details about modules, themes and the  low-level architecture of Orchard . This would be useful when you start learning  how to extend Orchard .",
            "title": "Conclusion"
        },
        {
            "location": "/Documentation/How-Orchard-works/",
            "text": "Building a Web CMS (Content Management System) is unlike building a regular web application: it is more like building an application container. When designing such a system, it is necessary to build extensibility as a first-class feature. This can be a challenge as the very open type of architecture that's necessary to allow for great extensibility may compromise the usability of the application: everything in the system needs to be composable with unknown future modules, including at the user interface level. Orchestrating all those little parts that don't know about each other into a coherent whole is what Orchard is all about.\n\n\nThis document explains the architectural choices we made in Orchard and how they are solving that particular problem of getting both flexibility and a good user experience.\n\n\nArchitecture\n\n\n\n\n\n\nModules\n\n\n\nCore\n\n\n\nOrchard Framework\n\n\n\nASP.NET MVC\n\nNHibernate\n\nAutofac\n\nCastle\n\n\n\n.NET\n\nASP.NET\n\n\n\nIIS or Windows Azure\n\n\n\n\n\n\nOrchard Foundations\n\n\nThe Orchard CMS is built on existing frameworks and libraries. Here are a few of the most fundamental ones:\n\n\n\n\nASP.NET MVC\n: ASP.NET MVC is a modern Web development framework that encourages separation of concerns.\n\n\nNHibernate\n: NHibernate is an object-relational mapping tool. It handles the persistence of the Orchard content items to the database and considerably simplifies the data model by removing altogether the concern of persistence from module development. You can see examples of that by looking at the source code of any core content type, for example Pages.\n\n\nAutofac\n: Autofac is an \nIoC container\n. Orchard makes heavy use of dependency injection. Creating an injectable Orchard dependency is as simple as writing a class that implements IDependency or a more specialized interface that itself derives from IDependency (a marker interface), and consuming the dependency is as simple as taking a constructor parameter of the right type. The scope and lifetime of the injected dependency will be managed by the Orchard framework. You can see examples of that by looking at the source code for IAuthorizationService, RolesBasedAuthorizationService and XmlRpcHandler.\n\n\nCastle Dynamic Proxy\n: we use Castle for dynamic proxy generation.\n\n\n\n\nThe Orchard application and framework are built on top of these foundational frameworks as additional layers of abstraction. They are in many ways implementation details and no knowledge of NHibernate, Castle, or Autofac should be required to work with Orchard.\n\n\nOrchard Framework\n\n\nThe Orchard framework is the deepest layer of Orchard. It contains the engine of the application or at least the parts that couldn't be isolated into modules. Those are typically things that even the most fundamental modules will have to rely on. You can think of it as the base class library for Orchard.\n\n\nBooting Up Orchard\n\n\nWhen an Orchard web application spins up, an Orchard Host gets created. A host is a singleton at the app domain level.\n\n\nNext, the host will get the Shell for the current tenant using the ShellContextFactory. Tenants are instances of the application that are isolated as far as users can tell but that are running within the same appdomain, improving the site density. The shell is a singleton at the tenant level and could actually be said to represent the tenant. It's the object that will effectively provide the tenant-level isolation while keeping the module programming model agnostic about multi-tenancy.\n\n\nThe shell, once created, will get the list of available extensions from the ExtensionManager. Extensions are modules and themes. The default implementation is scanning the modules and themes directories for extensions.\n\n\nAt the same time, the shell will get the list of settings for the tenant from the ShellSettingsManager. The default implementation gets the settings from the appropriate subfolder of \nApp_Data\n but alternative implementations can get those from different places. For example, we have an Azure implementation that is using blob storage instead because \nApp_Data\n is not reliably writable in that environment.\n\n\nThe shell then gets the CompositionStrategy object and uses it to prepare the IoC container from the list of available extensions for the current host and from the settings for the current tenant. The result of this is not an IoC container for the shell, it is a ShellBlueprint, which is a list of dependency, controller and record blueprints.\n\n\nThe list of ShellSettings (that are per tenant) and the ShellBluePrint are then thrown into ShellContainerFactory.CreateContainer to get an ILifetimeScope, which is basically enabling the IoC container to be scoped at the tenant level so that modules can get injected dependencies that are scoped for the current tenant without having to do anything specific.\n\n\nDependency Injection\n\n\nThe standard way of creating injectable dependencies in Orchard is to create an interface that derives from IDependency or one of its derived interfaces and then to implement that interface. On the consuming side, you can take a parameter of the interface type in your constructor. The application framework will discover all dependencies and will take care of instantiating and injecting instances as needed.\n\n\nThere are three different possible scopes for dependencies, and choosing one is done by deriving from the right interface:\n\n\n\n\nRequest: a dependency instance is created for each new HTTP request and is destroyed once the request has been processed. Use this by deriving your interface from IDependency. The object should be reasonably cheap to create.\n\n\nObject: a new instance is created every single time an object takes a dependency on the interface. Instances are never shared. Use this by deriving from ITransientDependency. The objects must be extremely cheap to create.\n\n\nShell: only one instance is created per shell/tenant. Use this by deriving from ISingletonDependency. Only use this for objects that must maintain a common state for the lifetime of the shell.\n\n\n\n\nReplacing Existing Dependencies\n\n\nIt is possible to replace existing dependencies by decorating your class with the OrchardSuppressDependency attribute, that takes the fully-qualified type name to replace as an argument.\n\n\nOrdering Dependencies\n\n\nSome dependencies are not unique but rather are parts of a list. For example, handlers are all active at the same time. In some cases you will want to modify the order in which such dependencies get consumed. This can be done by modifying the manifest for the module, using the Priority property of the feature. Here is an example of this:\n\n\nFeatures:\n    Orchard.Widgets.PageLayerHinting:\n        Name: Page Layer Hinting\n        Description: ...\n        Dependencies: Orchard.Widgets\n        Category: Widget\n        Priority: -1\n\n\n\nASP.NET MVC\n\n\nOrchard is built on ASP.NET MVC but in order to add things like theming and tenant isolation, it needs to introduce an additional layer of indirection that will present on the ASP.NET MVC side the concepts that it expects and that will on the Orchard side split things on the level of Orchard concepts.\n\n\nFor example, when a specific view is requested, our LayoutAwareViewEngine kicks in. Strictly speaking, it's not a new view engine as it is not concerned with actual rendering, but it contains the logic to find the right view depending on the current theme and then it delegates the rendering work to actual view engines.\n\n\nSimilarly, we have route providers, model binders and controller factories whose work is to act as a single entry point for ASP.NET MVC and to dispatch the calls to the properly scoped objects underneath.\n\n\nIn the case of routes, we can have n providers of routes (typically coming from modules) and one route publisher that will be what talks to ASP.NET MVC. The same thing goes for model binders and controller factories.\n\n\nContent Type System\n\n\nContents in Orchard are managed under an actual type system that is in some ways richer and more dynamic than the underlying .NET type system, in order to provide the flexibility that is necessary in a Web CMS: types must be composed on the fly at runtime and reflect the concerns of content management.\n\n\nTypes, Parts, and Fields\n\n\nOrchard can handle arbitrary content types, including some that are dynamically created by the site administrator in a code-free manner. Those content types are aggregations of content parts that each deal with a particular concern. The reason for that is that many concerns span more than one content type.\n\n\nFor example, a blog post, a product and a video clip might all have a routable address, comments and tags. For that reason, the routable address, comments and tags are each treated in Orchard as a separate content part. This way, the comment management module can be developed only once and apply to arbitrary content types, including those that the author of the commenting module did not know about.\n\n\nParts themselves can have properties and content fields. Content fields are also reusable in the same way that parts are: a specific field type will be typically used by several part and content types. The difference between parts and fields resides in the scale at which they operate and in their semantics.\n\n\nFields are a finer grain than parts. For example, a field type might describe a phone number or a coordinate, whereas a part would typically describe a whole concern such as commenting or tagging.\n\n\nBut the important difference here is semantics: you want to write a part if it implements an \"is a\" relationship, and you would write a field if it implements a \"has a\" relationship.\n\n\nFor example, a shirt \nis a\n product and it \nhas a\n SKU and a price. You wouldn't say that a shirt has a product or that a shirt is a price or a SKU.\n\n\nFrom that you know that the Shirt content type will be made of a Product part, and that the Product part will be made from a Money field named \"price\" and a String field named SKU.\n\n\nAnother difference is that you have only one part of a given type per content type, which makes sense in light of the \"is a\" relationship, whereas a part can have any number of fields of a given type. Another way of saying that is that fields on a part are a dictionary of strings to values of the field's type, whereas the content type is a list of part types (without names).\n\n\nThis gives another way of choosing between part and field: if you think people would want more than one instance of your object per content type, it needs to be a field.\n\n\nAnatomy of a Content Type\n\n\nA content type, as we've seen, is built from content parts. Content parts, code-wise, are typically associated with:\n\n\n\n\na Record, which is a POCO representation of the part's data\n\n\na model class that is the actual part and that derives from \nContentPart<T>\n where T is the record type\n\n\na repository. The repository does not need to be implemented by the module author as Orchard will be able to just use a generic one.\n\n\nhandlers. Handlers implement IContentHandler and are a set of event handlers such as OnCreated or OnSaved. Basically, they hook onto the content item's lifecycle to perform a number of tasks. They can also participate in the actual composition of the content items from their constructors. There is a Filters collection on the base ContentHandler that enable the handler to add common behavior to the content type.\n\nFor example, Orchard provides a StorageFilter that makes it very easy to declare how persistence of a content part should be handled: just do \nFilters.Add(StorageFilter.For(myPartRepository));\n and Orchard will take care of persisting to the database the data from myPartRepository.\n\nAnother example of a filter is the ActivatingFilter that is in charge of doing the actual welding of parts onto a type: calling \nFilters.Add(new ActivatingFilter<BodyAspect>(BlogPostDriver.ContentType.Name));\n adds the body content part to blog posts.\n\n\ndrivers. Drivers are friendlier, more specialized handlers (and as a consequence less flexible) and are associated with a specific content part type (they derive from \nContentPartDriver<T>\n where T is a content part type). Handlers on the other hand do not have to be specific to a content part type. Drivers can be seen as controllers for a specific part. They typically build shapes to be rendered by the theme engine.\n\n\n\n\nContent Manager\n\n\nAll contents are accessed in Orchard through the ContentManager object, which is how it becomes possible to use contents of a type you don't know in advance.\n\n\nContentManager has methods to query the content store, to version contents and to manage their publication status.\n\n\nTransactions\n\n\nOrchard is automatically creating a transaction for each HTTP request. That means that all operations that happen during a request are part of an \"ambient\" transaction. If code during that request aborts that transaction, all data operations will be rolled back. If the transaction is never explicitly cancelled on the other hand, all operations get committed at the end of the request without an explicit commit.\n\n\nRequest Lifecycle\n\n\nIn this section, we'll take the example of a request for a specific blog post.\n\n\nWhen a request comes in for a specific blog post, the application first looks at the available routes that have been contributed by the various modules and finds the blog module's matching route. The route can then resolve the request to the blog post controller's item action, which will look up the post from the content manager. The action then gets a Page Object Model (POM) from the content manager (by calling BuildDisplay) based on the main object for that request, the post that was retrieved from the content manager.\n\n\nA blog post has its own controller, but that is not the case for all content types. For example, dynamic content types will be served by the more generic ItemController from the Core Routable part. The Display action of the ItemController does almost the same thing that the blog post controller was doing: it gets the content item from the content manager by slug and then builds the POM from the results.\n\n\nThe layout view engine will then resolve the right view depending on the current theme and using the model's type together with Orchard conventions on view naming.\n\n\nWithin the view, more dynamic shape creation can happen, such as zone definitions.\n\n\nThe actual rendering is done by the theme engine that is going to find the right template or shape method to render each of the shapes it encounters in the POM, in order of appearance and recursively.\n\n\nWidgets\n\n\nWidgets are content types that have the Widget content part and the widget stereotype. Like any other content types, they are composed of parts and fields. That means that they can be edited using the same edition and rendering logic as other content types. They also share the same building blocks, which means that any existing content part can potentially be reused as part of a widget almost for free.\n\n\nWidgets are added to pages through widget layers. Layers are sets of widgets. They have a name, a rule that determines what pages of the site they should appear on, and a list of widgets and associated zone placement and ordering, and settings.\n\n\nThe rules attached to each of the layers are expressed with IronRuby expressions. Those expressions can use any of the IRuleProvider implementations in the application. Orchard ships with two out of the box implementations: url and authenticated.\n\n\nSite Settings\n\n\nA site in Orchard is a content item, which makes it possible for modules to weld additional parts. This is how modules can contribute site settings.\n\n\nSite settings are per tenant.\n\n\nEvent Bus\n\n\nOrchard and its modules expose extensibility points by creating interfaces for dependencies, implementations of which can then get injected.\n\n\nPlugging into an extensibility point is done either by implementing its interface, or by implementing an interface that has the same name and the same methods. In other words, Orchard does not require strictly strongly typed interface correspondence, which enables plug-ins to extend an extensibility point without taking a dependency on the assembly where it's defined.\n\n\nThis is just one implementation of the Orchard event bus. When an extensibility point calls into injected implementations, a message gets published on the event bus. One of the objects listening to the event bus dispatches the messages to the methods in classes that derive from an interface appropriately named.\n\n\nCommands\n\n\nMany actions on an Orchard site can be performed from the command line as well as from the admin UI. These commands are exposed by the methods of classes implementing ICommandHandler that are decorated with a CommandName attribute.\n\n\nThe Orchard command line tool discovers available commands at runtime by simulating the web site environment and inspecting the assemblies using reflection. The environment in which the commands run is as close as possible to the actual running site.\n\n\nSearch and Indexing\n\n\nSearch and indexing are implemented using Lucene by default, although that default implementation could be replaced with another indexing engine.\n\n\nCaching\n\n\nThe cache in Orchard relies on the ASP.NET cache, but we expose a helper API that can be used through a dependency of type ICache, by calling the Get method. Get takes a key and a function that can be used to generate the cache entry's value if the cache doesn't already contains the requested entry.\n\n\nThe main advantage of using the Orchard API for caching is that it works per tenant transparently.\n\n\nFile Systems\n\n\nThe file system in Orchard is abstracted so that storage can be directed to the physical file system or to an alternate storage such as Azure blob storage, depending on the environment. The Media module is an example of a module that uses that abstracted file system.\n\n\nUsers and Roles\n\n\nUsers in Orchard are content items (albeit not routable ones) which makes it easy for a profile module for example to extend them with additional fields.\nRoles are a content part that gets welded onto users.\n\n\nPermissions\n\n\nEvery module can expose a set of permissions as well as how those permissions should be granted by default to Orchard's default roles.\n\n\nTasks\n\n\nModules can schedule tasks by calling CreateTask on a dependency of type IScheduledTaskManager. The task can then be executed by implementing IScheduledTaskHandler. The Process method can examine the task type name and decide whether to handle it.\n\n\nTasks are being run on a separate thread that comes from the ASP.NET thread pool.\n\n\nNotifications\n\n\nModules can surface messages to the admin UI by getting a dependency on INotifier and calling one of its methods. Multiple notifications can be created as part of any request.\n\n\nLocalization\n\n\nLocalization of the application and its modules is done by wrapping string resources in a call to the T method: \n@T(\"This string can be localized\")\n. See \nUsing the localization helpers\n for more details and guidelines. Orchard's resource manager can load localized resource strings from PO files located in specific places in the application.\n\n\nContent item localization is done through a different mechanism: localized versions of a content item are physically separate content items that are linked together by a special part.\n\n\nThe current culture to use is determined by the culture manager. The default implementation returns the culture that has been configured in site settings, but an alternate implementation could get it from the user profile or from the browser's settings.\n\n\nLogging\n\n\nLogging is done through a dependency of type ILogger. Different implementations can send the log entries to various storage types. Orchard comes with an implementation that uses \nCastle.Core.Logging\n for logging.\n\n\nOrchard Core\n\n\nThe Orchard.Core assembly contains a set of modules that are necessary for Orchard to run. Other modules can safely take dependencies on these modules that will always be available.\n\n\nExamples of core modules are feeds, navigation or routable.\n\n\nModules\n\n\nThe default distribution of Orchard comes with a number of built-in modules such as blogging or pages, but third party modules are being built as well.\n\n\nA module is just an ASP.NET MVC area with a manifest.txt file that is extending Orchard.\n\n\nA module typically contains event handlers, content types and their default rendering templates as well as some admin UI.\n\n\nModules can be dynamically compiled from source code every time a change is made to their csproj file or to one of the files that the csproj file references. This enables a \"notepad\" style of development that does no require explicit compilation by the developer or even the use of an IDE such as Visual Studio.\n\n\nModules must be placed in the Modules folder (Orchard.Web/Modules/MyModule) and the folder name \nmust\n match the name of the compiled DLL produced by the project.  So, if you have a custom module project called My.Custom.Module.csproj and it compiles to My.Custom.Module.dll, then the module root folder must be named My.Custom.Module. [~/Modules/My.Custom.Module/]\n\n\nThemes\n\n\nIt is a basic design principle in Orchard that all the HTML that it produces can be replaced from themes, including markup produced by modules. Conventions define what files must go where in the theme's file hierarchy.\n\n\nThe whole rendering mechanism in Orchard is based on shapes. The theme engine's job is to find the current theme and given that theme determine what the best way to render each shape is. Each shape can have a default rendering that may be defined by a module as a template in the views folder or as a shape method in code. That default rendering may be overridden by the current theme. The theme does that by having its own version of a template for that shape or its own shape method for that shape.\n\n\nThemes can have a parent, which enables child themes to be specializations or adaptations of a parent theme. Orchard comes with a base theme called the Theme Machine that has been designed to make it easy to use as a parent theme.\n\n\nThemes can contain code in much the same way modules do: they can have their own csproj file and benefit from dynamic compilation. This enables themes to define shape methods, but also to expose admin UI for any settings they may have.\n\n\nThe selection of the current theme is done by classes implementing IThemeSelector, which return a theme name and a priority for any request. This allows many selectors to contribute to the choice of the theme. Orchard comes with four implementations of IThemeSelector:\n\n\n\n\nSiteThemeSelector selects the theme that is currently configured for the tenant or site with a low priority.\n\n\nAdminThemeSelector takes over and returns the admin theme with a high priority whenever the current URL is an admin URL.\n\n\nPreviewThemeSelector overrides the site's current theme with the theme being previewed if the current user is the one that initiated the theme preview.\n\n\nSafeModeThemeSelector is the only selector available when the application is in \"safe mode\", which happens typically during setup. It has a very low priority.\n\n\n\n\nAn example of a theme selector might be one that promotes a mobile theme when the user agent is recognized to belong to a mobile device.",
            "title": "How Orchard Works"
        },
        {
            "location": "/Documentation/How-Orchard-works/#architecture",
            "text": "Modules  Core  Orchard Framework  ASP.NET MVC NHibernate Autofac Castle  .NET ASP.NET  IIS or Windows Azure",
            "title": "Architecture"
        },
        {
            "location": "/Documentation/How-Orchard-works/#orchard-foundations",
            "text": "The Orchard CMS is built on existing frameworks and libraries. Here are a few of the most fundamental ones:   ASP.NET MVC : ASP.NET MVC is a modern Web development framework that encourages separation of concerns.  NHibernate : NHibernate is an object-relational mapping tool. It handles the persistence of the Orchard content items to the database and considerably simplifies the data model by removing altogether the concern of persistence from module development. You can see examples of that by looking at the source code of any core content type, for example Pages.  Autofac : Autofac is an  IoC container . Orchard makes heavy use of dependency injection. Creating an injectable Orchard dependency is as simple as writing a class that implements IDependency or a more specialized interface that itself derives from IDependency (a marker interface), and consuming the dependency is as simple as taking a constructor parameter of the right type. The scope and lifetime of the injected dependency will be managed by the Orchard framework. You can see examples of that by looking at the source code for IAuthorizationService, RolesBasedAuthorizationService and XmlRpcHandler.  Castle Dynamic Proxy : we use Castle for dynamic proxy generation.   The Orchard application and framework are built on top of these foundational frameworks as additional layers of abstraction. They are in many ways implementation details and no knowledge of NHibernate, Castle, or Autofac should be required to work with Orchard.",
            "title": "Orchard Foundations"
        },
        {
            "location": "/Documentation/How-Orchard-works/#orchard-framework",
            "text": "The Orchard framework is the deepest layer of Orchard. It contains the engine of the application or at least the parts that couldn't be isolated into modules. Those are typically things that even the most fundamental modules will have to rely on. You can think of it as the base class library for Orchard.",
            "title": "Orchard Framework"
        },
        {
            "location": "/Documentation/How-Orchard-works/#booting-up-orchard",
            "text": "When an Orchard web application spins up, an Orchard Host gets created. A host is a singleton at the app domain level.  Next, the host will get the Shell for the current tenant using the ShellContextFactory. Tenants are instances of the application that are isolated as far as users can tell but that are running within the same appdomain, improving the site density. The shell is a singleton at the tenant level and could actually be said to represent the tenant. It's the object that will effectively provide the tenant-level isolation while keeping the module programming model agnostic about multi-tenancy.  The shell, once created, will get the list of available extensions from the ExtensionManager. Extensions are modules and themes. The default implementation is scanning the modules and themes directories for extensions.  At the same time, the shell will get the list of settings for the tenant from the ShellSettingsManager. The default implementation gets the settings from the appropriate subfolder of  App_Data  but alternative implementations can get those from different places. For example, we have an Azure implementation that is using blob storage instead because  App_Data  is not reliably writable in that environment.  The shell then gets the CompositionStrategy object and uses it to prepare the IoC container from the list of available extensions for the current host and from the settings for the current tenant. The result of this is not an IoC container for the shell, it is a ShellBlueprint, which is a list of dependency, controller and record blueprints.  The list of ShellSettings (that are per tenant) and the ShellBluePrint are then thrown into ShellContainerFactory.CreateContainer to get an ILifetimeScope, which is basically enabling the IoC container to be scoped at the tenant level so that modules can get injected dependencies that are scoped for the current tenant without having to do anything specific.",
            "title": "Booting Up Orchard"
        },
        {
            "location": "/Documentation/How-Orchard-works/#dependency-injection",
            "text": "The standard way of creating injectable dependencies in Orchard is to create an interface that derives from IDependency or one of its derived interfaces and then to implement that interface. On the consuming side, you can take a parameter of the interface type in your constructor. The application framework will discover all dependencies and will take care of instantiating and injecting instances as needed.  There are three different possible scopes for dependencies, and choosing one is done by deriving from the right interface:   Request: a dependency instance is created for each new HTTP request and is destroyed once the request has been processed. Use this by deriving your interface from IDependency. The object should be reasonably cheap to create.  Object: a new instance is created every single time an object takes a dependency on the interface. Instances are never shared. Use this by deriving from ITransientDependency. The objects must be extremely cheap to create.  Shell: only one instance is created per shell/tenant. Use this by deriving from ISingletonDependency. Only use this for objects that must maintain a common state for the lifetime of the shell.",
            "title": "Dependency Injection"
        },
        {
            "location": "/Documentation/How-Orchard-works/#replacing-existing-dependencies",
            "text": "It is possible to replace existing dependencies by decorating your class with the OrchardSuppressDependency attribute, that takes the fully-qualified type name to replace as an argument.",
            "title": "Replacing Existing Dependencies"
        },
        {
            "location": "/Documentation/How-Orchard-works/#ordering-dependencies",
            "text": "Some dependencies are not unique but rather are parts of a list. For example, handlers are all active at the same time. In some cases you will want to modify the order in which such dependencies get consumed. This can be done by modifying the manifest for the module, using the Priority property of the feature. Here is an example of this:  Features:\n    Orchard.Widgets.PageLayerHinting:\n        Name: Page Layer Hinting\n        Description: ...\n        Dependencies: Orchard.Widgets\n        Category: Widget\n        Priority: -1",
            "title": "Ordering Dependencies"
        },
        {
            "location": "/Documentation/How-Orchard-works/#aspnet-mvc",
            "text": "Orchard is built on ASP.NET MVC but in order to add things like theming and tenant isolation, it needs to introduce an additional layer of indirection that will present on the ASP.NET MVC side the concepts that it expects and that will on the Orchard side split things on the level of Orchard concepts.  For example, when a specific view is requested, our LayoutAwareViewEngine kicks in. Strictly speaking, it's not a new view engine as it is not concerned with actual rendering, but it contains the logic to find the right view depending on the current theme and then it delegates the rendering work to actual view engines.  Similarly, we have route providers, model binders and controller factories whose work is to act as a single entry point for ASP.NET MVC and to dispatch the calls to the properly scoped objects underneath.  In the case of routes, we can have n providers of routes (typically coming from modules) and one route publisher that will be what talks to ASP.NET MVC. The same thing goes for model binders and controller factories.",
            "title": "ASP.NET MVC"
        },
        {
            "location": "/Documentation/How-Orchard-works/#content-type-system",
            "text": "Contents in Orchard are managed under an actual type system that is in some ways richer and more dynamic than the underlying .NET type system, in order to provide the flexibility that is necessary in a Web CMS: types must be composed on the fly at runtime and reflect the concerns of content management.",
            "title": "Content Type System"
        },
        {
            "location": "/Documentation/How-Orchard-works/#types-parts-and-fields",
            "text": "Orchard can handle arbitrary content types, including some that are dynamically created by the site administrator in a code-free manner. Those content types are aggregations of content parts that each deal with a particular concern. The reason for that is that many concerns span more than one content type.  For example, a blog post, a product and a video clip might all have a routable address, comments and tags. For that reason, the routable address, comments and tags are each treated in Orchard as a separate content part. This way, the comment management module can be developed only once and apply to arbitrary content types, including those that the author of the commenting module did not know about.  Parts themselves can have properties and content fields. Content fields are also reusable in the same way that parts are: a specific field type will be typically used by several part and content types. The difference between parts and fields resides in the scale at which they operate and in their semantics.  Fields are a finer grain than parts. For example, a field type might describe a phone number or a coordinate, whereas a part would typically describe a whole concern such as commenting or tagging.  But the important difference here is semantics: you want to write a part if it implements an \"is a\" relationship, and you would write a field if it implements a \"has a\" relationship.  For example, a shirt  is a  product and it  has a  SKU and a price. You wouldn't say that a shirt has a product or that a shirt is a price or a SKU.  From that you know that the Shirt content type will be made of a Product part, and that the Product part will be made from a Money field named \"price\" and a String field named SKU.  Another difference is that you have only one part of a given type per content type, which makes sense in light of the \"is a\" relationship, whereas a part can have any number of fields of a given type. Another way of saying that is that fields on a part are a dictionary of strings to values of the field's type, whereas the content type is a list of part types (without names).  This gives another way of choosing between part and field: if you think people would want more than one instance of your object per content type, it needs to be a field.",
            "title": "Types, Parts, and Fields"
        },
        {
            "location": "/Documentation/How-Orchard-works/#anatomy-of-a-content-type",
            "text": "A content type, as we've seen, is built from content parts. Content parts, code-wise, are typically associated with:   a Record, which is a POCO representation of the part's data  a model class that is the actual part and that derives from  ContentPart<T>  where T is the record type  a repository. The repository does not need to be implemented by the module author as Orchard will be able to just use a generic one.  handlers. Handlers implement IContentHandler and are a set of event handlers such as OnCreated or OnSaved. Basically, they hook onto the content item's lifecycle to perform a number of tasks. They can also participate in the actual composition of the content items from their constructors. There is a Filters collection on the base ContentHandler that enable the handler to add common behavior to the content type. \nFor example, Orchard provides a StorageFilter that makes it very easy to declare how persistence of a content part should be handled: just do  Filters.Add(StorageFilter.For(myPartRepository));  and Orchard will take care of persisting to the database the data from myPartRepository. \nAnother example of a filter is the ActivatingFilter that is in charge of doing the actual welding of parts onto a type: calling  Filters.Add(new ActivatingFilter<BodyAspect>(BlogPostDriver.ContentType.Name));  adds the body content part to blog posts.  drivers. Drivers are friendlier, more specialized handlers (and as a consequence less flexible) and are associated with a specific content part type (they derive from  ContentPartDriver<T>  where T is a content part type). Handlers on the other hand do not have to be specific to a content part type. Drivers can be seen as controllers for a specific part. They typically build shapes to be rendered by the theme engine.",
            "title": "Anatomy of a Content Type"
        },
        {
            "location": "/Documentation/How-Orchard-works/#content-manager",
            "text": "All contents are accessed in Orchard through the ContentManager object, which is how it becomes possible to use contents of a type you don't know in advance.  ContentManager has methods to query the content store, to version contents and to manage their publication status.",
            "title": "Content Manager"
        },
        {
            "location": "/Documentation/How-Orchard-works/#transactions",
            "text": "Orchard is automatically creating a transaction for each HTTP request. That means that all operations that happen during a request are part of an \"ambient\" transaction. If code during that request aborts that transaction, all data operations will be rolled back. If the transaction is never explicitly cancelled on the other hand, all operations get committed at the end of the request without an explicit commit.",
            "title": "Transactions"
        },
        {
            "location": "/Documentation/How-Orchard-works/#request-lifecycle",
            "text": "In this section, we'll take the example of a request for a specific blog post.  When a request comes in for a specific blog post, the application first looks at the available routes that have been contributed by the various modules and finds the blog module's matching route. The route can then resolve the request to the blog post controller's item action, which will look up the post from the content manager. The action then gets a Page Object Model (POM) from the content manager (by calling BuildDisplay) based on the main object for that request, the post that was retrieved from the content manager.  A blog post has its own controller, but that is not the case for all content types. For example, dynamic content types will be served by the more generic ItemController from the Core Routable part. The Display action of the ItemController does almost the same thing that the blog post controller was doing: it gets the content item from the content manager by slug and then builds the POM from the results.  The layout view engine will then resolve the right view depending on the current theme and using the model's type together with Orchard conventions on view naming.  Within the view, more dynamic shape creation can happen, such as zone definitions.  The actual rendering is done by the theme engine that is going to find the right template or shape method to render each of the shapes it encounters in the POM, in order of appearance and recursively.",
            "title": "Request Lifecycle"
        },
        {
            "location": "/Documentation/How-Orchard-works/#widgets",
            "text": "Widgets are content types that have the Widget content part and the widget stereotype. Like any other content types, they are composed of parts and fields. That means that they can be edited using the same edition and rendering logic as other content types. They also share the same building blocks, which means that any existing content part can potentially be reused as part of a widget almost for free.  Widgets are added to pages through widget layers. Layers are sets of widgets. They have a name, a rule that determines what pages of the site they should appear on, and a list of widgets and associated zone placement and ordering, and settings.  The rules attached to each of the layers are expressed with IronRuby expressions. Those expressions can use any of the IRuleProvider implementations in the application. Orchard ships with two out of the box implementations: url and authenticated.",
            "title": "Widgets"
        },
        {
            "location": "/Documentation/How-Orchard-works/#site-settings",
            "text": "A site in Orchard is a content item, which makes it possible for modules to weld additional parts. This is how modules can contribute site settings.  Site settings are per tenant.",
            "title": "Site Settings"
        },
        {
            "location": "/Documentation/How-Orchard-works/#event-bus",
            "text": "Orchard and its modules expose extensibility points by creating interfaces for dependencies, implementations of which can then get injected.  Plugging into an extensibility point is done either by implementing its interface, or by implementing an interface that has the same name and the same methods. In other words, Orchard does not require strictly strongly typed interface correspondence, which enables plug-ins to extend an extensibility point without taking a dependency on the assembly where it's defined.  This is just one implementation of the Orchard event bus. When an extensibility point calls into injected implementations, a message gets published on the event bus. One of the objects listening to the event bus dispatches the messages to the methods in classes that derive from an interface appropriately named.",
            "title": "Event Bus"
        },
        {
            "location": "/Documentation/How-Orchard-works/#commands",
            "text": "Many actions on an Orchard site can be performed from the command line as well as from the admin UI. These commands are exposed by the methods of classes implementing ICommandHandler that are decorated with a CommandName attribute.  The Orchard command line tool discovers available commands at runtime by simulating the web site environment and inspecting the assemblies using reflection. The environment in which the commands run is as close as possible to the actual running site.",
            "title": "Commands"
        },
        {
            "location": "/Documentation/How-Orchard-works/#search-and-indexing",
            "text": "Search and indexing are implemented using Lucene by default, although that default implementation could be replaced with another indexing engine.",
            "title": "Search and Indexing"
        },
        {
            "location": "/Documentation/How-Orchard-works/#caching",
            "text": "The cache in Orchard relies on the ASP.NET cache, but we expose a helper API that can be used through a dependency of type ICache, by calling the Get method. Get takes a key and a function that can be used to generate the cache entry's value if the cache doesn't already contains the requested entry.  The main advantage of using the Orchard API for caching is that it works per tenant transparently.",
            "title": "Caching"
        },
        {
            "location": "/Documentation/How-Orchard-works/#file-systems",
            "text": "The file system in Orchard is abstracted so that storage can be directed to the physical file system or to an alternate storage such as Azure blob storage, depending on the environment. The Media module is an example of a module that uses that abstracted file system.",
            "title": "File Systems"
        },
        {
            "location": "/Documentation/How-Orchard-works/#users-and-roles",
            "text": "Users in Orchard are content items (albeit not routable ones) which makes it easy for a profile module for example to extend them with additional fields.\nRoles are a content part that gets welded onto users.",
            "title": "Users and Roles"
        },
        {
            "location": "/Documentation/How-Orchard-works/#permissions",
            "text": "Every module can expose a set of permissions as well as how those permissions should be granted by default to Orchard's default roles.",
            "title": "Permissions"
        },
        {
            "location": "/Documentation/How-Orchard-works/#tasks",
            "text": "Modules can schedule tasks by calling CreateTask on a dependency of type IScheduledTaskManager. The task can then be executed by implementing IScheduledTaskHandler. The Process method can examine the task type name and decide whether to handle it.  Tasks are being run on a separate thread that comes from the ASP.NET thread pool.",
            "title": "Tasks"
        },
        {
            "location": "/Documentation/How-Orchard-works/#notifications",
            "text": "Modules can surface messages to the admin UI by getting a dependency on INotifier and calling one of its methods. Multiple notifications can be created as part of any request.",
            "title": "Notifications"
        },
        {
            "location": "/Documentation/How-Orchard-works/#localization",
            "text": "Localization of the application and its modules is done by wrapping string resources in a call to the T method:  @T(\"This string can be localized\") . See  Using the localization helpers  for more details and guidelines. Orchard's resource manager can load localized resource strings from PO files located in specific places in the application.  Content item localization is done through a different mechanism: localized versions of a content item are physically separate content items that are linked together by a special part.  The current culture to use is determined by the culture manager. The default implementation returns the culture that has been configured in site settings, but an alternate implementation could get it from the user profile or from the browser's settings.",
            "title": "Localization"
        },
        {
            "location": "/Documentation/How-Orchard-works/#logging",
            "text": "Logging is done through a dependency of type ILogger. Different implementations can send the log entries to various storage types. Orchard comes with an implementation that uses  Castle.Core.Logging  for logging.",
            "title": "Logging"
        },
        {
            "location": "/Documentation/How-Orchard-works/#orchard-core",
            "text": "The Orchard.Core assembly contains a set of modules that are necessary for Orchard to run. Other modules can safely take dependencies on these modules that will always be available.  Examples of core modules are feeds, navigation or routable.",
            "title": "Orchard Core"
        },
        {
            "location": "/Documentation/How-Orchard-works/#modules",
            "text": "The default distribution of Orchard comes with a number of built-in modules such as blogging or pages, but third party modules are being built as well.  A module is just an ASP.NET MVC area with a manifest.txt file that is extending Orchard.  A module typically contains event handlers, content types and their default rendering templates as well as some admin UI.  Modules can be dynamically compiled from source code every time a change is made to their csproj file or to one of the files that the csproj file references. This enables a \"notepad\" style of development that does no require explicit compilation by the developer or even the use of an IDE such as Visual Studio.  Modules must be placed in the Modules folder (Orchard.Web/Modules/MyModule) and the folder name  must  match the name of the compiled DLL produced by the project.  So, if you have a custom module project called My.Custom.Module.csproj and it compiles to My.Custom.Module.dll, then the module root folder must be named My.Custom.Module. [~/Modules/My.Custom.Module/]",
            "title": "Modules"
        },
        {
            "location": "/Documentation/How-Orchard-works/#themes",
            "text": "It is a basic design principle in Orchard that all the HTML that it produces can be replaced from themes, including markup produced by modules. Conventions define what files must go where in the theme's file hierarchy.  The whole rendering mechanism in Orchard is based on shapes. The theme engine's job is to find the current theme and given that theme determine what the best way to render each shape is. Each shape can have a default rendering that may be defined by a module as a template in the views folder or as a shape method in code. That default rendering may be overridden by the current theme. The theme does that by having its own version of a template for that shape or its own shape method for that shape.  Themes can have a parent, which enables child themes to be specializations or adaptations of a parent theme. Orchard comes with a base theme called the Theme Machine that has been designed to make it easy to use as a parent theme.  Themes can contain code in much the same way modules do: they can have their own csproj file and benefit from dynamic compilation. This enables themes to define shape methods, but also to expose admin UI for any settings they may have.  The selection of the current theme is done by classes implementing IThemeSelector, which return a theme name and a priority for any request. This allows many selectors to contribute to the choice of the theme. Orchard comes with four implementations of IThemeSelector:   SiteThemeSelector selects the theme that is currently configured for the tenant or site with a low priority.  AdminThemeSelector takes over and returns the admin theme with a high priority whenever the current URL is an admin URL.  PreviewThemeSelector overrides the site's current theme with the theme being previewed if the current user is the one that initiated the theme preview.  SafeModeThemeSelector is the only selector available when the application is in \"safe mode\", which happens typically during setup. It has a very low priority.   An example of a theme selector might be one that promotes a mobile theme when the user agent is recognized to belong to a mobile device.",
            "title": "Themes"
        },
        {
            "location": "/Documentation/Command-line-scaffolding/",
            "text": "Code generation is an Orchard module that automates the task of creating additional files and extensions. This feature is useful for developers that want to create controllers, data migration classes, modules, and themes. The code generation feature is installed by default but has to be enabled by the end user/developer.\n\n\n\n\nTo enable code generation, click \nFeatures\n under \nModules\n, find the \nCode Generation\n feature, and click \nEnable\n.\n\n\n\n\nTo enable the feature from the Orchard command-line, open the orchard command-line, and enter the following command. For more information about the Orchard command-line, see \nUsing the command-line interface\n.\n\n\norchard> feature enable Orchard.CodeGeneration\nEnabling features Orchard.CodeGeneration\nOrchard.CodeGeneration was enabled\n\n\n\nOnce the code generation feature is enabled, new commmands are available for creating a module, theme, data migration, or controller. Currently, the code generation commands add files to the appropriate location.\n\n\ncodegen controller <module-name> <controller-name>\n        Create a new Orchard controller in a module\n\ncodegen datamigration <feature-name>\n        Create a new Data Migration class\n\ncodegen module <module-name> [/IncludeInSolution:true|false]\n        Create a new Orchard module\n\ncodegen theme <theme-name> [/CreateProject:true|false][/IncludeInSolution:true|false][/BasedOn:<theme-name>]\n        Create a new Orchard theme\n\ncodegen moduletests <module-name> \n        Create a new test for a module\n\n\n\nFor a walkthrough of using the code generation feature to create a new module and data migration, read the \nGetting Started with Modules course\n.\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.8\n\n\n9-04-14: Updated the screen shots for Code Generation Module.",
            "title": "Command-Line Code Generation"
        },
        {
            "location": "/Documentation/Command-line-scaffolding/#change-history",
            "text": "Updates for Orchard 1.8  9-04-14: Updated the screen shots for Code Generation Module.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-1/",
            "text": "Introduction\n\n\nThis four part course will get you started with a gentle introduction to extending Orchard at the code level. You will build a very simple module which contains a widget that shows an imaginary featured product. \n\n\nIt will teach you some of the basic components of module development and also encourage you to use best-practices when developing for Orchard.\n\n\nIn this first part we are going to set up our dev environment, scaffold a module and then build a simple \nWidget\n inside it. \n\n\nPrerequisites\n\n\nThis course assumes the following:\n\n\n\n\n\n\nYou have some experience using Orchard and understand its core concepts. Refreshers and links to related guides will be provided.\n\n\n\n\n\n\nYou can read and write C# code.\n\n\n\n\n\n\nYou have \nsome\n experience with ASP.NET MVC. This doesn't need to be deep but you should be aware of Razor templates, views, strongly-typed models and similar basics.\n\n\n\n\n\n\nThe course was written and tested against Orchard v1.9.2. It should work in new 1.x branch releases as they come out.\n\n\nGetting help\n\n\nIf you get stuck or need some support at any point in the course there are several places you can turn:\n\n\n\n\n\n\nPost a question in the \nofficial support forums on CodePlex\n.\n\n\n\n\n\n\nPost a question on \nStack Overflow tagged with OrchardCMS\n.\n\n\n\n\n\n\nOpen an issue on the \nOrchard Doc GitHub repo\n.\n\n\n\n\n\n\nSetting up\n\n\nFirst things first, you need to follow the \nsetting up for a lesson\n guide.\n\n\nThis will take you through the initial steps to set up your dev environment and pull a fresh copy of the source code down. When you've completed it please use your back button to come back to this course.\n\n\nGetting the most out of this course\n\n\nWriting an Orchard module that actually does something is going to contain a \nminimum\n of 9 different files. You will need to do a lot of development before you can run your module code and see it working in Orchard.\n\n\nAt first you might be overwhelmed by this, but here is a little tip; don't be. Just forge ahead with the tutorial and don't worry if terms like drivers, content parts, or placements seem unfamiliar at the moment. As you continue with your module development you will come across these files many times over. Before long you will start recognizing these core files and you will see how it all fits together.\n\n\nCourse structure\n\n\nThroughout the course we will alternate between discussing topics and implementing them. The discussion may contain example code or other example scenarios. \n\n\nSo that there is no confusion for you as to what you should be doing, when it comes to implementing these lessons into the module it will be explained step-by-step via numbered lists.\n\n\nLater on in the course, as the topics become more advanced, we may go through several sections of discussion before wrapping up the lessons into changes to the codebase.\n\n\nYou will also occasionally come across \nBonus Exercise\n sections. These are completely optional. You can skip them, complete them at the time, or come back after completing the course to complete them. They are suggested when there is an extra feature you could implement using the skills you have just learned.\n\n\nGetting started\n\n\nNow that you've completed all of the setup tasks you will have a fresh copy of Orchard configured and ready to go.\n\n\nThe rest of this part of the course will walk you through the process required to scaffold an empty module and then build a simple \nWidget\n inside of it.\n\n\nCommand line scaffolding with Orchard.exe\n\n\nYou should now be looking at Visual Studio. Down the side, in your Solution Explorer window you will see many files and folders. \n\n\nThe first step to take is to collapse all of the projects down. Its a long list and we need to be able to see an overview of the solution so we can start working with it. You don't need to collapse these individually by hand however:\n\n\n\n\n\n\nIf your Solution Explorer window is not visible click \nView\n, \nSolution Explorer\n. \n\n\n\n\n\n\nClick the \nCollapse All\n icon in the toolbar along the top of the solution explorer. It looks like this:\n\n\n\n\n\n\n\n\nIf you expand your \nModules\n folder you will see a long list of the modules which come packaged with Orchard:\n\n\n\n\nThere is a utility that is packaged with each copy of Orchard which will let us add our own module into this list. It is called \norchard.exe\n. This is a command line utility which will scaffold up a new empty module and add it to the main solution. There are also other commands you can use with this utility. \n\n\nTo scaffold a new module:\n\n\n\n\n\n\nPress the \nSave All\n button (or press \nCtrl-Shift-S\n). Its a good practice to always save before using the command line utility. Many of its commands will make changes to your solution and if you have unsaved changes you will get merge conflicts.\n\n\n\n\n\n\nIn the Solution Explorer, scroll down to the \nOrchard.Web\n project. It should be the very last project in the solution.\n\n\n\n\n\n\nRight click on the \nOrchard.Web\n project and choose \nOpen Folder in File Explorer\n:\n\n\n\n\n\n\n\n\nOpen the \nbin\n folder\n\n\n\n\n\n\nLocate \norchard.exe\n in the list and double click it to open.\n\n\n\n\n\n\nNote:\n If you don't see \norchard.exe\n in the \nbin\n folder then you didn't follow the steps in the \nsetting up for a lesson\n guide. You need to have built the solution at least once for this file to exist. Press \nCtrl-Shift-B\n within Visual Studio to build the solution.\n\n\n\n\n\n\n\n\nAfter a short pause while it loads you will then be presented with the Orchard command line:\n\n\n\n\n\n\nNote:\n There is a separate article where you can \nlearn more about orchard.exe and its features\n. You don't need to read it to understand this course but it will be useful to review in the future as part of your overall training.\n\n\n\n\n\n\n\n\nType the following command: \nfeature enable Orchard.CodeGeneration\n and press \nenter\n.\n\n\n\n\nThis will activate the code generation features of \norchard.exe\n. \n\n\n\n\nNote:\n If you get an error saying \nNo command found matching arguments \"feature enable Orchard.CodeGeneration\"\n then you didn't follow the steps in the \nsetting up for a lesson\n guide. You need to run the solution and go through the Orchard Setup screens before this command is available.\n\n\n\n\nThe code generation command that we will be using is \ncodegen module\n.\n\n\n\n\n\n\nType \nhelp codegen module\n and press enter to see the syntax for this command. To see details about all of the commands available type \nhelp commands\n. \n\n\nLike the rest of Orchard CMS, the orchard.exe command shell is extendable. The total number of commands available can vary depending on what features / modules you have loaded. In a future tutorial we will look at extending orchard.exe with our own commands.\n\n\n\n\n\n\nScaffold the module by entering the following command: \ncodegen module Orchard.LearnOrchard.FeaturedProduct\n. \n\n\nIf you read the help in the last step you might be wondering why we didn't include the \n/IncludeInSolution:true\n argument. This defaults to true so you don't need to add it.\n\n\n\n\n\n\nClose the Orchard command-line window.\n\n\n\n\n\n\nThis has now created a new, empty module in the file system. Switching back to Visual Studio should show you the \nFile Modification Detected\n dialog:\n\n\n\n\nClick \nReload\n.\n\n\n\n\nNote:\n If you had unsaved changes in your Solution file then click the \nDismiss\n option and add the project manually. In the Solution Explorer, \nRight click\n on the \nModules\n folder. Choose \nAdd\n, \nExisting Project\n, then navigate to \n.\\src\\Orchard.Web\\Modules\\Orchard.LearnOrchard.FeaturedProduct\\\n, select \nOrchard.LearnOrchard.FeaturedProduct.csproj\n and press \nOpen\n.\n\n\n\n\n\n\n\n\nThe basic framework for a module now exists inside the modules section of your solution:\n\n\n\n\nCore concepts refresher\n\n\nIf you are at the stage of wanting to build modules for Orchard then you should already be familiar with the concept of Content Types, Widgets, Content Items and Content Parts. These are all things that you can manage via the admin dashboard and you will have worked with them if you have built any kind of site in Orchard. To refresh your memory:\n\n\n\n\n\n\nContent Type\n: The template for a type of content in Orchard. The most common example is the \nPage\n content type which provides the structure for a page of content in an Orchard site. \n\n\n\n\n\n\nWidgets\n: You can also make a content type that works as a \nWidget\n. The \nWidget\n is a special variation of content type which can be placed into one of the many \nZones\n a template defines. It's manageable via the admin dashboard at run-time. Content types can opt-in to this system by configuring their \nStereotype\n setting to \nWidget\n.  \n\n\n\n\n\n\nContent Item\n: This is an instance of a specific content type. When you create a new \nPage\n in Orchard and fill it with content that is a \nContent Item\n with a \nContent Type\n of \nPage\n.\n\n\n\n\n\n\nContent Part\n: A small module providing some specific functionality. The \nContent Type\n is made up by attaching various \nContent Parts\n to it. For example you could have a comments content part. It just manages a block of comments for whatever it is attached to. The same comments content part could be attached to a \nPage\n content type, a \nBlog\n content type, or within a \nWidget\n.\n\n\n\n\n\n\nWhat we will be building\n\n\nAs you might have guessed from the module name, we are going to build a very simple featured product module. This first step into extending Orchard will be a small one. \n\n\nThe featured product module will be a \nWidget\n which shows a static message listing the featured product with a link to that page. It's not going to have any configurable settings behind it so we won't need to look at the database side of things yet. It's not going to be powered by an actual product system. A \nWidget\n is a great starting pointing point because it doesn't need to worry about menu settings, titles, URLs or integration into the admin dashboard.\n\n\nIt will be a simple banner which you can display on your site by adding a widget via the admin dashboard. This will be enough to show the core concepts of a module. We will come back and make improvements in the next three parts of this course.\n\n\nLet's get started with some development by adding classes and other files to our module.\n\n\nContent part\n\n\nThe content part class is the core data structure. When you scaffolded the module it automatically made you a \nModels\n folder. Now we need to add the \nFeaturedProductPart\n class to this folder:\n\n\n\n\n\n\n\n\nRight click\n on the \nModels\n folder.\n\n\n\n\n\n\nChoose \nAdd\n\n\n\n\n\n\nChoose \nClass...\n\n\n\n\n\n\nIn the \nName:\n field type \nFeaturedProductPart\n\n\n\n\n\n\nClick \nAdd\n\n\n\n\n\n\nYour new class will be created and opened up in the Visual Studio editor.\n\n\n\n\nImportant note:\n In order for Orchard to recognize Content Part classes they must be in a namespace ending \n.Models\n. \n\n\nBecause you already added this class within the \nModels\n folder the namespace is automatically wrapped around your class. In the future, when you're making your own classes don't forget to ensure that you follow this namespace structure.\n\n\n\n\nYour content part class will need to derive from the \nContentPart\n class.\n\n\nNormally we would add public properties to store all the related data but as we are keeping it simple this first example won't have any.\n\n\n\n\nAdd the \nContentPart\n inheritance by following these steps:\n\n\n\n\n\n\nType \n: ContentPart\n after your \nFeaturedProductPart\n class definition to inherit from the \nContentPart\n class.\n\n\n\n\n\n\nWait a second and the red squiggles will appear underneath the class. Add the namespace by pressing \nCtrl-.\n on your keyboard to bring up the Quick Actions menu.\n\n\n\n\n\n\nSelect the \nusing Orchard.ContentManagement;\n option and press \nenter\n.\n\n\n\n\n\n\nThat's all you need to do for your first \nContentPart\n class. Your \nFeaturedProductPart.cs\n file should now look like this:\n\n\nusing Orchard.ContentManagement;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct.Models {\n    public class FeaturedProductPart : ContentPart {\n    }\n}\n\n\n\nData migrations\n\n\nWhen your module is enabled in the admin dashboard Orchard will execute a data migration process. The purpose of the data migration is to register a list of the features contained in the module and any data it uses.\n\n\nWe aren't going to use this yet, but the migration is also used for upgrades. As you work on your modules you will want to add and remove bits. The data migration class can make changes and you can transform your existing data to meet your new requirements.\n\n\nThe data migration class can be created by hand, following a similar process as the last section but we can also scaffold it with the \norchard.exe\n command line. Let's dive back in to the command line and add a data migration class to the module.\n\n\n\n\n\n\nPress the \nSave All\n button (or press \nCtrl-Shift-S\n). Its a good practice to always save before using the command line utility. Many of its commands will make changes to your solution and if you have unsaved changes you will get merge conflicts.\n\n\n\n\n\n\nIn the Solution Explorer, scroll down to the \nOrchard.Web\n project. It should be the very last project in the solution.\n\n\n\n\n\n\nRight click on the \nOrchard.Web\n project and choose \nOpen Folder in File Explorer\n:\n\n\n\n\n\n\n\n\nOpen the \nbin\n folder.\n\n\n\n\n\n\nLocate \norchard.exe\n in the list and double click it to open.\n\n\n\n\n\n\n\n\nAfter a short pause while it loads you will then be presented with the Orchard command line:\n\n\n\n\n\n\n\n\nWe enabled the code generation feature when scaffolding the module but if you have been playing with Orchard or are just using this guide as a reference it can't hurt to run the command a second time to make sure. \n\n\nType the following command: \nfeature enable Orchard.CodeGeneration\n and press \nenter\n.\n\n\n\n\nThis will activate the code generation features of \norchard.exe\n. The command that we will be using is \ncodegen datamigration\n. \n\n\n\n\n\n\nType \nhelp codegen datamigration\n and press enter to see the syntax for this command. To see details about all of the commands available type \nhelp commands\n. \n\n\nLike the rest of Orchard CMS, the orchard.exe command shell is extendable. The total number of commands available can vary depending on what features / modules you have loaded. In a future tutorial we will look at extending orchard.exe with our own commands.\n\n\n\n\n\n\nScaffold the data migration class by entering the following command: \ncodegen datamigration Orchard.LearnOrchard.FeaturedProduct\n.\n\n\n\n\n\n\nClose the Orchard command-line window.\n\n\n\n\n\n\nThis has now created a new data migration the file system called \nMigrations.cs\n. It will be in the root folder of your module. \n\n\nSwitching back to Visual Studio should show you the \nFile Modification Detected\n dialog:\n\n\n\n\nClick \nReload\n.\n\n\n\n\nNote:\n If you had unsaved changes in your Solution file then click the \nDismiss\n option and add the class manually. In the Solution Explorer, \nright click\n on the \nOrchard.LearnOrchard.FeaturedProduct\n folder. Choose \nAdd\n, \nExisting Item\n, then navigate to \n.\\src\\Orchard.Web\\Modules\\Orchard.LearnOrchard.FeaturedProduct\\\n, select \nMigrations.cs\n and press \nAdd\n.\n\n\n\n\n\n\n\n\nNow you have a \nMigrations.cs\n file in the root folder of your module's project. By default it has an empty method called \nCreate()\n which returns an \nint\n. For the moment, returning a value of \n1\n is fine. It's the version number of your data migration and we will look into it in more detail later in this course.\n\n\nAs discussed earlier the \nWidget\n is just a \nContentType\n with a \nStereotype\n of \nWidget\n. A \nContentType\n is basically just a collection of \nContentPart\ns. Every \nContentType\n should contain the \nCommonPart\n which gives you the basics like the owner and date created fields. We will also add the \nWidgetPart\n so it knows how to widget. Finally we also include the content part we are building, \nFeaturedProductPart\n.\n\n\nLet's update the \nCreate()\n method to implement these plans:\n\n\n\n\n\n\nOpen \nMigrations.cs\n from within your module project if you don't already have it open.\n\n\n\n\n\n\nReplace the \nCreate()\n method with the following:\n\n\npublic int Create() {\n  ContentDefinitionManager.AlterTypeDefinition(\n    \"FeaturedProductWidget\", cfg => cfg\n      .WithSetting(\"Stereotype\", \"Widget\")\n      .WithPart(typeof(FeaturedProductPart).Name)\n      .WithPart(typeof(CommonPart).Name)\n      .WithPart(typeof(WidgetPart).Name));\n  return 1;\n}\n\n\n\nOrchard doesn't have a \nCreateTypeDefinition\n method so even within the create we still used \nAlterTypeDefinition\n. If it doesn't find an existing definition then it will create a new content type.\n\n\n\n\n\n\nPress \nCtrl-.\n on the red squiggles under \nFeaturedProductPart\n and \nCommonPart\n then let Visual Studio add the required \nusing\n statements.\n\n\n\n\n\n\nTry the same under the \nWidgetPart\n - you will see Visual Studio doesn't understand where to point the \nusing\n statement at and it only offers you options to generate stubs. We don't want this.\n\n\n\n\n\n\n\n\nRight click\n on your \nReferences\n and choose \nAdd Reference...\n\n\n\n\n\n\n\n\nClick the \nProjects\n tab on the left. Scroll down until you can see \nOrchard.Widgets\n in the list. \nHover\n your mouse over it and a checkbox will appear. Click the checkbox for  \nOrchard.Widgets\n. Click \nOK\n.\n\n\n\n\n\n\n\n\nNow you can try resolving the red squiggly lines under \nWidgetPart\n again:\n\n\n\n\nYou will now have the correct \nusing Orchard.Widgets.Models\n option presented to you. Select it.\n\n\n\n\n\n\nSave your progress so far by clicking the \nSave all\n button (or press \nCtrl-Shift-S\n).\n\n\n\n\n\n\nThat's all for the data migration, your \nMigrations.cs\n should now look like this:\n\n\nusing Orchard.ContentManagement.MetaData;\nusing Orchard.Core.Common.Models;\nusing Orchard.Data.Migration;\nusing Orchard.LearnOrchard.FeaturedProduct.Models;\nusing Orchard.Widgets.Models;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct {\n    public class Migrations : DataMigrationImpl {\n\n        public int Create() {\n            ContentDefinitionManager.AlterTypeDefinition(\n              \"FeaturedProductWidget\", cfg => cfg\n                .WithSetting(\"Stereotype\", \"Widget\")\n                .WithPart(typeof(FeaturedProductPart).Name)\n                .WithPart(typeof(CommonPart).Name)\n                .WithPart(typeof(WidgetPart).Name));\n            return 1;\n        }\n    }\n}\n\n\n\nUpdate dependencies as you go along\n\n\nIn the \nCreate()\n method of the data migration we introduced a dependency on \nWidgetPart\n.\n\n\nThis means that our module won't run without the \nOrchard.Widgets\n module being installed and enabled within the system.\n\n\nIn order to let Orchard know that we have this dependency we need to record it in a manifest file called \nModule.txt\n. This is a text file written in YAML format which stores meta information about the module like the name, author, description and dependencies on other modules. If you haven't heard of YAML before don't worry, it is a simple format to understand.\n\n\nWe will look at the \nModule.txt\n manifest file again in more detail in part 4 of this course, for now we just need to go in and record the dependency we have created with \nOrchard.Widgets\n. \n\n\nIt is important to record this information as soon as we make a dependency on a module. If we don't record the information then your module can cause exceptions for your users at run-time. You really need to get into the habit of doing it straight away because not only are they are easy to forget but if you have the module that you depend on already enabled you won't see any errors but your users will.\n\n\nLets update the manifest now to include the \nOrchard.Widgets\n dependency:\n\n\n\n\n\n\nIn the solution explorer, open up \nModule.txt\n which will be located in the root folder of the module.\n\n\n\n\n\n\nThe last three lines describe the main feature of the module (we have only one feature in this module): \n\n\n Features:\n     Orchard.LearnOrchard.FeaturedProduct:\n         Description: Description for feature Orchard.LearnOrchard.FeaturedProduct.\n\n\n\nAdd an extra row underneath \nDescription:\n and add a \nDependencies:\n entry like this:\n\n\n Features:\n     Orchard.LearnOrchard.FeaturedProduct:\n         Description: Description for feature Orchard.LearnOrchard.FeaturedProduct.\n         Dependencies: Orchard.Widgets\n\n\n\nThe indentation is important as creates hierarchy within a YAML document. Indent the line with 8 spaces.\n\n\n\n\n\n\nHow is all this magic working?\n\n\nSo far the \nContentPart\n class has been magically detected as long as it uses the \n.Model\n namespace, now the data migration is automatically detected just for deriving from \nDataMigrationImpl\n. How is all of this happening?\n\n\nUnder the hood Orchard uses \nAutofac\n, an Inversion of Control container. If you're interested you can learn about how it's integrated in the \nhow Orchard works\n guide. \n\n\nDon't worry though, you don't really need to know anything deeper about it other than it's in the background and it automatically scans & registers your components for you.\n\n\nLater on we will use Autofac's dependency injection which let us automatically get instances of things we need supplied directly into our classes.\n\n\nContent part driver\n\n\nEverything you see in Orchard is composed from \nShapes\n. If you don't know about shapes you can learn more about them in the \naccessing and rendering shapes\n guide. \n\n\nA content part driver is a class that composes the shapes that should be used to view and edit content parts. Drivers live in their own folder called \nDrivers\n. A basic driver class will contain three methods; a display driver for viewing a content part in the front end, an editor driver for presenting an editor form in the admin dashboard and an update method to handle changes submitted from the editor form.\n\n\nAs the shapes are created in the driver you can also pass data through to a view. Views are discussed in the next section but first we need to wire in the plumbing.\n\n\nThe widget that we are building has no configuration, so all this driver will need is the \nDisplay\n method configuring. The other methods will be added in when we revisit the widget it part two.\n\n\nThere aren't any command line scaffolding commands for setting up new drivers so you will need to create it manually:\n\n\n\n\n\n\nMake a new \nDrivers\n folder (\nRight click\n on the module project in the solution explorer, click \nAdd\n, \nNew Folder\n)\n\n\n\n\n\n\nAdd a new class called \nFeaturedProductDriver\n by right clicking the \nDrivers\n folder, clicking \nAdd\n, \nClass...\n and typing \nFeaturedProductDriver\n for the name (Visual Studio will automatically add the \n.cs\n on to the end for you) \n\n\n\n\n\n\n\n\nExtend the class so it derives from \nContentPartDriver<FeaturedProductPart>\n (note that the generic type class ends in Part not Driver).\n\n\n\n\n\n\nAdd the missing namespaces using the \nCtrl-.\n shortcut.\n\n\n\n\n\n\nIn the future we will do a lot with the driver class and the way that it builds its display but for this simple example all we need is a simple class to wire the shape to a view.\n\n\n\n\nInside your \nFeaturedProductDriver\n class add this single method:\nprotected override DriverResult Display(FeaturedProductPart part, \n  string displayType, dynamic shapeHelper) {\n  return ContentShape(\"Parts_FeaturedProduct\", () => \n    shapeHelper.Parts_FeaturedProduct());\n}\n\n\n\n\n\n\n\nThis says that when displaying the \nFeaturedProductPart\n return a shape called \nParts_FeaturedProduct\n. By default Orchard will look for this shape in  \nViews\\Parts\\FeaturedProduct.cshtml\n which is what we will build next.\n\n\nYour \nFeaturedProductDriver.cs\n file should now look like this:\n\n\nusing Orchard.ContentManagement.Drivers;\nusing Orchard.LearnOrchard.FeaturedProduct.Models;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct.Drivers {\n    public class FeaturedProductDriver : ContentPartDriver<FeaturedProductPart> {\n        protected override DriverResult Display(FeaturedProductPart part,\n          string displayType, dynamic shapeHelper) {\n            return ContentShape(\"Parts_FeaturedProduct\", () =>\n              shapeHelper.Parts_FeaturedProduct());\n        }\n    }\n}\n\n\n\nView\n\n\nOrchard uses Razor template views to display it's shapes. You can supply strongly-typed data models and use many of the normal ASP.NET MVC Razor view features within Orchard.\n\n\nFor this first widget our needs are simple and we will only be putting plain HTML markup inside the \n.cshtml\n file:\n\n\n\n\n\n\nAdd a new folder inside the \nViews\n folder called \nParts\n (\nRight click\n on the \nView\n folder in the solution explorer, click \nAdd\n, \nNew Folder\n and type \nParts\n).\n\n\n\n\n\n\nAdd a new \n.cshtml\n Razor view within the \nParts\n folder called \nFeaturedProduct.cshtml\n\n\n\n\n\n\nWithin the \nFeaturedProduct.cshtml\n view file add the following HTML markup:\n\n\n<style>\n  .btn-green {\n    padding: 1em;\n    text-align: center;\n    color: #fff;\n    background-color: #34A853;\n    font-size: 2em;\n    display: block;\n  }\n</style>\n<p>Today's featured product is the Sprocket 9000.</p>\n<p><a href=\"~/sprocket-9000\" class=\"btn-green\">Click here to view it.</a></p>\n\n\n\n\n\n\n\nPlacement\n\n\nAlmost all of the key elements are in place now except for this last one. The configuration inside a driver class tells Orchard \nhow\n to render that content part. Content parts always exist within a larger composite content item. Placement is used to tell Orchard \nwhere\n to render these components.\n\n\nThe \nplacement.info\n file goes in the root folder of the module. It is an XML file with a simple structure. You can learn more about the placement.info in \nunderstanding placement.info\n guide.\n\n\nAdd the \nplacement.info\n file to your module:\n\n\n\n\n\n\nRight click\n on the module project in the solution explorer.\n\n\n\n\n\n\nChoose \nAdd\n, \nNew Item\n to get to the add item screen:\n\n\n\n\n\n\n\n\nFrom the templates categories in the left hand side, choose \nGeneral\n\n\n\n\n\n\nFind \nText File\n in the list\n\n\n\n\n\n\nEnter \nplacement.info\n in the \nName:\n field.\n\n\n\n\n\n\nClick \nOK\n\n\n\n\n\n\nThis module has a single shape so we need to set up a \n<Place>\n for that shape. \n\n\n\n\nAdd this snippet to the empty placement.info file:\n<Placement>\n  <Place Parts_FeaturedProduct=\"Content:1\"/>\n</Placement>\n\n\n\n\n\n\n\nThe \nContent:1\n is the zone and priority of that shape. A shape will have several zones defined for it. Typically these include the header, content, meta and footer but they can have any combination of zones defined. In this case the \nContent\n is the main content area.\n\n\nThe priority means that it will be near the top of the content zone. In more complicated modules there could be several shapes. Setting different priorities will let you organize their display order when you want them to be in the same zone. For example, if another shape had a place of \nContent:0.5\n it would go before it, \nContent:15\n and it would go after it.\n\n\nTheme developers can customize these layout preferences by providing their own placement.info and overriding your initial configuration. This lets theme authors customize your module without having to make changes to the actual code. This means when the module is upgraded to a new version the theme developers changes will not be overwritten.\n\n\nTrying the module out in Orchard\n\n\nCongratulations, you've made it to the pay off, using the module in Orchard!\n\n\nThe last few steps will enable the module in Orchard and assign the widget to a zone in the active template:\n\n\n\n\n\n\nIn Visual Studio, press \nCtrl-F5\n to start the dev server without debugging mode enabled. \n\n\n\n\n\n\nLog in to the admin dashboard. The login link will be in the footer of the site.\n\n\n\n\n\n\nClick \nModules\n in the navigation menu.\n\n\n\n\n\n\nThe first item in the list should be our module, \nOrchard.LearnOrchard.FeaturedProduct\n:\n\n\n\n\nClick \nEnable\n to activate the plugin:\n\n\n\n\n\n\n\n\nYou can now add the Widget to a layer in the site. Click \nWidgets\n from the navigation menu.\n\n\n\n\n\n\nIn the \nAsideFirst\n section of the Widgets page click the \nAdd\n button:\n\n\n\n\n\n\n\n\nThe \nFeatured Product Widget\n will be in the list, click the item to select it:\n\n\n\n\n\n\n\n\nYou can leave most of the \nWidget\n settings on their defaults. Just set the \nTitle\n to \nFeatured Product\n:\n\n\n\n\n\n\n\n\nClick \nSave\n at the bottom of the page.\n\n\n\n\n\n\nIf you go back to the main site now you will see the module in the site:\n\n\n\n\nWe haven't created a page for the Sprocket 9000 so clicking the button will give a 404 at the moment.\n\n\nDownload the code for this lesson\n\n\nYou can download a copy of the module so far at this link:\n\n\n\n\nDownload Orchard.LearnOrchard.FeaturedProduct-Part1-v1.0.zip\n\n\n\n\nTo use it in Orchard simply extract the archive into the modules directory at \n.\\src\\Orchard.Web\\Modules\\\n.\n\n\n\n\nFor Orchard to recognize it the folder name should match the name of the module. Make sure that the folder name is \nOrchard.LearnOrchard.FeaturedProduct\n and then the modules files are located directly under that. \n\n\n\n\nConclusion\n\n\nThis first guide in the module introduction course has shown the main components of a module.\n\n\nIn the next part we will extend the module to add some interactivity to the module. This means adding database backing, an editor view, configuration settings and we will dip our toes in with some of the Orchard API features.\n\n\nIn the final part of the course we will review the module and clean it up to ensure we follow development best practices that have been missed so far.\n\n\nThis was a long guide. Take a break now and when you're refreshed come back and \nread part two of the course\n.",
            "title": "Part 1: Build a Static Widget"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-1/#introduction",
            "text": "This four part course will get you started with a gentle introduction to extending Orchard at the code level. You will build a very simple module which contains a widget that shows an imaginary featured product.   It will teach you some of the basic components of module development and also encourage you to use best-practices when developing for Orchard.  In this first part we are going to set up our dev environment, scaffold a module and then build a simple  Widget  inside it.",
            "title": "Introduction"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-1/#prerequisites",
            "text": "This course assumes the following:    You have some experience using Orchard and understand its core concepts. Refreshers and links to related guides will be provided.    You can read and write C# code.    You have  some  experience with ASP.NET MVC. This doesn't need to be deep but you should be aware of Razor templates, views, strongly-typed models and similar basics.    The course was written and tested against Orchard v1.9.2. It should work in new 1.x branch releases as they come out.",
            "title": "Prerequisites"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-1/#getting-help",
            "text": "If you get stuck or need some support at any point in the course there are several places you can turn:    Post a question in the  official support forums on CodePlex .    Post a question on  Stack Overflow tagged with OrchardCMS .    Open an issue on the  Orchard Doc GitHub repo .",
            "title": "Getting help"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-1/#setting-up",
            "text": "First things first, you need to follow the  setting up for a lesson  guide.  This will take you through the initial steps to set up your dev environment and pull a fresh copy of the source code down. When you've completed it please use your back button to come back to this course.",
            "title": "Setting up"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-1/#getting-the-most-out-of-this-course",
            "text": "Writing an Orchard module that actually does something is going to contain a  minimum  of 9 different files. You will need to do a lot of development before you can run your module code and see it working in Orchard.  At first you might be overwhelmed by this, but here is a little tip; don't be. Just forge ahead with the tutorial and don't worry if terms like drivers, content parts, or placements seem unfamiliar at the moment. As you continue with your module development you will come across these files many times over. Before long you will start recognizing these core files and you will see how it all fits together.",
            "title": "Getting the most out of this course"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-1/#course-structure",
            "text": "Throughout the course we will alternate between discussing topics and implementing them. The discussion may contain example code or other example scenarios.   So that there is no confusion for you as to what you should be doing, when it comes to implementing these lessons into the module it will be explained step-by-step via numbered lists.  Later on in the course, as the topics become more advanced, we may go through several sections of discussion before wrapping up the lessons into changes to the codebase.  You will also occasionally come across  Bonus Exercise  sections. These are completely optional. You can skip them, complete them at the time, or come back after completing the course to complete them. They are suggested when there is an extra feature you could implement using the skills you have just learned.",
            "title": "Course structure"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-1/#getting-started",
            "text": "Now that you've completed all of the setup tasks you will have a fresh copy of Orchard configured and ready to go.  The rest of this part of the course will walk you through the process required to scaffold an empty module and then build a simple  Widget  inside of it.",
            "title": "Getting started"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-1/#command-line-scaffolding-with-orchardexe",
            "text": "You should now be looking at Visual Studio. Down the side, in your Solution Explorer window you will see many files and folders.   The first step to take is to collapse all of the projects down. Its a long list and we need to be able to see an overview of the solution so we can start working with it. You don't need to collapse these individually by hand however:    If your Solution Explorer window is not visible click  View ,  Solution Explorer .     Click the  Collapse All  icon in the toolbar along the top of the solution explorer. It looks like this:     If you expand your  Modules  folder you will see a long list of the modules which come packaged with Orchard:   There is a utility that is packaged with each copy of Orchard which will let us add our own module into this list. It is called  orchard.exe . This is a command line utility which will scaffold up a new empty module and add it to the main solution. There are also other commands you can use with this utility.   To scaffold a new module:    Press the  Save All  button (or press  Ctrl-Shift-S ). Its a good practice to always save before using the command line utility. Many of its commands will make changes to your solution and if you have unsaved changes you will get merge conflicts.    In the Solution Explorer, scroll down to the  Orchard.Web  project. It should be the very last project in the solution.    Right click on the  Orchard.Web  project and choose  Open Folder in File Explorer :     Open the  bin  folder    Locate  orchard.exe  in the list and double click it to open.    Note:  If you don't see  orchard.exe  in the  bin  folder then you didn't follow the steps in the  setting up for a lesson  guide. You need to have built the solution at least once for this file to exist. Press  Ctrl-Shift-B  within Visual Studio to build the solution.     After a short pause while it loads you will then be presented with the Orchard command line:    Note:  There is a separate article where you can  learn more about orchard.exe and its features . You don't need to read it to understand this course but it will be useful to review in the future as part of your overall training.     Type the following command:  feature enable Orchard.CodeGeneration  and press  enter .   This will activate the code generation features of  orchard.exe .    Note:  If you get an error saying  No command found matching arguments \"feature enable Orchard.CodeGeneration\"  then you didn't follow the steps in the  setting up for a lesson  guide. You need to run the solution and go through the Orchard Setup screens before this command is available.   The code generation command that we will be using is  codegen module .    Type  help codegen module  and press enter to see the syntax for this command. To see details about all of the commands available type  help commands .   Like the rest of Orchard CMS, the orchard.exe command shell is extendable. The total number of commands available can vary depending on what features / modules you have loaded. In a future tutorial we will look at extending orchard.exe with our own commands.    Scaffold the module by entering the following command:  codegen module Orchard.LearnOrchard.FeaturedProduct .   If you read the help in the last step you might be wondering why we didn't include the  /IncludeInSolution:true  argument. This defaults to true so you don't need to add it.    Close the Orchard command-line window.    This has now created a new, empty module in the file system. Switching back to Visual Studio should show you the  File Modification Detected  dialog:   Click  Reload .   Note:  If you had unsaved changes in your Solution file then click the  Dismiss  option and add the project manually. In the Solution Explorer,  Right click  on the  Modules  folder. Choose  Add ,  Existing Project , then navigate to  .\\src\\Orchard.Web\\Modules\\Orchard.LearnOrchard.FeaturedProduct\\ , select  Orchard.LearnOrchard.FeaturedProduct.csproj  and press  Open .     The basic framework for a module now exists inside the modules section of your solution:",
            "title": "Command line scaffolding with Orchard.exe"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-1/#core-concepts-refresher",
            "text": "If you are at the stage of wanting to build modules for Orchard then you should already be familiar with the concept of Content Types, Widgets, Content Items and Content Parts. These are all things that you can manage via the admin dashboard and you will have worked with them if you have built any kind of site in Orchard. To refresh your memory:    Content Type : The template for a type of content in Orchard. The most common example is the  Page  content type which provides the structure for a page of content in an Orchard site.     Widgets : You can also make a content type that works as a  Widget . The  Widget  is a special variation of content type which can be placed into one of the many  Zones  a template defines. It's manageable via the admin dashboard at run-time. Content types can opt-in to this system by configuring their  Stereotype  setting to  Widget .      Content Item : This is an instance of a specific content type. When you create a new  Page  in Orchard and fill it with content that is a  Content Item  with a  Content Type  of  Page .    Content Part : A small module providing some specific functionality. The  Content Type  is made up by attaching various  Content Parts  to it. For example you could have a comments content part. It just manages a block of comments for whatever it is attached to. The same comments content part could be attached to a  Page  content type, a  Blog  content type, or within a  Widget .",
            "title": "Core concepts refresher"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-1/#what-we-will-be-building",
            "text": "As you might have guessed from the module name, we are going to build a very simple featured product module. This first step into extending Orchard will be a small one.   The featured product module will be a  Widget  which shows a static message listing the featured product with a link to that page. It's not going to have any configurable settings behind it so we won't need to look at the database side of things yet. It's not going to be powered by an actual product system. A  Widget  is a great starting pointing point because it doesn't need to worry about menu settings, titles, URLs or integration into the admin dashboard.  It will be a simple banner which you can display on your site by adding a widget via the admin dashboard. This will be enough to show the core concepts of a module. We will come back and make improvements in the next three parts of this course.  Let's get started with some development by adding classes and other files to our module.",
            "title": "What we will be building"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-1/#content-part",
            "text": "The content part class is the core data structure. When you scaffolded the module it automatically made you a  Models  folder. Now we need to add the  FeaturedProductPart  class to this folder:     Right click  on the  Models  folder.    Choose  Add    Choose  Class...    In the  Name:  field type  FeaturedProductPart    Click  Add    Your new class will be created and opened up in the Visual Studio editor.   Important note:  In order for Orchard to recognize Content Part classes they must be in a namespace ending  .Models .   Because you already added this class within the  Models  folder the namespace is automatically wrapped around your class. In the future, when you're making your own classes don't forget to ensure that you follow this namespace structure.   Your content part class will need to derive from the  ContentPart  class.  Normally we would add public properties to store all the related data but as we are keeping it simple this first example won't have any.   Add the  ContentPart  inheritance by following these steps:    Type  : ContentPart  after your  FeaturedProductPart  class definition to inherit from the  ContentPart  class.    Wait a second and the red squiggles will appear underneath the class. Add the namespace by pressing  Ctrl-.  on your keyboard to bring up the Quick Actions menu.    Select the  using Orchard.ContentManagement;  option and press  enter .    That's all you need to do for your first  ContentPart  class. Your  FeaturedProductPart.cs  file should now look like this:  using Orchard.ContentManagement;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct.Models {\n    public class FeaturedProductPart : ContentPart {\n    }\n}",
            "title": "Content part"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-1/#data-migrations",
            "text": "When your module is enabled in the admin dashboard Orchard will execute a data migration process. The purpose of the data migration is to register a list of the features contained in the module and any data it uses.  We aren't going to use this yet, but the migration is also used for upgrades. As you work on your modules you will want to add and remove bits. The data migration class can make changes and you can transform your existing data to meet your new requirements.  The data migration class can be created by hand, following a similar process as the last section but we can also scaffold it with the  orchard.exe  command line. Let's dive back in to the command line and add a data migration class to the module.    Press the  Save All  button (or press  Ctrl-Shift-S ). Its a good practice to always save before using the command line utility. Many of its commands will make changes to your solution and if you have unsaved changes you will get merge conflicts.    In the Solution Explorer, scroll down to the  Orchard.Web  project. It should be the very last project in the solution.    Right click on the  Orchard.Web  project and choose  Open Folder in File Explorer :     Open the  bin  folder.    Locate  orchard.exe  in the list and double click it to open.     After a short pause while it loads you will then be presented with the Orchard command line:     We enabled the code generation feature when scaffolding the module but if you have been playing with Orchard or are just using this guide as a reference it can't hurt to run the command a second time to make sure.   Type the following command:  feature enable Orchard.CodeGeneration  and press  enter .   This will activate the code generation features of  orchard.exe . The command that we will be using is  codegen datamigration .     Type  help codegen datamigration  and press enter to see the syntax for this command. To see details about all of the commands available type  help commands .   Like the rest of Orchard CMS, the orchard.exe command shell is extendable. The total number of commands available can vary depending on what features / modules you have loaded. In a future tutorial we will look at extending orchard.exe with our own commands.    Scaffold the data migration class by entering the following command:  codegen datamigration Orchard.LearnOrchard.FeaturedProduct .    Close the Orchard command-line window.    This has now created a new data migration the file system called  Migrations.cs . It will be in the root folder of your module.   Switching back to Visual Studio should show you the  File Modification Detected  dialog:   Click  Reload .   Note:  If you had unsaved changes in your Solution file then click the  Dismiss  option and add the class manually. In the Solution Explorer,  right click  on the  Orchard.LearnOrchard.FeaturedProduct  folder. Choose  Add ,  Existing Item , then navigate to  .\\src\\Orchard.Web\\Modules\\Orchard.LearnOrchard.FeaturedProduct\\ , select  Migrations.cs  and press  Add .     Now you have a  Migrations.cs  file in the root folder of your module's project. By default it has an empty method called  Create()  which returns an  int . For the moment, returning a value of  1  is fine. It's the version number of your data migration and we will look into it in more detail later in this course.  As discussed earlier the  Widget  is just a  ContentType  with a  Stereotype  of  Widget . A  ContentType  is basically just a collection of  ContentPart s. Every  ContentType  should contain the  CommonPart  which gives you the basics like the owner and date created fields. We will also add the  WidgetPart  so it knows how to widget. Finally we also include the content part we are building,  FeaturedProductPart .  Let's update the  Create()  method to implement these plans:    Open  Migrations.cs  from within your module project if you don't already have it open.    Replace the  Create()  method with the following:  public int Create() {\n  ContentDefinitionManager.AlterTypeDefinition(\n    \"FeaturedProductWidget\", cfg => cfg\n      .WithSetting(\"Stereotype\", \"Widget\")\n      .WithPart(typeof(FeaturedProductPart).Name)\n      .WithPart(typeof(CommonPart).Name)\n      .WithPart(typeof(WidgetPart).Name));\n  return 1;\n}  Orchard doesn't have a  CreateTypeDefinition  method so even within the create we still used  AlterTypeDefinition . If it doesn't find an existing definition then it will create a new content type.    Press  Ctrl-.  on the red squiggles under  FeaturedProductPart  and  CommonPart  then let Visual Studio add the required  using  statements.    Try the same under the  WidgetPart  - you will see Visual Studio doesn't understand where to point the  using  statement at and it only offers you options to generate stubs. We don't want this.     Right click  on your  References  and choose  Add Reference...     Click the  Projects  tab on the left. Scroll down until you can see  Orchard.Widgets  in the list.  Hover  your mouse over it and a checkbox will appear. Click the checkbox for   Orchard.Widgets . Click  OK .     Now you can try resolving the red squiggly lines under  WidgetPart  again:   You will now have the correct  using Orchard.Widgets.Models  option presented to you. Select it.    Save your progress so far by clicking the  Save all  button (or press  Ctrl-Shift-S ).    That's all for the data migration, your  Migrations.cs  should now look like this:  using Orchard.ContentManagement.MetaData;\nusing Orchard.Core.Common.Models;\nusing Orchard.Data.Migration;\nusing Orchard.LearnOrchard.FeaturedProduct.Models;\nusing Orchard.Widgets.Models;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct {\n    public class Migrations : DataMigrationImpl {\n\n        public int Create() {\n            ContentDefinitionManager.AlterTypeDefinition(\n              \"FeaturedProductWidget\", cfg => cfg\n                .WithSetting(\"Stereotype\", \"Widget\")\n                .WithPart(typeof(FeaturedProductPart).Name)\n                .WithPart(typeof(CommonPart).Name)\n                .WithPart(typeof(WidgetPart).Name));\n            return 1;\n        }\n    }\n}",
            "title": "Data migrations"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-1/#update-dependencies-as-you-go-along",
            "text": "In the  Create()  method of the data migration we introduced a dependency on  WidgetPart .  This means that our module won't run without the  Orchard.Widgets  module being installed and enabled within the system.  In order to let Orchard know that we have this dependency we need to record it in a manifest file called  Module.txt . This is a text file written in YAML format which stores meta information about the module like the name, author, description and dependencies on other modules. If you haven't heard of YAML before don't worry, it is a simple format to understand.  We will look at the  Module.txt  manifest file again in more detail in part 4 of this course, for now we just need to go in and record the dependency we have created with  Orchard.Widgets .   It is important to record this information as soon as we make a dependency on a module. If we don't record the information then your module can cause exceptions for your users at run-time. You really need to get into the habit of doing it straight away because not only are they are easy to forget but if you have the module that you depend on already enabled you won't see any errors but your users will.  Lets update the manifest now to include the  Orchard.Widgets  dependency:    In the solution explorer, open up  Module.txt  which will be located in the root folder of the module.    The last three lines describe the main feature of the module (we have only one feature in this module):    Features:\n     Orchard.LearnOrchard.FeaturedProduct:\n         Description: Description for feature Orchard.LearnOrchard.FeaturedProduct.  Add an extra row underneath  Description:  and add a  Dependencies:  entry like this:   Features:\n     Orchard.LearnOrchard.FeaturedProduct:\n         Description: Description for feature Orchard.LearnOrchard.FeaturedProduct.\n         Dependencies: Orchard.Widgets  The indentation is important as creates hierarchy within a YAML document. Indent the line with 8 spaces.",
            "title": "Update dependencies as you go along"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-1/#how-is-all-this-magic-working",
            "text": "So far the  ContentPart  class has been magically detected as long as it uses the  .Model  namespace, now the data migration is automatically detected just for deriving from  DataMigrationImpl . How is all of this happening?  Under the hood Orchard uses  Autofac , an Inversion of Control container. If you're interested you can learn about how it's integrated in the  how Orchard works  guide.   Don't worry though, you don't really need to know anything deeper about it other than it's in the background and it automatically scans & registers your components for you.  Later on we will use Autofac's dependency injection which let us automatically get instances of things we need supplied directly into our classes.",
            "title": "How is all this magic working?"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-1/#content-part-driver",
            "text": "Everything you see in Orchard is composed from  Shapes . If you don't know about shapes you can learn more about them in the  accessing and rendering shapes  guide.   A content part driver is a class that composes the shapes that should be used to view and edit content parts. Drivers live in their own folder called  Drivers . A basic driver class will contain three methods; a display driver for viewing a content part in the front end, an editor driver for presenting an editor form in the admin dashboard and an update method to handle changes submitted from the editor form.  As the shapes are created in the driver you can also pass data through to a view. Views are discussed in the next section but first we need to wire in the plumbing.  The widget that we are building has no configuration, so all this driver will need is the  Display  method configuring. The other methods will be added in when we revisit the widget it part two.  There aren't any command line scaffolding commands for setting up new drivers so you will need to create it manually:    Make a new  Drivers  folder ( Right click  on the module project in the solution explorer, click  Add ,  New Folder )    Add a new class called  FeaturedProductDriver  by right clicking the  Drivers  folder, clicking  Add ,  Class...  and typing  FeaturedProductDriver  for the name (Visual Studio will automatically add the  .cs  on to the end for you)      Extend the class so it derives from  ContentPartDriver<FeaturedProductPart>  (note that the generic type class ends in Part not Driver).    Add the missing namespaces using the  Ctrl-.  shortcut.    In the future we will do a lot with the driver class and the way that it builds its display but for this simple example all we need is a simple class to wire the shape to a view.   Inside your  FeaturedProductDriver  class add this single method: protected override DriverResult Display(FeaturedProductPart part, \n  string displayType, dynamic shapeHelper) {\n  return ContentShape(\"Parts_FeaturedProduct\", () => \n    shapeHelper.Parts_FeaturedProduct());\n}    This says that when displaying the  FeaturedProductPart  return a shape called  Parts_FeaturedProduct . By default Orchard will look for this shape in   Views\\Parts\\FeaturedProduct.cshtml  which is what we will build next.  Your  FeaturedProductDriver.cs  file should now look like this:  using Orchard.ContentManagement.Drivers;\nusing Orchard.LearnOrchard.FeaturedProduct.Models;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct.Drivers {\n    public class FeaturedProductDriver : ContentPartDriver<FeaturedProductPart> {\n        protected override DriverResult Display(FeaturedProductPart part,\n          string displayType, dynamic shapeHelper) {\n            return ContentShape(\"Parts_FeaturedProduct\", () =>\n              shapeHelper.Parts_FeaturedProduct());\n        }\n    }\n}",
            "title": "Content part driver"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-1/#view",
            "text": "Orchard uses Razor template views to display it's shapes. You can supply strongly-typed data models and use many of the normal ASP.NET MVC Razor view features within Orchard.  For this first widget our needs are simple and we will only be putting plain HTML markup inside the  .cshtml  file:    Add a new folder inside the  Views  folder called  Parts  ( Right click  on the  View  folder in the solution explorer, click  Add ,  New Folder  and type  Parts ).    Add a new  .cshtml  Razor view within the  Parts  folder called  FeaturedProduct.cshtml    Within the  FeaturedProduct.cshtml  view file add the following HTML markup:  <style>\n  .btn-green {\n    padding: 1em;\n    text-align: center;\n    color: #fff;\n    background-color: #34A853;\n    font-size: 2em;\n    display: block;\n  }\n</style>\n<p>Today's featured product is the Sprocket 9000.</p>\n<p><a href=\"~/sprocket-9000\" class=\"btn-green\">Click here to view it.</a></p>",
            "title": "View"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-1/#placement",
            "text": "Almost all of the key elements are in place now except for this last one. The configuration inside a driver class tells Orchard  how  to render that content part. Content parts always exist within a larger composite content item. Placement is used to tell Orchard  where  to render these components.  The  placement.info  file goes in the root folder of the module. It is an XML file with a simple structure. You can learn more about the placement.info in  understanding placement.info  guide.  Add the  placement.info  file to your module:    Right click  on the module project in the solution explorer.    Choose  Add ,  New Item  to get to the add item screen:     From the templates categories in the left hand side, choose  General    Find  Text File  in the list    Enter  placement.info  in the  Name:  field.    Click  OK    This module has a single shape so we need to set up a  <Place>  for that shape.    Add this snippet to the empty placement.info file: <Placement>\n  <Place Parts_FeaturedProduct=\"Content:1\"/>\n</Placement>    The  Content:1  is the zone and priority of that shape. A shape will have several zones defined for it. Typically these include the header, content, meta and footer but they can have any combination of zones defined. In this case the  Content  is the main content area.  The priority means that it will be near the top of the content zone. In more complicated modules there could be several shapes. Setting different priorities will let you organize their display order when you want them to be in the same zone. For example, if another shape had a place of  Content:0.5  it would go before it,  Content:15  and it would go after it.  Theme developers can customize these layout preferences by providing their own placement.info and overriding your initial configuration. This lets theme authors customize your module without having to make changes to the actual code. This means when the module is upgraded to a new version the theme developers changes will not be overwritten.",
            "title": "Placement"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-1/#trying-the-module-out-in-orchard",
            "text": "Congratulations, you've made it to the pay off, using the module in Orchard!  The last few steps will enable the module in Orchard and assign the widget to a zone in the active template:    In Visual Studio, press  Ctrl-F5  to start the dev server without debugging mode enabled.     Log in to the admin dashboard. The login link will be in the footer of the site.    Click  Modules  in the navigation menu.    The first item in the list should be our module,  Orchard.LearnOrchard.FeaturedProduct :   Click  Enable  to activate the plugin:     You can now add the Widget to a layer in the site. Click  Widgets  from the navigation menu.    In the  AsideFirst  section of the Widgets page click the  Add  button:     The  Featured Product Widget  will be in the list, click the item to select it:     You can leave most of the  Widget  settings on their defaults. Just set the  Title  to  Featured Product :     Click  Save  at the bottom of the page.    If you go back to the main site now you will see the module in the site:   We haven't created a page for the Sprocket 9000 so clicking the button will give a 404 at the moment.",
            "title": "Trying the module out in Orchard"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-1/#download-the-code-for-this-lesson",
            "text": "You can download a copy of the module so far at this link:   Download Orchard.LearnOrchard.FeaturedProduct-Part1-v1.0.zip   To use it in Orchard simply extract the archive into the modules directory at  .\\src\\Orchard.Web\\Modules\\ .   For Orchard to recognize it the folder name should match the name of the module. Make sure that the folder name is  Orchard.LearnOrchard.FeaturedProduct  and then the modules files are located directly under that.",
            "title": "Download the code for this lesson"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-1/#conclusion",
            "text": "This first guide in the module introduction course has shown the main components of a module.  In the next part we will extend the module to add some interactivity to the module. This means adding database backing, an editor view, configuration settings and we will dip our toes in with some of the Orchard API features.  In the final part of the course we will review the module and clean it up to ensure we follow development best practices that have been missed so far.  This was a long guide. Take a break now and when you're refreshed come back and  read part two of the course .",
            "title": "Conclusion"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-2/",
            "text": "Introduction\n\n\nThis is part two of a four part course. It will get you started with a gentle introduction to extending Orchard at the code level. You will build a very simple module which contains a widget that shows an imaginary featured product. \n\n\nIt will teach you some of the basic components of module development and also encourage you to use best-practices when developing for Orchard.\n\n\nIf you haven't read the previous part of this course then you can go back to the overview to \nlearn about the Getting Started with Modules course\n.\n\n\nExpanding the widget to make it more dynamic\n\n\nIn the first version of the widget we took the bare minimum of steps that we could in order to get something up and running.\n\n\nThis meant we missed out a few classes that would be in a normal data-driven module and some of the classes we did add were pretty much empty.\n\n\nNow that you understand the basic workflow of building a module we're going to go back and take a second look at it, adding in some new classes and expanding out the Widget.\n\n\nBy the time we have finished with this part we will have made the widget more dynamic. To achieve this goal we are going to:\n\n\n\n\n\n\nAdd a \nBoolean\n property to signify if the item is on sale.\n\n\n\n\n\n\nDip into the Orchard API to hide the widget if the page we are viewing is the featured product.\n\n\n\n\n\n\nGetting setup for the lesson\n\n\nYou should have already completed part one of this course before you move on to this part. This means you should have a copy of Orchard with the completed module work. \n\n\nIf you have the original Solution and module files available then:\n\n\n\n\n\n\nOpen Visual Studio\n\n\n\n\n\n\nOpen the Solution you created in the first part of the course\n\n\n\n\n\n\nIf for some reason you don't have these files you can play catch-up by following these steps:\n\n\n\n\n\n\nFollow the \nsetting up for a lesson\n guide.\n\n\n\n\n\n\nDownload the \ncompleted module source code from part 1\n.\n\n\n\n\n\n\nExtract the archive into the modules directory at \n.\\src\\Orchard.Web\\Modules\\\n.\n\n\n\n\n\n\nRun Orchard by pressing \nCtrl-F5\n, go to the admin dashboard, select Modules from the navigation menu and enable the module.\n\n\n\n\n\n\nNow we can begin the lesson by starting to build in database functionality to the Featured Product module.\n\n\nAdd a ContentPartRecord class\n\n\nIn the first part of this course we created a simple \nContentPart\n class called \nFeaturedProductPart\n. Because we weren't storing anything at the time this class was just an empty placeholder. \n\n\nWe are going to go back and give it a property to store some data in the next section but first we need to create a \nContentPartRecord\n class.\n\n\nThe \nContentPartRecord\n class is used by Orchard to store content part data in a database.\n\n\nLet's add the class to the module and then start wiring in the \nBoolean\n \nIsOnSale\n property:\n\n\n\n\n\n\nLocate your FeaturedProduct module in the \nSolution Explorer\n, \nRight click\n on the \nModels\n folder and choose \nAdd\n, \nClass...\n\n\n\n\n\n\nIn the \nAdd New Item\n dialog enter \nFeaturedProductPartRecord\n in to the \nName:\n field and press \nAdd\n.\n\n\n\n\n\n\nDerive the class from \nContentPartRecord\n:\n\n\n public class FeaturedProductPartRecord : ContentPartRecord\n\n\n\n\n\n\n\nAdd the namespace by pressing \nCtrl-.\n:\n\n\n\n\n\n\n\n\nAdd a public property to the class. Place your cursor in the main body of the class. Type \nprop\n then press the \nTab\n key twice:\n\n\n\n\nThis will insert a code snippet for an automatically implemented public property.\n\n\n\n\n\n\nIn the first placeholder (you can just start typing and it will replace the \nint\n automatically) set it to \nvirtual bool\n then press \nTab\n, type \nIsOnSale\n and press \nEnter\n to complete the property.\n\n\n\n\n\n\n\n\nThe important thing to remember for your \nContentPartRecord\n classes is that each of the properties you want to store in the database should be marked with the \nvirtual\n keyword. This is so that \nNHibernate\n, the database system used by Orchard, can inject its underlying plumbing. \n\n\nYou should now end up with a file called \n.\\Models\\FeaturedProductPartRecord.cs\n with the contents:\n\n\nusing Orchard.ContentManagement.Records;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct.Models {\n  public class FeaturedProductPartRecord : ContentPartRecord {\n    public virtual bool IsOnSale { get; set; }\n  }\n}\n\n\n\nUpdate the ContentPart\n\n\nYou now have a class that will provide the interface between your database and your content part (\nFeaturedProductPartRecord\n).\n\n\nThe first change to the content part will be to let it know about this record class. Then we will add a public property which mirrors the data class and specifies how it will store its data:\n\n\n\n\n\n\nOpen the \nContentPart\n file located in \n.\\Models\\FeaturedProductPart.cs\n\n\n\n\n\n\nAdd a generic type parameter to the FeaturedProductPart class by changing this:\n\n\n public class FeaturedProductPart : ContentPart\n\n\n\nTo this:\n\n\n public class FeaturedProductPart : ContentPart<FeaturedProductPartRecord>\n\n\n\n\n\n\n\nAdd the public property to the class:\n\n\n  [DisplayName(\"Is the featured product on sale?\")]\n  public bool IsOnSale {\n    get { return Retrieve(r => r.IsOnSale); }\n    set { Store(r => r.IsOnSale, value); }\n  }\n\n\n\n\n\n\n\nAdd the namespace for the \nDisplayName\n attribute\n\n\n\n\n\n\nThe \nDisplayName\n attribute is a feature provided by ASP.NET MVC. Later on when we build the editor view for the admin dashboard it will use this phrase instead of simply displaying \"IsOnSale\" \n\n\nYou should now end up with a \nFeaturedProductPart.cs\n file that looks like this:\n\n\nusing System.ComponentModel;\nusing Orchard.ContentManagement;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct.Models {\n  public class FeaturedProductPart : ContentPart<FeaturedProductPartRecord> {\n    [DisplayName(\"Is the featured product on sale?\")]\n    public bool IsOnSale {\n      get { return Retrieve(r => r.IsOnSale); }\n      set { Store(r => r.IsOnSale, value); }\n    }\n  }\n}\n\n\n\nThe \nRetrieve()\n and \nStore()\n methods come when you inherit from \nContentPart<T>\n. \n\n\nUnder the hood your data is stored in two places. There is the underlying database and something called the infoset.\n\n\nUnderstanding data storage in Orchard\n\n\nOrchard provides an incredibly modular architecture. The way it achieves this is that it breaks everything up into their own little components called content parts. We are busy building one of these content parts right now. Orchard composes these together at run-time to form content types, such as the widget we are working on.\n\n\nIn order to store all of these little pieces of data in the database they are split up into many tables. There can be a lot of SQL \nJOIN\n's involved with pulling a content item out of the database. This means things aren't always as fast as they could be.\n\n\nTo minimize these effects a secondary data cache is kept. All of the different content parts are encoded into XML and stored in a single column inside a database table. For example, our widget looks something like this:\n\n\n<Data>\n  <IdentityPart Identifier=\"0e8f0d480f0d4d4bb72ad3d0c756a0d4\" />\n  <CommonPart CreatedUtc=\"2015-09-24T19:37:19.5819846Z\" \n    ModifiedUtc=\"2015-09-24T19:37:19.6720488Z\" \n    PublishedUtc=\"2015-09-24T19:37:19.6810555Z\" />\n  <WidgetPart RenderTitle=\"true\" Title=\"Featured Product\" Position=\"1\"\n    Zone=\"AsideFirst\" Name=\"\" CssClasses=\"\" />\n</Data>\n\n\n\nSo instead of pulling data from three different tables (IdentityPart, CommonPart and WidgetPart) Orchard just selects the single XML block and checks in there. The \nRetrieve()\n and \nStore()\n methods automatically keep this data and the individual database tables in sync for you.\n\n\nWhy not just use the XML infoset all the time? If you need to sort the data or filter it then its actually quicker to do this all within the SQL database server rather than extracting everything and sorting / filtering it after.\n\n\n\n\nIn certain scenario's you might not need one or the other of these data stores. There are more advanced approaches that you can take in these situations but that's an advanced topic for a later guide.\n\n\n\n\nThis changeover was implemented in Orchard v1.8 and was known as \"The Shift\". Bertrand Le Roy has \nwritten more about this on his blog\n.\n\n\nUpgrading using a data migration\n\n\nIn the first part of this course we created a \nMigrations.cs\n class file. Inside it we wrote the \nCreate()\n method which returned \n1\n. When Orchard had finished running the method it stored that \n1\n in the database.\n\n\nNow that we want to make some changes to our modules data storage (we want to add in a table for the data to be stored in) we can add a new method \nUpdateFrom1()\n. Orchard will automatically find this method the next time the site is loaded and run this updated data migration.\n\n\nAt the end of the update method we will return \n2\n. This means in the future if we want to make further changes we could add an \nUpdateFrom2()\n method. We can keep returning a number one higher than the previous to update as many times as we need.\n\n\n\n\n\n\nOpen the \nMigrations.cs\n file in the root folder of the module.\n\n\n\n\n\n\nBeneath the \nCreate()\n method, add in the following method:\n\n\npublic int UpdateFrom1() {\n  SchemaBuilder.CreateTable(typeof(FeaturedProductPartRecord).Name,\n    table => table\n      .ContentPartRecord()\n      .Column<bool>(\"IsOnSale\"));\n  return 2;\n}\n\n\n\n\n\n\n\nTo start off with we are using the \nSchemaBuilder\n class to create a new table. The first parameter is the table name. This should match the ContentPartRecord we built.\n\n\n\n\nInstead of pulling it out using \ntypeof().Name\n you could pass in a string such as \nCreateTable(\"FeaturedProductsPartRecord\", ...);\n but that leaves you open to introducing small typos into the code - like I did just then. \n\n\nDid you notice the extra \ns\n I accidentally typed into the table name?\n\n\nIf you make a mistake like this then you won't get an exception. Orchard will still run but your data will be saved to the wrong table creating hard to find bugs.\n\n\n\n\nThe \nContentPartRecord()\n call is just a simple shorthand to add in the \nid\n column. If you look in the definition (just place your cursor in the method in Visual Studio and press \nF12\n) you will see it simply adds an extra \nColumn<>\n into the chain:\n\n\nColumn<int>(\"Id\", column => column.PrimaryKey().NotNull());\n\n\n\nWe then add our column with a data type \nbool\n and a name \nIsOnSale\n which matches our property on the record class. \nNHibernate\n will automatically match the name of the property on the record class with the column in the database.\n\n\n\n\nBonus Exercise:\n Look around in the \nMigrations.cs\n files located in the other built-in modules for many examples of the things you can do with this class.\n\n\nTo do this just select the \nSearch Solution Explorer\n textbox at the top of the \nSolution Explorer\n or press \nCtrl-;\n. When it's selected just type \nMigrations.cs\n in and it will filter out all of the \nmigrations.cs\n files in the solution.\n\n\n\n\nYou should now end up with a \nMigrations.cs\n file that looks like this:\n\n\nusing Orchard.ContentManagement.MetaData;\nusing Orchard.Core.Common.Models;\nusing Orchard.Data.Migration;\nusing Orchard.LearnOrchard.FeaturedProduct.Models;\nusing Orchard.Widgets.Models;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct {\n  public class Migrations : DataMigrationImpl {\n    public int Create() {\n      ContentDefinitionManager.AlterTypeDefinition(\n        \"FeaturedProductWidget\", cfg => cfg\n        .WithSetting(\"Stereotype\", \"Widget\")\n        .WithPart(typeof(FeaturedProductPart).Name)\n        .WithPart(typeof(CommonPart).Name)\n        .WithPart(typeof(WidgetPart).Name));\n\n      return 1;\n    }\n\n    public int UpdateFrom1() {\n      SchemaBuilder.CreateTable(typeof(FeaturedProductPartRecord).Name, \n        table => table\n          .ContentPartRecord()\n          .Column<bool>(\"IsOnSale\"));\n\n      return 2;\n    }\n  }\n}\n\n\n\nAdd a handler\n\n\nThe plumbing for connecting the module code to the database is almost complete. The last thing to do is to register a \nStorageFilter\n for the \nContentPartRecord\n.\n\n\nThe \nStorageFilter\n class takes care of persisting the data from repository object to the database. In this case it's the \nFeaturedProductPartRecord\n class that needs registering.\n\n\nYou do this registration inside the \nHandler\n class, although that's not it's only use. You can think of the handler like a filter in ASP.NET MVC. It's a piece of code that is meant to run when specific events happen in the application, but that are not specific to a given content type. \n\n\nFor example, you could build an analytics module that listens to the \nLoaded\n event in order to log usage statistics. \n\n\n\n\nIf you're curious, you can see what event handlers you can override in your own handlers by examining the source code for \nContentHandlerBase\n and reading the \nunderstanding content handlers\n guide.\n\n\n\n\nThe handler you need in this module is not going to be very complex, but it will implement some plumbing that is necessary to set up the persistence of the part:\n\n\n\n\n\n\nIn the \nSolution Explorer\n, right click on the \nOrchard.LearnOrchard.FeaturedProduct\n project and choose \nAdd\n, \nNew Folder\n and create a new folder called \nHandlers\n.\n\n\n\n\n\n\nNow right click on the \nHandlers\n folder and choose \nAdd\n, \nClass...\n.\n\n\n\n\n\n\nIn the \nAdd New Item\n dialog enter \nFeaturedProductHandler\n in to the \nName:\n field and press \nAdd\n.\n\n\n\n\n\n\nDerive the class from \nContentHandler\n:\n\n\n public class FeaturedProductHandler : ContentHandler\n\n\n\n\n\n\n\nAdd the namespace by pressing \nCtrl-.\n:\n\n\n\n\n\n\n\n\nYou now need to add in the standard boilerplate handler constructor code which wires up the \nStorageFilter\n to the repository:\n\n\npublic FeaturedProductHandler(\n  IRepository<FeaturedProductPartRecord> repository) {\n    Filters.Add(StorageFilter.For(repository));\n}\n\n\n\n\n\n\n\nAdd the namespace for the \nFeaturedProductPartRecord\n and then the \nIRepository<>\n.\n\n\n\n\n\n\nYou should now end up with a \nFeaturedProductHandler.cs\n file that looks like this:\n\n\nusing Orchard.ContentManagement.Handlers;\nusing Orchard.Data;\nusing Orchard.LearnOrchard.FeaturedProduct.Models;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct.Handlers {\n  public class FeaturedProductHandler : ContentHandler {\n    public FeaturedProductHandler(\n      IRepository<FeaturedProductPartRecord> repository) {\n        Filters.Add(StorageFilter.For(repository));\n    }\n  }\n}\n\n\n\nUpdate the driver to support an editor view\n\n\nThis time through with the driver it's going to get it's other two core boilerplate methods.\n\n\nThe first is a method called \nEditor()\n which is used to build the shape which will display the edit interface in the admin dashboard. This is designed to be used with a HTTP \nGET\n request.\n\n\nThe second is another \nEditor()\n overload which takes the submitted information from the first and attempts to pass that information back into the database. This is designed to be used with a HTTP \nPOST\n request.\n\n\n\n\n\n\nOpen the \nFeaturedProductDriver.cs\n class which is in the \n.\\Drivers\\\n folder of the module project.\n\n\n\n\n\n\nBelow the \nDisplay()\n method, paste in this block of code:\n\n\nprotected override DriverResult Editor(FeaturedProductPart part, \n  dynamic shapeHelper) {\n    return ContentShape(\"Parts_FeaturedProduct_Edit\",\n      () => shapeHelper.EditorTemplate(\n        TemplateName: \"Parts/FeaturedProduct\",\n        Model: part,\n        Prefix: Prefix));\n}\n\nprotected override DriverResult Editor(FeaturedProductPart part,\n  IUpdateModel updater, dynamic shapeHelper) {\n    updater.TryUpdateModel(part, Prefix, null, null);\n    return Editor(part, shapeHelper);\n}\n\n\n\n\n\n\n\nAdd the namespace for \nIUpdateModel\n using the \nCtrl-.\n keyboard shortcut.\n\n\n\n\n\n\nAs explained above, the first \nEditor()\n method is for displaying an edit form in the admin dashboard. You can see that it returns a content shape called \nParts_FeaturedProduct_Edit\n. We will use this information later on when updating the \nplacement.info\n. \n\n\nThe way it does it is by using the provided \nshapeHelper\n factory to create a new shape for the current content part (our FeaturedProductPart with the \nbool IsOnSale\n property). This is the same shape factory we used in our \nDisplay()\n method the first time around.\n\n\nFor editor views you use the \n.EditorTemplate()\n method and pass in the configuration values. By default, Orchard places all of its editor views in the \nEditorTemplates\n folder. Combining this with the \nTemplateName\n parameter we know that we will be creating a view called \n.\\Views\\EditorTemplates\\Parts\\FeaturedProduct.cshtml\n in the next section.\n\n\nThe \nModel\n parameter passes in the data, in our case a data structure that includes the \nIsOnSale\n value. This will be accessible inside the Razor view and we will use it to determine what to display.\n\n\nThe \nPrefix\n is a text value that is prepended to the names of the shapes internally. This makes sure that the names are unique. The \nPrefix\n value that we supply is a method that comes with deriving from \nContentPartDriver\n that just uses a \ntypeof()\n to get the name of the class:\n\n\nprotected virtual string Prefix { get { return typeof(TContent).Name; } }\n\n\n\n\n\nIn more complicated projects this method can combine multiple shapes together and return them as a single \nCombinedShape\n.\n\n\n\n\nThe second overload of the \nEditor()\n method is used when the administrator submits a page that has the \nEditorTemplate\n form inside it. You can see the bare minimum code here which just attempts to pass the form data to the correct internal model. As long as it doesn't have any errors the model will then be persisted to the database automatically by Orchard. \n\n\nIt then calls the original \nPOST\n version of the \nEditor()\n method with the form data already included in the model. This means that after the form has been submitted and the page loads up again it will have the form fields pre-populated with the data that has been entered.\n\n\n\n\nIn more complicated projects you will see further processing being completed after the \nTryUpdateModel()\n call. \n\n\nDon't forget, browsing the Orchard source code is an invaluable tool to learn more about its inner workings. A good reference module for both this and the last tip is the \nWidgetPartDriver\n located in \n.\\Orchard.Web\\Modules\\Orchard.Widgets\\Drivers\\WidgetPartDriver.cs\n. It shows both the combining of shapes and extra validation in the editor update method.\n\n\n\n\nYou should now end up with a \nFeaturedProductDriver.cs\n file that looks like this:\n\n\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Drivers;\nusing Orchard.LearnOrchard.FeaturedProduct.Models;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct.Drivers {\n  public class FeaturedProductDriver : ContentPartDriver<FeaturedProductPart> {\n    protected override DriverResult Display(FeaturedProductPart part, string displayType, dynamic shapeHelper) {\n      return ContentShape(\"Parts_FeaturedProduct\", () => shapeHelper.Parts_FeaturedProduct());\n    }\n\n    protected override DriverResult Editor(FeaturedProductPart part, dynamic shapeHelper) {\n      return ContentShape(\"Parts_FeaturedProduct_Edit\",\n        () => shapeHelper.EditorTemplate(\n          TemplateName: \"Parts/FeaturedProduct\",\n          Model: part,\n          Prefix: Prefix));\n    }\n\n    protected override DriverResult Editor(FeaturedProductPart part, IUpdateModel updater, dynamic shapeHelper) {\n      updater.TryUpdateModel(part, Prefix, null, null);\n      return Editor(part, shapeHelper);\n    }\n  }\n}\n\n\n\nAdd the EditorTemplate view\n\n\nThe editor template view uses the same underlying technology as the front-end view, a Razor view template. Orchard keeps all of its editor templates inside the \nEditorTemplates\n folder of the \nViews\n folder.\n\n\nWhen you're building the administration form you will normally use many of the ASP.NET MVC helper methods such as \n@Html.CheckBoxFor(model => model.IsOnSale)\n. \n\n\nFor this reason you will find that editor template views are strongly-typed views and start off with the \n@model\n command. This will mean that you get the IntelliSense while using \nmodel\n to build the forms. \n\n\nThe editor form for this module will have a single section to represent the Boolean value that we have added to the model. When building the view you should wrap each form item inside a \n<fieldset>\n tag.\n\n\nAdd the EditorTemplate view by following these steps:\n\n\n\n\n\n\nAdd a new folder inside the \nViews\n folder called \nEditorTemplates\n (\nRight click\n on the \nView\n folder in the solution explorer, click \nAdd\n, \nNew Folder\n and type \nEditorTemplates\n).\n\n\n\n\n\n\nAdd another folder inside that called \nParts\n.\n\n\n\n\n\n\nAdd a new \n.cshtml\n Razor view within the \nParts\n folder called \nFeaturedProduct.cshtml\n\n\n\n\n\n\nWithin the \nFeaturedProduct.cshtml\n view file add the following HTML markup:\n\n\n  @model Orchard.LearnOrchard.FeaturedProduct.Models.FeaturedProductPart\n\n  <fieldset>\n    <div class=\"editor-label\">\n      @Html.LabelFor(model => model.IsOnSale)\n    </div>\n    <div class=\"editor-field\">\n      @Html.CheckBoxFor(model => model.IsOnSale)\n      @Html.ValidationMessageFor(model => model.IsOnSale)\n    </div>\n  </fieldset>\n\n\n\n\n\n\n\nWhen you edit the widget in the admin dashboard you will see a simple edit form:\n\n\n\n\nYou can see that it is automatically pulling through the \n[DisplayName]\n attribute value that we used earlier.\n\n\nUpdate the front-end view\n\n\nNow that we have gone through all the steps to surface the \nIsOnSale\n property we can finally use it to make a decision in the front-end view.\n\n\nIf you have experience with normal ASP.NET MVC Razor views you will know that you can blend your \nC#\n code in with the HTML including features such as using conditional statements to control the visibility of certain sections.\n\n\nWe will now update the module to show a red \"ON SALE!\" box in the widget when \nIsOnSale\n is set to \ntrue\n:\n\n\n\n\n\n\nOpen up the view file located at \n.\\Views\\Parts\\FeaturedProduct.cshtml\n\n\n\n\n\n\nCopy this CSS snippet into the \n<style>\n block at the top of the view:\n\n\n.sale-red {\n  background-color: #d44950;\n  color: #fff;\n  float: right;\n  padding: .25em 1em;\n  display: inline;\n}\n\n\n\n\n\n\n\nAdd this snippet in to the main body, above the first \n<p>\n tag:\n\n\n@if (Model.ContentPart.IsOnSale) {\n  <p class=\"sale-red\">ON SALE!</p>\n}\n\n\n\n\n\n\n\nYou will notice that this view doesn't feature an \n@model\n directive at the top. This is because the model is a dynamic class which contains the content part information and various other properties supplied by Orchard. This means that you can't define it in the view beforehand as the class isn't a named type and IntelliSense doesn't know what properties are going to be available at run-time. \n\n\nBecause of this you are on your own when typing up the views. It can be helpful to add breakpoints to inspect the structure of the model at run-time if you don't know what value you're looking for.\n\n\nThe \n@if (Model.ContentPart.IsOnSale) { }\n line simply checks if the value is true and if so it dynamically shows the HTML contained within the curly braces, displaying a red \"ON SALE!\" banner within the widget.\n\n\nYou should now have a \nFeaturedProduct.cshtml\n file that looks like this:\n\n\n<style>\n  .btn-green {\n    padding: 1em;\n    text-align: center;\n    color: #fff;\n    background-color: #34A853;\n    font-size: 2em;\n    display: block;\n  }\n  .sale-red {\n    background-color: #d44950;\n    color: #fff;\n    float: right;\n    padding: .25em 1em;\n    display: inline;\n  }\n</style>\n@if (Model.ContentPart.IsOnSale) {\n  <p class=\"sale-red\">ON SALE!</p>\n}\n<p>Todays featured product is the Sprocket 9000.</p>\n<p><a href=\"/sprocket-9000\" class=\"btn-green\">Click here to view it</a></p>\n\n\n\nUpdate the placement.info\n\n\nBefore we run the module to see our updated widget in action we need to make a change to the \nplacement.info\n file. The module should run without errors at this stage but until we set up a \n<place>\n for the editor template you won't be able to configure the \nIsOnSale\n variable.\n\n\n\n\n\n\nOpen the \nplacement.info\n file located in the root folder of the module.\n\n\n\n\n\n\nWithin the \n<placements>\n tag add the following \n<place>\n tag:\n\n\n<Place Parts_FeaturedProduct_Edit=\"Content:7.5\"/>\n\n\n\nThe order of the \n<place>\n tags doesn't matter.\n\n\n\n\n\n\nThe name of the place that we are targeting \nParts_FeaturedProduct_Edit\n was defined in the driver class when we configured it in the \nEditorTemplate()\n shape factory method. The shape will be injected into the local zone named \"content\" with a weight of 7.5. In this case the weight of 7.5 will move it down to the bottom of the form.\n\n\n\n\nWhen developing your modules it is common to forget this last stage. While you might not always be able to remember to update the \nplacement.info\n before you run, you should take a moment to remember the solution.\n\n\nWhenever the shape isn't displayed where it was expected, think \nplacement.info\n first.\n\n\n\n\nYou should now have a \nplacement.info\n file that looks like this:\n\n\n<Placement>\n  <Place Parts_FeaturedProduct=\"Content:1\"/>\n  <Place Parts_FeaturedProduct_Edit=\"Content:7.5\"/>\n</Placement>\n\n\n\nTrying the module out in Orchard\n\n\nGreat! You have completed another stage of the development. Now its time to load the website up in the browser and play with the new feature you just built.\n\n\n\n\n\n\nWithin Visual Studio, press \nCtrl-F5\n on your keyboard to start the website without debugging enabled (its quicker and you can attach the debugger later if you need it).\n\n\n\n\n\n\nNavigate to the admin dashboard.\n\n\n\n\n\n\nClick \nWidgets\n in the side menu.\n\n\n\n\n\n\nIf you follow the guide correctly in part 1, you should see your \nFeatured Product Widget\n in the list under \nAsideFirst\n. Click on the word \nFeatured Product\n (this may vary depending the title you entered when you set the widget up):\n\n\n\n\n\n\n\n\nThe \nEdit Widget\n page will be displayed. Scroll down to the bottom to find the setting we added:\n\n\n\n\nTick the checkbox. \n\n\n\n\n\n\nClick \nSave\n.\n\n\n\n\n\n\nNavigate back to the homepage of the website by clicking on the site title in the top corner of the admin dashboard:\n\n\n\n\n\n\n\n\nYou should now see your product is marked as being on sale:\n\n\n\n\n\n\nBonus Exercise:\n Go back into the admin dashboard, uncheck the setting, save and come back again to see how the it no longer shows as being on sale.\n\n\n\n\nDownload the code for this lesson\n\n\nYou can download a copy of the module so far at this link:\n\n\n\n\nDownload Orchard.LearnOrchard.FeaturedProduct-Part2-v1.0.zip\n\n\n\n\nTo use it in Orchard simply extract the archive into the modules directory at \n.\\src\\Orchard.Web\\Modules\\\n. If you already have the module installed from a previous part then delete that folder first.\n\n\n\n\nFor Orchard to recognize it the folder name should match the name of the module. Make sure that the folder name is \nOrchard.LearnOrchard.FeaturedProduct\n and then the modules files are located directly under that.\n\n\n\n\nConclusion\n\n\nThis part of the course has expanded your knowledge to touch on some of the data storage and content management features in Orchard. \n\n\nYou have added in the common module development classes that we didn't cover in the first part. You've experienced using the data migrations to incrementally update your data. You've also seen the basics of creating an admin interface and using it to update the configuration settings of a widget.\n\n\nYou can now see the core process of adding a variable to your module and then implementing it, working successively up the layers to surface it in the admin dashboard and the front-end view.  \n\n\nIn the next part of the getting started with modules course we will look at \nworking with content items at the code level\n.",
            "title": "Part 2: Make the Widget Dynamic"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-2/#introduction",
            "text": "This is part two of a four part course. It will get you started with a gentle introduction to extending Orchard at the code level. You will build a very simple module which contains a widget that shows an imaginary featured product.   It will teach you some of the basic components of module development and also encourage you to use best-practices when developing for Orchard.  If you haven't read the previous part of this course then you can go back to the overview to  learn about the Getting Started with Modules course .",
            "title": "Introduction"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-2/#expanding-the-widget-to-make-it-more-dynamic",
            "text": "In the first version of the widget we took the bare minimum of steps that we could in order to get something up and running.  This meant we missed out a few classes that would be in a normal data-driven module and some of the classes we did add were pretty much empty.  Now that you understand the basic workflow of building a module we're going to go back and take a second look at it, adding in some new classes and expanding out the Widget.  By the time we have finished with this part we will have made the widget more dynamic. To achieve this goal we are going to:    Add a  Boolean  property to signify if the item is on sale.    Dip into the Orchard API to hide the widget if the page we are viewing is the featured product.",
            "title": "Expanding the widget to make it more dynamic"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-2/#getting-setup-for-the-lesson",
            "text": "You should have already completed part one of this course before you move on to this part. This means you should have a copy of Orchard with the completed module work.   If you have the original Solution and module files available then:    Open Visual Studio    Open the Solution you created in the first part of the course    If for some reason you don't have these files you can play catch-up by following these steps:    Follow the  setting up for a lesson  guide.    Download the  completed module source code from part 1 .    Extract the archive into the modules directory at  .\\src\\Orchard.Web\\Modules\\ .    Run Orchard by pressing  Ctrl-F5 , go to the admin dashboard, select Modules from the navigation menu and enable the module.    Now we can begin the lesson by starting to build in database functionality to the Featured Product module.",
            "title": "Getting setup for the lesson"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-2/#add-a-contentpartrecord-class",
            "text": "In the first part of this course we created a simple  ContentPart  class called  FeaturedProductPart . Because we weren't storing anything at the time this class was just an empty placeholder.   We are going to go back and give it a property to store some data in the next section but first we need to create a  ContentPartRecord  class.  The  ContentPartRecord  class is used by Orchard to store content part data in a database.  Let's add the class to the module and then start wiring in the  Boolean   IsOnSale  property:    Locate your FeaturedProduct module in the  Solution Explorer ,  Right click  on the  Models  folder and choose  Add ,  Class...    In the  Add New Item  dialog enter  FeaturedProductPartRecord  in to the  Name:  field and press  Add .    Derive the class from  ContentPartRecord :   public class FeaturedProductPartRecord : ContentPartRecord    Add the namespace by pressing  Ctrl-. :     Add a public property to the class. Place your cursor in the main body of the class. Type  prop  then press the  Tab  key twice:   This will insert a code snippet for an automatically implemented public property.    In the first placeholder (you can just start typing and it will replace the  int  automatically) set it to  virtual bool  then press  Tab , type  IsOnSale  and press  Enter  to complete the property.     The important thing to remember for your  ContentPartRecord  classes is that each of the properties you want to store in the database should be marked with the  virtual  keyword. This is so that  NHibernate , the database system used by Orchard, can inject its underlying plumbing.   You should now end up with a file called  .\\Models\\FeaturedProductPartRecord.cs  with the contents:  using Orchard.ContentManagement.Records;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct.Models {\n  public class FeaturedProductPartRecord : ContentPartRecord {\n    public virtual bool IsOnSale { get; set; }\n  }\n}",
            "title": "Add a ContentPartRecord class"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-2/#update-the-contentpart",
            "text": "You now have a class that will provide the interface between your database and your content part ( FeaturedProductPartRecord ).  The first change to the content part will be to let it know about this record class. Then we will add a public property which mirrors the data class and specifies how it will store its data:    Open the  ContentPart  file located in  .\\Models\\FeaturedProductPart.cs    Add a generic type parameter to the FeaturedProductPart class by changing this:   public class FeaturedProductPart : ContentPart  To this:   public class FeaturedProductPart : ContentPart<FeaturedProductPartRecord>    Add the public property to the class:    [DisplayName(\"Is the featured product on sale?\")]\n  public bool IsOnSale {\n    get { return Retrieve(r => r.IsOnSale); }\n    set { Store(r => r.IsOnSale, value); }\n  }    Add the namespace for the  DisplayName  attribute    The  DisplayName  attribute is a feature provided by ASP.NET MVC. Later on when we build the editor view for the admin dashboard it will use this phrase instead of simply displaying \"IsOnSale\"   You should now end up with a  FeaturedProductPart.cs  file that looks like this:  using System.ComponentModel;\nusing Orchard.ContentManagement;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct.Models {\n  public class FeaturedProductPart : ContentPart<FeaturedProductPartRecord> {\n    [DisplayName(\"Is the featured product on sale?\")]\n    public bool IsOnSale {\n      get { return Retrieve(r => r.IsOnSale); }\n      set { Store(r => r.IsOnSale, value); }\n    }\n  }\n}  The  Retrieve()  and  Store()  methods come when you inherit from  ContentPart<T> .   Under the hood your data is stored in two places. There is the underlying database and something called the infoset.",
            "title": "Update the ContentPart"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-2/#understanding-data-storage-in-orchard",
            "text": "Orchard provides an incredibly modular architecture. The way it achieves this is that it breaks everything up into their own little components called content parts. We are busy building one of these content parts right now. Orchard composes these together at run-time to form content types, such as the widget we are working on.  In order to store all of these little pieces of data in the database they are split up into many tables. There can be a lot of SQL  JOIN 's involved with pulling a content item out of the database. This means things aren't always as fast as they could be.  To minimize these effects a secondary data cache is kept. All of the different content parts are encoded into XML and stored in a single column inside a database table. For example, our widget looks something like this:  <Data>\n  <IdentityPart Identifier=\"0e8f0d480f0d4d4bb72ad3d0c756a0d4\" />\n  <CommonPart CreatedUtc=\"2015-09-24T19:37:19.5819846Z\" \n    ModifiedUtc=\"2015-09-24T19:37:19.6720488Z\" \n    PublishedUtc=\"2015-09-24T19:37:19.6810555Z\" />\n  <WidgetPart RenderTitle=\"true\" Title=\"Featured Product\" Position=\"1\"\n    Zone=\"AsideFirst\" Name=\"\" CssClasses=\"\" />\n</Data>  So instead of pulling data from three different tables (IdentityPart, CommonPart and WidgetPart) Orchard just selects the single XML block and checks in there. The  Retrieve()  and  Store()  methods automatically keep this data and the individual database tables in sync for you.  Why not just use the XML infoset all the time? If you need to sort the data or filter it then its actually quicker to do this all within the SQL database server rather than extracting everything and sorting / filtering it after.   In certain scenario's you might not need one or the other of these data stores. There are more advanced approaches that you can take in these situations but that's an advanced topic for a later guide.   This changeover was implemented in Orchard v1.8 and was known as \"The Shift\". Bertrand Le Roy has  written more about this on his blog .",
            "title": "Understanding data storage in Orchard"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-2/#upgrading-using-a-data-migration",
            "text": "In the first part of this course we created a  Migrations.cs  class file. Inside it we wrote the  Create()  method which returned  1 . When Orchard had finished running the method it stored that  1  in the database.  Now that we want to make some changes to our modules data storage (we want to add in a table for the data to be stored in) we can add a new method  UpdateFrom1() . Orchard will automatically find this method the next time the site is loaded and run this updated data migration.  At the end of the update method we will return  2 . This means in the future if we want to make further changes we could add an  UpdateFrom2()  method. We can keep returning a number one higher than the previous to update as many times as we need.    Open the  Migrations.cs  file in the root folder of the module.    Beneath the  Create()  method, add in the following method:  public int UpdateFrom1() {\n  SchemaBuilder.CreateTable(typeof(FeaturedProductPartRecord).Name,\n    table => table\n      .ContentPartRecord()\n      .Column<bool>(\"IsOnSale\"));\n  return 2;\n}    To start off with we are using the  SchemaBuilder  class to create a new table. The first parameter is the table name. This should match the ContentPartRecord we built.   Instead of pulling it out using  typeof().Name  you could pass in a string such as  CreateTable(\"FeaturedProductsPartRecord\", ...);  but that leaves you open to introducing small typos into the code - like I did just then.   Did you notice the extra  s  I accidentally typed into the table name?  If you make a mistake like this then you won't get an exception. Orchard will still run but your data will be saved to the wrong table creating hard to find bugs.   The  ContentPartRecord()  call is just a simple shorthand to add in the  id  column. If you look in the definition (just place your cursor in the method in Visual Studio and press  F12 ) you will see it simply adds an extra  Column<>  into the chain:  Column<int>(\"Id\", column => column.PrimaryKey().NotNull());  We then add our column with a data type  bool  and a name  IsOnSale  which matches our property on the record class.  NHibernate  will automatically match the name of the property on the record class with the column in the database.   Bonus Exercise:  Look around in the  Migrations.cs  files located in the other built-in modules for many examples of the things you can do with this class.  To do this just select the  Search Solution Explorer  textbox at the top of the  Solution Explorer  or press  Ctrl-; . When it's selected just type  Migrations.cs  in and it will filter out all of the  migrations.cs  files in the solution.   You should now end up with a  Migrations.cs  file that looks like this:  using Orchard.ContentManagement.MetaData;\nusing Orchard.Core.Common.Models;\nusing Orchard.Data.Migration;\nusing Orchard.LearnOrchard.FeaturedProduct.Models;\nusing Orchard.Widgets.Models;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct {\n  public class Migrations : DataMigrationImpl {\n    public int Create() {\n      ContentDefinitionManager.AlterTypeDefinition(\n        \"FeaturedProductWidget\", cfg => cfg\n        .WithSetting(\"Stereotype\", \"Widget\")\n        .WithPart(typeof(FeaturedProductPart).Name)\n        .WithPart(typeof(CommonPart).Name)\n        .WithPart(typeof(WidgetPart).Name));\n\n      return 1;\n    }\n\n    public int UpdateFrom1() {\n      SchemaBuilder.CreateTable(typeof(FeaturedProductPartRecord).Name, \n        table => table\n          .ContentPartRecord()\n          .Column<bool>(\"IsOnSale\"));\n\n      return 2;\n    }\n  }\n}",
            "title": "Upgrading using a data migration"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-2/#add-a-handler",
            "text": "The plumbing for connecting the module code to the database is almost complete. The last thing to do is to register a  StorageFilter  for the  ContentPartRecord .  The  StorageFilter  class takes care of persisting the data from repository object to the database. In this case it's the  FeaturedProductPartRecord  class that needs registering.  You do this registration inside the  Handler  class, although that's not it's only use. You can think of the handler like a filter in ASP.NET MVC. It's a piece of code that is meant to run when specific events happen in the application, but that are not specific to a given content type.   For example, you could build an analytics module that listens to the  Loaded  event in order to log usage statistics.    If you're curious, you can see what event handlers you can override in your own handlers by examining the source code for  ContentHandlerBase  and reading the  understanding content handlers  guide.   The handler you need in this module is not going to be very complex, but it will implement some plumbing that is necessary to set up the persistence of the part:    In the  Solution Explorer , right click on the  Orchard.LearnOrchard.FeaturedProduct  project and choose  Add ,  New Folder  and create a new folder called  Handlers .    Now right click on the  Handlers  folder and choose  Add ,  Class... .    In the  Add New Item  dialog enter  FeaturedProductHandler  in to the  Name:  field and press  Add .    Derive the class from  ContentHandler :   public class FeaturedProductHandler : ContentHandler    Add the namespace by pressing  Ctrl-. :     You now need to add in the standard boilerplate handler constructor code which wires up the  StorageFilter  to the repository:  public FeaturedProductHandler(\n  IRepository<FeaturedProductPartRecord> repository) {\n    Filters.Add(StorageFilter.For(repository));\n}    Add the namespace for the  FeaturedProductPartRecord  and then the  IRepository<> .    You should now end up with a  FeaturedProductHandler.cs  file that looks like this:  using Orchard.ContentManagement.Handlers;\nusing Orchard.Data;\nusing Orchard.LearnOrchard.FeaturedProduct.Models;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct.Handlers {\n  public class FeaturedProductHandler : ContentHandler {\n    public FeaturedProductHandler(\n      IRepository<FeaturedProductPartRecord> repository) {\n        Filters.Add(StorageFilter.For(repository));\n    }\n  }\n}",
            "title": "Add a handler"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-2/#update-the-driver-to-support-an-editor-view",
            "text": "This time through with the driver it's going to get it's other two core boilerplate methods.  The first is a method called  Editor()  which is used to build the shape which will display the edit interface in the admin dashboard. This is designed to be used with a HTTP  GET  request.  The second is another  Editor()  overload which takes the submitted information from the first and attempts to pass that information back into the database. This is designed to be used with a HTTP  POST  request.    Open the  FeaturedProductDriver.cs  class which is in the  .\\Drivers\\  folder of the module project.    Below the  Display()  method, paste in this block of code:  protected override DriverResult Editor(FeaturedProductPart part, \n  dynamic shapeHelper) {\n    return ContentShape(\"Parts_FeaturedProduct_Edit\",\n      () => shapeHelper.EditorTemplate(\n        TemplateName: \"Parts/FeaturedProduct\",\n        Model: part,\n        Prefix: Prefix));\n}\n\nprotected override DriverResult Editor(FeaturedProductPart part,\n  IUpdateModel updater, dynamic shapeHelper) {\n    updater.TryUpdateModel(part, Prefix, null, null);\n    return Editor(part, shapeHelper);\n}    Add the namespace for  IUpdateModel  using the  Ctrl-.  keyboard shortcut.    As explained above, the first  Editor()  method is for displaying an edit form in the admin dashboard. You can see that it returns a content shape called  Parts_FeaturedProduct_Edit . We will use this information later on when updating the  placement.info .   The way it does it is by using the provided  shapeHelper  factory to create a new shape for the current content part (our FeaturedProductPart with the  bool IsOnSale  property). This is the same shape factory we used in our  Display()  method the first time around.  For editor views you use the  .EditorTemplate()  method and pass in the configuration values. By default, Orchard places all of its editor views in the  EditorTemplates  folder. Combining this with the  TemplateName  parameter we know that we will be creating a view called  .\\Views\\EditorTemplates\\Parts\\FeaturedProduct.cshtml  in the next section.  The  Model  parameter passes in the data, in our case a data structure that includes the  IsOnSale  value. This will be accessible inside the Razor view and we will use it to determine what to display.  The  Prefix  is a text value that is prepended to the names of the shapes internally. This makes sure that the names are unique. The  Prefix  value that we supply is a method that comes with deriving from  ContentPartDriver  that just uses a  typeof()  to get the name of the class:  protected virtual string Prefix { get { return typeof(TContent).Name; } }   In more complicated projects this method can combine multiple shapes together and return them as a single  CombinedShape .   The second overload of the  Editor()  method is used when the administrator submits a page that has the  EditorTemplate  form inside it. You can see the bare minimum code here which just attempts to pass the form data to the correct internal model. As long as it doesn't have any errors the model will then be persisted to the database automatically by Orchard.   It then calls the original  POST  version of the  Editor()  method with the form data already included in the model. This means that after the form has been submitted and the page loads up again it will have the form fields pre-populated with the data that has been entered.   In more complicated projects you will see further processing being completed after the  TryUpdateModel()  call.   Don't forget, browsing the Orchard source code is an invaluable tool to learn more about its inner workings. A good reference module for both this and the last tip is the  WidgetPartDriver  located in  .\\Orchard.Web\\Modules\\Orchard.Widgets\\Drivers\\WidgetPartDriver.cs . It shows both the combining of shapes and extra validation in the editor update method.   You should now end up with a  FeaturedProductDriver.cs  file that looks like this:  using Orchard.ContentManagement;\nusing Orchard.ContentManagement.Drivers;\nusing Orchard.LearnOrchard.FeaturedProduct.Models;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct.Drivers {\n  public class FeaturedProductDriver : ContentPartDriver<FeaturedProductPart> {\n    protected override DriverResult Display(FeaturedProductPart part, string displayType, dynamic shapeHelper) {\n      return ContentShape(\"Parts_FeaturedProduct\", () => shapeHelper.Parts_FeaturedProduct());\n    }\n\n    protected override DriverResult Editor(FeaturedProductPart part, dynamic shapeHelper) {\n      return ContentShape(\"Parts_FeaturedProduct_Edit\",\n        () => shapeHelper.EditorTemplate(\n          TemplateName: \"Parts/FeaturedProduct\",\n          Model: part,\n          Prefix: Prefix));\n    }\n\n    protected override DriverResult Editor(FeaturedProductPart part, IUpdateModel updater, dynamic shapeHelper) {\n      updater.TryUpdateModel(part, Prefix, null, null);\n      return Editor(part, shapeHelper);\n    }\n  }\n}",
            "title": "Update the driver to support an editor view"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-2/#add-the-editortemplate-view",
            "text": "The editor template view uses the same underlying technology as the front-end view, a Razor view template. Orchard keeps all of its editor templates inside the  EditorTemplates  folder of the  Views  folder.  When you're building the administration form you will normally use many of the ASP.NET MVC helper methods such as  @Html.CheckBoxFor(model => model.IsOnSale) .   For this reason you will find that editor template views are strongly-typed views and start off with the  @model  command. This will mean that you get the IntelliSense while using  model  to build the forms.   The editor form for this module will have a single section to represent the Boolean value that we have added to the model. When building the view you should wrap each form item inside a  <fieldset>  tag.  Add the EditorTemplate view by following these steps:    Add a new folder inside the  Views  folder called  EditorTemplates  ( Right click  on the  View  folder in the solution explorer, click  Add ,  New Folder  and type  EditorTemplates ).    Add another folder inside that called  Parts .    Add a new  .cshtml  Razor view within the  Parts  folder called  FeaturedProduct.cshtml    Within the  FeaturedProduct.cshtml  view file add the following HTML markup:    @model Orchard.LearnOrchard.FeaturedProduct.Models.FeaturedProductPart\n\n  <fieldset>\n    <div class=\"editor-label\">\n      @Html.LabelFor(model => model.IsOnSale)\n    </div>\n    <div class=\"editor-field\">\n      @Html.CheckBoxFor(model => model.IsOnSale)\n      @Html.ValidationMessageFor(model => model.IsOnSale)\n    </div>\n  </fieldset>    When you edit the widget in the admin dashboard you will see a simple edit form:   You can see that it is automatically pulling through the  [DisplayName]  attribute value that we used earlier.",
            "title": "Add the EditorTemplate view"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-2/#update-the-front-end-view",
            "text": "Now that we have gone through all the steps to surface the  IsOnSale  property we can finally use it to make a decision in the front-end view.  If you have experience with normal ASP.NET MVC Razor views you will know that you can blend your  C#  code in with the HTML including features such as using conditional statements to control the visibility of certain sections.  We will now update the module to show a red \"ON SALE!\" box in the widget when  IsOnSale  is set to  true :    Open up the view file located at  .\\Views\\Parts\\FeaturedProduct.cshtml    Copy this CSS snippet into the  <style>  block at the top of the view:  .sale-red {\n  background-color: #d44950;\n  color: #fff;\n  float: right;\n  padding: .25em 1em;\n  display: inline;\n}    Add this snippet in to the main body, above the first  <p>  tag:  @if (Model.ContentPart.IsOnSale) {\n  <p class=\"sale-red\">ON SALE!</p>\n}    You will notice that this view doesn't feature an  @model  directive at the top. This is because the model is a dynamic class which contains the content part information and various other properties supplied by Orchard. This means that you can't define it in the view beforehand as the class isn't a named type and IntelliSense doesn't know what properties are going to be available at run-time.   Because of this you are on your own when typing up the views. It can be helpful to add breakpoints to inspect the structure of the model at run-time if you don't know what value you're looking for.  The  @if (Model.ContentPart.IsOnSale) { }  line simply checks if the value is true and if so it dynamically shows the HTML contained within the curly braces, displaying a red \"ON SALE!\" banner within the widget.  You should now have a  FeaturedProduct.cshtml  file that looks like this:  <style>\n  .btn-green {\n    padding: 1em;\n    text-align: center;\n    color: #fff;\n    background-color: #34A853;\n    font-size: 2em;\n    display: block;\n  }\n  .sale-red {\n    background-color: #d44950;\n    color: #fff;\n    float: right;\n    padding: .25em 1em;\n    display: inline;\n  }\n</style>\n@if (Model.ContentPart.IsOnSale) {\n  <p class=\"sale-red\">ON SALE!</p>\n}\n<p>Todays featured product is the Sprocket 9000.</p>\n<p><a href=\"/sprocket-9000\" class=\"btn-green\">Click here to view it</a></p>",
            "title": "Update the front-end view"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-2/#update-the-placementinfo",
            "text": "Before we run the module to see our updated widget in action we need to make a change to the  placement.info  file. The module should run without errors at this stage but until we set up a  <place>  for the editor template you won't be able to configure the  IsOnSale  variable.    Open the  placement.info  file located in the root folder of the module.    Within the  <placements>  tag add the following  <place>  tag:  <Place Parts_FeaturedProduct_Edit=\"Content:7.5\"/>  The order of the  <place>  tags doesn't matter.    The name of the place that we are targeting  Parts_FeaturedProduct_Edit  was defined in the driver class when we configured it in the  EditorTemplate()  shape factory method. The shape will be injected into the local zone named \"content\" with a weight of 7.5. In this case the weight of 7.5 will move it down to the bottom of the form.   When developing your modules it is common to forget this last stage. While you might not always be able to remember to update the  placement.info  before you run, you should take a moment to remember the solution.  Whenever the shape isn't displayed where it was expected, think  placement.info  first.   You should now have a  placement.info  file that looks like this:  <Placement>\n  <Place Parts_FeaturedProduct=\"Content:1\"/>\n  <Place Parts_FeaturedProduct_Edit=\"Content:7.5\"/>\n</Placement>",
            "title": "Update the placement.info"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-2/#trying-the-module-out-in-orchard",
            "text": "Great! You have completed another stage of the development. Now its time to load the website up in the browser and play with the new feature you just built.    Within Visual Studio, press  Ctrl-F5  on your keyboard to start the website without debugging enabled (its quicker and you can attach the debugger later if you need it).    Navigate to the admin dashboard.    Click  Widgets  in the side menu.    If you follow the guide correctly in part 1, you should see your  Featured Product Widget  in the list under  AsideFirst . Click on the word  Featured Product  (this may vary depending the title you entered when you set the widget up):     The  Edit Widget  page will be displayed. Scroll down to the bottom to find the setting we added:   Tick the checkbox.     Click  Save .    Navigate back to the homepage of the website by clicking on the site title in the top corner of the admin dashboard:     You should now see your product is marked as being on sale:    Bonus Exercise:  Go back into the admin dashboard, uncheck the setting, save and come back again to see how the it no longer shows as being on sale.",
            "title": "Trying the module out in Orchard"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-2/#download-the-code-for-this-lesson",
            "text": "You can download a copy of the module so far at this link:   Download Orchard.LearnOrchard.FeaturedProduct-Part2-v1.0.zip   To use it in Orchard simply extract the archive into the modules directory at  .\\src\\Orchard.Web\\Modules\\ . If you already have the module installed from a previous part then delete that folder first.   For Orchard to recognize it the folder name should match the name of the module. Make sure that the folder name is  Orchard.LearnOrchard.FeaturedProduct  and then the modules files are located directly under that.",
            "title": "Download the code for this lesson"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-2/#conclusion",
            "text": "This part of the course has expanded your knowledge to touch on some of the data storage and content management features in Orchard.   You have added in the common module development classes that we didn't cover in the first part. You've experienced using the data migrations to incrementally update your data. You've also seen the basics of creating an admin interface and using it to update the configuration settings of a widget.  You can now see the core process of adding a variable to your module and then implementing it, working successively up the layers to surface it in the admin dashboard and the front-end view.    In the next part of the getting started with modules course we will look at  working with content items at the code level .",
            "title": "Conclusion"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-3/",
            "text": "Introduction\n\n\nThis is part three of a four part course. It will get you started with a gentle introduction to extending Orchard at the code level. You will build a very simple module which contains a widget that shows an imaginary featured product. \n\n\nIt will teach you some of the basic components of module development and also encourage you to use best-practices when developing for Orchard.\n\n\nIf you haven't read the previous parts of this course then you can go back to the overview to \nlearn about the Getting Started with Modules course\n.\n\n\nNow that we have built the widget and expanded it to use database storage for it's configuration we will turn to the Orchard API to make some decisions via code.\n\n\nAmending the widget through code\n\n\nThe second feature we have planned to add to the widget is some code that will detect when a user is viewing the featured product page and then make some changes to the display.\n\n\nAt the moment the widget is displayed site-wide with a big green \"Click here to view it\" link. When the user is on the product page it doesn't make sense to show a link back to itself.\n\n\nIn the previous part we added a configurable item to the widget. The widget read that setting in and updated itself. The same code is run no matter where you embed the widget. \n\n\nThis time, we will expand the widget so that it is aware of it's surroundings. When the page loads and the widget is asked to display, it will inspect the page as a whole, figure out what type of page it is on and then, if applicable, drill down to see what specific product page it's on. \n\n\nThis information will then be passed through to the view so that we can change the display on the fly. \n\n\nSetting up a ContentType to work with\n\n\nThe admin dashboard is quite powerful. If you have been using Orchard for long you'll likely have set up your own content types within the \nContent Definition\n section of the admin dashboard.\n\n\n\n\nThis section allows you to combine pre-existing content parts together to form a custom content type that can be displayed in your site. \n\n\nIt also has a section called \nFields\n. When there isn't a content part that quite fits your needs you can turn to the \nFields\n to add extra pieces of data to the content type on the fly.\n\n\nWe are going to quickly build a \nProduct\n content type which has some of the common core content parts; a title, a URL, a menu entry and some body text. We will also add in single text field called \nProduct Id\n to detect which particular product is being viewed:\n\n\n\n\n\n\nNavigate to the admin dashboard of your site.\n\n\n\n\n\n\nClick \nContent Definition\n in the menu down the side.\n\n\n\n\n\n\nClick \nCreate new type\n.\n\n\n\n\n\n\nEnter \nProduct\n for the \nDisplay Name\n. This should automatically fill out the \nContent Type Id\n field for you. Make sure the \nContent Type Id\n is also set to \nProduct\n:\n\n\n\n\n\n\n\n\nClick \nCreate\n.\n\n\n\n\n\n\nIn the \nAdd Parts to \"Product\"\n section tick the following parts:\n\n\n\n\nAutoroute\n\n\nBody\n\n\nMenu\n\n\nTitle\n\n\n\n\n\n\n\n\nClick \nSave\n. You will be taken to the \nEdit Content Type\n page and you should see several messages from the Orchard notifier system:\n\n\n\n\n\n\n\n\nScroll down to the \nFields\n section and then click the \nAdd Field\n button:\n\n\n\n\n\n\n\n\nOn the \nAdd New Field To \"Product\"\n page fill the form out like this:\n\n\n\n\nDisplay Name: \nProduct Id\n\n\nTechnical Name: \nProductId\n\n\nField Type: \nInput Field\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nClick \nSave\n.\n\n\n\n\n\n\nThe main \nEdit Content Type\n page will reopen. Just for completeness lets configure the field so that it is flagged as required. If you scroll to the \nFields\n section you will see your new field is now listed. The small \n>\n will expand out to show configuration properties for that field:\n\n\n\n\nClick the \n>\n to expand the field configuration pane.\n\n\n\n\n\n\nTick the \nRequired\n check box:\n\n\n\n\nThis will flag the field as requiring content when you create a new content item based off the \nProduct\n content type. Orchard will automatically handle the validation for you and show a notification if the requirement is not met.\n\n\n\n\n\n\nTo demonstrate the power of the configurable fields in Orchard we will also add a \nPattern\n constraint. The \nProductId\n should be in all caps, with only letters or numbers, no spaces or other punctuation. \n\n\nTo describe this pattern to the system we will use something called a regular expression (often shortened to a regex). At first these patterns can seem complex but they offer a succinct way to describe text patterns.\n\n\nTo meet the requirement described above the regex will be: \n^[A-Z0-9]+$\n\n\nIn the Pattern field enter the pattern \n^[A-Z0-9]+$\n.\n\n\n\n\n\n\nClick \nSave\n.\n\n\n\n\n\n\nIn the next section we will create a demo product using this new content type.\n\n\n\n\nRegular Expression breakdown:\n If you're curious as to what different sections are in the regex we just used, it breaks down into this:\n\n\n\n\n^\n means match the start of the string (nothing before it)\n\n\n[]\n means match the pattern of characters inside these brackets\n\n\nA-Z\n means match any character between uppercase A to uppercase Z\n\n\n0-9\n means match any character between 0 to 9\n\n\n+\n means match one or more repetitions of this character set. This means any combination of the letters and numbers but there needs to be at least one.\n\n\n$\n means match the end of the string (nothing after it)\n\n\n\n\n\n\nPrepare a sample product\n\n\nFor this to work we need to create a dummy product that will act as the featured product:\n\n\n\n\n\n\nNavigate to the admin dashboard of your site.\n\n\n\n\n\n\nIn the \nNew\n section of the menu click \nProduct\n:\n\n\n\n\n\n\n\n\nSet the \nTitle\n of the page to \nSprocket 9000\n.\n\n\n\n\n\n\nLeave the \nPermalink\n blank.\n\n\n\n\n\n\nYou can optionally add some content in to the \nBody\n section just for something to preview. Here is some Lorem Ipsum sample data: \n\n\nCurabitur non nulla sit amet nisl tempus convallis quis ac lectus. Nulla \nquis lorem ut libero malesuada feugiat. Sed porttitor lectus nibh. \nVestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere\ncubilia Curae; Donec velit neque, auctor sit amet aliquam vel, ullamcorper.\n\n\n\n\n\n\n\nThe \nProduct Id\n is the custom field we created for the content type. Notice the red \n*\n which indicates a required field. If you try to create the \nProduct\n with a blank \nProduct Id\n you will see a validation error:\n\n\n\n\nIf you try to enter an incorrect value that doesn't match the pattern we specified you will also see an error:\n\n\n\n\nEnter \nSPROCKET9000\n into the \nProduct Id\n.\n\n\n\n\n\n\nTick the \nShow on a menu\n checkbox.\n\n\n\n\n\n\nLeave the menu selection on \nMain Menu\n.\n\n\n\n\n\n\nIn the \nMenu text\n enter the product name, \nSprocket 9000\n.\n\n\n\n\n\n\nClick \nPublish Now\n.\n\n\n\n\n\n\nThe page will reload after Orchard has created the new content item in the background. You will see a green message saying \"Your Page has been created\":\n\n\n\n\nIf you navigate back to the front-end of the website you should see a new menu item called \nSprocket 9000\n. Clicking it will take you to the demo page you just created:\n\n\n\n\nIf the menu option doesn't appear on the page you probably clicked \nSave\n instead of \nPublish\n. When we created the content type is defaults to being marked as draftable. This means that you can save a copy in the system before it's made available publically. Until you click the \nPublish Now\n button it won't show on the website.\n\n\nThat's all the preparation we need to do before we can dive back into the code. \n\n\n\n\nBonus Exercise:\n Go back to the admin dashboard and add in another product. It's not required but will mean that you can demonstrate the code is correctly identifying the product id later on.\n\n\n\n\nAll of this could also have been done through code. We developed this content type via the admin dashboard to show that it's possible to work with content types via code whether created through classes in a module or in the admin dashboard.\n\n\n\n\nBonus Exercise:\n Using the techniques learned in the first parts of this course, go back and create a clone of the \nProduct\n content type but create it through code. Name the new content type \nProductViaCode\n so that it doesn't clash with the \nProduct\n we have just created.\n\n\nHint: The \ncreating types from code\n documentation should point you in the right direction if you get stuck.  \n\n\n\n\nWriting code against the Orchard API\n\n\nAt the moment the widget is displayed site-wide with a big green \"Click here to view it\" link. When the user is on the featured product page it doesn't make sense to show a link back to itself.\n\n\nWe're going to use Orchard's API so that when the widget is asked to display itself (in the driver) it will examine the current page that's being displayed (the content item), check if it's on a product page (content type of \nProduct\n) and then check the product id of the product page to see if it's the current featured product (the \nProductId\n field contains the product).\n\n\nFor the sake of visual comparison we will swap the green \"Click here to view it\" button out with a purple box that says \"Read more about it on this page\".\n\n\nExpanding out the display shape lambda\n\n\nSo, based on this blueprint of our plans, how do we take the first step? The decision about what the module should display when it's asked to comes from the code within the driver class. The \nDisplay()\n method in the \nFeaturedProductDriver.cs\n class currently looks like this:\n\n\nprotected override DriverResult Display(FeaturedProductPart part, \n  string displayType, dynamic shapeHelper) {\n    return ContentShape(\"Parts_FeaturedProduct\", \n      () => shapeHelper.Parts_FeaturedProduct());\n}\n\n\n\nThe \nshapeHelper\n takes a lambda as it's parameter (\n() => shapeHelper.Parts_FeaturedProduct()\n) and because the code being run at the moment is just a single line statement it is using a short form version of it. To give ourselves some room to code we can expand out the lambda so that it wraps the code in curly braces and returns a shape at the end.\n\n\nIn the case of our current \nDisplay()\n method the code would go from this:\n\n\nreturn ContentShape(\"Parts_FeaturedProduct\", \n  () => shapeHelper.Parts_FeaturedProduct());\n\n\n\nTo this:\n\n\nreturn ContentShape(\"Parts_FeaturedProduct\", () => { // curly brace here\n\n    // extra space to write additional lines of code here\n\n    return shapeHelper.Parts_FeaturedProduct(); // return keyword and semicolon\n}); // curly brace here\n\n\n\nAn alternative solution to expanding out this \nDisplay()\n method would have been to do our preparation at the start of the method, something like this:\n\n\nprotected override DriverResult DisplayCat(FeaturedProductPart part, \n  string displayType, dynamic shapeHelper) {\n    // extra code here\n    return ContentShape(\"Parts_FeaturedProduct\", \n      () => shapeHelper.Parts_FeaturedProduct());\n}\n\n\n\nWhat's the difference and why is this a bad idea? The \nDisplay()\n method gets called  to prepare the shapes each time a visitor requests a page. With the modularity of the Orchard code you might still end up having something else on the page influencing it's display so that the shape doesn't make it to the final output.\n\n\nWhen the setup code is passed within the lambda it doesn't get run until it's actually needed. This means that if you need to do some \"expensive\" setup code you don't want to run it unless you're sure it's going to be used. In this context expensive means heavy resource usage (it could require complicated database calls or data crunching) or time consuming (you might rely on calling a 3rd party web service to get some information).\n\n\nYou don't want to waste your resources and slow down the page being displayed by running unnecessary setup code so that's why you should use the first solution above. It keeps all the setup code inside the curly braces of the lambda and only runs it when the shape is actually being displayed.\n\n\nLet's implement what we have discussed so far:  \n\n\n\n\n\n\nOpen up the \nFeaturedProductDriver.cs\n file located in the \n.\\Drivers\\\n folder.\n\n\n\n\n\n\nReplace the \nDisplay()\n method with the following:\n\n\nprotected override DriverResult Display(FeaturedProductPart part, \n  string displayType, dynamic shapeHelper) {\n    return ContentShape(\"Parts_FeaturedProduct\", () => {\n      // extra space to write additional lines of code here\n      return shapeHelper.Parts_FeaturedProduct();\n    });\n}\n\n\n\n\n\n\n\nGetting the current ContentItem being displayed\n\n\nGetting the current \nContentItem\n from within the widget driver means using some of the built-in Orchard classes.\n\n\nTo look up the \nContentItem\n we need to get the \nId\n of the content out of the ASP.NET MVC route data, then convert this into a content item by requesting it via the content manager.\n\n\nWe could add a public property to the driver which looked like this:\n\n\nprivate IContent _currentContent = null;\nprivate IContent CurrentContent {\n  get {\n    if (_currentContent == null) {\n      var itemRoute = _aliasService.Get(_workContextAccessor.GetContext()\n        .HttpContext.Request.AppRelativeCurrentExecutionFilePath\n        .Substring(1).Trim('/'));\n\n        _currentContent = _contentManager.Get(Convert.ToInt32(itemRoute[\"Id\"]));\n    }\n\n    return _currentContent;\n  }\n}\n\n\n\nBut where do all of these supporting classes like \n_aliasService\n and \n_contentManager\n come from?\n\n\nDependency injection in Orchard\n\n\nThe modular design of Orchard means that each feature of Orchard tries to be as independent as it can. This means that when the Widget is building it's shape it doesn't automatically know about the wider context of the page being requested. It is a specialized unit of code which completes it's task as efficiently and simply as possible.\n\n\nWhen it's required, the module can request access to parts of the larger Orchard system through the use of Orchard's service classes.\n\n\nOrchard provides service classes that allow you to leverage Orchard features at the code level. When you need to do things like pulling content out of the content manager, displaying notifications, logging or working with the URL, you can turn to these services classes.\n\n\nThese classes are grouped together by a common inheritance; they implement \nIDependency\n. When you need one of them you simply need to add it to your constructor and an instance will be injected into your class at run-time. This is called dependency injection. You can get many frameworks that will enable this but in Orchard the service is provided by \nAutofac\n.\n\n\nEach of these support classes specialize in providing a single feature. This means you only open communication channels to the main system for the parts which you actually need, keeping the system decoupled.\n\n\nConstructor injection\n\n\nWhen you want to get access to one of Orchard's service classes you need to add a reference to the class to the default constructor. However, instead of requesting the class directly you will always work with the interface that the service you want implements.\n\n\nThe advantage of dependency injection is that you don't depend on concrete implementations (the actual class). Working with an interface means that you or a module can swap out the implementation of a specific class if it needs to. By always working with an interface instead of the actual service it means you don't need to know which particular implementation you are working with, preventing you from being tied to it.\n\n\nSo if you wanted a copy of the content manager then you would request \nIContentManager contentManager\n in your constructor.\n\n\nThe standard process for incorporating a new service into the class is as follows (you don't need to do this now):\n\n\n\n\n\n\nCreate a new private, read only variable to hold the injected class. It should start with an underscore like \n_contentManager\n.\n\n\n\n\n\n\nUpdate the default constructor to include the service as a parameter.\n\n\n\n\n\n\nAssign the injected class to the private variable for later use.\n\n\n\n\n\n\nWe will use this three step theory in the next section.\n\n\nImplementing CurrentContent\n\n\nBased on the service requirements in our demo implementation above of the \nCurrentContent\n property we know that we will need \nIContentManager\n, \nIWorkContextAccessor\n, \nIAliasService\n to turn the route data into an instance of the current \nContentItem\n.\n\n\nTaking what we have learned about dependency injection and knowing our service requirements we can now implement the next stage of the \nFeaturedProductDriver\n class:\n\n\n\n\n\n\nOpen up the \nFeaturedProductDriver.cs\n file located in the \n.\\Drivers\\\n folder.\n\n\n\n\n\n\nAdd the following properties to the top of the \nFeaturedProductDriver\n class:\n\n\nprivate readonly IContentManager _contentManager;\nprivate readonly IWorkContextAccessor _workContextAccessor;\nprivate readonly IAliasService _aliasService;\n\n\n\nIAliasService\n will need it's namespace but when you try to add it via \nCtrl-.\n you will see Visual Studio doesn't know where to find it.\n\n\nWe need to add a reference and update the dependencies of our module.\n\n\n\n\n\n\nRight click\n on the \nReferences\n entry in the module's project within the \nSolution Explorer\n window and choose \nAdd Reference...\n.\n\n\n\n\n\n\nClick the \nProjects\n tab on the left. \nOrchard.Alias\n should already be visible. \nHover\n your mouse over it and a checkbox will appear. Click the checkbox for \nOrchard.Alias\n. Click \nOK\n.\n\n\n\n\n\n\n\n\nNow we have to update our dependencies straight away so they don't get forgotten. Open up the \nModule.txt\n file located in the project root.\n\n\n\n\n\n\nThe last line of the file should contain the \nOrchard.Widgets\n dependency that we created in part one. This field will take a comma separated list detailing  each dependency a modules has.\n\n\nUpdate the line to add \nOrchard.Alias\n, ensuring that the line keeps it's indentation, so that the line now looks like this:\n\n\n        Dependencies: Orchard.Widgets, Orchard.Alias\n\n\n\n\n\n\n\nGo back to the \nFeaturedProductDriver.cs\n file. You can now add the missing namespace via \nCtrl-.\n.\n\n\n\n\n\n\nBelow the private properties, add in a default constructor:\n\n\npublic FeaturedProductDriver(IContentManager contentManager,\n  IWorkContextAccessor workContextAccessor,\n  IAliasService aliasService) {\n    _contentManager = contentManager;\n    _workContextAccessor = workContextAccessor;\n    _aliasService = aliasService;\n}\n\n\n\nYou can see that we are following the standard pattern of defining a private property, adding an instance to the constructor parameters and then assigning the injected class to the private variable.\n\n\n\n\n\n\nThe Driver now has all of the requirements implemented to support the \nCurrentContent\n property. \n\n\nAdd this code in between the first batch of private properties and the constructor:\n\n\nprivate IContent _currentContent = null;\nprivate IContent CurrentContent {\n  get {\n    if (_currentContent == null) {\n      var itemRoute = _aliasService.Get(_workContextAccessor.GetContext()\n        .HttpContext.Request.AppRelativeCurrentExecutionFilePath\n        .Substring(1).Trim('/'));                 \n      _currentContent = _contentManager.Get(Convert.ToInt32(itemRoute[\"Id\"]));\n    }\n    return _currentContent;\n  }\n}\n\n\n\n\n\n\n\nIf you have cleaned up your \nusing\n statements then you might need to add a namespace using \nCtrl-.\n for the \nConvert.ToInt32()\n.\n\n\n\n\n\n\nThe complete \nFeaturedProductDriver.cs\n should now look like this:\n\n\nusing System;\nusing Orchard.Alias;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Drivers;\nusing Orchard.LearnOrchard.FeaturedProduct.Models;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct.Drivers {\n  public class FeaturedProductDriver : ContentPartDriver<FeaturedProductPart>{    \n    private readonly IContentManager _contentManager;\n    private readonly IWorkContextAccessor _workContextAccessor;\n    private readonly IAliasService _aliasService;\n\n    private IContent _currentContent = null;\n    private IContent CurrentContent {\n      get {\n        if (_currentContent == null) {\n          var itemRoute = _aliasService.Get(_workContextAccessor.GetContext()\n            .HttpContext.Request.AppRelativeCurrentExecutionFilePath\n            .Substring(1).Trim('/'));\n\n          _currentContent = _contentManager.Get(\n            Convert.ToInt32(itemRoute[\"Id\"]));\n        }\n        return _currentContent;\n      }\n    }\n\n    public FeaturedProductDriver(IContentManager contentManager,\n      IWorkContextAccessor workContextAccessor,\n      IAliasService aliasService) {\n        _contentManager = contentManager;\n        _workContextAccessor = workContextAccessor;\n        _aliasService = aliasService;\n    }\n\n    protected override DriverResult Display(FeaturedProductPart part, \n      string displayType, dynamic shapeHelper) {\n        return ContentShape(\"Parts_FeaturedProduct\", () => {\n          // extra space to write additional lines of code here\n          return shapeHelper.Parts_FeaturedProduct();\n        });\n    }\n\n    protected override DriverResult Editor(FeaturedProductPart part, \n      dynamic shapeHelper) {\n        return ContentShape(\"Parts_FeaturedProduct_Edit\",\n          () => shapeHelper.EditorTemplate(\n            TemplateName: \"Parts/FeaturedProduct\",\n            Model: part,\n            Prefix: Prefix));\n    }\n\n    protected override DriverResult Editor(FeaturedProductPart part, \n      IUpdateModel updater, dynamic shapeHelper) {\n        updater.TryUpdateModel(part, Prefix, null, null);\n        return Editor(part, shapeHelper);\n    }\n  }\n}\n\n\n\nPassing data to the view\n\n\nWe have already passed data to the view in previous parts but we didn't stop to examine it in detail:\n\n\nreturn ContentShape(\"Parts_FeaturedProduct_Edit\",\n  () => shapeHelper.EditorTemplate(\n    TemplateName: \"Parts/FeaturedProduct\",\n    Model: part,\n    Prefix: Prefix));\n\n\n\nThese parameters are dynamic which means you can add any parameter you want. This means that we could update the \nDisplay()\n method to pass through a value by changing the code to:\n\n\nshapeHelper.Parts_FeaturedProduct(FavoriteColor: \"Green\");\n\n\n\nThe view would then be able to use this by using \n@Model.FavoriteColor\n.\n\n\nWe want to implement some logic into the \nDisplay()\n method which will result in answering the question \nIsOnFeaturedProductPage\n so that this can be passed through to the view.\n\n\nWe will do this by declaring \nbool isOnFeaturedProductPage = false;\n at the top of the method. It will be given a default value of \nfalse\n to start with. Then throughout the next few sections we will perform tests to see if it is in fact \ntrue\n.\n\n\nModify the first \nDisplay()\n method by following these steps:\n\n\n\n\n\n\nOpen up the \nFeaturedProductDriver.cs\n file located in the \n.\\Drivers\\\n folder.\n\n\n\n\n\n\nLocate the \nDisplay()\n method and replace it with the following:\n\n\nprotected override DriverResult Display(FeaturedProductPart part, \n  string displayType, dynamic shapeHelper) {\n    return ContentShape(\"Parts_FeaturedProduct\", () => {\n      bool isOnFeaturedProductPage = false;\n      // detecting current product code will go here\n      return shapeHelper.Parts_FeaturedProduct(\n        IsOnFeaturedProductPage: isOnFeaturedProductPage);\n    });\n}\n\n\n\n\n\n\n\nThis has laid the groundwork for us. The next piece of code will detect the content type, read the product id and update \nisOnFeaturedProductPage\n if required.\n\n\nDetecting the content type\n\n\nThe \nCurrentContent\n property that we implemented doesn't exactly return the current content item, it returns an \nIContent\n. This contains a property called \nContentItem\n which then gives us access to everything related to the current content item.\n\n\nYou can explore the \nContentItem\n class by navigating around the IntelliSense, or by navigating to the class itself with \nF12\n. There are lots of interesting properties to use.\n\n\nThe content type is stored as a string inside a \nContentTypeDefinition\n property called \nTypeDefinition\n. You can get to it using this notation:\n\n\nvar itemTypeName = CurrentContent.ContentItem.TypeDefinition.Name;\n\n\n\nThe \nitemTypeName\n variable will then contain a string version of the content type. The \nProduct\n content type was created via the admin dashboard. This means that there isn't a concrete class for us to use in a \ntypeof(T).Name\n call so we will have to work with the string \n\"Product\"\n when we're checking the type of the current content item.\n\n\nPutting the code together is just a case of a standard .NET string comparison:\n\n\n\n\n\n\nOpen up the \nFeaturedProductDriver.cs\n file located in the \n.\\Drivers\\\n folder.\n\n\n\n\n\n\nLocate the \nDisplay()\n method and replace it with the following:\n\n\nprotected override DriverResult Display(FeaturedProductPart part, \n  string displayType, dynamic shapeHelper) {\n    return ContentShape(\"Parts_FeaturedProduct\", () => {\n      bool isOnFeaturedProductPage = false;\n      // new code\n      if(CurrentContent != null) {\n        var itemTypeName = CurrentContent.ContentItem.TypeDefinition.Name;\n        if (itemTypeName.Equals(\"Product\",\n          StringComparison.InvariantCultureIgnoreCase)) {\n          // final product id check will go here\n        }               \n      }\n      // end of new code\n      return shapeHelper.Parts_FeaturedProduct(\n        IsOnFeaturedProductPage: isOnFeaturedProductPage);\n    });\n}\n\n\n\nYou don't need to include the comments in your module, they are just for guidance.\n\n\n\n\n\n\nUsing fields\n\n\nFields are a great way to quickly surface data. We added one to our \nProduct\n content type in the admin dashboard in just a minute or two. We didn't need write a \nContentPart\n or work with Visual Studio at all. When creating websites in Orchard you will find plenty of occasions where using a field is appropriate.\n\n\nIf you look in forums and chat rooms you will find that they've been known to confuse first time users.\n\n\nIt's not that they are complicated to use, far from it. It's just that the correct way to access them isn't discoverable through IntelliSense so developers hit a brick wall.\n\n\nWe are going to cover the two important things you need to learn about fields so that you find them just as easy to work with in code as you have done in the admin dashboard.\n\n\nThe first important thing to understand is: \nFields\n are \nalways\n in a \nContentPart\n.\n\n\nTo be fair, it looked like you had just created the field loose in the content type:\n\n\n\n\nBut in truth, Orchard created an invisible ContentPart for you and attached those fields to that. The name of that content part is the name of the content type. So for our \nProduct\n content type, the content part would be \nProduct\n. For a \nHtmlWidget\n it would be \nHtmlWidget\n, if you added a field to the \nPage\n you would access it with \nPage\n.\n\n\nSo the way to access our \nProductId\n field which is on the \nContentType\n of \nProduct\n we would write:\n\n\nvar productId = CurrentContent.ContentItem.Product.ProductId.Value;\n\n\n\nWhere did the \n.Value\n come from? Well, your field is not just a simple string. You defined it as a \n\"Text Field\"\n when you filled out the form. This maps to the \nOrchard.Fields.Fields.InputField\n class and you can access it's data through the \n.Value\n property.\n\n\n\n\nAs you build up your skills as an Orchard module developer one of the important ones will be digging through the code to discover this sort of thing for yourself. As I was writing this I didn't know what the class was called. To find it out I put a breakpoint on the line of code, started a debug session and inspected the field to see what class it was and how to get at it's data.\n\n\nThis is a useful skill to have in your repertoire when working with Orchard but in this case you also have a useful resource that has been put together by Sebastien Ros. He has created an \nOrchard Cheatsheet\n which covers common properties that you might want to access on each of the built-in Orchard content fields.\n\n\n\n\nThe second important thing to understand with accessing fields is that if you tried that line above you wouldn't get very far, and this is the reason why new developers have had so much trouble with it. The fields are injected into the class at run-time using .NET \ndynamic\n features. \n\n\nThis means you don't get IntelliSense for dynamic properties. It also means that unless the class is marked as \ndynamic\n the code won't compile. So before you can use code to access your field you need to cast your \nContentItem\n to \ndynamic\n:\n\n\nvar dynamicContentItem = (dynamic)CurrentContent.ContentItem;\nvar itemProductId = dynamicContentItem.Product.ProductId.Value;\n\n\n\nOnce you have the product id in a string it's just a case of comparing it against the known value and setting \nisOnFeaturedProductPage = true\n if it's a match:\n\n\n\n\n\n\nOpen up the \nFeaturedProductDriver.cs\n file located in the \n.\\Drivers\\\n folder.\n\n\n\n\n\n\nLocate the \nDisplay()\n method and replace it with the following:\n\n\nprotected override DriverResult Display(FeaturedProductPart part, \n  string displayType, dynamic shapeHelper) {\n    return ContentShape(\"Parts_FeaturedProduct\", () => {\n      bool isOnFeaturedProductPage = false;\n      var itemTypeName = CurrentContent.ContentItem.TypeDefinition.Name;\n      if (itemTypeName.Equals(\"Product\", \n        StringComparison.InvariantCultureIgnoreCase)) {\n          // new code\n          var dynamicContentItem = (dynamic)CurrentContent.ContentItem;\n          var itemProductId = dynamicContentItem.Product.ProductId.Value;\n          if(itemProductId.Equals(\"SPROCKET9000\",\n            StringComparison.InvariantCulture)) {\n              isOnFeaturedProductPage = true;\n          }\n          // end of new code\n      }\n      return shapeHelper.Parts_FeaturedProduct(\n        IsOnFeaturedProductPage: isOnFeaturedProductPage);\n    });\n}\n\n\n\n\n\n\n\nThat's all the code that's needed to detect the page content type and check the product id field.\n\n\nYou might have noticed that this time around we just used \nStringComparison.InvariantCulture\n. This is because we have already enforced uppercase so we can be sure that the case doesn't conflict with the test value.\n\n\nNow that we have completed the code to identify the current page and passed that through to the shape it will be accessible in the view as \n@model.IsOnFeaturedProductPage\n. \n\n\nIn the last section of this lesson we will update the view to make use of this information.  \n\n\nUpdating the view\n\n\nOnce you have done the work in the driver it's simple for you to make decisions based on the value passed to the model. In part two we looked at using conditionals and reading values from the \nModel\n. \n\n\nNow we are going to re-use these skills:\n\n\n\n\n\n\nOpen up the view file located at \n.\\Views\\Parts\\FeaturedProduct.cshtml\n\n\n\n\n\n\nCopy this CSS snippet into the \n<style>\n block at the top of the view:\n\n\n.box-purple {\n  padding: 1em;\n  text-align: center;\n  color: #fff;\n  background-color: #7b4f9d;\n  font-size: 2em;\n  display: block;\n}\n\n\n\n\n\n\n\nFind this line of markup (it should be the last line in the view):\n\n\n<p><a href=\"~/sprocket-9000\" class=\"btn-green\">Click here to view it</a></p>\n\n\n\nAnd replace it with:\n\n\n@if (!Model.IsOnFeaturedProductPage) {\n  <p>\n    <a href=\"~/sprocket-9000\" class=\"btn-green\">Click here to view it.</a>\n  </p>\n} else {\n  <p class=\"box-purple\">Read more about it on this page.</p>\n}\n\n\n\n\n\n\n\nSave and close the file.\n\n\n\n\n\n\nFor reference, your complete \nFeaturedProductDriver.cs\n class should now look like this:\n\n\nusing System;\nusing Orchard.Alias;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Drivers;\nusing Orchard.LearnOrchard.FeaturedProduct.Models;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct.Drivers {\n    public class FeaturedProductDriver : ContentPartDriver<FeaturedProductPart> {\n        private readonly IContentManager _contentManager;\n        private readonly IWorkContextAccessor _workContextAccessor;\n        private readonly IAliasService _aliasService;\n\n        private IContent _currentContent = null;\n        private IContent CurrentContent {\n            get {\n                if (_currentContent == null) {\n                    var itemRoute = \n                      _aliasService.Get_workContextAccessor.GetContext()\n                        .HttpContext.Request.AppRelativeCurrentExecutionFilePath\n                        .Substring(1).Trim('/'));\n                    _currentContent = _contentManager.Get(\n                      Convert.ToInt32(itemRoute[\"Id\"]));\n                }\n                return _currentContent;\n            }\n        }\n\n        public FeaturedProductDriver(IContentManager contentManager, \n          IWorkContextAccessor workContextAccessor, IAliasService aliasService) {\n            _contentManager = contentManager;\n            _workContextAccessor = workContextAccessor;\n            _aliasService = aliasService;\n        }\n\n        protected override DriverResult Display(FeaturedProductPart part,\n          string displayType, dynamic shapeHelper) {\n            return ContentShape(\"Parts_FeaturedProduct\", () => {\n                bool isOnFeaturedProductPage = false;\n\n                if (CurrentContent != null) {\n                    var itemTypeName = \n                      CurrentContent.ContentItem.TypeDefinition.Name;\n\n                    if (itemTypeName.Equals(\"Product\",\n                      StringComparison.InvariantCultureIgnoreCase)) {\n\n                        var dynamicContentItem = \n                          (dynamic)CurrentContent.ContentItem;\n                        var itemProductId = \n                          dynamicContentItem.Product.ProductId.Value;\n\n                        if (itemProductId.Equals(\"SPROCKET9000\",\n                          StringComparison.InvariantCulture)) {\n                            isOnFeaturedProductPage = true;\n                        }\n                    }\n                }\n\n                return shapeHelper.Parts_FeaturedProduct( \n                  IsOnFeaturedProductPage: isOnFeaturedProductPage);\n            });\n        }\n\n        protected override DriverResult Editor(FeaturedProductPart part, \n          dynamic shapeHelper) {\n            return ContentShape(\"Parts_FeaturedProduct_Edit\",\n              () => shapeHelper.EditorTemplate(\n                TemplateName: \"Parts/FeaturedProduct\",\n                Model: part,\n                Prefix: Prefix));\n        }\n\n        protected override DriverResult Editor(FeaturedProductPart part, \n          IUpdateModel updater, dynamic shapeHelper) {\n            updater.TryUpdateModel(part, Prefix, null, null);\n            return Editor(part, shapeHelper);\n        }\n    }\n}\n\n\n\nTrying the module out in Orchard\n\n\nThis is the part where it all pays off. If you run Orchard in the browser you will see the updates we have been working on in action:\n\n\n\n\n\n\nWithin Visual Studio, press \nCtrl-F5\n on your keyboard to start the website without debugging enabled (it's quicker and you can attach the debugger later if you need it).\n\n\n\n\n\n\nYou will start off on the homepage. The widget should look the same as it did at the end of part two:\n\n\n\n\n\n\n\n\nClick on the \nSprocket 9000\n menu item to go to your product page. You should see a purple notification box instead of a link:\n\n\n\n\n\n\n\n\nIf you followed the \nBonus Exercise\n section and created additional demo product pages you can also navigate to those and you will see the same view as the homepage:\n\n\n\n\nThis is because it matches the content type but not the product id. \n\n\n\n\n\n\nDownload the code for this lesson\n\n\nYou can download a copy of the module so far at this link:\n\n\n\n\nDownload Orchard.LearnOrchard.FeaturedProduct-Part3-v1.0.zip\n\n\n\n\nTo use it in Orchard simply extract the archive into the modules directory at \n.\\src\\Orchard.Web\\Modules\\\n. If you already have the module installed from a previous part then delete that folder first.\n\n\n\n\nFor Orchard to recognize it the folder name should match the name of the module. Make sure that the folder name is \nOrchard.LearnOrchard.FeaturedProduct\n and then the modules files are located directly under that.\n\n\n\n\nConclusion\n\n\nIn this part we have learned valuable skills that will allow us to create content types in the admin dashboard and add fields to them. We have learned about dependency injection, how to request access to Orchard's various service classes, how to examine the current content item and make decisions based on it. Finally we looked at how we can create and surface custom information from the code of the module up to the view.\n\n\nIn the next and \nfinal part of this getting started with modules course\n we will refine the existing module and apply some development best-practices that haven't been covered yet.",
            "title": "Part 3: Using the Orchard API"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-3/#introduction",
            "text": "This is part three of a four part course. It will get you started with a gentle introduction to extending Orchard at the code level. You will build a very simple module which contains a widget that shows an imaginary featured product.   It will teach you some of the basic components of module development and also encourage you to use best-practices when developing for Orchard.  If you haven't read the previous parts of this course then you can go back to the overview to  learn about the Getting Started with Modules course .  Now that we have built the widget and expanded it to use database storage for it's configuration we will turn to the Orchard API to make some decisions via code.",
            "title": "Introduction"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-3/#amending-the-widget-through-code",
            "text": "The second feature we have planned to add to the widget is some code that will detect when a user is viewing the featured product page and then make some changes to the display.  At the moment the widget is displayed site-wide with a big green \"Click here to view it\" link. When the user is on the product page it doesn't make sense to show a link back to itself.  In the previous part we added a configurable item to the widget. The widget read that setting in and updated itself. The same code is run no matter where you embed the widget.   This time, we will expand the widget so that it is aware of it's surroundings. When the page loads and the widget is asked to display, it will inspect the page as a whole, figure out what type of page it is on and then, if applicable, drill down to see what specific product page it's on.   This information will then be passed through to the view so that we can change the display on the fly.",
            "title": "Amending the widget through code"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-3/#setting-up-a-contenttype-to-work-with",
            "text": "The admin dashboard is quite powerful. If you have been using Orchard for long you'll likely have set up your own content types within the  Content Definition  section of the admin dashboard.   This section allows you to combine pre-existing content parts together to form a custom content type that can be displayed in your site.   It also has a section called  Fields . When there isn't a content part that quite fits your needs you can turn to the  Fields  to add extra pieces of data to the content type on the fly.  We are going to quickly build a  Product  content type which has some of the common core content parts; a title, a URL, a menu entry and some body text. We will also add in single text field called  Product Id  to detect which particular product is being viewed:    Navigate to the admin dashboard of your site.    Click  Content Definition  in the menu down the side.    Click  Create new type .    Enter  Product  for the  Display Name . This should automatically fill out the  Content Type Id  field for you. Make sure the  Content Type Id  is also set to  Product :     Click  Create .    In the  Add Parts to \"Product\"  section tick the following parts:   Autoroute  Body  Menu  Title     Click  Save . You will be taken to the  Edit Content Type  page and you should see several messages from the Orchard notifier system:     Scroll down to the  Fields  section and then click the  Add Field  button:     On the  Add New Field To \"Product\"  page fill the form out like this:   Display Name:  Product Id  Technical Name:  ProductId  Field Type:  Input Field          Click  Save .    The main  Edit Content Type  page will reopen. Just for completeness lets configure the field so that it is flagged as required. If you scroll to the  Fields  section you will see your new field is now listed. The small  >  will expand out to show configuration properties for that field:   Click the  >  to expand the field configuration pane.    Tick the  Required  check box:   This will flag the field as requiring content when you create a new content item based off the  Product  content type. Orchard will automatically handle the validation for you and show a notification if the requirement is not met.    To demonstrate the power of the configurable fields in Orchard we will also add a  Pattern  constraint. The  ProductId  should be in all caps, with only letters or numbers, no spaces or other punctuation.   To describe this pattern to the system we will use something called a regular expression (often shortened to a regex). At first these patterns can seem complex but they offer a succinct way to describe text patterns.  To meet the requirement described above the regex will be:  ^[A-Z0-9]+$  In the Pattern field enter the pattern  ^[A-Z0-9]+$ .    Click  Save .    In the next section we will create a demo product using this new content type.   Regular Expression breakdown:  If you're curious as to what different sections are in the regex we just used, it breaks down into this:   ^  means match the start of the string (nothing before it)  []  means match the pattern of characters inside these brackets  A-Z  means match any character between uppercase A to uppercase Z  0-9  means match any character between 0 to 9  +  means match one or more repetitions of this character set. This means any combination of the letters and numbers but there needs to be at least one.  $  means match the end of the string (nothing after it)",
            "title": "Setting up a ContentType to work with"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-3/#prepare-a-sample-product",
            "text": "For this to work we need to create a dummy product that will act as the featured product:    Navigate to the admin dashboard of your site.    In the  New  section of the menu click  Product :     Set the  Title  of the page to  Sprocket 9000 .    Leave the  Permalink  blank.    You can optionally add some content in to the  Body  section just for something to preview. Here is some Lorem Ipsum sample data:   Curabitur non nulla sit amet nisl tempus convallis quis ac lectus. Nulla \nquis lorem ut libero malesuada feugiat. Sed porttitor lectus nibh. \nVestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere\ncubilia Curae; Donec velit neque, auctor sit amet aliquam vel, ullamcorper.    The  Product Id  is the custom field we created for the content type. Notice the red  *  which indicates a required field. If you try to create the  Product  with a blank  Product Id  you will see a validation error:   If you try to enter an incorrect value that doesn't match the pattern we specified you will also see an error:   Enter  SPROCKET9000  into the  Product Id .    Tick the  Show on a menu  checkbox.    Leave the menu selection on  Main Menu .    In the  Menu text  enter the product name,  Sprocket 9000 .    Click  Publish Now .    The page will reload after Orchard has created the new content item in the background. You will see a green message saying \"Your Page has been created\":   If you navigate back to the front-end of the website you should see a new menu item called  Sprocket 9000 . Clicking it will take you to the demo page you just created:   If the menu option doesn't appear on the page you probably clicked  Save  instead of  Publish . When we created the content type is defaults to being marked as draftable. This means that you can save a copy in the system before it's made available publically. Until you click the  Publish Now  button it won't show on the website.  That's all the preparation we need to do before we can dive back into the code.    Bonus Exercise:  Go back to the admin dashboard and add in another product. It's not required but will mean that you can demonstrate the code is correctly identifying the product id later on.   All of this could also have been done through code. We developed this content type via the admin dashboard to show that it's possible to work with content types via code whether created through classes in a module or in the admin dashboard.   Bonus Exercise:  Using the techniques learned in the first parts of this course, go back and create a clone of the  Product  content type but create it through code. Name the new content type  ProductViaCode  so that it doesn't clash with the  Product  we have just created.  Hint: The  creating types from code  documentation should point you in the right direction if you get stuck.",
            "title": "Prepare a sample product"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-3/#writing-code-against-the-orchard-api",
            "text": "At the moment the widget is displayed site-wide with a big green \"Click here to view it\" link. When the user is on the featured product page it doesn't make sense to show a link back to itself.  We're going to use Orchard's API so that when the widget is asked to display itself (in the driver) it will examine the current page that's being displayed (the content item), check if it's on a product page (content type of  Product ) and then check the product id of the product page to see if it's the current featured product (the  ProductId  field contains the product).  For the sake of visual comparison we will swap the green \"Click here to view it\" button out with a purple box that says \"Read more about it on this page\".",
            "title": "Writing code against the Orchard API"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-3/#expanding-out-the-display-shape-lambda",
            "text": "So, based on this blueprint of our plans, how do we take the first step? The decision about what the module should display when it's asked to comes from the code within the driver class. The  Display()  method in the  FeaturedProductDriver.cs  class currently looks like this:  protected override DriverResult Display(FeaturedProductPart part, \n  string displayType, dynamic shapeHelper) {\n    return ContentShape(\"Parts_FeaturedProduct\", \n      () => shapeHelper.Parts_FeaturedProduct());\n}  The  shapeHelper  takes a lambda as it's parameter ( () => shapeHelper.Parts_FeaturedProduct() ) and because the code being run at the moment is just a single line statement it is using a short form version of it. To give ourselves some room to code we can expand out the lambda so that it wraps the code in curly braces and returns a shape at the end.  In the case of our current  Display()  method the code would go from this:  return ContentShape(\"Parts_FeaturedProduct\", \n  () => shapeHelper.Parts_FeaturedProduct());  To this:  return ContentShape(\"Parts_FeaturedProduct\", () => { // curly brace here\n\n    // extra space to write additional lines of code here\n\n    return shapeHelper.Parts_FeaturedProduct(); // return keyword and semicolon\n}); // curly brace here  An alternative solution to expanding out this  Display()  method would have been to do our preparation at the start of the method, something like this:  protected override DriverResult DisplayCat(FeaturedProductPart part, \n  string displayType, dynamic shapeHelper) {\n    // extra code here\n    return ContentShape(\"Parts_FeaturedProduct\", \n      () => shapeHelper.Parts_FeaturedProduct());\n}  What's the difference and why is this a bad idea? The  Display()  method gets called  to prepare the shapes each time a visitor requests a page. With the modularity of the Orchard code you might still end up having something else on the page influencing it's display so that the shape doesn't make it to the final output.  When the setup code is passed within the lambda it doesn't get run until it's actually needed. This means that if you need to do some \"expensive\" setup code you don't want to run it unless you're sure it's going to be used. In this context expensive means heavy resource usage (it could require complicated database calls or data crunching) or time consuming (you might rely on calling a 3rd party web service to get some information).  You don't want to waste your resources and slow down the page being displayed by running unnecessary setup code so that's why you should use the first solution above. It keeps all the setup code inside the curly braces of the lambda and only runs it when the shape is actually being displayed.  Let's implement what we have discussed so far:      Open up the  FeaturedProductDriver.cs  file located in the  .\\Drivers\\  folder.    Replace the  Display()  method with the following:  protected override DriverResult Display(FeaturedProductPart part, \n  string displayType, dynamic shapeHelper) {\n    return ContentShape(\"Parts_FeaturedProduct\", () => {\n      // extra space to write additional lines of code here\n      return shapeHelper.Parts_FeaturedProduct();\n    });\n}",
            "title": "Expanding out the display shape lambda"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-3/#getting-the-current-contentitem-being-displayed",
            "text": "Getting the current  ContentItem  from within the widget driver means using some of the built-in Orchard classes.  To look up the  ContentItem  we need to get the  Id  of the content out of the ASP.NET MVC route data, then convert this into a content item by requesting it via the content manager.  We could add a public property to the driver which looked like this:  private IContent _currentContent = null;\nprivate IContent CurrentContent {\n  get {\n    if (_currentContent == null) {\n      var itemRoute = _aliasService.Get(_workContextAccessor.GetContext()\n        .HttpContext.Request.AppRelativeCurrentExecutionFilePath\n        .Substring(1).Trim('/'));\n\n        _currentContent = _contentManager.Get(Convert.ToInt32(itemRoute[\"Id\"]));\n    }\n\n    return _currentContent;\n  }\n}  But where do all of these supporting classes like  _aliasService  and  _contentManager  come from?",
            "title": "Getting the current ContentItem being displayed"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-3/#dependency-injection-in-orchard",
            "text": "The modular design of Orchard means that each feature of Orchard tries to be as independent as it can. This means that when the Widget is building it's shape it doesn't automatically know about the wider context of the page being requested. It is a specialized unit of code which completes it's task as efficiently and simply as possible.  When it's required, the module can request access to parts of the larger Orchard system through the use of Orchard's service classes.  Orchard provides service classes that allow you to leverage Orchard features at the code level. When you need to do things like pulling content out of the content manager, displaying notifications, logging or working with the URL, you can turn to these services classes.  These classes are grouped together by a common inheritance; they implement  IDependency . When you need one of them you simply need to add it to your constructor and an instance will be injected into your class at run-time. This is called dependency injection. You can get many frameworks that will enable this but in Orchard the service is provided by  Autofac .  Each of these support classes specialize in providing a single feature. This means you only open communication channels to the main system for the parts which you actually need, keeping the system decoupled.",
            "title": "Dependency injection in Orchard"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-3/#constructor-injection",
            "text": "When you want to get access to one of Orchard's service classes you need to add a reference to the class to the default constructor. However, instead of requesting the class directly you will always work with the interface that the service you want implements.  The advantage of dependency injection is that you don't depend on concrete implementations (the actual class). Working with an interface means that you or a module can swap out the implementation of a specific class if it needs to. By always working with an interface instead of the actual service it means you don't need to know which particular implementation you are working with, preventing you from being tied to it.  So if you wanted a copy of the content manager then you would request  IContentManager contentManager  in your constructor.  The standard process for incorporating a new service into the class is as follows (you don't need to do this now):    Create a new private, read only variable to hold the injected class. It should start with an underscore like  _contentManager .    Update the default constructor to include the service as a parameter.    Assign the injected class to the private variable for later use.    We will use this three step theory in the next section.",
            "title": "Constructor injection"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-3/#implementing-currentcontent",
            "text": "Based on the service requirements in our demo implementation above of the  CurrentContent  property we know that we will need  IContentManager ,  IWorkContextAccessor ,  IAliasService  to turn the route data into an instance of the current  ContentItem .  Taking what we have learned about dependency injection and knowing our service requirements we can now implement the next stage of the  FeaturedProductDriver  class:    Open up the  FeaturedProductDriver.cs  file located in the  .\\Drivers\\  folder.    Add the following properties to the top of the  FeaturedProductDriver  class:  private readonly IContentManager _contentManager;\nprivate readonly IWorkContextAccessor _workContextAccessor;\nprivate readonly IAliasService _aliasService;  IAliasService  will need it's namespace but when you try to add it via  Ctrl-.  you will see Visual Studio doesn't know where to find it.  We need to add a reference and update the dependencies of our module.    Right click  on the  References  entry in the module's project within the  Solution Explorer  window and choose  Add Reference... .    Click the  Projects  tab on the left.  Orchard.Alias  should already be visible.  Hover  your mouse over it and a checkbox will appear. Click the checkbox for  Orchard.Alias . Click  OK .     Now we have to update our dependencies straight away so they don't get forgotten. Open up the  Module.txt  file located in the project root.    The last line of the file should contain the  Orchard.Widgets  dependency that we created in part one. This field will take a comma separated list detailing  each dependency a modules has.  Update the line to add  Orchard.Alias , ensuring that the line keeps it's indentation, so that the line now looks like this:          Dependencies: Orchard.Widgets, Orchard.Alias    Go back to the  FeaturedProductDriver.cs  file. You can now add the missing namespace via  Ctrl-. .    Below the private properties, add in a default constructor:  public FeaturedProductDriver(IContentManager contentManager,\n  IWorkContextAccessor workContextAccessor,\n  IAliasService aliasService) {\n    _contentManager = contentManager;\n    _workContextAccessor = workContextAccessor;\n    _aliasService = aliasService;\n}  You can see that we are following the standard pattern of defining a private property, adding an instance to the constructor parameters and then assigning the injected class to the private variable.    The Driver now has all of the requirements implemented to support the  CurrentContent  property.   Add this code in between the first batch of private properties and the constructor:  private IContent _currentContent = null;\nprivate IContent CurrentContent {\n  get {\n    if (_currentContent == null) {\n      var itemRoute = _aliasService.Get(_workContextAccessor.GetContext()\n        .HttpContext.Request.AppRelativeCurrentExecutionFilePath\n        .Substring(1).Trim('/'));                 \n      _currentContent = _contentManager.Get(Convert.ToInt32(itemRoute[\"Id\"]));\n    }\n    return _currentContent;\n  }\n}    If you have cleaned up your  using  statements then you might need to add a namespace using  Ctrl-.  for the  Convert.ToInt32() .    The complete  FeaturedProductDriver.cs  should now look like this:  using System;\nusing Orchard.Alias;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Drivers;\nusing Orchard.LearnOrchard.FeaturedProduct.Models;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct.Drivers {\n  public class FeaturedProductDriver : ContentPartDriver<FeaturedProductPart>{    \n    private readonly IContentManager _contentManager;\n    private readonly IWorkContextAccessor _workContextAccessor;\n    private readonly IAliasService _aliasService;\n\n    private IContent _currentContent = null;\n    private IContent CurrentContent {\n      get {\n        if (_currentContent == null) {\n          var itemRoute = _aliasService.Get(_workContextAccessor.GetContext()\n            .HttpContext.Request.AppRelativeCurrentExecutionFilePath\n            .Substring(1).Trim('/'));\n\n          _currentContent = _contentManager.Get(\n            Convert.ToInt32(itemRoute[\"Id\"]));\n        }\n        return _currentContent;\n      }\n    }\n\n    public FeaturedProductDriver(IContentManager contentManager,\n      IWorkContextAccessor workContextAccessor,\n      IAliasService aliasService) {\n        _contentManager = contentManager;\n        _workContextAccessor = workContextAccessor;\n        _aliasService = aliasService;\n    }\n\n    protected override DriverResult Display(FeaturedProductPart part, \n      string displayType, dynamic shapeHelper) {\n        return ContentShape(\"Parts_FeaturedProduct\", () => {\n          // extra space to write additional lines of code here\n          return shapeHelper.Parts_FeaturedProduct();\n        });\n    }\n\n    protected override DriverResult Editor(FeaturedProductPart part, \n      dynamic shapeHelper) {\n        return ContentShape(\"Parts_FeaturedProduct_Edit\",\n          () => shapeHelper.EditorTemplate(\n            TemplateName: \"Parts/FeaturedProduct\",\n            Model: part,\n            Prefix: Prefix));\n    }\n\n    protected override DriverResult Editor(FeaturedProductPart part, \n      IUpdateModel updater, dynamic shapeHelper) {\n        updater.TryUpdateModel(part, Prefix, null, null);\n        return Editor(part, shapeHelper);\n    }\n  }\n}",
            "title": "Implementing CurrentContent"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-3/#passing-data-to-the-view",
            "text": "We have already passed data to the view in previous parts but we didn't stop to examine it in detail:  return ContentShape(\"Parts_FeaturedProduct_Edit\",\n  () => shapeHelper.EditorTemplate(\n    TemplateName: \"Parts/FeaturedProduct\",\n    Model: part,\n    Prefix: Prefix));  These parameters are dynamic which means you can add any parameter you want. This means that we could update the  Display()  method to pass through a value by changing the code to:  shapeHelper.Parts_FeaturedProduct(FavoriteColor: \"Green\");  The view would then be able to use this by using  @Model.FavoriteColor .  We want to implement some logic into the  Display()  method which will result in answering the question  IsOnFeaturedProductPage  so that this can be passed through to the view.  We will do this by declaring  bool isOnFeaturedProductPage = false;  at the top of the method. It will be given a default value of  false  to start with. Then throughout the next few sections we will perform tests to see if it is in fact  true .  Modify the first  Display()  method by following these steps:    Open up the  FeaturedProductDriver.cs  file located in the  .\\Drivers\\  folder.    Locate the  Display()  method and replace it with the following:  protected override DriverResult Display(FeaturedProductPart part, \n  string displayType, dynamic shapeHelper) {\n    return ContentShape(\"Parts_FeaturedProduct\", () => {\n      bool isOnFeaturedProductPage = false;\n      // detecting current product code will go here\n      return shapeHelper.Parts_FeaturedProduct(\n        IsOnFeaturedProductPage: isOnFeaturedProductPage);\n    });\n}    This has laid the groundwork for us. The next piece of code will detect the content type, read the product id and update  isOnFeaturedProductPage  if required.",
            "title": "Passing data to the view"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-3/#detecting-the-content-type",
            "text": "The  CurrentContent  property that we implemented doesn't exactly return the current content item, it returns an  IContent . This contains a property called  ContentItem  which then gives us access to everything related to the current content item.  You can explore the  ContentItem  class by navigating around the IntelliSense, or by navigating to the class itself with  F12 . There are lots of interesting properties to use.  The content type is stored as a string inside a  ContentTypeDefinition  property called  TypeDefinition . You can get to it using this notation:  var itemTypeName = CurrentContent.ContentItem.TypeDefinition.Name;  The  itemTypeName  variable will then contain a string version of the content type. The  Product  content type was created via the admin dashboard. This means that there isn't a concrete class for us to use in a  typeof(T).Name  call so we will have to work with the string  \"Product\"  when we're checking the type of the current content item.  Putting the code together is just a case of a standard .NET string comparison:    Open up the  FeaturedProductDriver.cs  file located in the  .\\Drivers\\  folder.    Locate the  Display()  method and replace it with the following:  protected override DriverResult Display(FeaturedProductPart part, \n  string displayType, dynamic shapeHelper) {\n    return ContentShape(\"Parts_FeaturedProduct\", () => {\n      bool isOnFeaturedProductPage = false;\n      // new code\n      if(CurrentContent != null) {\n        var itemTypeName = CurrentContent.ContentItem.TypeDefinition.Name;\n        if (itemTypeName.Equals(\"Product\",\n          StringComparison.InvariantCultureIgnoreCase)) {\n          // final product id check will go here\n        }               \n      }\n      // end of new code\n      return shapeHelper.Parts_FeaturedProduct(\n        IsOnFeaturedProductPage: isOnFeaturedProductPage);\n    });\n}  You don't need to include the comments in your module, they are just for guidance.",
            "title": "Detecting the content type"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-3/#using-fields",
            "text": "Fields are a great way to quickly surface data. We added one to our  Product  content type in the admin dashboard in just a minute or two. We didn't need write a  ContentPart  or work with Visual Studio at all. When creating websites in Orchard you will find plenty of occasions where using a field is appropriate.  If you look in forums and chat rooms you will find that they've been known to confuse first time users.  It's not that they are complicated to use, far from it. It's just that the correct way to access them isn't discoverable through IntelliSense so developers hit a brick wall.  We are going to cover the two important things you need to learn about fields so that you find them just as easy to work with in code as you have done in the admin dashboard.  The first important thing to understand is:  Fields  are  always  in a  ContentPart .  To be fair, it looked like you had just created the field loose in the content type:   But in truth, Orchard created an invisible ContentPart for you and attached those fields to that. The name of that content part is the name of the content type. So for our  Product  content type, the content part would be  Product . For a  HtmlWidget  it would be  HtmlWidget , if you added a field to the  Page  you would access it with  Page .  So the way to access our  ProductId  field which is on the  ContentType  of  Product  we would write:  var productId = CurrentContent.ContentItem.Product.ProductId.Value;  Where did the  .Value  come from? Well, your field is not just a simple string. You defined it as a  \"Text Field\"  when you filled out the form. This maps to the  Orchard.Fields.Fields.InputField  class and you can access it's data through the  .Value  property.   As you build up your skills as an Orchard module developer one of the important ones will be digging through the code to discover this sort of thing for yourself. As I was writing this I didn't know what the class was called. To find it out I put a breakpoint on the line of code, started a debug session and inspected the field to see what class it was and how to get at it's data.  This is a useful skill to have in your repertoire when working with Orchard but in this case you also have a useful resource that has been put together by Sebastien Ros. He has created an  Orchard Cheatsheet  which covers common properties that you might want to access on each of the built-in Orchard content fields.   The second important thing to understand with accessing fields is that if you tried that line above you wouldn't get very far, and this is the reason why new developers have had so much trouble with it. The fields are injected into the class at run-time using .NET  dynamic  features.   This means you don't get IntelliSense for dynamic properties. It also means that unless the class is marked as  dynamic  the code won't compile. So before you can use code to access your field you need to cast your  ContentItem  to  dynamic :  var dynamicContentItem = (dynamic)CurrentContent.ContentItem;\nvar itemProductId = dynamicContentItem.Product.ProductId.Value;  Once you have the product id in a string it's just a case of comparing it against the known value and setting  isOnFeaturedProductPage = true  if it's a match:    Open up the  FeaturedProductDriver.cs  file located in the  .\\Drivers\\  folder.    Locate the  Display()  method and replace it with the following:  protected override DriverResult Display(FeaturedProductPart part, \n  string displayType, dynamic shapeHelper) {\n    return ContentShape(\"Parts_FeaturedProduct\", () => {\n      bool isOnFeaturedProductPage = false;\n      var itemTypeName = CurrentContent.ContentItem.TypeDefinition.Name;\n      if (itemTypeName.Equals(\"Product\", \n        StringComparison.InvariantCultureIgnoreCase)) {\n          // new code\n          var dynamicContentItem = (dynamic)CurrentContent.ContentItem;\n          var itemProductId = dynamicContentItem.Product.ProductId.Value;\n          if(itemProductId.Equals(\"SPROCKET9000\",\n            StringComparison.InvariantCulture)) {\n              isOnFeaturedProductPage = true;\n          }\n          // end of new code\n      }\n      return shapeHelper.Parts_FeaturedProduct(\n        IsOnFeaturedProductPage: isOnFeaturedProductPage);\n    });\n}    That's all the code that's needed to detect the page content type and check the product id field.  You might have noticed that this time around we just used  StringComparison.InvariantCulture . This is because we have already enforced uppercase so we can be sure that the case doesn't conflict with the test value.  Now that we have completed the code to identify the current page and passed that through to the shape it will be accessible in the view as  @model.IsOnFeaturedProductPage .   In the last section of this lesson we will update the view to make use of this information.",
            "title": "Using fields"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-3/#updating-the-view",
            "text": "Once you have done the work in the driver it's simple for you to make decisions based on the value passed to the model. In part two we looked at using conditionals and reading values from the  Model .   Now we are going to re-use these skills:    Open up the view file located at  .\\Views\\Parts\\FeaturedProduct.cshtml    Copy this CSS snippet into the  <style>  block at the top of the view:  .box-purple {\n  padding: 1em;\n  text-align: center;\n  color: #fff;\n  background-color: #7b4f9d;\n  font-size: 2em;\n  display: block;\n}    Find this line of markup (it should be the last line in the view):  <p><a href=\"~/sprocket-9000\" class=\"btn-green\">Click here to view it</a></p>  And replace it with:  @if (!Model.IsOnFeaturedProductPage) {\n  <p>\n    <a href=\"~/sprocket-9000\" class=\"btn-green\">Click here to view it.</a>\n  </p>\n} else {\n  <p class=\"box-purple\">Read more about it on this page.</p>\n}    Save and close the file.    For reference, your complete  FeaturedProductDriver.cs  class should now look like this:  using System;\nusing Orchard.Alias;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Drivers;\nusing Orchard.LearnOrchard.FeaturedProduct.Models;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct.Drivers {\n    public class FeaturedProductDriver : ContentPartDriver<FeaturedProductPart> {\n        private readonly IContentManager _contentManager;\n        private readonly IWorkContextAccessor _workContextAccessor;\n        private readonly IAliasService _aliasService;\n\n        private IContent _currentContent = null;\n        private IContent CurrentContent {\n            get {\n                if (_currentContent == null) {\n                    var itemRoute = \n                      _aliasService.Get_workContextAccessor.GetContext()\n                        .HttpContext.Request.AppRelativeCurrentExecutionFilePath\n                        .Substring(1).Trim('/'));\n                    _currentContent = _contentManager.Get(\n                      Convert.ToInt32(itemRoute[\"Id\"]));\n                }\n                return _currentContent;\n            }\n        }\n\n        public FeaturedProductDriver(IContentManager contentManager, \n          IWorkContextAccessor workContextAccessor, IAliasService aliasService) {\n            _contentManager = contentManager;\n            _workContextAccessor = workContextAccessor;\n            _aliasService = aliasService;\n        }\n\n        protected override DriverResult Display(FeaturedProductPart part,\n          string displayType, dynamic shapeHelper) {\n            return ContentShape(\"Parts_FeaturedProduct\", () => {\n                bool isOnFeaturedProductPage = false;\n\n                if (CurrentContent != null) {\n                    var itemTypeName = \n                      CurrentContent.ContentItem.TypeDefinition.Name;\n\n                    if (itemTypeName.Equals(\"Product\",\n                      StringComparison.InvariantCultureIgnoreCase)) {\n\n                        var dynamicContentItem = \n                          (dynamic)CurrentContent.ContentItem;\n                        var itemProductId = \n                          dynamicContentItem.Product.ProductId.Value;\n\n                        if (itemProductId.Equals(\"SPROCKET9000\",\n                          StringComparison.InvariantCulture)) {\n                            isOnFeaturedProductPage = true;\n                        }\n                    }\n                }\n\n                return shapeHelper.Parts_FeaturedProduct( \n                  IsOnFeaturedProductPage: isOnFeaturedProductPage);\n            });\n        }\n\n        protected override DriverResult Editor(FeaturedProductPart part, \n          dynamic shapeHelper) {\n            return ContentShape(\"Parts_FeaturedProduct_Edit\",\n              () => shapeHelper.EditorTemplate(\n                TemplateName: \"Parts/FeaturedProduct\",\n                Model: part,\n                Prefix: Prefix));\n        }\n\n        protected override DriverResult Editor(FeaturedProductPart part, \n          IUpdateModel updater, dynamic shapeHelper) {\n            updater.TryUpdateModel(part, Prefix, null, null);\n            return Editor(part, shapeHelper);\n        }\n    }\n}",
            "title": "Updating the view"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-3/#trying-the-module-out-in-orchard",
            "text": "This is the part where it all pays off. If you run Orchard in the browser you will see the updates we have been working on in action:    Within Visual Studio, press  Ctrl-F5  on your keyboard to start the website without debugging enabled (it's quicker and you can attach the debugger later if you need it).    You will start off on the homepage. The widget should look the same as it did at the end of part two:     Click on the  Sprocket 9000  menu item to go to your product page. You should see a purple notification box instead of a link:     If you followed the  Bonus Exercise  section and created additional demo product pages you can also navigate to those and you will see the same view as the homepage:   This is because it matches the content type but not the product id.",
            "title": "Trying the module out in Orchard"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-3/#download-the-code-for-this-lesson",
            "text": "You can download a copy of the module so far at this link:   Download Orchard.LearnOrchard.FeaturedProduct-Part3-v1.0.zip   To use it in Orchard simply extract the archive into the modules directory at  .\\src\\Orchard.Web\\Modules\\ . If you already have the module installed from a previous part then delete that folder first.   For Orchard to recognize it the folder name should match the name of the module. Make sure that the folder name is  Orchard.LearnOrchard.FeaturedProduct  and then the modules files are located directly under that.",
            "title": "Download the code for this lesson"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-3/#conclusion",
            "text": "In this part we have learned valuable skills that will allow us to create content types in the admin dashboard and add fields to them. We have learned about dependency injection, how to request access to Orchard's various service classes, how to examine the current content item and make decisions based on it. Finally we looked at how we can create and surface custom information from the code of the module up to the view.  In the next and  final part of this getting started with modules course  we will refine the existing module and apply some development best-practices that haven't been covered yet.",
            "title": "Conclusion"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-4/",
            "text": "Introduction\n\n\nThis is part four of a four part course. It will get you started with a gentle introduction to extending Orchard at the code level. You will build a very simple module which contains a widget that shows an imaginary featured product. \n\n\nIt will teach you some of the basic components of module development and also encourage you to use best-practices when developing for Orchard.\n\n\nIf you haven't read the previous parts of this course then you can go back to the overview to \nlearn about the Getting Started with Modules course\n.\n\n\nThis final part will look at applying some best practices to improve the quality of the module's codebase.\n\n\nWhat's left to do\n\n\nSo far in the course we have covered a pretty impressive list of topics. You might be tempted to think that the items in this last part are extras but just because we saved them until last doesn't mean they aren't important. \n\n\nIn fact, the only reason these weren't covered earlier was because they aren't essential to being able to load up the module in Orchard and there was already plenty to discuss. Your module is not really complete though until you've incorporated these techniques into your development process. \n\n\nThe topics in this article will help you add polish to your module and if you're going to release them to the public it will mean the difference between a beginners module and a professional module.\n\n\nCustomize the manifest file\n\n\nStarting with an easy one, the \nmodule.txt\n is a text file you will find in the root of your module folder. We have already looked at this file briefly in this course each time we have added dependencies. When Orchard is scanning the folders looking for modules to load it will parse this file to get information about it.\n\n\nThe \nmodule.txt\n is a manifest file. Technically, the document is in YAML format. If you open it now you will see the following:\n\n\nName: Orchard.LearnOrchard.FeaturedProduct\nAntiForgery: enabled\nAuthor: The Orchard Team\nWebsite: http://orchardproject.net\nVersion: 1.0\nOrchardVersion: 1.0\nDescription: Description for the module\nFeatures:\n    Orchard.LearnOrchard.FeaturedProduct:\n        Description: Description for feature Orchard.LearnOrchard.FeaturedProduct.\n\n\n\nThe \nName\n field at the top is a friendly text name that's displayed to the user. For example the \nName\n field for the module in the screenshot below reads \nDynamic Forms Validation Activities\n:\n\n\n\n\nAntiForgery\n enables the XSS injection protection so you should have this set to \nenabled\n unless you have a specific reason to manage this yourself.\n\n\nThe file format is quite straightforward. The fields mean what you would expect them to mean. \n\n\nVersion\n is the version of the module.\n\n\nOrchardVersion\n is the version of Orchard that this module was written against.\n\n\nFeatures\n is the only complicated one. We didn't look at it in this course, but you can include several features within a single module. This means you can enable or disable individual parts of the module. The description field and features section work together and can be displayed in several different formats. \n\n\nFor a detailed explanation of the \nFeatures\n section and the other fields \nread the manifest files guide\n.\n\n\nTime to make some changes:\n\n\n\n\n\n\nOpen \nmodule.txt\n.\n\n\n\n\n\n\nEdit the \nmodule.txt\n to your liking while staying \nwithin the spec\n. Go ahead and put your name and details into it. It feels good to see your name in lights!\n\n\n\n\n\n\nSave the file.\n\n\n\n\n\n\nYou will probably need to restart the development server before Orchard picks up the changes you've made to your \nmodule.txt\n.\n\n\nCategorize your module\n\n\nWhile we are working with the manifest file, there is one field which is very useful but not included by default in the \nmodule.txt\n. The field is called \nCategory:\n.\n\n\nIf you omit this field then the module defaults to the \nUncategorized\n grouping:\n\n\n\n\nWhen developing your own modules you should first check the \nModules\n section of the admin dashboard to see if your module would sit well in one of the existing common categories. \n\n\nIt's better to group your module with other modules where possible so that users can find related modules easily.\n\n\nIn this case we will make our own category, \"Learn Orchard\", which is the category used for all demo modules on this site:\n\n\n\n\n\n\nOpen \nmodule.txt\n.\n\n\n\n\n\n\nAdd the following line to the file:\n\n\n Category: Learn Orchard\n\n\n\nIt doesn't matter where you put it in this case because we are only defining a single feature. In the future if your module supports multiple features then you should add in the relevant category to each feature.\n\n\n\n\n\n\nSave the file.\n\n\n\n\n\n\nYou will probably need to restart the development server before Orchard picks up the changes you've made to your \nmodule.txt\n.\n\n\nLocalize all of your text\n\n\nOrchard has great support for writing global aware, localized websites. Administrators can add cultures to their site for a wide variety of different languages.\n\n\nThis means that as a module developer you can't know ahead of time what language your module will be used in. Orchard makes it possible for you to support this scenario by wrapping all of your text in a \nT()\n method.\n\n\nEvery string that you display in Orchard should be passed through the \nT()\n method.\n\n\nWhen you are working with Razor views the \nT()\n is automatically available. So, for example, this snippet from the \nFeaturedProduct.cshtml\n view would change from:\n\n\n<p class=\"sale-red\">ON SALE!</p>\n\n\n\nOver to:\n\n\n<p class=\"sale-red\">@T(\"ON SALE!\")</p>\n\n\n\nIf you need to inject variables into the string then you should use \nString.Format()\n style formatting. Don't try to concatenate them. For example, if you had a snippet that looked like this:\n\n\n<p>Today's featured product is the @Model.ProductName.</p>\n\n\n\nThe correct way to format this would be:\n\n\n<p>@T(\"Today's featured product is the {0}.\", @Model.ProductName)</p>\n\n\n\n\n\nDon't use concatenation because the position of the variable might change in different translations.\n\n\nThis is \nBAD\n:\n\n\n<p>@T(\"You have \") + @Model.SmsCredits + @T(\" credits left.\")</p>\n\n\nThis is \nGOOD\n:\n\n\n<p>@T(\"You have {0} credits left.\", @Model.SmsCredits)</p>\n\n\n\n\nLet's update the front end view so that it follows the correct localized development best practices:\n\n\n\n\n\n\nOpen \n.\\Views\\Parts\\FeaturedProduct.cshtml\n\n\n\n\n\n\nWrap each of the four blocks of text in their own \n@T()\n calls:\n\n\n@if (Model.ContentPart.IsOnSale) {\n  <p class=\"sale-red\">@T(\"ON SALE!\")</p>\n}\n<p>@T(\"Today's featured product is the Sprocket 9000.\")</p>\n@if (!Model.IsOnFeaturedProductPage) {\n  <p><a href=\"~/sprocket-9000\" class=\"btn-green\">\n    @T(\"Click here to view it.\")\n  </a></p>\n} else {\n  <p class=\"box-purple\">@T(\"Read more about it on this page.\")</p>\n}\n\n\n\n\n\n\n\nIn the model class we used the \n[DisplayName]\n attribute on the \nIsOnSale\n property. The \n[DisplayName]\n is an ASP.NET MVC attribute which allows you to automatically inject a descriptive label into your UI.\n\n\nUnfortunately Orchard's localization system doesn't intercept this information so when creating localized labels we need to pass the display name in each time.\n\n\n\n\nThere \nis a pull request\n currently being discussed for this issue which will hopefully bring in a \n[LocalizedDisplayName()]\n attribute that will solve this issue.\n\n\n\n\nTo localize the label with our \n[DisplayName]\n text we need to pass an extra parameter in to the \n@Html.LabelFor()\n so. This would look something like this:\n\n\n@Html.LabelFor(model => model.IsOnSale, T(\"Is the featured product on sale?\"))\n\n\n\nHowever, this kind of duplication of the text is not a best practice. Instead there is a way to pull the \n[DisplayName]\n attribute text in and pass it through the \nT()\n and into the \nLabelFor()\n: \n\n\n\n\n\n\nOpen \n.\\Views\\EditorTemplates\\Parts\\FeaturedProduct.cshtml\n\n\n\n\n\n\nFind the call to \nLabelFor\n:\n\n\n@Html.LabelFor(model => model.IsOnSale)\n\n\n\nAnd replace it with:\n\n\n@Html.LabelFor(model => model.IsOnSale, \n    T(Html.DisplayNameFor(model => model.IsOnSale).ToHtmlString()))\n\n\n\n\n\n\n\nLocalization is an important topic in Orchard. Read the \nusing the localization helpers\n and the \ncreating global ready applications\n guides for more detailed information about supporting this feature.\n\n\nYour styles shouldn't be inline\n\n\nHopefully this one should have raised some alarm bells as you were doing this - having a \n<style>\n tag in the view is not a good HTML practice. You should always put your CSS into an external \n.css\n file. This allows the browser to download the file once for each the sites and keep it cached for subsequent requests.\n\n\nHowever, just putting the styles into an external file is not the whole story with Orchard. It provides two techniques to help you include scripts and styles within your view. \n\n\nThe quick fix for this is to move the CSS into a \n.css\n file and then use \nScript.Require(\"filename.css\")\n to include it:\n\n\n\n\n\n\nIn the Solution Explorer, \nright click\n on the \nStyles\n folder within the module.\n\n\n\n\n\n\nChoose \nAdd\n, \nNew Item...\n from the context menu.\n\n\n\n\n\n\nSelect \nVisual C#\n then \nWeb\n from the categories down the left hand side.\n\n\n\n\n\n\nFind \nStyle Sheet\n in the list and give it a \nName:\n of \nFeaturedProduct.css\n.\n\n\n\n\n\n\nClick \nAdd\n.\n\n\n\n\n\n\nOpen \n.\\Views\\Parts\\FeaturedProduct.cshtml\n.\n\n\n\n\n\n\nCopy the css content from \nwithin\n the \n<style>\n tag (don't include the \n<style>\n tag itself) and drop it into the \nFeaturedProduct.css\n style sheet.\n\n\n\n\n\n\nGo back to \nFeaturedProduct.cshtml\n and replace the now empty \n<style></style>\n with this code:\n\n\n@{\n  Style.Include(\"FeaturedProduct.css\");\n}\n\n\n\n\n\n\n\nIf you don't specify a folder then Orchard will automatically check the \n.\\Styles\n folder first.\n\n\nThis is a quick solution but not a best practice solution so let's improve it a bit further. The problem with \nStyle.Include()\n is that it blindly includes the file whenever requested. Orchard supports something called a \nResourceManifest\n class which can help you manage your external resources in a more intelligent way.\n\n\nUsing the resource manifest class you can assign extra information to your CSS files. This could be alternative URLs to use for debug / live, content delivery networks, setting the version of the script or setting dependencies on other other resources that have been added. \n\n\nI have used the word resources so far when describing this feature. This is because you can use it for managing both scripts and style sheets.\n\n\nEach resource is assigned a plain text name. This can then be used in the view and it can also be used if another resource needs to depend on it.\n\n\nThis class is normally found in the \nResourceManifest.cs\n file in the root of your module folder but as long as your class implements the \nIResourceManifestProvider\n interface then Orchard will pick it up.\n\n\nThe example code below is a shortened version of the Orchard.Layouts \nResourceManifest.cs\n file:\n\n\nusing Orchard.UI.Resources;\n\nnamespace Orchard.Layouts {\n    public class ResourceManifest : IResourceManifestProvider {\n        public void BuildManifests(ResourceManifestBuilder builder) {\n            var manifest = builder.Add();\n            manifest.DefineScript(\"Layouts.Lib\")\n              .SetUrl(\"Lib.min.js\", \"Lib.js\")\n              .SetDependencies(\"jQuery\");\n            manifest.DefineScript(\"Layouts.Models\")\n              .SetUrl(\"Models.min.js\", \"Models.js\")\n              .SetDependencies(\"jQuery\", \"Layouts.Lib\");            \n        }\n    }\n}\n\n\n\nYou can see that a few of the features of the resource manifest are being used here. The first script, called \nLayouts.Lib\n uses \nSetUrl()\n to set up minified (live) and unminified (debug) filenames for the resource. \n\n\nIt also sets a dependency on a resource called \njQuery\n. This is a common feature that you will see throughout many Orchard modules. The \njQuery\n resource comes from the \nOrchard.jQuery\n module. If you looked in the \nOrchard.Layouts\n \nmodule.txt\n then you would find that it specifies a dependency on the \nOrchard.jQuery\n module.\n\n\nThis kind of external dependency shows off some more of the resource manager features:\n\n\n\n\n\n\nYou can share the resource strings between different modules so that dependencies for common scripts can be centrally managed.\n\n\n\n\n\n\nIf you look in the views of the \nOrchard.Layouts\n module you won't find any includes for the jQuery script. \n\n\nWhen the \nLayouts.Lib\n resource sets a dependency on the \njQuery\n resource Orchard automatically knows to generate a \njQuery\n script tag before the \nLayouts.Lib\n script tag. \n\n\nSo you will find some code like \nScript.Require(\"Layouts.Lib\").AtFoot();\n in the view but \nScript.Require(\"jQuery\").AtFoot();\n isn't needed.\n\n\n\n\n\n\nYou will also just find jQuery included just once, no matter how many modules have requested the script. \n\n\nThis is because Orchard recognizes the resource. It pools the requests together and knows how to order the scripts correctly.\n\n\n\n\n\n\nThe second \nDefineScript\n in the example above is included just to show that you can include multiple dependencies in your \nSetDependencies()\n call.\n\n\nNow that its clear what service the resource manifest provides, let's upgrade the module to use this feature of Orchard:\n\n\n\n\n\n\nIn the Solution Explorer, \nright click\n on the module's project name.\n\n\n\n\n\n\nSelect \nAdd\n, \nNew Item...\n and add a class called \nResourceManifest.cs\n.\n\n\n\n\n\n\nAdd the \nIResourceManifestProvider\n interface to the \nResourceManfiest\n class:\n\n\npublic class ResourceManifest : IResourceManifestProvider {\n}\n\n\n\n\n\n\n\nUse the \nCtrl-.\n technique to add the \nusing Orchard.UI.Resources;\n namespace.\n\n\n\n\n\n\nYou will now notice that the \nIResourceManifestProvider\n still has its red squiggles underneath it:\n\n\n\n\nUse the \nCtrl-.\n technique a second time to implement the interface. Choose the first option, \nImplement interface\n.\n\n\n\n\n\n\nRemove the \nthrow new NotImplementedException();\n line of code.\n\n\n\n\n\n\nIn it's space add in the following code:\n\n\nvar manifest = builder.Add();\nmanifest.DefineStyle(\"FeaturedProduct\").SetUrl(\"FeaturedProduct.css\");\n\n\n\nOrchard knows to automatically check the \n.\\Styles\\\n folder for this style sheet.\n\n\nThe name we assign in the \nDefineStyle()\n call is how we can reference this in the view.\n\n\n\n\n\n\nOpen up the front-end view located in \n.\\Views\\Parts\\FeaturedProduct.cshtml\n\n\n\n\n\n\nReplace the \nStyle.Include()\n call, which is used to directly reference style sheets, with a \nStyle.Require()\n call. This is used to refer to resources defined in resource manifest files:\n\n\n@{\n  Style.Require(\"FeaturedProduct\");\n}\n\n\n\nDon't forget that the resource doesn't need the \n.css\n extension on the end.\n\n\n\n\n\n\nIf you run the module in Orchard now then it will look the same as it did before. While this is a simplistic application of a best practice, I think that from the explanation of it you will see how valuable it will be in more complex modules.\n\n\nOrchard also has an assets pipeline feature. This feature can help build your resources into the final files to be included by Orchard in the resource manifest. For example, you might want to combine the scripts into a single file or minify your style sheets. If you look in your project you will see a file called \nAssets.json\n which drives this feature. \n\n\nDon't tie your CSS classes to the visuals\n\n\nThe CSS classes used throughout the module so far have been intentionally terrible. The reason for this was to highlight the fact that you shouldn't tie the class names to the visuals of the class.\n\n\nWhen your module is out there in the wild it will be used by many different themes which will all provide their own color schemes and styles.\n\n\nIf somebody took our module and wanted to make the \nOn Sale!\n label yellow, the class name of \nsale-red\n would not make sense.\n\n\nInstead you should describe the functionality that the class is styling.\n\n\nLet's take a look at the class names we have used so far and improve them based on this best practice:\n\n\n\n\n\n\n\n\nCurrent class name\n\n\nImproved class name\n\n\n\n\n\n\n\n\n\n\n.btn-green\n\n\n.btn-featuredproduct\n\n\n\n\n\n\n.sale-red\n\n\n.label-onsale\n\n\n\n\n\n\n.box-purple\n\n\n.box-moreinfoavailable\n\n\n\n\n\n\n\n\nYou might have your own ideas for some improved class names. As long as they don't tie your functionality to a specific visual style you can use whatever you think is best.\n\n\nThis is actually a best practice for all of your style sheets. Over time your website projects will be refined and even redesigned. You shouldn't tie your classes to the visual designs in any area of your project.\n\n\nApply these changes to the module:\n\n\n\n\n\n\nOpen the \n.\\Styles\\FeaturedProduct.css\n file.\n\n\n\n\n\n\nChange \n.btn-green\n to \n.btn-featuredproduct\n\n\n\n\n\n\nChange \n.sale-red\n to \n.label-onsale\n\n\n\n\n\n\nChange \n.box-purple\n to \n.box-moreinfoavailable\n\n\n\n\n\n\nOpen the front-end view at \n.\\Views\\Parts\\FeaturedProduct.cshtml\n\n\n\n\n\n\nUpdate the view to reflect the new class names:\n\n\n@{\n  Style.Require(\"FeaturedProduct\");\n}\n@if (Model.ContentPart.IsOnSale) {\n  <p class=\"label-onsale\">@T(\"ON SALE!\")</p>\n}\n<p>@T(\"Today's featured product is the Sprocket 9000.\")</p>\n@if (!Model.IsOnFeaturedProductPage) {\n  <p><a href=\"~/sprocket-9000\" class=\"btn-featuredproduct\">\n    @T(\"Click here to view it.\")</a>\n  </p>\n} else {\n  <p class=\"box-moreinfoavailable\">@T(\"Read more about it on this page.\")</p>\n}\n\n\n\n\n\n\n\nUse services instead of making a mess in your driver\n\n\nIn part three of this course we spent our time making a complete mess of the driver class.\n\n\nWe took a nice clean driver class that wires data to the view via shapes and added on many modifications. We added dependencies, then we built private variables into it, finally we wrote lines of business logic into the shape factory lambda, diluting its focus.\n\n\nThe modifications we made are also tied directly to that driver class. It's entirely plausible that you might want to extend the module and need to reuse that information. \n\n\nThe \nOrchard.Layouts\n module (which is used to manage the contents of pages within Orchard) has the concept of building \nElements\n. They are like widgets that you can place on to the layout \nCanvas\n. If you wrote a custom element for this module then it would need to duplicate the code we wrote in widget driver class. This code should live in a central location.\n\n\nWe have already used a built-in version of the solution to this problem; the Orchard services, such as \nIContentManager\n. These services are used throughout Orchard so that they can share their functionality. Each of the services implements \nIDependency\n to share this access.\n\n\nIn exactly the same way that we used dependency injection to request access to various Orchard services, we can write our own \nIDependency\n and let the driver ask for this.\n\n\nBy writing our own service we will wrap up all the driver modifications into its own class and then supply a single method which can answer the question for the driver: \"Is the current page the featured item page?\"\n\n\nThe first step to creating your own service is to write an interface for the class. The second step is to write a concrete class which implements that interface. Then we move the code from the driver to the concrete class. Then we request the service in the driver and use its functionality. \n\n\nThe way dependency injection works is that you request an interface to be injected and based on the configuration values of the system your request is resolved to the best matching concrete class.\n\n\nIn our case there will be only one concrete class so it will be a simple decision but this highlights again the extensibility of the Orchard architecture. There is nothing stopping a developer coming along and writing their own version of a particular service and configuring the dependency injection framework to use theirs instead. When you only work with the interface it doesn't matter to you which underlying class is provided.\n\n\nLet's upgrade the module to use our own service:\n\n\n\n\n\n\nIn the Solution Explorer, \nright click\n on the module's project name.\n\n\n\n\n\n\nSelect \nAdd\n, \nNew Folder\n and name it \nServices\n\n\n\n\n\n\nRight click\n the \nServices\n folder, select \nAdd\n, \nNew Item...\n.\n\n\n\n\n\n\nSelect the \nInterface\n item template, name it \nIFeaturedProductService\n and click \nAdd\n\n\n\n\n\n\nThe interface should be public so add that keyword to the start of the interface declaration. It should also implement the \nIDependency\n interface:\n\n\npublic interface IFeaturedProductService : IDependency {\n\n\n\n\n\n\n\nThe purpose of the service is to answer a single question, so add a method declaration to the interface called \nIsOnFeaturedProductPage\n which returns \nbool\n. You don't need to specify the \npublic\n modifier when working with an interface:\n\n\npublic interface IFeaturedProductService : IDependency {\n  bool IsOnFeaturedProductPage();\n}\n\n\n\n\n\n\n\nAdd a class to the services folder called \nFeaturedProductService\n. This will be the concrete implementation that we place the actual code into.\n\n\n\n\n\n\nAdd the \nIFeaturedProductService\n interface to the class:\n\n\npublic class FeaturedProductService : IFeaturedProductService {\n\n\n\n\n\n\n\nImplement its interface using the \nCtrl-.\n technique.\n\n\n\n\n\n\nNow its time to start moving the code over. Open up the \nFeaturedProductDriver.cs\n file that's in the \n.\\Drivers\\\n folder. Review the code and start thinking about what could be moved out into the service class.\n\n\n\n\n\n\nThe \nCurrentContent\n property is only used for calculating the \nIsOnFeaturedProductPage\n value. The three private variables which hold references to Orchard services are only used by the \nCurrentContent\n property. This means everything from the start of the class through to the end of the constructor can be moved over.\n\n\n\n\n\n\nCut the following code from the driver and paste it into the service class:\n\n\nprivate readonly IContentManager _contentManager;\nprivate readonly IWorkContextAccessor _workContextAccessor;\nprivate readonly IAliasService _aliasService;\nprivate IContent _currentContent = null;\nprivate IContent CurrentContent {\n  get {\n    if (_currentContent == null) {\n      var itemRoute = _aliasService.Get(_workContextAccessor.GetContext()\n        .HttpContext.Request.AppRelativeCurrentExecutionFilePath\n        .Substring(1).Trim('/'));      \n      _currentContent = _contentManager\n        .Get(Convert.ToInt32(itemRoute[\"Id\"]));\n    }\n    return _currentContent;\n  }\n}\npublic FeaturedProductDriver(IContentManager contentManager,\n  IWorkContextAccessor workContextAccessor,\n  IAliasService aliasService) {\n  _contentManager = contentManager;\n  _workContextAccessor = workContextAccessor;\n  _aliasService = aliasService;\n}\n\n\n\n\n\n\n\nThe private variables need several namespaces adding to be valid code. Use the \nCtrl-.\n technique to add in the required \nusing\n statements.\n\n\n\n\n\n\nThe constructor now has the wrong name, update it from \nFeaturedProductDriver\n to \nFeaturedProductService\n.\n\n\n\n\n\n\nGo back to the driver class and look at the \nDisplay()\n method. We want to pull the business logic code out into the service. \n\n\nThis means the code from the \nbool isOnFeaturedProductPage\n to the start of the \nreturn\n statement can be moved:\n\n\n\n\n\n\nCut the following code and paste it into the \nIsOnFeaturedProductPage()\n method of the service class:\n\n\nbool isOnFeaturedProductPage = false;  \nvar itemTypeName = CurrentContent.ContentItem.TypeDefinition.Name;  \nif (itemTypeName.Equals(\"Product\", \n  StringComparison.InvariantCultureIgnoreCase)) {\n    var dynamicContentItem = (dynamic)CurrentContent.ContentItem;\n    var itemProductId = dynamicContentItem.Product.ProductId.Value;  \n    if(itemProductId.Equals(\"SPROCKET9000\", \n      StringComparison.InvariantCulture)) {\n        isOnFeaturedProductPage = true;\n    }\n}\n\n\n\n\n\n\n\nDelete the \nthrow new NotImplementedException();\n line if its still in there.\n\n\n\n\n\n\nThe \nIsOnFeaturedProductPage()\n method should return a \nbool\n so add a return value to pass \nisOnFeaturedProductPage\n back:\n\n\npublic bool IsOnFeaturedProductPage() {\n  //..snip..\n  return isOnFeaturedProductPage;\n}\n\n\n\n\n\n\n\nThe service class is now complete. Your completed service class \nFeaturedProductService.cs\n should now look like this:\n\n\nusing System;\nusing Orchard.Alias;\nusing Orchard.ContentManagement;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct.Services {\n  public class FeaturedProductService : IFeaturedProductService {\n    private readonly IContentManager _contentManager;\n    private readonly IWorkContextAccessor _workContextAccessor;\n    private readonly IAliasService _aliasService;\n\n    private IContent _currentContent = null;\n    private IContent CurrentContent {\n      get {\n        if (_currentContent == null) {\n          var itemRoute = _aliasService.Get(_workContextAccessor.GetContext()\n            .HttpContext.Request.AppRelativeCurrentExecutionFilePath\n            .Substring(1).Trim('/'));\n\n          _currentContent = _contentManager.Get(Convert.ToInt32(itemRoute[\"Id\"]));\n        }\n        return _currentContent;\n      }\n    }\n\n    public FeaturedProductService(IContentManager contentManager,\n      IWorkContextAccessor workContextAccessor,\n      IAliasService aliasService) {\n      _contentManager = contentManager;\n      _workContextAccessor = workContextAccessor;\n      _aliasService = aliasService;\n    }\n\n    public bool IsOnFeaturedProductPage() {\n      bool isOnFeaturedProductPage = false;\n\n      var itemTypeName = CurrentContent.ContentItem.TypeDefinition.Name;\n\n      if (itemTypeName.Equals(\"Product\", \n        StringComparison.InvariantCultureIgnoreCase)) {\n          var dynamicContentItem = (dynamic)CurrentContent.ContentItem;\n          var itemProductId = dynamicContentItem.Product.ProductId.Value;  \n          if(itemProductId.Equals(\"SPROCKET9000\", \n            StringComparison.InvariantCulture)) {\n              isOnFeaturedProductPage = true;\n          }\n      }\n\n      return isOnFeaturedProductPage;\n    }\n  }\n}\n\n\n\nNow you have separated out the functionality into a service class. This means you can keep your driver clean and also re-use it in the future.\n\n\nThe driver class can now be modified so that the service is injected as a dependency.\n\n\n\n\n\n\nSwitch to the driver class again. There should be a red squiggly underneath the usage of \nisOnFeaturedProductPage\n because it no longer exists. In order to pull this information from the service we need to inject it via the constructor.\n\n\nAdd a new private variable to hold the service reference. Don't forget we always work with the interface when using the dependency injection features:\n\n\nprivate readonly IFeaturedProductService _featuredProductService;\n\n\n\n\n\n\n\nThe \nIFeaturedProductService\n will need its namespace adding. Do it via the \nCtrl-.\n shortcut.\n\n\n\n\n\n\nCreate a default constructor which will request an instance of \nIFeaturedProductService\n:\n\n\npublic FeaturedProductDriver(IFeaturedProductService featuredProductService) {\n}\n\n\n\nMake sure you add the \npublic\n keyword at the start or \nAutofac\n will thrown an exception. \n\n\n\n\n\n\nAssign the injected constructor parameter to the private variable:\n\n\npublic FeaturedProductDriver(IFeaturedProductService featuredProductService) {\n    _featuredProductService = featuredProductService;\n}\n\n\n\n\n\n\n\nUpdate the \nDisplay()\n method so that it uses the new service:\n\n\nprotected override DriverResult Display(FeaturedProductPart part, \n  string displayType, dynamic shapeHelper) {\n    return ContentShape(\"Parts_FeaturedProduct\", () => {\n      return shapeHelper.Parts_FeaturedProduct(\n        IsOnFeaturedProductPage: _featuredProductService\n          .IsOnFeaturedProductPage());\n    });\n}\n\n\n\n\n\n\n\nYour \nFeaturedProductDriver.cs\n class should now look like this:\n\n\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Drivers;\nusing Orchard.LearnOrchard.FeaturedProduct.Models;\nusing Orchard.LearnOrchard.FeaturedProduct.Services;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct.Drivers {\n  public class FeaturedProductDriver : ContentPartDriver<FeaturedProductPart> {\n    private readonly IFeaturedProductService _featuredProductService;\n\n    public FeaturedProductDriver(IFeaturedProductService featuredProductService) {\n        _featuredProductService = featuredProductService;\n    }\n\n    protected override DriverResult Display(FeaturedProductPart part, \n     string displayType, dynamic shapeHelper) {\n      return ContentShape(\"Parts_FeaturedProduct\", () => {\n        return shapeHelper.Parts_FeaturedProduct(IsOnFeaturedProductPage:\n          _featuredProductService.IsOnFeaturedProductPage());\n      });\n    }\n\n    protected override DriverResult Editor(FeaturedProductPart part, \n     dynamic shapeHelper) {\n      return ContentShape(\"Parts_FeaturedProduct_Edit\",\n        () => shapeHelper.EditorTemplate(\n          TemplateName: \"Parts/FeaturedProduct\",\n          Model: part,\n          Prefix: Prefix));\n    }\n\n    protected override DriverResult Editor(FeaturedProductPart part, \n     IUpdateModel updater, dynamic shapeHelper) {\n      updater.TryUpdateModel(part, Prefix, null, null);\n      return Editor(part, shapeHelper);\n    }\n  }\n}\n\n\n\nNow the driver class is clean again and only has dependencies that it directly needs.\n\n\nDescribe your content parts\n\n\nWe created the content part (the widget) back in the first part of this course. However, we missed a best practice when running that initial data migration because the content part was created without a description.\n\n\nYou should always add a description to your parts so that it's clear what they do. Both your users and likely even yourself when you come back in a few months time will need a prompt which explains what it's for.\n\n\nThe description can be added within a data migration by calling \nWithDescription(\"Your description here\")\n.\n\n\nThe description is displayed in the admin dashboard in the content definition section:\n\n\n\n\nAnd when you are working with the content part:\n\n\n\n\nLet's add an update to the data migration class so that this is populated:\n\n\n\n\n\n\nOpen the \nMigrations.cs\n located in the root folder of the module.\n\n\n\n\n\n\nEach time you want to add a new migration you add one to the number in your \nUpdateFromN()\n methods. Unless you have been experimenting with the code you should be on \nUpdateFrom2()\n now. Add this method to the class and set its return value to \n3\n:\n\n\npublic int UpdateFrom2() {\n  return 3;\n}\n\n\n\n\n\n\n\nWe want to edit the description by using \n.WithDescription()\n on the part. \n\n\nAdd this code into the method:\n\n\nContentDefinitionManager.AlterPartDefinition(\n  typeof(FeaturedProductPart).Name, part => part\n    .WithDescription(\"Renders information about the featured product.\"));\n\n\n\n\n\n\n\nThe \n.WithDescription\n method is an extension method in it's own namespace. If you have cleaned up your using statements in one of the previous parts you will need to use \nCtrl-.\n to add the \nusing\n in.\n\n\n\n\n\n\nYour \nMigrations.cs\n file should now look like this:\n\n\nusing Orchard.ContentManagement.MetaData;\nusing Orchard.Core.Common.Models;\nusing Orchard.Core.Contents.Extensions;\nusing Orchard.Data.Migration;\nusing Orchard.LearnOrchard.FeaturedProduct.Models;\nusing Orchard.Widgets.Models;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct {\n  public class Migrations : DataMigrationImpl {\n    public int Create() {\n      ContentDefinitionManager.AlterTypeDefinition(\n        \"FeaturedProductWidget\", cfg => cfg\n        .WithSetting(\"Stereotype\", \"Widget\")\n        .WithPart(typeof(FeaturedProductPart).Name)\n        .WithPart(typeof(CommonPart).Name)\n        .WithPart(typeof(WidgetPart).Name));\n\n      return 1;\n    }\n\n    public int UpdateFrom1() {\n      SchemaBuilder.CreateTable(typeof(FeaturedProductPartRecord).Name,\n        table => table\n          .ContentPartRecord()\n          .Column<bool>(\"IsOnSale\"));\n\n      return 2;\n    }\n\n    public int UpdateFrom2() {\n      ContentDefinitionManager.AlterPartDefinition(\n        typeof(FeaturedProductPart).Name, part => part\n        .WithDescription(\n          \"Renders information about the current featured product.\"));\n\n      return 3;\n    }\n  }\n}\n\n\n\nIf you load the Orchard site up in the web browser then the data migration will automatically run. You can see the updated description in the \nContent Definitions\n page:\n\n\n\n\n\n\nWithin Visual Studio, press \nCtrl-F5\n to load up the dev server.\n\n\n\n\n\n\nNavigate to the admin dashboard and click the \nContent Definition\n menu option.\n\n\n\n\n\n\nClick the \nContent Parts\n tab along the top of the page.\n\n\n\n\n\n\nScroll down to the \nFeatured Product\n entry. It will now have a description:\n\n\n\n\n\n\n\n\nRoll your data migrations up into Create()\n\n\nNow our \nMigrations\n class contains a \nCreate()\n and two \nUpdateFromN()\n methods. As time goes on it will get more added. \n\n\nWe may have some updates which revert earlier mistakes or remove features that aren't needed. There is no point in making a new user that's installing the module for the first time to go through all of these steps if they are no longer needed for the final product.\n\n\nInstead we should keep the \nCreate()\n as a pristine record of the way we want our data to be configured for the current codebase. At the end of the \nCreate()\n we can then return a higher number which will leapfrog the \nCreate()\n method over all the unnecessary \nUpdateFromN()\n calls.\n\n\nAt the moment the \nMigrations.cs\n is on \nUpdateFrom2()\n which has a return value of \n3\n. This is the value that we want new installs to start at.\n\n\nThe first update calls \nCreateTable()\n on a \nSchemaBuilder\n instance. That can be copied in to the end of the \nCreate()\n method.\n\n\nThe second update uses \nAlterPartDefinition()\n which is another method on the \nContentDefinitionManager\n class so technically this could be chained on to the end of the \nContentDefinitionManager\n instance already in use in the \nCreate()\n method. \n\n\nIn practice however, it is common to separate out the work on each content type / part to its own statement block.\n\n\nThis means the process will be as follows:\n\n\n\n\n\n\nOpen the \nMigrations.cs\n located in the root folder of the module.\n\n\n\n\n\n\nCopy\n the \nCreateTable()\n call from \nUpdateFrom1()\n to the \nCreate()\n method so that your \nCreate()\n method now looks like this:\n\n\npublic int Create() {\n  // Featured Product Widget\n  ContentDefinitionManager.AlterTypeDefinition(\n    \"FeaturedProductWidget\", cfg => cfg\n    .WithSetting(\"Stereotype\", \"Widget\")\n    .WithPart(typeof(FeaturedProductPart).Name)\n    .WithPart(typeof(CommonPart).Name)\n    .WithPart(typeof(WidgetPart).Name));\n\n  // Featured Product Part Record\n  SchemaBuilder.CreateTable(typeof(FeaturedProductPartRecord).Name,\n    table => table\n      .ContentPartRecord()\n      .Column<bool>(\"IsOnSale\"));\n  return 1;\n}\n\n\n\nLeave the original \nUpdateFrom1()\n method intact.\n\n\n\n\n\n\nCopy\n the \nAlterPartDefinition()\n call from \nUpdateFrom2()\n to the \nCreate()\n method so that your \nCreate()\n method now looks like this:\n\n\npublic int Create() {\n  // Featured Product Widget\n  ContentDefinitionManager.AlterTypeDefinition(\n    \"FeaturedProductWidget\", cfg => cfg\n      .WithSetting(\"Stereotype\", \"Widget\")\n      .WithPart(typeof(FeaturedProductPart).Name)\n      .WithPart(typeof(CommonPart).Name)\n      .WithPart(typeof(WidgetPart).Name));\n\n  // Featured Product Part\n  ContentDefinitionManager.AlterPartDefinition(\n    typeof(FeaturedProductPart).Name, part => part\n      .WithDescription(\"Renders information about the featured product.\"));\n\n  // Featured Product Part Record\n  SchemaBuilder.CreateTable(typeof(FeaturedProductPartRecord).Name,\n    table => table\n      .ContentPartRecord()\n      .Column<bool>(\"IsOnSale\"));\n  return 1;\n}\n\n\n\nLeave the original \nUpdateFrom2()\n method intact.\n\n\n\n\n\n\nUpdate the \nCreate()\n methods return value from \nreturn 1;\n to \nreturn 3;\n\n\n\n\n\n\nYour \nMigrations.cs\n file should now look like this:\n\n\nusing Orchard.ContentManagement.MetaData;\nusing Orchard.Core.Common.Models;\nusing Orchard.Core.Contents.Extensions;\nusing Orchard.Data.Migration;\nusing Orchard.LearnOrchard.FeaturedProduct.Models;\nusing Orchard.Widgets.Models;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct {\n    public class Migrations : DataMigrationImpl {\n\n        public int Create() {\n            // Featured Product Widget\n            ContentDefinitionManager.AlterTypeDefinition(\n              \"FeaturedProductWidget\", cfg => cfg\n                .WithSetting(\"Stereotype\", \"Widget\")\n                .WithPart(typeof(FeaturedProductPart).Name)\n                .WithPart(typeof(CommonPart).Name)\n                .WithPart(typeof(WidgetPart).Name));\n\n            // Featured Product Part\n            ContentDefinitionManager.AlterPartDefinition(\n              typeof(FeaturedProductPart).Name, part => part\n                .WithDescription(\n                  \"Renders information about the featured product.\"));\n\n            // Featured Product Part Record\n            SchemaBuilder.CreateTable(typeof(FeaturedProductPartRecord).Name,\n              table => table\n                .ContentPartRecord()\n                .Column<bool>(\"IsOnSale\"));\n\n            return 3;\n        }\n\n        public int UpdateFrom1() {\n            SchemaBuilder.CreateTable(typeof(FeaturedProductPartRecord).Name,\n              table => table\n                .ContentPartRecord()\n                .Column<bool>(\"IsOnSale\"));\n            return 2;\n        }\n\n        public int UpdateFrom2() {\n            ContentDefinitionManager.AlterPartDefinition(\n              typeof(FeaturedProductPart).Name, part => part\n                .WithDescription(\n                  \"Renders information about the featured product.\"));\n\n            return 3;\n        }\n    }\n}\n\n\n\nIn the future when you add new updates to your \nMigration\n you should follow these steps:\n\n\n\n\nCreate a new \nUpdateFromN()\n method.\n\n\nSet the appropriate \nreturn\n value.\n\n\nApply the amendments you want to make within the update method.\n\n\nAlter the \nCreate()\n method so that it creates your data in the correct way your codebase is expecting for a fresh install.\n\n\nUpdate the \nreturn\n value of \nCreate()\n so that it matches the return value of the \nUpdateFromN()\n you just created.\n\n\n\n\nDownload the code for this lesson\n\n\nYou can download a copy of the module so far at this link:\n\n\n\n\nDownload Orchard.LearnOrchard.FeaturedProduct-Part4-v1.0.zip\n\n\n\n\nTo use it in Orchard simply extract the archive into the modules directory at \n.\\src\\Orchard.Web\\Modules\\\n. If you already have the module installed from a previous part then delete that folder first.\n\n\n\n\nFor Orchard to recognize it the folder name should match the name of the module. Make sure that the folder name is \nOrchard.LearnOrchard.FeaturedProduct\n and then the modules files are located directly under that.\n\n\n\n\nConclusion\n\n\nIn this course we have looked at many of the core components that make up a module. These topics included:\n\n\n\n\nCommand-line scaffolding\n\n\nModule.txt manifest\n\n\nContentPart\n\n\nContentPartRecord\n\n\nWidget\n\n\nData migration\n\n\nDependency injection\n\n\nHandler\n\n\nDriver\n\n\nEditor view\n\n\nFront-end view\n\n\nPlacement.info\n\n\nContent types via the admin dashboard\n\n\nFields \n\n\nLocalization\n\n\nModule dependencies\n\n\nResource manifest\n\n\nServices\n\n\nOrchard API  \n\n\n\n\nThis should have given you a solid grounding for extending Orchard via code. With this knowledge you can now build your own simple modules and you will also understand the documentation found elsewhere on this site and around the web.\n\n\n\n\nBonus Exercise:\n Using the skills you have now learned, research implement the following:\n\n\n\n\n\n\nAdd a Content Picker Field to the \nFeaturedProductWidget\n part so that you can  select a \nProduct\n to be featured.\n\n\n\n\n\n\nImplement the code so that the widget will work with the selected \nProduct\n rather than using the hard-coded information we supplied throughout this course. \n\n\n\n\n\n\nYou can find the information to complete this exercise by using resources such as this documentation website, reading the Orchard source code and searching the World Wide Web.",
            "title": "Part 4: Applying Best Practices"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-4/#introduction",
            "text": "This is part four of a four part course. It will get you started with a gentle introduction to extending Orchard at the code level. You will build a very simple module which contains a widget that shows an imaginary featured product.   It will teach you some of the basic components of module development and also encourage you to use best-practices when developing for Orchard.  If you haven't read the previous parts of this course then you can go back to the overview to  learn about the Getting Started with Modules course .  This final part will look at applying some best practices to improve the quality of the module's codebase.",
            "title": "Introduction"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-4/#whats-left-to-do",
            "text": "So far in the course we have covered a pretty impressive list of topics. You might be tempted to think that the items in this last part are extras but just because we saved them until last doesn't mean they aren't important.   In fact, the only reason these weren't covered earlier was because they aren't essential to being able to load up the module in Orchard and there was already plenty to discuss. Your module is not really complete though until you've incorporated these techniques into your development process.   The topics in this article will help you add polish to your module and if you're going to release them to the public it will mean the difference between a beginners module and a professional module.",
            "title": "What's left to do"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-4/#customize-the-manifest-file",
            "text": "Starting with an easy one, the  module.txt  is a text file you will find in the root of your module folder. We have already looked at this file briefly in this course each time we have added dependencies. When Orchard is scanning the folders looking for modules to load it will parse this file to get information about it.  The  module.txt  is a manifest file. Technically, the document is in YAML format. If you open it now you will see the following:  Name: Orchard.LearnOrchard.FeaturedProduct\nAntiForgery: enabled\nAuthor: The Orchard Team\nWebsite: http://orchardproject.net\nVersion: 1.0\nOrchardVersion: 1.0\nDescription: Description for the module\nFeatures:\n    Orchard.LearnOrchard.FeaturedProduct:\n        Description: Description for feature Orchard.LearnOrchard.FeaturedProduct.  The  Name  field at the top is a friendly text name that's displayed to the user. For example the  Name  field for the module in the screenshot below reads  Dynamic Forms Validation Activities :   AntiForgery  enables the XSS injection protection so you should have this set to  enabled  unless you have a specific reason to manage this yourself.  The file format is quite straightforward. The fields mean what you would expect them to mean.   Version  is the version of the module.  OrchardVersion  is the version of Orchard that this module was written against.  Features  is the only complicated one. We didn't look at it in this course, but you can include several features within a single module. This means you can enable or disable individual parts of the module. The description field and features section work together and can be displayed in several different formats.   For a detailed explanation of the  Features  section and the other fields  read the manifest files guide .  Time to make some changes:    Open  module.txt .    Edit the  module.txt  to your liking while staying  within the spec . Go ahead and put your name and details into it. It feels good to see your name in lights!    Save the file.    You will probably need to restart the development server before Orchard picks up the changes you've made to your  module.txt .",
            "title": "Customize the manifest file"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-4/#categorize-your-module",
            "text": "While we are working with the manifest file, there is one field which is very useful but not included by default in the  module.txt . The field is called  Category: .  If you omit this field then the module defaults to the  Uncategorized  grouping:   When developing your own modules you should first check the  Modules  section of the admin dashboard to see if your module would sit well in one of the existing common categories.   It's better to group your module with other modules where possible so that users can find related modules easily.  In this case we will make our own category, \"Learn Orchard\", which is the category used for all demo modules on this site:    Open  module.txt .    Add the following line to the file:   Category: Learn Orchard  It doesn't matter where you put it in this case because we are only defining a single feature. In the future if your module supports multiple features then you should add in the relevant category to each feature.    Save the file.    You will probably need to restart the development server before Orchard picks up the changes you've made to your  module.txt .",
            "title": "Categorize your module"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-4/#localize-all-of-your-text",
            "text": "Orchard has great support for writing global aware, localized websites. Administrators can add cultures to their site for a wide variety of different languages.  This means that as a module developer you can't know ahead of time what language your module will be used in. Orchard makes it possible for you to support this scenario by wrapping all of your text in a  T()  method.  Every string that you display in Orchard should be passed through the  T()  method.  When you are working with Razor views the  T()  is automatically available. So, for example, this snippet from the  FeaturedProduct.cshtml  view would change from:  <p class=\"sale-red\">ON SALE!</p>  Over to:  <p class=\"sale-red\">@T(\"ON SALE!\")</p>  If you need to inject variables into the string then you should use  String.Format()  style formatting. Don't try to concatenate them. For example, if you had a snippet that looked like this:  <p>Today's featured product is the @Model.ProductName.</p>  The correct way to format this would be:  <p>@T(\"Today's featured product is the {0}.\", @Model.ProductName)</p>   Don't use concatenation because the position of the variable might change in different translations.  This is  BAD :  <p>@T(\"You have \") + @Model.SmsCredits + @T(\" credits left.\")</p>  This is  GOOD :  <p>@T(\"You have {0} credits left.\", @Model.SmsCredits)</p>   Let's update the front end view so that it follows the correct localized development best practices:    Open  .\\Views\\Parts\\FeaturedProduct.cshtml    Wrap each of the four blocks of text in their own  @T()  calls:  @if (Model.ContentPart.IsOnSale) {\n  <p class=\"sale-red\">@T(\"ON SALE!\")</p>\n}\n<p>@T(\"Today's featured product is the Sprocket 9000.\")</p>\n@if (!Model.IsOnFeaturedProductPage) {\n  <p><a href=\"~/sprocket-9000\" class=\"btn-green\">\n    @T(\"Click here to view it.\")\n  </a></p>\n} else {\n  <p class=\"box-purple\">@T(\"Read more about it on this page.\")</p>\n}    In the model class we used the  [DisplayName]  attribute on the  IsOnSale  property. The  [DisplayName]  is an ASP.NET MVC attribute which allows you to automatically inject a descriptive label into your UI.  Unfortunately Orchard's localization system doesn't intercept this information so when creating localized labels we need to pass the display name in each time.   There  is a pull request  currently being discussed for this issue which will hopefully bring in a  [LocalizedDisplayName()]  attribute that will solve this issue.   To localize the label with our  [DisplayName]  text we need to pass an extra parameter in to the  @Html.LabelFor()  so. This would look something like this:  @Html.LabelFor(model => model.IsOnSale, T(\"Is the featured product on sale?\"))  However, this kind of duplication of the text is not a best practice. Instead there is a way to pull the  [DisplayName]  attribute text in and pass it through the  T()  and into the  LabelFor() :     Open  .\\Views\\EditorTemplates\\Parts\\FeaturedProduct.cshtml    Find the call to  LabelFor :  @Html.LabelFor(model => model.IsOnSale)  And replace it with:  @Html.LabelFor(model => model.IsOnSale, \n    T(Html.DisplayNameFor(model => model.IsOnSale).ToHtmlString()))    Localization is an important topic in Orchard. Read the  using the localization helpers  and the  creating global ready applications  guides for more detailed information about supporting this feature.",
            "title": "Localize all of your text"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-4/#your-styles-shouldnt-be-inline",
            "text": "Hopefully this one should have raised some alarm bells as you were doing this - having a  <style>  tag in the view is not a good HTML practice. You should always put your CSS into an external  .css  file. This allows the browser to download the file once for each the sites and keep it cached for subsequent requests.  However, just putting the styles into an external file is not the whole story with Orchard. It provides two techniques to help you include scripts and styles within your view.   The quick fix for this is to move the CSS into a  .css  file and then use  Script.Require(\"filename.css\")  to include it:    In the Solution Explorer,  right click  on the  Styles  folder within the module.    Choose  Add ,  New Item...  from the context menu.    Select  Visual C#  then  Web  from the categories down the left hand side.    Find  Style Sheet  in the list and give it a  Name:  of  FeaturedProduct.css .    Click  Add .    Open  .\\Views\\Parts\\FeaturedProduct.cshtml .    Copy the css content from  within  the  <style>  tag (don't include the  <style>  tag itself) and drop it into the  FeaturedProduct.css  style sheet.    Go back to  FeaturedProduct.cshtml  and replace the now empty  <style></style>  with this code:  @{\n  Style.Include(\"FeaturedProduct.css\");\n}    If you don't specify a folder then Orchard will automatically check the  .\\Styles  folder first.  This is a quick solution but not a best practice solution so let's improve it a bit further. The problem with  Style.Include()  is that it blindly includes the file whenever requested. Orchard supports something called a  ResourceManifest  class which can help you manage your external resources in a more intelligent way.  Using the resource manifest class you can assign extra information to your CSS files. This could be alternative URLs to use for debug / live, content delivery networks, setting the version of the script or setting dependencies on other other resources that have been added.   I have used the word resources so far when describing this feature. This is because you can use it for managing both scripts and style sheets.  Each resource is assigned a plain text name. This can then be used in the view and it can also be used if another resource needs to depend on it.  This class is normally found in the  ResourceManifest.cs  file in the root of your module folder but as long as your class implements the  IResourceManifestProvider  interface then Orchard will pick it up.  The example code below is a shortened version of the Orchard.Layouts  ResourceManifest.cs  file:  using Orchard.UI.Resources;\n\nnamespace Orchard.Layouts {\n    public class ResourceManifest : IResourceManifestProvider {\n        public void BuildManifests(ResourceManifestBuilder builder) {\n            var manifest = builder.Add();\n            manifest.DefineScript(\"Layouts.Lib\")\n              .SetUrl(\"Lib.min.js\", \"Lib.js\")\n              .SetDependencies(\"jQuery\");\n            manifest.DefineScript(\"Layouts.Models\")\n              .SetUrl(\"Models.min.js\", \"Models.js\")\n              .SetDependencies(\"jQuery\", \"Layouts.Lib\");            \n        }\n    }\n}  You can see that a few of the features of the resource manifest are being used here. The first script, called  Layouts.Lib  uses  SetUrl()  to set up minified (live) and unminified (debug) filenames for the resource.   It also sets a dependency on a resource called  jQuery . This is a common feature that you will see throughout many Orchard modules. The  jQuery  resource comes from the  Orchard.jQuery  module. If you looked in the  Orchard.Layouts   module.txt  then you would find that it specifies a dependency on the  Orchard.jQuery  module.  This kind of external dependency shows off some more of the resource manager features:    You can share the resource strings between different modules so that dependencies for common scripts can be centrally managed.    If you look in the views of the  Orchard.Layouts  module you won't find any includes for the jQuery script.   When the  Layouts.Lib  resource sets a dependency on the  jQuery  resource Orchard automatically knows to generate a  jQuery  script tag before the  Layouts.Lib  script tag.   So you will find some code like  Script.Require(\"Layouts.Lib\").AtFoot();  in the view but  Script.Require(\"jQuery\").AtFoot();  isn't needed.    You will also just find jQuery included just once, no matter how many modules have requested the script.   This is because Orchard recognizes the resource. It pools the requests together and knows how to order the scripts correctly.    The second  DefineScript  in the example above is included just to show that you can include multiple dependencies in your  SetDependencies()  call.  Now that its clear what service the resource manifest provides, let's upgrade the module to use this feature of Orchard:    In the Solution Explorer,  right click  on the module's project name.    Select  Add ,  New Item...  and add a class called  ResourceManifest.cs .    Add the  IResourceManifestProvider  interface to the  ResourceManfiest  class:  public class ResourceManifest : IResourceManifestProvider {\n}    Use the  Ctrl-.  technique to add the  using Orchard.UI.Resources;  namespace.    You will now notice that the  IResourceManifestProvider  still has its red squiggles underneath it:   Use the  Ctrl-.  technique a second time to implement the interface. Choose the first option,  Implement interface .    Remove the  throw new NotImplementedException();  line of code.    In it's space add in the following code:  var manifest = builder.Add();\nmanifest.DefineStyle(\"FeaturedProduct\").SetUrl(\"FeaturedProduct.css\");  Orchard knows to automatically check the  .\\Styles\\  folder for this style sheet.  The name we assign in the  DefineStyle()  call is how we can reference this in the view.    Open up the front-end view located in  .\\Views\\Parts\\FeaturedProduct.cshtml    Replace the  Style.Include()  call, which is used to directly reference style sheets, with a  Style.Require()  call. This is used to refer to resources defined in resource manifest files:  @{\n  Style.Require(\"FeaturedProduct\");\n}  Don't forget that the resource doesn't need the  .css  extension on the end.    If you run the module in Orchard now then it will look the same as it did before. While this is a simplistic application of a best practice, I think that from the explanation of it you will see how valuable it will be in more complex modules.  Orchard also has an assets pipeline feature. This feature can help build your resources into the final files to be included by Orchard in the resource manifest. For example, you might want to combine the scripts into a single file or minify your style sheets. If you look in your project you will see a file called  Assets.json  which drives this feature.",
            "title": "Your styles shouldn't be inline"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-4/#dont-tie-your-css-classes-to-the-visuals",
            "text": "The CSS classes used throughout the module so far have been intentionally terrible. The reason for this was to highlight the fact that you shouldn't tie the class names to the visuals of the class.  When your module is out there in the wild it will be used by many different themes which will all provide their own color schemes and styles.  If somebody took our module and wanted to make the  On Sale!  label yellow, the class name of  sale-red  would not make sense.  Instead you should describe the functionality that the class is styling.  Let's take a look at the class names we have used so far and improve them based on this best practice:     Current class name  Improved class name      .btn-green  .btn-featuredproduct    .sale-red  .label-onsale    .box-purple  .box-moreinfoavailable     You might have your own ideas for some improved class names. As long as they don't tie your functionality to a specific visual style you can use whatever you think is best.  This is actually a best practice for all of your style sheets. Over time your website projects will be refined and even redesigned. You shouldn't tie your classes to the visual designs in any area of your project.  Apply these changes to the module:    Open the  .\\Styles\\FeaturedProduct.css  file.    Change  .btn-green  to  .btn-featuredproduct    Change  .sale-red  to  .label-onsale    Change  .box-purple  to  .box-moreinfoavailable    Open the front-end view at  .\\Views\\Parts\\FeaturedProduct.cshtml    Update the view to reflect the new class names:  @{\n  Style.Require(\"FeaturedProduct\");\n}\n@if (Model.ContentPart.IsOnSale) {\n  <p class=\"label-onsale\">@T(\"ON SALE!\")</p>\n}\n<p>@T(\"Today's featured product is the Sprocket 9000.\")</p>\n@if (!Model.IsOnFeaturedProductPage) {\n  <p><a href=\"~/sprocket-9000\" class=\"btn-featuredproduct\">\n    @T(\"Click here to view it.\")</a>\n  </p>\n} else {\n  <p class=\"box-moreinfoavailable\">@T(\"Read more about it on this page.\")</p>\n}",
            "title": "Don't tie your CSS classes to the visuals"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-4/#use-services-instead-of-making-a-mess-in-your-driver",
            "text": "In part three of this course we spent our time making a complete mess of the driver class.  We took a nice clean driver class that wires data to the view via shapes and added on many modifications. We added dependencies, then we built private variables into it, finally we wrote lines of business logic into the shape factory lambda, diluting its focus.  The modifications we made are also tied directly to that driver class. It's entirely plausible that you might want to extend the module and need to reuse that information.   The  Orchard.Layouts  module (which is used to manage the contents of pages within Orchard) has the concept of building  Elements . They are like widgets that you can place on to the layout  Canvas . If you wrote a custom element for this module then it would need to duplicate the code we wrote in widget driver class. This code should live in a central location.  We have already used a built-in version of the solution to this problem; the Orchard services, such as  IContentManager . These services are used throughout Orchard so that they can share their functionality. Each of the services implements  IDependency  to share this access.  In exactly the same way that we used dependency injection to request access to various Orchard services, we can write our own  IDependency  and let the driver ask for this.  By writing our own service we will wrap up all the driver modifications into its own class and then supply a single method which can answer the question for the driver: \"Is the current page the featured item page?\"  The first step to creating your own service is to write an interface for the class. The second step is to write a concrete class which implements that interface. Then we move the code from the driver to the concrete class. Then we request the service in the driver and use its functionality.   The way dependency injection works is that you request an interface to be injected and based on the configuration values of the system your request is resolved to the best matching concrete class.  In our case there will be only one concrete class so it will be a simple decision but this highlights again the extensibility of the Orchard architecture. There is nothing stopping a developer coming along and writing their own version of a particular service and configuring the dependency injection framework to use theirs instead. When you only work with the interface it doesn't matter to you which underlying class is provided.  Let's upgrade the module to use our own service:    In the Solution Explorer,  right click  on the module's project name.    Select  Add ,  New Folder  and name it  Services    Right click  the  Services  folder, select  Add ,  New Item... .    Select the  Interface  item template, name it  IFeaturedProductService  and click  Add    The interface should be public so add that keyword to the start of the interface declaration. It should also implement the  IDependency  interface:  public interface IFeaturedProductService : IDependency {    The purpose of the service is to answer a single question, so add a method declaration to the interface called  IsOnFeaturedProductPage  which returns  bool . You don't need to specify the  public  modifier when working with an interface:  public interface IFeaturedProductService : IDependency {\n  bool IsOnFeaturedProductPage();\n}    Add a class to the services folder called  FeaturedProductService . This will be the concrete implementation that we place the actual code into.    Add the  IFeaturedProductService  interface to the class:  public class FeaturedProductService : IFeaturedProductService {    Implement its interface using the  Ctrl-.  technique.    Now its time to start moving the code over. Open up the  FeaturedProductDriver.cs  file that's in the  .\\Drivers\\  folder. Review the code and start thinking about what could be moved out into the service class.    The  CurrentContent  property is only used for calculating the  IsOnFeaturedProductPage  value. The three private variables which hold references to Orchard services are only used by the  CurrentContent  property. This means everything from the start of the class through to the end of the constructor can be moved over.    Cut the following code from the driver and paste it into the service class:  private readonly IContentManager _contentManager;\nprivate readonly IWorkContextAccessor _workContextAccessor;\nprivate readonly IAliasService _aliasService;\nprivate IContent _currentContent = null;\nprivate IContent CurrentContent {\n  get {\n    if (_currentContent == null) {\n      var itemRoute = _aliasService.Get(_workContextAccessor.GetContext()\n        .HttpContext.Request.AppRelativeCurrentExecutionFilePath\n        .Substring(1).Trim('/'));      \n      _currentContent = _contentManager\n        .Get(Convert.ToInt32(itemRoute[\"Id\"]));\n    }\n    return _currentContent;\n  }\n}\npublic FeaturedProductDriver(IContentManager contentManager,\n  IWorkContextAccessor workContextAccessor,\n  IAliasService aliasService) {\n  _contentManager = contentManager;\n  _workContextAccessor = workContextAccessor;\n  _aliasService = aliasService;\n}    The private variables need several namespaces adding to be valid code. Use the  Ctrl-.  technique to add in the required  using  statements.    The constructor now has the wrong name, update it from  FeaturedProductDriver  to  FeaturedProductService .    Go back to the driver class and look at the  Display()  method. We want to pull the business logic code out into the service.   This means the code from the  bool isOnFeaturedProductPage  to the start of the  return  statement can be moved:    Cut the following code and paste it into the  IsOnFeaturedProductPage()  method of the service class:  bool isOnFeaturedProductPage = false;  \nvar itemTypeName = CurrentContent.ContentItem.TypeDefinition.Name;  \nif (itemTypeName.Equals(\"Product\", \n  StringComparison.InvariantCultureIgnoreCase)) {\n    var dynamicContentItem = (dynamic)CurrentContent.ContentItem;\n    var itemProductId = dynamicContentItem.Product.ProductId.Value;  \n    if(itemProductId.Equals(\"SPROCKET9000\", \n      StringComparison.InvariantCulture)) {\n        isOnFeaturedProductPage = true;\n    }\n}    Delete the  throw new NotImplementedException();  line if its still in there.    The  IsOnFeaturedProductPage()  method should return a  bool  so add a return value to pass  isOnFeaturedProductPage  back:  public bool IsOnFeaturedProductPage() {\n  //..snip..\n  return isOnFeaturedProductPage;\n}    The service class is now complete. Your completed service class  FeaturedProductService.cs  should now look like this:  using System;\nusing Orchard.Alias;\nusing Orchard.ContentManagement;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct.Services {\n  public class FeaturedProductService : IFeaturedProductService {\n    private readonly IContentManager _contentManager;\n    private readonly IWorkContextAccessor _workContextAccessor;\n    private readonly IAliasService _aliasService;\n\n    private IContent _currentContent = null;\n    private IContent CurrentContent {\n      get {\n        if (_currentContent == null) {\n          var itemRoute = _aliasService.Get(_workContextAccessor.GetContext()\n            .HttpContext.Request.AppRelativeCurrentExecutionFilePath\n            .Substring(1).Trim('/'));\n\n          _currentContent = _contentManager.Get(Convert.ToInt32(itemRoute[\"Id\"]));\n        }\n        return _currentContent;\n      }\n    }\n\n    public FeaturedProductService(IContentManager contentManager,\n      IWorkContextAccessor workContextAccessor,\n      IAliasService aliasService) {\n      _contentManager = contentManager;\n      _workContextAccessor = workContextAccessor;\n      _aliasService = aliasService;\n    }\n\n    public bool IsOnFeaturedProductPage() {\n      bool isOnFeaturedProductPage = false;\n\n      var itemTypeName = CurrentContent.ContentItem.TypeDefinition.Name;\n\n      if (itemTypeName.Equals(\"Product\", \n        StringComparison.InvariantCultureIgnoreCase)) {\n          var dynamicContentItem = (dynamic)CurrentContent.ContentItem;\n          var itemProductId = dynamicContentItem.Product.ProductId.Value;  \n          if(itemProductId.Equals(\"SPROCKET9000\", \n            StringComparison.InvariantCulture)) {\n              isOnFeaturedProductPage = true;\n          }\n      }\n\n      return isOnFeaturedProductPage;\n    }\n  }\n}  Now you have separated out the functionality into a service class. This means you can keep your driver clean and also re-use it in the future.  The driver class can now be modified so that the service is injected as a dependency.    Switch to the driver class again. There should be a red squiggly underneath the usage of  isOnFeaturedProductPage  because it no longer exists. In order to pull this information from the service we need to inject it via the constructor.  Add a new private variable to hold the service reference. Don't forget we always work with the interface when using the dependency injection features:  private readonly IFeaturedProductService _featuredProductService;    The  IFeaturedProductService  will need its namespace adding. Do it via the  Ctrl-.  shortcut.    Create a default constructor which will request an instance of  IFeaturedProductService :  public FeaturedProductDriver(IFeaturedProductService featuredProductService) {\n}  Make sure you add the  public  keyword at the start or  Autofac  will thrown an exception.     Assign the injected constructor parameter to the private variable:  public FeaturedProductDriver(IFeaturedProductService featuredProductService) {\n    _featuredProductService = featuredProductService;\n}    Update the  Display()  method so that it uses the new service:  protected override DriverResult Display(FeaturedProductPart part, \n  string displayType, dynamic shapeHelper) {\n    return ContentShape(\"Parts_FeaturedProduct\", () => {\n      return shapeHelper.Parts_FeaturedProduct(\n        IsOnFeaturedProductPage: _featuredProductService\n          .IsOnFeaturedProductPage());\n    });\n}    Your  FeaturedProductDriver.cs  class should now look like this:  using Orchard.ContentManagement;\nusing Orchard.ContentManagement.Drivers;\nusing Orchard.LearnOrchard.FeaturedProduct.Models;\nusing Orchard.LearnOrchard.FeaturedProduct.Services;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct.Drivers {\n  public class FeaturedProductDriver : ContentPartDriver<FeaturedProductPart> {\n    private readonly IFeaturedProductService _featuredProductService;\n\n    public FeaturedProductDriver(IFeaturedProductService featuredProductService) {\n        _featuredProductService = featuredProductService;\n    }\n\n    protected override DriverResult Display(FeaturedProductPart part, \n     string displayType, dynamic shapeHelper) {\n      return ContentShape(\"Parts_FeaturedProduct\", () => {\n        return shapeHelper.Parts_FeaturedProduct(IsOnFeaturedProductPage:\n          _featuredProductService.IsOnFeaturedProductPage());\n      });\n    }\n\n    protected override DriverResult Editor(FeaturedProductPart part, \n     dynamic shapeHelper) {\n      return ContentShape(\"Parts_FeaturedProduct_Edit\",\n        () => shapeHelper.EditorTemplate(\n          TemplateName: \"Parts/FeaturedProduct\",\n          Model: part,\n          Prefix: Prefix));\n    }\n\n    protected override DriverResult Editor(FeaturedProductPart part, \n     IUpdateModel updater, dynamic shapeHelper) {\n      updater.TryUpdateModel(part, Prefix, null, null);\n      return Editor(part, shapeHelper);\n    }\n  }\n}  Now the driver class is clean again and only has dependencies that it directly needs.",
            "title": "Use services instead of making a mess in your driver"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-4/#describe-your-content-parts",
            "text": "We created the content part (the widget) back in the first part of this course. However, we missed a best practice when running that initial data migration because the content part was created without a description.  You should always add a description to your parts so that it's clear what they do. Both your users and likely even yourself when you come back in a few months time will need a prompt which explains what it's for.  The description can be added within a data migration by calling  WithDescription(\"Your description here\") .  The description is displayed in the admin dashboard in the content definition section:   And when you are working with the content part:   Let's add an update to the data migration class so that this is populated:    Open the  Migrations.cs  located in the root folder of the module.    Each time you want to add a new migration you add one to the number in your  UpdateFromN()  methods. Unless you have been experimenting with the code you should be on  UpdateFrom2()  now. Add this method to the class and set its return value to  3 :  public int UpdateFrom2() {\n  return 3;\n}    We want to edit the description by using  .WithDescription()  on the part.   Add this code into the method:  ContentDefinitionManager.AlterPartDefinition(\n  typeof(FeaturedProductPart).Name, part => part\n    .WithDescription(\"Renders information about the featured product.\"));    The  .WithDescription  method is an extension method in it's own namespace. If you have cleaned up your using statements in one of the previous parts you will need to use  Ctrl-.  to add the  using  in.    Your  Migrations.cs  file should now look like this:  using Orchard.ContentManagement.MetaData;\nusing Orchard.Core.Common.Models;\nusing Orchard.Core.Contents.Extensions;\nusing Orchard.Data.Migration;\nusing Orchard.LearnOrchard.FeaturedProduct.Models;\nusing Orchard.Widgets.Models;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct {\n  public class Migrations : DataMigrationImpl {\n    public int Create() {\n      ContentDefinitionManager.AlterTypeDefinition(\n        \"FeaturedProductWidget\", cfg => cfg\n        .WithSetting(\"Stereotype\", \"Widget\")\n        .WithPart(typeof(FeaturedProductPart).Name)\n        .WithPart(typeof(CommonPart).Name)\n        .WithPart(typeof(WidgetPart).Name));\n\n      return 1;\n    }\n\n    public int UpdateFrom1() {\n      SchemaBuilder.CreateTable(typeof(FeaturedProductPartRecord).Name,\n        table => table\n          .ContentPartRecord()\n          .Column<bool>(\"IsOnSale\"));\n\n      return 2;\n    }\n\n    public int UpdateFrom2() {\n      ContentDefinitionManager.AlterPartDefinition(\n        typeof(FeaturedProductPart).Name, part => part\n        .WithDescription(\n          \"Renders information about the current featured product.\"));\n\n      return 3;\n    }\n  }\n}  If you load the Orchard site up in the web browser then the data migration will automatically run. You can see the updated description in the  Content Definitions  page:    Within Visual Studio, press  Ctrl-F5  to load up the dev server.    Navigate to the admin dashboard and click the  Content Definition  menu option.    Click the  Content Parts  tab along the top of the page.    Scroll down to the  Featured Product  entry. It will now have a description:",
            "title": "Describe your content parts"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-4/#roll-your-data-migrations-up-into-create",
            "text": "Now our  Migrations  class contains a  Create()  and two  UpdateFromN()  methods. As time goes on it will get more added.   We may have some updates which revert earlier mistakes or remove features that aren't needed. There is no point in making a new user that's installing the module for the first time to go through all of these steps if they are no longer needed for the final product.  Instead we should keep the  Create()  as a pristine record of the way we want our data to be configured for the current codebase. At the end of the  Create()  we can then return a higher number which will leapfrog the  Create()  method over all the unnecessary  UpdateFromN()  calls.  At the moment the  Migrations.cs  is on  UpdateFrom2()  which has a return value of  3 . This is the value that we want new installs to start at.  The first update calls  CreateTable()  on a  SchemaBuilder  instance. That can be copied in to the end of the  Create()  method.  The second update uses  AlterPartDefinition()  which is another method on the  ContentDefinitionManager  class so technically this could be chained on to the end of the  ContentDefinitionManager  instance already in use in the  Create()  method.   In practice however, it is common to separate out the work on each content type / part to its own statement block.  This means the process will be as follows:    Open the  Migrations.cs  located in the root folder of the module.    Copy  the  CreateTable()  call from  UpdateFrom1()  to the  Create()  method so that your  Create()  method now looks like this:  public int Create() {\n  // Featured Product Widget\n  ContentDefinitionManager.AlterTypeDefinition(\n    \"FeaturedProductWidget\", cfg => cfg\n    .WithSetting(\"Stereotype\", \"Widget\")\n    .WithPart(typeof(FeaturedProductPart).Name)\n    .WithPart(typeof(CommonPart).Name)\n    .WithPart(typeof(WidgetPart).Name));\n\n  // Featured Product Part Record\n  SchemaBuilder.CreateTable(typeof(FeaturedProductPartRecord).Name,\n    table => table\n      .ContentPartRecord()\n      .Column<bool>(\"IsOnSale\"));\n  return 1;\n}  Leave the original  UpdateFrom1()  method intact.    Copy  the  AlterPartDefinition()  call from  UpdateFrom2()  to the  Create()  method so that your  Create()  method now looks like this:  public int Create() {\n  // Featured Product Widget\n  ContentDefinitionManager.AlterTypeDefinition(\n    \"FeaturedProductWidget\", cfg => cfg\n      .WithSetting(\"Stereotype\", \"Widget\")\n      .WithPart(typeof(FeaturedProductPart).Name)\n      .WithPart(typeof(CommonPart).Name)\n      .WithPart(typeof(WidgetPart).Name));\n\n  // Featured Product Part\n  ContentDefinitionManager.AlterPartDefinition(\n    typeof(FeaturedProductPart).Name, part => part\n      .WithDescription(\"Renders information about the featured product.\"));\n\n  // Featured Product Part Record\n  SchemaBuilder.CreateTable(typeof(FeaturedProductPartRecord).Name,\n    table => table\n      .ContentPartRecord()\n      .Column<bool>(\"IsOnSale\"));\n  return 1;\n}  Leave the original  UpdateFrom2()  method intact.    Update the  Create()  methods return value from  return 1;  to  return 3;    Your  Migrations.cs  file should now look like this:  using Orchard.ContentManagement.MetaData;\nusing Orchard.Core.Common.Models;\nusing Orchard.Core.Contents.Extensions;\nusing Orchard.Data.Migration;\nusing Orchard.LearnOrchard.FeaturedProduct.Models;\nusing Orchard.Widgets.Models;\n\nnamespace Orchard.LearnOrchard.FeaturedProduct {\n    public class Migrations : DataMigrationImpl {\n\n        public int Create() {\n            // Featured Product Widget\n            ContentDefinitionManager.AlterTypeDefinition(\n              \"FeaturedProductWidget\", cfg => cfg\n                .WithSetting(\"Stereotype\", \"Widget\")\n                .WithPart(typeof(FeaturedProductPart).Name)\n                .WithPart(typeof(CommonPart).Name)\n                .WithPart(typeof(WidgetPart).Name));\n\n            // Featured Product Part\n            ContentDefinitionManager.AlterPartDefinition(\n              typeof(FeaturedProductPart).Name, part => part\n                .WithDescription(\n                  \"Renders information about the featured product.\"));\n\n            // Featured Product Part Record\n            SchemaBuilder.CreateTable(typeof(FeaturedProductPartRecord).Name,\n              table => table\n                .ContentPartRecord()\n                .Column<bool>(\"IsOnSale\"));\n\n            return 3;\n        }\n\n        public int UpdateFrom1() {\n            SchemaBuilder.CreateTable(typeof(FeaturedProductPartRecord).Name,\n              table => table\n                .ContentPartRecord()\n                .Column<bool>(\"IsOnSale\"));\n            return 2;\n        }\n\n        public int UpdateFrom2() {\n            ContentDefinitionManager.AlterPartDefinition(\n              typeof(FeaturedProductPart).Name, part => part\n                .WithDescription(\n                  \"Renders information about the featured product.\"));\n\n            return 3;\n        }\n    }\n}  In the future when you add new updates to your  Migration  you should follow these steps:   Create a new  UpdateFromN()  method.  Set the appropriate  return  value.  Apply the amendments you want to make within the update method.  Alter the  Create()  method so that it creates your data in the correct way your codebase is expecting for a fresh install.  Update the  return  value of  Create()  so that it matches the return value of the  UpdateFromN()  you just created.",
            "title": "Roll your data migrations up into Create()"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-4/#download-the-code-for-this-lesson",
            "text": "You can download a copy of the module so far at this link:   Download Orchard.LearnOrchard.FeaturedProduct-Part4-v1.0.zip   To use it in Orchard simply extract the archive into the modules directory at  .\\src\\Orchard.Web\\Modules\\ . If you already have the module installed from a previous part then delete that folder first.   For Orchard to recognize it the folder name should match the name of the module. Make sure that the folder name is  Orchard.LearnOrchard.FeaturedProduct  and then the modules files are located directly under that.",
            "title": "Download the code for this lesson"
        },
        {
            "location": "/Documentation/Getting-Started-with-Modules-Part-4/#conclusion",
            "text": "In this course we have looked at many of the core components that make up a module. These topics included:   Command-line scaffolding  Module.txt manifest  ContentPart  ContentPartRecord  Widget  Data migration  Dependency injection  Handler  Driver  Editor view  Front-end view  Placement.info  Content types via the admin dashboard  Fields   Localization  Module dependencies  Resource manifest  Services  Orchard API     This should have given you a solid grounding for extending Orchard via code. With this knowledge you can now build your own simple modules and you will also understand the documentation found elsewhere on this site and around the web.   Bonus Exercise:  Using the skills you have now learned, research implement the following:    Add a Content Picker Field to the  FeaturedProductWidget  part so that you can  select a  Product  to be featured.    Implement the code so that the widget will work with the selected  Product  rather than using the hard-coded information we supplied throughout this course.     You can find the information to complete this exercise by using resources such as this documentation website, reading the Orchard source code and searching the World Wide Web.",
            "title": "Conclusion"
        },
        {
            "location": "/Documentation/Building-a-hello-world-module/",
            "text": "This article describes how to build a very small module for Orchard that will just display a \"hello world\" page. The technique that it shows you is a great start if you are looking to take control of the page lifecycle with your own MVC controller.\n\n\nAnother simple example of a module can be found here: \nQuick Start - Get module blueprint\n\n\n\n\nThis guide has been marked for review.\n If you are just getting started with Orchard module development you should read the \nGetting Started with Modules course\n first. It will introduce you to building modules with Orchard using Visual Studio Community, a free edition of Visual Studio. \n\n\n\n\nIntroduction\n\n\nOrchard is built on top of ASP.NET MVC, which means that if you already know that framework you should feel right at home. If not, do not worry as we'll explain everything we're doing.\n\n\nMVC is a pattern where concerns are neatly separated: there is a model (M) for the data, a controller (C) that orchestrates the UI and determines how it operates on the model, and a view (V) whose only responsibility is to display what the controller hands it.\n\n\nIn the case of our Hello World module, we won't have any data so the model will be of no concern to us. We will just have a controller and a view. All the rest will be some necessary plumbing to declare what we're doing to Orchard. We will come back to these concepts and recapitulate once we've built our module.\n\n\nModules in Orchard are sets of extensions that can be packaged in order to be re-used on other Orchard sites. Modules are implemented as MVC Areas. Areas in MVC are sub-sites that contain a set of features that act in relative isolation from the other parts of the site. An Orchard module is simply an area with a manifest file. It may use Orchard APIs (but it doesn't necessarily have to).\n\n\nGenerating the Module Structure\n\n\nBefore you can generate the file structure for your module, you need to download, install, and enable the \nCode Generation\n feature for Orchard. For more information, see \nCommand-line Code Generation\n.\n\n\nOnce you have code generation enabled, open the Orchard command-line, and create the \nHelloWorld\n module with the following command:\n\n\ncodegen module HelloWorld\n\n\n\nModifying the Manifest\n\n\nYou should now have a new HelloWorld folder under the Modules folder of your Orchard web site. In this folder, you'll find a module.txt file. Open it and customize it as follows:\n\n\nname: HelloWorld\nantiforgery: enabled\nauthor: The Orchard Team\nwebsite: http://orchardproject.net\nversion: 0.5.0\norchardversion: 1.8.1\ndescription: The Hello World module is greeting the world and not doing much more. \nfeatures:\n    HelloWorld:\n        Description: A very simple module.\n        Category: Sample\n\n\n\nThis text file is describing your module to the system. The information contained in this file will be used for example in the features administration screen.\n\n\n\n\nNote: While both spaces and tabs are supported to indent the manifest file, we recommend that you use spaces instead of tabs. As with your main coding, using spaces gives a more consistent editing experience when working in teams.\n\n\n\n\nAdding the Route\n\n\nYour module will have to handle the /HelloWorld relative URL under your Orchard web site. In order to declare what to do when that URL gets hit, create the following Routes.cs file in the HelloWorld folder:\n\n\nusing System.Collections.Generic;\nusing System.Web.Mvc;\nusing System.Web.Routing;\nusing Orchard.Mvc.Routes;\n\nnamespace HelloWorld {\n    public class Routes : IRouteProvider {\n        public void GetRoutes(ICollection<RouteDescriptor> routes) {\n            foreach (var routeDescriptor in GetRoutes())\n                routes.Add(routeDescriptor);\n        }\n\n        public IEnumerable<RouteDescriptor> GetRoutes() {\n            return new[] {\n                new RouteDescriptor {\n                    Priority = 5,\n                    Route = new Route(\n                        \"HelloWorld\", // this is the name of the page url\n                        new RouteValueDictionary {\n                            {\"area\", \"HelloWorld\"}, // this is the name of your module\n                            {\"controller\", \"Home\"},\n                            {\"action\", \"Index\"}\n                        },\n                        new RouteValueDictionary(),\n                        new RouteValueDictionary {\n                            {\"area\", \"HelloWorld\"} // this is the name of your module\n                        },\n                        new MvcRouteHandler())\n                }\n            };\n        }\n    }\n}\n\n\n\nA route is a description of the mapping between URLs and controller actions. This code maps the HelloWorld URL to the area HelloWorld with the Home controller and the Index action.\n\n\nCreating the Controller\n\n\nThe new module also has a Controllers folder ready to be filled. Create the following HomeController.cs file in that folder:\n\n\nusing System.Web.Mvc;\nusing Orchard.Themes;\n\nnamespace HelloWorld.Controllers {\n    [Themed]\n    public class HomeController : Controller {\n        public ActionResult Index() {\n            return View(\"HelloWorld\");\n        }\n    }\n}\n\n\n\nThis is the controller that will handle the requests for the HelloWorld URL. The default action, index, is requesting that the HelloWorld view gets rendered.\n\n\nNotice the Themed attribute on the controller class that will request that the view gets skinned with the currently active theme.\n\n\nCreating the View\n\n\nIn the Views folder, create a folder named Home. In the Views\\Home folder, create the following HelloWorld.cshtml file:\n\n\n<h2>@T(\"Hello World!\")</h2>\n\n\n\nThis file is specifying the core contents of our view. All the chrome around it will get added by the current theme's default layout.\n\n\nNotice that we used the T helper function that makes this view ready to be localized. This is not mandatory but it's a nice touch.\n\n\nAdding the new files to the project\n\n\nWe're almost done. The only task remaining is to declare to the system the set of files in the module for dynamic compilation.\n\n\nOpen the HelloWorld.csproj file in a text editor and add the following lines after one of the </ItemGroup> tags:\n\n\n<ItemGroup>\n  <Compile Include=\"Routes.cs\"/>\n  <Compile Include=\"Controllers\\HomeController.cs\"/>\n</ItemGroup>\n\n\n\nAlso add the following to the ItemGroup section that already has other Content tags:\n\n\n<Content Include=\"Views\\Home\\HelloWorld.cshtml\" />\n\n\n\nActivate the Module\n\n\nFinally, you need to activate your new module. In the command line, type:\n\n\nfeature enable HelloWorld\n\n\n\nYou could also have done this from the \"Features\" screen in the site's admin UI.\n\n\nUse the Module\n\n\nYou may now add /HelloWorld to the URL of your Orchard site in your favorite web browser and obtain a nice Hello World message:\n\n\n\n\nConclusion\n\n\nIn this tutorial, we have built a very simple module that handles a route (/HelloWorld) through the home controller's index action and serves a simple view that gets skinned by the current theme. We have done so with only free tools and in a way that differs very little from what you would do in a regular ASP.NET MVC area. We did get a few things for free by making this an Orchard module, such as activation/deactivation of the module, or theming of the view with no effort on our part.\n\n\nHopefully this will get you started with Orchard and prepare you to build more elaborate modules.\n\n\nThe code for this topic can be downloaded from here: \nHelloWorld.zip",
            "title": "Building a Hello World Module"
        },
        {
            "location": "/Documentation/Building-a-hello-world-module/#introduction",
            "text": "Orchard is built on top of ASP.NET MVC, which means that if you already know that framework you should feel right at home. If not, do not worry as we'll explain everything we're doing.  MVC is a pattern where concerns are neatly separated: there is a model (M) for the data, a controller (C) that orchestrates the UI and determines how it operates on the model, and a view (V) whose only responsibility is to display what the controller hands it.  In the case of our Hello World module, we won't have any data so the model will be of no concern to us. We will just have a controller and a view. All the rest will be some necessary plumbing to declare what we're doing to Orchard. We will come back to these concepts and recapitulate once we've built our module.  Modules in Orchard are sets of extensions that can be packaged in order to be re-used on other Orchard sites. Modules are implemented as MVC Areas. Areas in MVC are sub-sites that contain a set of features that act in relative isolation from the other parts of the site. An Orchard module is simply an area with a manifest file. It may use Orchard APIs (but it doesn't necessarily have to).",
            "title": "Introduction"
        },
        {
            "location": "/Documentation/Building-a-hello-world-module/#generating-the-module-structure",
            "text": "Before you can generate the file structure for your module, you need to download, install, and enable the  Code Generation  feature for Orchard. For more information, see  Command-line Code Generation .  Once you have code generation enabled, open the Orchard command-line, and create the  HelloWorld  module with the following command:  codegen module HelloWorld",
            "title": "Generating the Module Structure"
        },
        {
            "location": "/Documentation/Building-a-hello-world-module/#modifying-the-manifest",
            "text": "You should now have a new HelloWorld folder under the Modules folder of your Orchard web site. In this folder, you'll find a module.txt file. Open it and customize it as follows:  name: HelloWorld\nantiforgery: enabled\nauthor: The Orchard Team\nwebsite: http://orchardproject.net\nversion: 0.5.0\norchardversion: 1.8.1\ndescription: The Hello World module is greeting the world and not doing much more. \nfeatures:\n    HelloWorld:\n        Description: A very simple module.\n        Category: Sample  This text file is describing your module to the system. The information contained in this file will be used for example in the features administration screen.   Note: While both spaces and tabs are supported to indent the manifest file, we recommend that you use spaces instead of tabs. As with your main coding, using spaces gives a more consistent editing experience when working in teams.",
            "title": "Modifying the Manifest"
        },
        {
            "location": "/Documentation/Building-a-hello-world-module/#adding-the-route",
            "text": "Your module will have to handle the /HelloWorld relative URL under your Orchard web site. In order to declare what to do when that URL gets hit, create the following Routes.cs file in the HelloWorld folder:  using System.Collections.Generic;\nusing System.Web.Mvc;\nusing System.Web.Routing;\nusing Orchard.Mvc.Routes;\n\nnamespace HelloWorld {\n    public class Routes : IRouteProvider {\n        public void GetRoutes(ICollection<RouteDescriptor> routes) {\n            foreach (var routeDescriptor in GetRoutes())\n                routes.Add(routeDescriptor);\n        }\n\n        public IEnumerable<RouteDescriptor> GetRoutes() {\n            return new[] {\n                new RouteDescriptor {\n                    Priority = 5,\n                    Route = new Route(\n                        \"HelloWorld\", // this is the name of the page url\n                        new RouteValueDictionary {\n                            {\"area\", \"HelloWorld\"}, // this is the name of your module\n                            {\"controller\", \"Home\"},\n                            {\"action\", \"Index\"}\n                        },\n                        new RouteValueDictionary(),\n                        new RouteValueDictionary {\n                            {\"area\", \"HelloWorld\"} // this is the name of your module\n                        },\n                        new MvcRouteHandler())\n                }\n            };\n        }\n    }\n}  A route is a description of the mapping between URLs and controller actions. This code maps the HelloWorld URL to the area HelloWorld with the Home controller and the Index action.",
            "title": "Adding the Route"
        },
        {
            "location": "/Documentation/Building-a-hello-world-module/#creating-the-controller",
            "text": "The new module also has a Controllers folder ready to be filled. Create the following HomeController.cs file in that folder:  using System.Web.Mvc;\nusing Orchard.Themes;\n\nnamespace HelloWorld.Controllers {\n    [Themed]\n    public class HomeController : Controller {\n        public ActionResult Index() {\n            return View(\"HelloWorld\");\n        }\n    }\n}  This is the controller that will handle the requests for the HelloWorld URL. The default action, index, is requesting that the HelloWorld view gets rendered.  Notice the Themed attribute on the controller class that will request that the view gets skinned with the currently active theme.",
            "title": "Creating the Controller"
        },
        {
            "location": "/Documentation/Building-a-hello-world-module/#creating-the-view",
            "text": "In the Views folder, create a folder named Home. In the Views\\Home folder, create the following HelloWorld.cshtml file:  <h2>@T(\"Hello World!\")</h2>  This file is specifying the core contents of our view. All the chrome around it will get added by the current theme's default layout.  Notice that we used the T helper function that makes this view ready to be localized. This is not mandatory but it's a nice touch.",
            "title": "Creating the View"
        },
        {
            "location": "/Documentation/Building-a-hello-world-module/#adding-the-new-files-to-the-project",
            "text": "We're almost done. The only task remaining is to declare to the system the set of files in the module for dynamic compilation.  Open the HelloWorld.csproj file in a text editor and add the following lines after one of the </ItemGroup> tags:  <ItemGroup>\n  <Compile Include=\"Routes.cs\"/>\n  <Compile Include=\"Controllers\\HomeController.cs\"/>\n</ItemGroup>  Also add the following to the ItemGroup section that already has other Content tags:  <Content Include=\"Views\\Home\\HelloWorld.cshtml\" />",
            "title": "Adding the new files to the project"
        },
        {
            "location": "/Documentation/Building-a-hello-world-module/#activate-the-module",
            "text": "Finally, you need to activate your new module. In the command line, type:  feature enable HelloWorld  You could also have done this from the \"Features\" screen in the site's admin UI.",
            "title": "Activate the Module"
        },
        {
            "location": "/Documentation/Building-a-hello-world-module/#use-the-module",
            "text": "You may now add /HelloWorld to the URL of your Orchard site in your favorite web browser and obtain a nice Hello World message:",
            "title": "Use the Module"
        },
        {
            "location": "/Documentation/Building-a-hello-world-module/#conclusion",
            "text": "In this tutorial, we have built a very simple module that handles a route (/HelloWorld) through the home controller's index action and serves a simple view that gets skinned by the current theme. We have done so with only free tools and in a way that differs very little from what you would do in a regular ASP.NET MVC area. We did get a few things for free by making this an Orchard module, such as activation/deactivation of the module, or theming of the view with no effort on our part.  Hopefully this will get you started with Orchard and prepare you to build more elaborate modules.  The code for this topic can be downloaded from here:  HelloWorld.zip",
            "title": "Conclusion"
        },
        {
            "location": "/Documentation/Creating-a-module-with-a-simple-text-editor/",
            "text": "In this tutorial, you will learn how to develop a simple commerce module using only a text editor.\n\n\nIf you do not have the \nWeb Platform Installer\n on your computer, download it before beginning this tutorial.\n\n\n\n\nThis guide has been marked for review.\n If you are just getting started with Orchard module development you should read the \nGetting Started with Modules course\n first. It will introduce you to building modules with Orchard using Visual Studio Community, a free edition of Visual Studio. \n\n\n\n\nSetting Up the Orchard Site\n\n\nFirst, you will set up a new Orchard website. If you already have a site set up, you can skip this section and jump directly to \nthe code generation section\n. To start the setup, open \nIIS Manager\n, right-click \nSites\n, and click \nAdd Web Site\n.\n\n\n\n\nIn the \nAdd Web Site\n dialog box, fill in the fields to point the new website to a folder, such as \n\\inetpub\\wwwroot\\Orchard\n. Name the new site \nOrchard\n and give it an unused port, such as 90. Use the default application pool (.NET 4.0 integrated pipeline). Click \nOK\n.\n\n\n\n\nFrom the Windows \nStart\n menu, launch \nWeb Platform Installer\n, select \nOrchard CMS\n, click \nAdd\n, and then click \nInstall\n.\n\n\n\n\nAfter you accept the license terms, Orchard is installed.\n\n\nOpen a command window and change the current directory to point to the root of the site. Then run \nbin\\orchard.exe\n.\n\n\n\n\nType \nhelp commands\n to get the list of available commands. For now, only the \nhelp\n and \nsetup\n commands are available. However, as Orchard is developed and modules are activated, new commands will become available. (The Orchard command-line executable actually discovers the commands from the modules inside of the application.)\n\n\nTo set up the site, enter the following command: \n\n\nsetup /SiteName:Orchard /AdminUsername:admin /AdminPassword:123456\n      /DatabaseProvider:SqlCe\n\n\n\nThis is equivalent to setting up the site from the web interface.\n\n\nLeave the command window open. (In fact, don't close it until you have finished this tutorial.)\n\n\nGenerating Code for the Module\n\n\nNow you are ready to start developing the commerce module.\nOrchard provides a code generation feature that sets up the structure of an empty module to help you get started.\nBy default, code generation is disabled. So you must first install and enable the feature.\nThe easiest way to do this is to go to Modules in the admin UI and then click the \"Gallery\" tab.\nDo a search for \"code generation\" and then install the module.\n\n\nTo enable code generation, if you didn't do so right after install, you may enter the following command in the command window:\n\n\nfeature enable Orchard.CodeGeneration\n\n\n\nYou will use a code-generation command to create a commerce module. Enter the following command:\n\n\ncodegen module SimpleCommerce\n\n\n\nOpen a Windows Explorer window and browse to the newly created \n\\inetpub\\wwwroot\\Orchard\\Modules\\SimpleCommerce\n folder. Open the \nmodule.txt\n file using a text editor.\n\n\nChange the description to \"A simple commerce module\". Change the description of the feature to be \"A simple product part\". Save the file and close it. The following example shows the complete \nmodule.txt\n file after the changes.\n\n\nName: SimpleCommerce\nAntiForgery: enabled\nAuthor: The Orchard Team\nWebsite: http://orchardproject.net\nVersion: 0.5.0\nOrchardVersion: 0.5.0\nDescription: A simple commerce module\nFeatures:\n    SimpleCommerce:\n        Name: Simple Commerce\n        Description: A simple product part.\n        Category: Commerce\n\n\n\nCreating the Model for the Part\n\n\nNext, you will create a data model that is a representation of what will be stored in the database.\n\n\nIn \nModules/SimpleCommerce/Models\n, create a \nProduct.cs\n file and add the following content:\n\n\nusing System.ComponentModel.DataAnnotations;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Records;\n\nnamespace SimpleCommerce.Models {\n  public class ProductPartRecord : ContentPartRecord {\n    public virtual string Sku { get; set; }\n    public virtual float Price { get; set; }\n  }\n\n  public class ProductPart : ContentPart<ProductPartRecord> {\n    [Required]\n    public string Sku {\n      get { return Retrieve(r => r.Sku); }\n      set { Store(r => r.Sku, value); }\n    }\n\n    [Required]\n    public float Price {\n      get { return Retrieve(r => r.Price); }\n      set { Store(r => r.Price, value); }\n    }\n  }\n}\n\n\n\nThis code has two properties, \nSku\n and \nPrice\n, that are virtual in order to enable the creation of a dynamic proxy that will handle persistence transparently.\n\n\nThe code also defines a content part that derives from \nContentPart<ProductPartRecord>\n and that exposes the SKU and price from the record as public properties and infoset. \nYou can find more info about infoset here\n. The properties have attributes that will surface in the UI as validation tests.\n\n\nIn order for the application to pick up the new file, you need to add it to the module's project file. Open the \nSimpleCommerce.csproj\n file and look for \"assemblyinfo.cs\". After that line, add the following:\n\n\n<Compile Include=\"Models\\Product.cs\" />\n\n\n\nSave the file, but leave it open, because you will make additional changes to it throughout the tutorial.\n\n\nNavigate to the site in your browser to make sure the application's dynamic compilation feature picks up the new part and record. You will know that everything is working if you go to the \nFeatures\n administration screen and see the new \nSimpleCommerce\n feature.\n\n\nIn the command window, enable the new feature using the following command: \n\n\nfeature enable SimpleCommerce\n\n\n\nCreating the Initial Data Migration File\n\n\nData migration is a pattern that enables an application or component to handle new versions gracefully, without any data loss. The main idea is that the system keeps track of the current version installed and each data migration describes the changes to go from one version to the next. If the system detects that there is a new version installed and the current data is from a previous version, the administrator of the site is prompted to upgrade. The system then runs all necessary migration methods until the data version and the code version are in sync.\n\n\nStart by creating the initial migration for the new module, which will just create the data tables that are needed. In the command window, enter the following command:\n\n\ncodegen datamigration SimpleCommerce\n\n\n\nThis creates the following \nMigrations.cs\n file:\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing Orchard.ContentManagement.Drivers;\nusing Orchard.ContentManagement.MetaData;\nusing Orchard.ContentManagement.MetaData.Builders;\nusing Orchard.Core.Contents.Extensions;\nusing Orchard.Data.Migration;\n\nnamespace SimpleCommerce.DataMigrations {\n    public class Migrations : DataMigrationImpl {\n\n        public int Create() {\n            // Creating table ProductPartRecord\n            SchemaBuilder.CreateTable(\"ProductPartRecord\", table => table\n                .ContentPartRecord()\n                .Column(\"Sku\", DbType.String)\n                .Column(\"Price\", DbType.Single)\n            );\n\n\n\n            return 1;\n        }\n    }\n}\n\n\n\nThe method name \nCreate\n is the convention for the initial data migration. It calls the \nSchemaBuilder.CreateTable\n method that creates a \nProductPartRecord\n table that has \nSku\n and \nPrice\n columns in addition to the columns from the basic \nContentPartRecord\n table.\n\n\nNotice that the method returns 1, which is the version number for the migration.\n\n\nAdd another migration step to this in order to illustrate how you can later alter the existing schema and type metadata as the module evolves. In this case, you will take this opportunity to add a feature that will enable the part to be attached to any content type. Add the following method to the data migration class:\n\n\npublic int UpdateFrom1() {\n  ContentDefinitionManager.AlterPartDefinition(\"ProductPart\",\n    builder => builder.Attachable());\n  return 2;\n}\n\n\n\nThis new migration is named \nUpdateFrom1\n, which is the convention for upgrading from version 1. Your next migration should be called \nUpdateFrom2\n and return 3, and so on.\n\n\nMake sure the following line is present in the \n.csproj\n file. (It should already have been added by the code generation command.)\n\n\n<Compile Include=\"Migrations.cs\" />\n\n\n\nNavigate to the \nFeatures\n screen in the dashboard. You see a warning that indicates that one of the features needs to be updated, and the \nSimple Commerce\n module is displayed in red. Click \nUpdate\n to ensure that the migrations are run and that the module is up to date.\n\n\nAdding a Handler\n\n\nA handler in Orchard is analogous to a filter in ASP.NET MVC. It's a piece of code that is meant to run when specific events happen in the application, but that are not specific to a given content type. For example, you could build an analytics module that listens to the \nLoaded\n event in order to log usage statistics. To see what event handlers you can override in your own handlers, examine the source code for \nContentHandlerBase\n. \n\n\nThe handler you need in the module is not going to be very complex, but it will implement some plumbing that is necessary to set up the persistence of the part. We hope that this kind of plumbing will disappear in a future version of Orchard, possibly in favor of a more declarative approach such as using attributes.\n\n\nCreate a \nHandlers\n folder and add a \nProductHandler.cs\n file to it that contains the following code:\n\n\nusing Orchard.ContentManagement.Handlers;\nusing SimpleCommerce.Models;\nusing Orchard.Data;\n\nnamespace SimpleCommerce.Handlers {\n  public class ProductHandler : ContentHandler {\n    public ProductHandler(IRepository<ProductPartRecord> repository) {\n      Filters.Add(StorageFilter.For(repository));\n    }\n  }\n}\n\n\n\nAdd the file to the \n.csproj\n file so that dynamic compilation can pick it up, using the following line:\n\n\n<Compile Include=\"Handlers\\ProductHandler.cs\" />\n\n\n\nAdding a Driver\n\n\nA driver in Orchard is analogous to a controller in ASP.NET MVC, but is well adapted to the composition aspect that is necessary in web content management systems. It is specialized for a specific content part and can specify custom behavior for well-known actions such as displaying an item in the front end or editing it in the administration UI.\n\n\nA driver typically has overrides for the display and editor actions. For the product part, create a new \nDrivers\n folder and in that folder create a \nProductDriver.cs\n file that contains the following code:\n\n\nusing SimpleCommerce.Models;\nusing Orchard.ContentManagement.Drivers;\nusing Orchard.ContentManagement;\n\nnamespace SimpleCommerce.Drivers {\n  public class ProductDriver : ContentPartDriver<ProductPart> {\n    protected override DriverResult Display(\n        ProductPart part, string displayType, dynamic shapeHelper)\n    {\n      return ContentShape(\"Parts_Product\",\n          () => shapeHelper.Parts_Product(\n              Sku: part.Sku,\n              Price: part.Price));\n    }\n\n    //GET\n    protected override DriverResult Editor(ProductPart part, dynamic shapeHelper)\n    {\n      return ContentShape(\"Parts_Product_Edit\",\n          () => shapeHelper.EditorTemplate(\n              TemplateName: \"Parts/Product\",\n              Model: part,\n              Prefix: Prefix));\n    }\n\n    //POST\n    protected override DriverResult Editor(\n        ProductPart part, IUpdateModel updater, dynamic shapeHelper)\n    {\n      updater.TryUpdateModel(part, Prefix, null, null);\n      return Editor(part, shapeHelper);\n    }\n  }\n}\n\n\n\nThe code in the \nDisplay\n method creates a shape to use when rendering the item in the front end. That shape has \nSku\n and \nPrice\n properties copied from the part.\n\n\nUpdate the \n.csproj\n file to include the following line:\n\n\n<Compile Include=\"Drivers\\ProductDriver.cs\" />\n\n\n\nThe \nEditor\n method also creates a shape named \nEditorTemplate\n. The shape has a \nTemplateName\n property that instructs Orchard where to look for the rendering template. The code also specifies that the model for that template will be the part, not the shape (which would be the default).\n\n\nThe placement of those parts within the larger front end or dashboard must be specified using a \nplacement.info\n file that is located at the root of the module. That file, like a view, can be overridden from a theme. Create the \nplacement.info\n file with the following contents:\n\n\n<Placement>\n    <Place Parts_Product_Edit=\"Content:3\"/>\n    <Place Parts_Product=\"Content:3\"/>\n</Placement>\n\n\n\nAdd the \nplacement.info\n file to the \n.csproj\n file using the following line:\n\n\n<Content Include=\"placement.info\" />\n\n\n\nBuilding the Templates\n\n\nThe last thing to do in order for the new content part to work is to write the two templates (front end and admin) that are configured in the driver.\n\n\nCreate the front-end template first. Create a \nParts\n folder under \nViews\n and add a \nProduct.cshtml\n file that contains the following code:\n\n\n<br/>\n@T(\"Price\"): <b>$@Model.Price</b><br />\n@Model.Sku<br/>\n\n\n\nThis is very plain rendering of the shape. Notice the use of the \nT\n method call to wrap the \"Price\" string literal. This enables \nlocalization\n of that text.\n\n\nThe administration view is a little heavier on HTML helper calls. Create an \nEditorTemplates\n folder under \nViews\n and a \nParts\n folder under that. Add a \nProduct.cshtml\n to the \nParts\n folder that contains the following code:\n\n\n@model SimpleCommerce.Models.ProductPart\n<fieldset>\n    <label class=\"sub\" for=\"Sku\">@T(\"Sku\")</label><br />\n    @Html.TextBoxFor(m => m.Sku, new { @class = \"text\" })<br />\n    <label class=\"sub\" for=\"Price\">@T(\"Price\")</label><br />\n    @Html.TextBoxFor(m => m.Price, new { @class = \"text\" })\n</fieldset>\n\n\n\nAdd those two templates to the \n.csproj\n file using the following lines:\n\n\n<Content Include=\"Views\\Parts\\Product.cshtml\" />\n<Content Include=\"Views\\EditorTemplates\\Parts\\Product.cshtml\" />\n\n\n\nPutting it All Together into a Content Type\n\n\nThe content part that you've put together could already be composed from the administration UI into a content type (see \nCreating Custom Content Types\n), but per the goal of this topic, you will continue by writing code using a text editor.\n\n\nYou will now build a new \nProduct\n content type that will include the \nProduct\n part and a number of parts that you can get from Orchard. So far, you have been focused on your specific domain. This will now change and you will start integrating into Orchard.\n\n\nTo build the content type from a new migration, open the \nMigrations.cs\n file and add the following method to the class:\n\n\npublic int UpdateFrom2() {\n  ContentDefinitionManager.AlterTypeDefinition(\"Product\", cfg => cfg\n    .WithPart(\"CommonPart\")\n    .WithPart(\"RoutePart\")\n    .WithPart(\"BodyPart\")\n    .WithPart(\"ProductPart\")\n    .WithPart(\"CommentsPart\")\n    .WithPart(\"TagsPart\")\n    .WithPart(\"LocalizationPart\")\n    .Creatable()\n    .Indexed());\n  return 3;\n}\n\n\n\nAlso add \nusing Orchard.Indexing;\n to the top of the file.\n\n\nWhat you are doing is creating (or updating) the \nProduct\n content type and adding to it the ability to have its own URL and title (\nRoutePart\n), to have a rich text description (\nBodyPart\n), to be a product, to be commented on (\nCommentsPart\n), to be tagged (\nTagsPart\n) and to be localizable (\nLocalizationPart\n). It can also be created, which will add a \nCreate Product\n menu entry, and it will also enter the search index (\nIndexed\n).\n\n\nTo enable your new module, open the Orchard dashboard and click \nModules\n. Select the \nFeatures\n tab, find the \nSimpleCommerce\n module, and click \nEnable\n.\n\n\n\n\nTo add a new \nProduct\n content type, click \nContent\n on the dashboard, select the \nContent Types\n tab, find \nProduct\n, and click \nCreate New Product\n. \n\n\n\n\nYou now have a product editor that features your \nSku\n and \nPrice\n fields.\n\n\nThe code for this module can be downloaded from the following page: \nOrchard.Module.SimpleCommerce.0.5.0.zip",
            "title": "Creating a Module with a Simple Text Editor"
        },
        {
            "location": "/Documentation/Creating-a-module-with-a-simple-text-editor/#setting-up-the-orchard-site",
            "text": "First, you will set up a new Orchard website. If you already have a site set up, you can skip this section and jump directly to  the code generation section . To start the setup, open  IIS Manager , right-click  Sites , and click  Add Web Site .   In the  Add Web Site  dialog box, fill in the fields to point the new website to a folder, such as  \\inetpub\\wwwroot\\Orchard . Name the new site  Orchard  and give it an unused port, such as 90. Use the default application pool (.NET 4.0 integrated pipeline). Click  OK .   From the Windows  Start  menu, launch  Web Platform Installer , select  Orchard CMS , click  Add , and then click  Install .   After you accept the license terms, Orchard is installed.  Open a command window and change the current directory to point to the root of the site. Then run  bin\\orchard.exe .   Type  help commands  to get the list of available commands. For now, only the  help  and  setup  commands are available. However, as Orchard is developed and modules are activated, new commands will become available. (The Orchard command-line executable actually discovers the commands from the modules inside of the application.)  To set up the site, enter the following command:   setup /SiteName:Orchard /AdminUsername:admin /AdminPassword:123456\n      /DatabaseProvider:SqlCe  This is equivalent to setting up the site from the web interface.  Leave the command window open. (In fact, don't close it until you have finished this tutorial.)",
            "title": "Setting Up the Orchard Site"
        },
        {
            "location": "/Documentation/Creating-a-module-with-a-simple-text-editor/#generating-code-for-the-module",
            "text": "Now you are ready to start developing the commerce module.\nOrchard provides a code generation feature that sets up the structure of an empty module to help you get started.\nBy default, code generation is disabled. So you must first install and enable the feature.\nThe easiest way to do this is to go to Modules in the admin UI and then click the \"Gallery\" tab.\nDo a search for \"code generation\" and then install the module.  To enable code generation, if you didn't do so right after install, you may enter the following command in the command window:  feature enable Orchard.CodeGeneration  You will use a code-generation command to create a commerce module. Enter the following command:  codegen module SimpleCommerce  Open a Windows Explorer window and browse to the newly created  \\inetpub\\wwwroot\\Orchard\\Modules\\SimpleCommerce  folder. Open the  module.txt  file using a text editor.  Change the description to \"A simple commerce module\". Change the description of the feature to be \"A simple product part\". Save the file and close it. The following example shows the complete  module.txt  file after the changes.  Name: SimpleCommerce\nAntiForgery: enabled\nAuthor: The Orchard Team\nWebsite: http://orchardproject.net\nVersion: 0.5.0\nOrchardVersion: 0.5.0\nDescription: A simple commerce module\nFeatures:\n    SimpleCommerce:\n        Name: Simple Commerce\n        Description: A simple product part.\n        Category: Commerce",
            "title": "Generating Code for the Module"
        },
        {
            "location": "/Documentation/Creating-a-module-with-a-simple-text-editor/#creating-the-model-for-the-part",
            "text": "Next, you will create a data model that is a representation of what will be stored in the database.  In  Modules/SimpleCommerce/Models , create a  Product.cs  file and add the following content:  using System.ComponentModel.DataAnnotations;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Records;\n\nnamespace SimpleCommerce.Models {\n  public class ProductPartRecord : ContentPartRecord {\n    public virtual string Sku { get; set; }\n    public virtual float Price { get; set; }\n  }\n\n  public class ProductPart : ContentPart<ProductPartRecord> {\n    [Required]\n    public string Sku {\n      get { return Retrieve(r => r.Sku); }\n      set { Store(r => r.Sku, value); }\n    }\n\n    [Required]\n    public float Price {\n      get { return Retrieve(r => r.Price); }\n      set { Store(r => r.Price, value); }\n    }\n  }\n}  This code has two properties,  Sku  and  Price , that are virtual in order to enable the creation of a dynamic proxy that will handle persistence transparently.  The code also defines a content part that derives from  ContentPart<ProductPartRecord>  and that exposes the SKU and price from the record as public properties and infoset.  You can find more info about infoset here . The properties have attributes that will surface in the UI as validation tests.  In order for the application to pick up the new file, you need to add it to the module's project file. Open the  SimpleCommerce.csproj  file and look for \"assemblyinfo.cs\". After that line, add the following:  <Compile Include=\"Models\\Product.cs\" />  Save the file, but leave it open, because you will make additional changes to it throughout the tutorial.  Navigate to the site in your browser to make sure the application's dynamic compilation feature picks up the new part and record. You will know that everything is working if you go to the  Features  administration screen and see the new  SimpleCommerce  feature.  In the command window, enable the new feature using the following command:   feature enable SimpleCommerce",
            "title": "Creating the Model for the Part"
        },
        {
            "location": "/Documentation/Creating-a-module-with-a-simple-text-editor/#creating-the-initial-data-migration-file",
            "text": "Data migration is a pattern that enables an application or component to handle new versions gracefully, without any data loss. The main idea is that the system keeps track of the current version installed and each data migration describes the changes to go from one version to the next. If the system detects that there is a new version installed and the current data is from a previous version, the administrator of the site is prompted to upgrade. The system then runs all necessary migration methods until the data version and the code version are in sync.  Start by creating the initial migration for the new module, which will just create the data tables that are needed. In the command window, enter the following command:  codegen datamigration SimpleCommerce  This creates the following  Migrations.cs  file:  using System;\nusing System.Collections.Generic;\nusing System.Data;\nusing Orchard.ContentManagement.Drivers;\nusing Orchard.ContentManagement.MetaData;\nusing Orchard.ContentManagement.MetaData.Builders;\nusing Orchard.Core.Contents.Extensions;\nusing Orchard.Data.Migration;\n\nnamespace SimpleCommerce.DataMigrations {\n    public class Migrations : DataMigrationImpl {\n\n        public int Create() {\n            // Creating table ProductPartRecord\n            SchemaBuilder.CreateTable(\"ProductPartRecord\", table => table\n                .ContentPartRecord()\n                .Column(\"Sku\", DbType.String)\n                .Column(\"Price\", DbType.Single)\n            );\n\n\n\n            return 1;\n        }\n    }\n}  The method name  Create  is the convention for the initial data migration. It calls the  SchemaBuilder.CreateTable  method that creates a  ProductPartRecord  table that has  Sku  and  Price  columns in addition to the columns from the basic  ContentPartRecord  table.  Notice that the method returns 1, which is the version number for the migration.  Add another migration step to this in order to illustrate how you can later alter the existing schema and type metadata as the module evolves. In this case, you will take this opportunity to add a feature that will enable the part to be attached to any content type. Add the following method to the data migration class:  public int UpdateFrom1() {\n  ContentDefinitionManager.AlterPartDefinition(\"ProductPart\",\n    builder => builder.Attachable());\n  return 2;\n}  This new migration is named  UpdateFrom1 , which is the convention for upgrading from version 1. Your next migration should be called  UpdateFrom2  and return 3, and so on.  Make sure the following line is present in the  .csproj  file. (It should already have been added by the code generation command.)  <Compile Include=\"Migrations.cs\" />  Navigate to the  Features  screen in the dashboard. You see a warning that indicates that one of the features needs to be updated, and the  Simple Commerce  module is displayed in red. Click  Update  to ensure that the migrations are run and that the module is up to date.",
            "title": "Creating the Initial Data Migration File"
        },
        {
            "location": "/Documentation/Creating-a-module-with-a-simple-text-editor/#adding-a-handler",
            "text": "A handler in Orchard is analogous to a filter in ASP.NET MVC. It's a piece of code that is meant to run when specific events happen in the application, but that are not specific to a given content type. For example, you could build an analytics module that listens to the  Loaded  event in order to log usage statistics. To see what event handlers you can override in your own handlers, examine the source code for  ContentHandlerBase .   The handler you need in the module is not going to be very complex, but it will implement some plumbing that is necessary to set up the persistence of the part. We hope that this kind of plumbing will disappear in a future version of Orchard, possibly in favor of a more declarative approach such as using attributes.  Create a  Handlers  folder and add a  ProductHandler.cs  file to it that contains the following code:  using Orchard.ContentManagement.Handlers;\nusing SimpleCommerce.Models;\nusing Orchard.Data;\n\nnamespace SimpleCommerce.Handlers {\n  public class ProductHandler : ContentHandler {\n    public ProductHandler(IRepository<ProductPartRecord> repository) {\n      Filters.Add(StorageFilter.For(repository));\n    }\n  }\n}  Add the file to the  .csproj  file so that dynamic compilation can pick it up, using the following line:  <Compile Include=\"Handlers\\ProductHandler.cs\" />",
            "title": "Adding a Handler"
        },
        {
            "location": "/Documentation/Creating-a-module-with-a-simple-text-editor/#adding-a-driver",
            "text": "A driver in Orchard is analogous to a controller in ASP.NET MVC, but is well adapted to the composition aspect that is necessary in web content management systems. It is specialized for a specific content part and can specify custom behavior for well-known actions such as displaying an item in the front end or editing it in the administration UI.  A driver typically has overrides for the display and editor actions. For the product part, create a new  Drivers  folder and in that folder create a  ProductDriver.cs  file that contains the following code:  using SimpleCommerce.Models;\nusing Orchard.ContentManagement.Drivers;\nusing Orchard.ContentManagement;\n\nnamespace SimpleCommerce.Drivers {\n  public class ProductDriver : ContentPartDriver<ProductPart> {\n    protected override DriverResult Display(\n        ProductPart part, string displayType, dynamic shapeHelper)\n    {\n      return ContentShape(\"Parts_Product\",\n          () => shapeHelper.Parts_Product(\n              Sku: part.Sku,\n              Price: part.Price));\n    }\n\n    //GET\n    protected override DriverResult Editor(ProductPart part, dynamic shapeHelper)\n    {\n      return ContentShape(\"Parts_Product_Edit\",\n          () => shapeHelper.EditorTemplate(\n              TemplateName: \"Parts/Product\",\n              Model: part,\n              Prefix: Prefix));\n    }\n\n    //POST\n    protected override DriverResult Editor(\n        ProductPart part, IUpdateModel updater, dynamic shapeHelper)\n    {\n      updater.TryUpdateModel(part, Prefix, null, null);\n      return Editor(part, shapeHelper);\n    }\n  }\n}  The code in the  Display  method creates a shape to use when rendering the item in the front end. That shape has  Sku  and  Price  properties copied from the part.  Update the  .csproj  file to include the following line:  <Compile Include=\"Drivers\\ProductDriver.cs\" />  The  Editor  method also creates a shape named  EditorTemplate . The shape has a  TemplateName  property that instructs Orchard where to look for the rendering template. The code also specifies that the model for that template will be the part, not the shape (which would be the default).  The placement of those parts within the larger front end or dashboard must be specified using a  placement.info  file that is located at the root of the module. That file, like a view, can be overridden from a theme. Create the  placement.info  file with the following contents:  <Placement>\n    <Place Parts_Product_Edit=\"Content:3\"/>\n    <Place Parts_Product=\"Content:3\"/>\n</Placement>  Add the  placement.info  file to the  .csproj  file using the following line:  <Content Include=\"placement.info\" />",
            "title": "Adding a Driver"
        },
        {
            "location": "/Documentation/Creating-a-module-with-a-simple-text-editor/#building-the-templates",
            "text": "The last thing to do in order for the new content part to work is to write the two templates (front end and admin) that are configured in the driver.  Create the front-end template first. Create a  Parts  folder under  Views  and add a  Product.cshtml  file that contains the following code:  <br/>\n@T(\"Price\"): <b>$@Model.Price</b><br />\n@Model.Sku<br/>  This is very plain rendering of the shape. Notice the use of the  T  method call to wrap the \"Price\" string literal. This enables  localization  of that text.  The administration view is a little heavier on HTML helper calls. Create an  EditorTemplates  folder under  Views  and a  Parts  folder under that. Add a  Product.cshtml  to the  Parts  folder that contains the following code:  @model SimpleCommerce.Models.ProductPart\n<fieldset>\n    <label class=\"sub\" for=\"Sku\">@T(\"Sku\")</label><br />\n    @Html.TextBoxFor(m => m.Sku, new { @class = \"text\" })<br />\n    <label class=\"sub\" for=\"Price\">@T(\"Price\")</label><br />\n    @Html.TextBoxFor(m => m.Price, new { @class = \"text\" })\n</fieldset>  Add those two templates to the  .csproj  file using the following lines:  <Content Include=\"Views\\Parts\\Product.cshtml\" />\n<Content Include=\"Views\\EditorTemplates\\Parts\\Product.cshtml\" />",
            "title": "Building the Templates"
        },
        {
            "location": "/Documentation/Creating-a-module-with-a-simple-text-editor/#putting-it-all-together-into-a-content-type",
            "text": "The content part that you've put together could already be composed from the administration UI into a content type (see  Creating Custom Content Types ), but per the goal of this topic, you will continue by writing code using a text editor.  You will now build a new  Product  content type that will include the  Product  part and a number of parts that you can get from Orchard. So far, you have been focused on your specific domain. This will now change and you will start integrating into Orchard.  To build the content type from a new migration, open the  Migrations.cs  file and add the following method to the class:  public int UpdateFrom2() {\n  ContentDefinitionManager.AlterTypeDefinition(\"Product\", cfg => cfg\n    .WithPart(\"CommonPart\")\n    .WithPart(\"RoutePart\")\n    .WithPart(\"BodyPart\")\n    .WithPart(\"ProductPart\")\n    .WithPart(\"CommentsPart\")\n    .WithPart(\"TagsPart\")\n    .WithPart(\"LocalizationPart\")\n    .Creatable()\n    .Indexed());\n  return 3;\n}  Also add  using Orchard.Indexing;  to the top of the file.  What you are doing is creating (or updating) the  Product  content type and adding to it the ability to have its own URL and title ( RoutePart ), to have a rich text description ( BodyPart ), to be a product, to be commented on ( CommentsPart ), to be tagged ( TagsPart ) and to be localizable ( LocalizationPart ). It can also be created, which will add a  Create Product  menu entry, and it will also enter the search index ( Indexed ).  To enable your new module, open the Orchard dashboard and click  Modules . Select the  Features  tab, find the  SimpleCommerce  module, and click  Enable .   To add a new  Product  content type, click  Content  on the dashboard, select the  Content Types  tab, find  Product , and click  Create New Product .    You now have a product editor that features your  Sku  and  Price  fields.  The code for this module can be downloaded from the following page:  Orchard.Module.SimpleCommerce.0.5.0.zip",
            "title": "Putting it All Together into a Content Type"
        },
        {
            "location": "/Documentation/Writing-a-content-part/",
            "text": "This guide has been marked for review.\n If you are just getting started with Orchard module development you should read the \nGetting Started with Modules course\n first. It will introduce you to building modules with Orchard using Visual Studio Community, a free edition of Visual Studio. \n\n\n\n\nThis tutorial walks through the process of creating a new content part from scratch, using the scaffolding feature in Orchard as a productivity tool.  Although this tutorial assumes development in Visual Studio, it is not strictly necessary to have Visual Studio to develop a content part - feel free to use your editor of choice.  \n\n\nIn this tutorial, we are going to build a custom Map part, that can be configured with latitude and longitude values in order to display a map image for a content item.\n\n\n\n\nImportant:\n Before you can generate the file structure for your module, you need to download, install, and enable the \nCode Generation\n feature for Orchard. For more information, see \nCommand-line Code Generation\n.\n\n\n\n\nWe are going to add a new \"Maps\" module to contain our Map part implementation, as a new project in the Orchard solution.  Assuming you have enlisted in the Orchard source tree, launch Visual Studio 2010 and open the Orchard.sln file under the \"src\" folder of your enlistment.\n\n\n\n\nType \"codegen module Maps /IncludeInSolution:true\" at the Orchard command-prompt.  The \"IncludeInSolution\" switch tells Orchard to wire up a new Maps module project to the Orchard.sln file.\n\n\norchard> codegen module Maps /IncludeInSolution:true\nCreating module Maps\nModule Maps created successfully\n\n\n\nAfter running this command, Visual Studio prompts to re-load the solution file.  Accept this prompt.\n\n\n\n\nThe Maps module project appears added to the solution, along with some default files and folder to get you started.\n\n\n\n\nOpen the Module.txt file at the root of the Maps module project.  This file defines the information about your module, such as a name, description, version, author, and a categorized of features exposed by the module.  The Module.txt file can also contain additional information such as dependencies, which we will not cover here.  Our module is pretty simple, and only contains a single \"Maps\" feature with no additional dependencies.  Edit the Module.txt file as indicated below.\n\n\nName: Maps\nAntiForgery: enabled\nAuthor: The Orchard Team\nWebsite: http://orchardproject.net\nVersion: 1.0.0\nOrchardVersion: 1.0.0\nDescription:  Adds a map image to content items, based on longitude and latitude.\nFeatures:\n    Maps:\n        Description: Adds a map image to content items, based on longitude and latitude.\n        Category: Geolocation\n\n\n\nNow let's begin to write the Map part.  To begin with, we need a class to contain the data for the part. Data classes are conventionally added to the \"Models\" folder of the project.  Right-click the Models folder in Visual Studio and choose \"Add > Class\" from the context menu and name the new file Map.cs:\n\n\n\n\nIn Orchard, content part data is represented by a Record class, which represents the fields that are stored to a database table, and a ContentPart class that uses the Record for storage.  Add the MapRecord (ContentPartRecord) and MapPart (ContentPart) classes as follows:\n\n\nusing System.ComponentModel.DataAnnotations;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Records;\n\nnamespace Maps.Models\n{\n    public class MapRecord : ContentPartRecord\n    {\n        public virtual double Latitude { get; set; }\n        public virtual double Longitude { get; set; }\n    }\n\n    public class MapPart : ContentPart<MapRecord>\n    {\n        [Required]\n        public double Latitude\n        {\n            get { return Retrieve(r => r.Latitude); }\n            set { Store(r => r.Latitude, value); }\n        }\n\n        [Required]\n        public double Longitude\n        {\n            get { return Retrieve(r => r.Longitude); }\n            set { Store(r => r.Longitude, value); }\n        }\n    }\n}\n\n\n\nNow build the Maps project to ensure your Record class compiles successfully.\n\n\n\n\nNext, we are going to create a data migration for our Maps module.  Why do we need a migration class?  The reason is that defining a Record and Part class to store the data doesn't actually impact the database in any way.  A data migration is what tells Orchard how to update the database schema when the Maps feature is enabled (the migration runs when the feature is activated).  A migration can also upgrade the database schema from prior versions of a module to the schema required by a newer version of a module - this is an advanced topic that won't be covered in this tutorial.\n\n\nTo create a new data migration class, you can use the Code Generation feature of Orchard.  Run \"codegen datamigration Maps\" from the Orchard command-line.\n\n\norchard> codegen datamigration Maps\nCreating Data Migration for Maps\nData migration created successfully in Module Maps\n\n\n\nVisual Studio prompts to re-load the solution again.  After accepting this prompt, the new data migration classes appears in the project.\n\n\n\n\nThe migration class added by the codegen command contains a single Create() method that defines a database table structure based on the Record classes in project.  Because we only have a single MapRecord class with latitude and longitude properties, the migration class is fairly simple.  Note that the Create method is called at the time the feature is activated, and the database will be updated accordingly.\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing Maps.Models;\nusing Orchard.ContentManagement.Drivers;\nusing Orchard.ContentManagement.MetaData;\nusing Orchard.ContentManagement.MetaData.Builders;\nusing Orchard.Core.Contents.Extensions;\nusing Orchard.Data.Migration;\n\nnamespace Maps.DataMigrations {\n    public class Migrations : DataMigrationImpl {\n\n        public int Create() {\n            // Creating table MapRecord\n            SchemaBuilder.CreateTable(\"MapRecord\", table => table\n                .ContentPartRecord()\n                .Column(\"Latitude\", DbType.Double)\n                .Column(\"Longitude\", DbType.Double)\n            );\n\n            ContentDefinitionManager.AlterPartDefinition(\n                typeof(MapPart).Name, cfg => cfg.Attachable());\n\n            return 1;\n        }\n    }\n}\n\n\n\nAdd the AlterPartDefinition lines to the migration in order to make the part attachable to any content type. Also add \nusing Maps.Models;\n to the top of the file.\n\n\nNow let's add the handler for the Map part.  A handler in Orchard is a class that defines the behavior of the part, handling events or manipulating data model prior to rendering the part.  The Map part is very simple, and in this case, our handler class will only specify that an IRepository of MapRecord should be used as the storage for this part. Add the following Handlers\\MapHandler.cs:\n\n\nusing Maps.Models;\nusing Orchard.ContentManagement.Handlers;\nusing Orchard.Data;\n\nnamespace Maps.Handlers {\n    public class MapHandler : ContentHandler {\n        public MapHandler(IRepository<MapRecord> repository) {\n            Filters.Add(StorageFilter.For(repository));\n        }\n    }\n}\n\n\n\nWe will also add a driver for our Map part.  A driver in Orchard is a class that can define associations of shapes to display for each context in which the Map part can render.  For example, when displaying a Map on the front-end, a \"Display\" method defines the name of the template to use for different displayTypes (for example, \"details\" or summary\").  Similarly, an \"Editor\" method of the driver defines the template to use for displaying the editor of the Map part (for entering values of the latitude and longitude fields).  We are going to keep this part simple and just use \"Map\" as the name of the shape to use for both Display and Editor contexts (and all displayTypes).  Add the Drivers\\MapDriver class as follows.\n\n\nusing Maps.Models;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Drivers;\n\nnamespace Maps.Drivers {\n    public class MapDriver : ContentPartDriver<MapPart> {\n        protected override DriverResult Display(\n            MapPart part, string displayType, dynamic shapeHelper) {\n\n            return ContentShape(\"Parts_Map\", () => shapeHelper.Parts_Map(\n                Longitude: part.Longitude,\n                Latitude: part.Latitude));\n        }\n\n        //GET\n        protected override DriverResult Editor(\n            MapPart part, dynamic shapeHelper) {\n\n            return ContentShape(\"Parts_Map_Edit\",\n                () => shapeHelper.EditorTemplate(\n                    TemplateName: \"Parts/Map\",\n                    Model: part,\n                    Prefix: Prefix));\n        }\n        //POST\n        protected override DriverResult Editor(\n            MapPart part, IUpdateModel updater, dynamic shapeHelper) {\n\n            updater.TryUpdateModel(part, Prefix, null, null);\n            return Editor(part, shapeHelper);\n        }\n    }\n}\n\n\n\nWe can now add the display and editor views in Visual Studio. First add \"Parts\" and \"EditorTemplates/Parts\" folders to the \"Views\" folder in the Maps project, and then add Map.cshtml files into the Views/EditorTemplates/Parts and the Views/Parts folders as follows.\n\n\nViews/EditorTemplates/Parts/Map.cshtml :\n\n\n@model Maps.Models.MapPart\n\n<fieldset>\n  <legend>Map Fields</legend>\n\n  <div class=\"editor-label\">\n    @Html.LabelFor(model => model.Latitude)\n  </div>\n  <div class=\"editor-field\">\n    @Html.TextBoxFor(model => model.Latitude)\n    @Html.ValidationMessageFor(model => model.Latitude)\n  </div>\n\n  <div class=\"editor-label\">\n    @Html.LabelFor(model => model.Longitude)\n  </div>\n  <div class=\"editor-field\">\n    @Html.TextBoxFor(model => model.Longitude)\n    @Html.ValidationMessageFor(model => model.Longitude)\n  </div>\n\n</fieldset>\n\n\n\nViews/Parts/Map.cshtml :\n\n\n<img alt=\"Location\" border=\"1\" src=\"http://maps.google.com/maps/api/staticmap? \n     &zoom=14\n     &size=256x256\n     &maptype=roadmap\n     &markers=color:blue|@Model.Latitude,@Model.Longitude\n     &sensor=false\" />\n\n\n\nBoth of these templates will be rendered as parts of a larger, composite page. Because the system needs to know the order and location where they will render within the composed page, we need to add a placement.info file into the root of the module's directory:\n\n\n<Placement>\n    <Place Parts_Map=\"Content:10\"/>\n    <Place Parts_Map_Edit=\"Content:7.5\"/>\n</Placement>\n\n\n\nThis is saying that the Parts_Map shape (which is rendered by Views/Parts/Maps.cshtml unless overridden in the current theme) should render in the \"Content\" zone if available, in tenth position. It also positions the editor shape/template in the \"Primary\" zone in second position.\n\n\nTo activate the Map part, go to the \"Features\" section of the Orchard admin panel and enable it.\n\n\n\n\nYou can try out the Map part by attaching it to any content type in the system, using the \"Content Types\" section of the Orchard admin panel.  Let's add it to an existing content type, namely, the custom \"Event\" content type that we built in the \nCreating custom content types\n topic.  If you haven't read that topic yet or don't have the \"Event\" type, go ahead and add the Map to the Page content type instead (following the same steps below).\n\n\nOn the \"Manage Content Types\" admin screen, click on \"Edit\" to edit the definition of this type (you may need to enable the Orchard.ContentTypes feature first).\n\n\n\n\nIn the list of parts for the \"Event\" type, click on \"Add\" to add a part.\n\n\n\n\nThe Map part displays in the list of available parts to add.  Select it, and click \"Save\".\n\n\n\n\nNow go the \"Manage Content\" and edit an event content item.  Notice that the Map part adds Latitude and Longitude fields to this item.  Type some valid coordinates and re-publish the content item.\n\n\n\n\nOn the front-end of your site, you can see the effect of the Map part rendering on the event content item.\n\n\n\n\nGetting the Code\n\n\nThe Map part described in this topic is available from here: \nOrchard.Module.Maps.1.0.0.zip\n, ready to install and use, with full source code.",
            "title": "Writing a Content Part"
        },
        {
            "location": "/Documentation/Writing-a-content-part/#getting-the-code",
            "text": "The Map part described in this topic is available from here:  Orchard.Module.Maps.1.0.0.zip , ready to install and use, with full source code.",
            "title": "Getting the Code"
        },
        {
            "location": "/Documentation/Creating-a-custom-field-type/",
            "text": "This guide has been marked for review.\n If you are just getting started with Orchard module development you should read the \nGetting Started with Modules course\n first. It will introduce you to building modules with Orchard using Visual Studio Community, a free edition of Visual Studio. \n\n\n\n\nFields can be used in Orchard to \nbuild new content types\n.\nOrchard comes with a few built-in field types such as text, date or enumeration,\nbut it is possible to build your own field types that can then be used to build new content types.\n\n\nThis topic will teach you how to add such a new field type. You can find the source code for this tutorial here: \nhttp://orcharddatetimefield.codeplex.com/\n.\n\n\nWe will assume Visual Studio and a full source code enlistment are being used in this topic. It is possible to build this module without it by simply manipulating the csproj file and adding the relevant files in there. Please consult \nCreating a module with a simple text editor\n for an example of module building without Visual Studio.\n\n\nObjectives\n\n\nLearn the steps to add a new field type to Orchard. The goal is to have a Date and Time editor so that any existing or new Content Type can let the user select a Date or a Time very easily.\n\n\n\n\nCreating a Module\n\n\nWe will create the new field type inside a new Orchard module so that it can be easily distributed. We will use Code Generation feature for that. \n\n\n\n\nImportant:\n Before you can generate the file structure for your module, you need to download, install, and enable the \nCode Generation\n feature for Orchard. For more information, see \nCommand-line Code Generation\n.\n\n\n\n\nOnce the \nCode Generation\n feature has been enabled, you can type the following \ncodegen\n command on the Orchard command-line.\n\n\ncodegen module CustomFields /IncludeInSolution:true\n\n\n\nThis should create a new \nCustomFields\n folder under Modules, pre-populated with a few folders and files. For example, you may open the \nmodule.txt\n manifest file and modify it:\n\n\nName: CustomFields\nAntiForgery: enabled\nAuthor: Me\nWebsite: http://orcharddatetimefield.codeplex.com\nVersion: 0.6.1\nOrchardVersion: 0.8.0\nDescription: A bunch of custom fields for use in your custom content types.\nFeatures:\n    CustomFields:\n        Description: Custom fields for Orchard.\n        Category: Fields\n    DateTimeField:\n        Description: A date and time field with a friendly UI.\n        Category: Fields\n        Dependencies: CustomFields, Orchard.jQuery, Common, Settings\n\n\n\nWe are defining two features here because this module will eventually contain more fields and we want to distinguish between the default feature of the module (which has the same name as the module itself and has to exist in any module) and the date field feature. This also demonstrates categories and dependencies.\n\n\nModeling the Field\n\n\nLet's now create a \nFields\n folder inside of our \nCustomFields\n folder and create the following \nDateTimeField.cs\n file in there:\n\n\nusing System;\nusing System.Globalization;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.FieldStorage;\nusing Orchard.Environment.Extensions;\n\nnamespace CustomFields.DateTimeField.Fields {\n    [OrchardFeature(\"DateTimeField\")]\n    public class DateTimeField : ContentField {\n\n        public DateTime? DateTime {\n            get {\n                var value = Storage.Get<string>();\n                DateTime parsedDateTime;\n\n                if (System.DateTime.TryParse(value, CultureInfo.InvariantCulture,\n                    DateTimeStyles.AdjustToUniversal, out parsedDateTime)) {\n\n                    return parsedDateTime;\n                }\n\n                return null;\n            }\n\n            set {\n                Storage.Set(value == null ?\n                    String.Empty :\n                    value.Value.ToString(CultureInfo.InvariantCulture));\n            }\n        }\n    }\n}\n\n\n\nThe field is defined as a class that derives from \nContentField\n, which gives us a few services for free, such as the storage of the value of the field. The fields will be stored as strings. The conversion of dates to and from strings could be handled automatically, but we are doing it explicitly here to give a good idea of how you would do things for more complex field types.\n\n\nCreating a View Model\n\n\nIt is good practice (although not mandatory) to create one or several view models that will be used as the model in the admin template that we will use to render instances of our field. Let's create the following \nDateTimeFieldViewModel.cs\n file in a new \nViewModels\n folder:\n\n\nnamespace CustomFields.DateTimeField.ViewModels {\n\n    public class DateTimeFieldViewModel {\n\n        public string Name { get; set; }\n\n        public string Date { get; set; }\n        public string Time { get; set; }\n\n        public bool ShowDate { get; set; }\n        public bool ShowTime { get; set; }\n    }\n}\n\n\n\nThis not only exposes the date and time as separate properties, it also has some parameters that can be passed into the view to customize the rendering.\n\n\nCreating Settings for the Field\n\n\nThis flexibility in rendering that we just introduced in the view model can be exposed as settings for the field. This way, administrators can configure fields on the content types they create in order to adapt them to their exact needs.\n\n\nCreate a \nSettings\n folder and add the following \nDateTimeFieldSettings.cs\n file to it:\n\n\nnamespace CustomFields.DateTimeField.Settings {\n\n    public enum DateTimeFieldDisplays {\n        DateAndTime,\n        DateOnly,\n        TimeOnly\n    }\n\n    public class DateTimeFieldSettings {\n        public DateTimeFieldDisplays Display { get; set; }\n    }\n}\n\n\n\nWe have defined here an enumeration describing the possible values of our display setting, which is the only setting for the field. The settings class itself is just an ordinary class with one property typed with that enumeration.\n\n\nWriting the Driver\n\n\nExactly like a part, a field has a driver that will be responsible for handling display and editing actions on the field when it's been added to a content type.\n\n\nCreate a \nDrivers\n folder and add the following \nDateTimeFieldDriver.cs\n:\n\n\nusing System;\nusing JetBrains.Annotations;\nusing Orchard;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Drivers;\nusing CustomFields.DateTimeField.Settings;\nusing CustomFields.DateTimeField.ViewModels;\nusing Orchard.ContentManagement.Handlers;\nusing Orchard.Localization;\n\nnamespace CustomFields.DateTimeField.Drivers {\n    [UsedImplicitly]\n    public class DateTimeFieldDriver : ContentFieldDriver<Fields.DateTimeField> {\n        public IOrchardServices Services { get; set; }\n\n        // EditorTemplates/Fields/Custom.DateTime.cshtml\n        private const string TemplateName = \"Fields/Custom.DateTime\";\n\n        public DateTimeFieldDriver(IOrchardServices services) {\n            Services = services;\n            T = NullLocalizer.Instance;\n        }\n\n        public Localizer T { get; set; }\n\n        private static string GetPrefix(ContentField field, ContentPart part) {\n            // handles spaces in field names\n            return (part.PartDefinition.Name + \".\" + field.Name)\n                   .Replace(\" \", \"_\");\n        }\n\n        protected override DriverResult Display(\n            ContentPart part, Fields.DateTimeField field,\n            string displayType, dynamic shapeHelper) {\n\n            var settings = field.PartFieldDefinition.Settings\n                                .GetModel<DateTimeFieldSettings>();\n            var value = field.DateTime;\n\n            return ContentShape(\"Fields_Custom_DateTime\", // key in Shape Table\n                    field.Name, // used to differentiate shapes in placement.info overrides, e.g. Fields_Common_Text-DIFFERENTIATOR\n                    // this is the actual Shape which will be resolved\n                    // (Fields/Custom.DateTime.cshtml)\n                    s =>\n                    s.Name(field.Name)\n                     .Date(value.HasValue ?\n                         value.Value.ToLocalTime().ToShortDateString() :\n                         String.Empty)\n                     .Time(value.HasValue ?\n                         value.Value.ToLocalTime().ToShortTimeString() :\n                         String.Empty)\n                     .ShowDate(\n                         settings.Display == DateTimeFieldDisplays.DateAndTime ||\n                         settings.Display == DateTimeFieldDisplays.DateOnly)\n                     .ShowTime(\n                         settings.Display == DateTimeFieldDisplays.DateAndTime ||\n                         settings.Display == DateTimeFieldDisplays.TimeOnly)\n                );\n        }\n\n        protected override DriverResult Editor(ContentPart part,\n                                               Fields.DateTimeField field,\n                                               dynamic shapeHelper) {\n\n            var settings = field.PartFieldDefinition.Settings\n                                .GetModel<DateTimeFieldSettings>();\n            var value = field.DateTime;\n\n            if (value.HasValue) {\n                value = value.Value.ToLocalTime();\n            }\n\n            var viewModel = new DateTimeFieldViewModel {\n                Name = field.Name,\n                Date = value.HasValue ?\n                       value.Value.ToLocalTime().ToShortDateString() : \"\",\n                Time = value.HasValue ?\n                       value.Value.ToLocalTime().ToShortTimeString() : \"\",\n                ShowDate =\n                    settings.Display == DateTimeFieldDisplays.DateAndTime ||\n                    settings.Display == DateTimeFieldDisplays.DateOnly,\n                ShowTime =\n                    settings.Display == DateTimeFieldDisplays.DateAndTime ||\n                    settings.Display == DateTimeFieldDisplays.TimeOnly\n\n            };\n\n            return ContentShape(\"Fields_Custom_DateTime_Edit\",\n                () => shapeHelper.EditorTemplate(\n                          TemplateName: TemplateName,\n                          Model: viewModel,\n                          Prefix: GetPrefix(field, part)));\n        }\n\n        protected override DriverResult Editor(ContentPart part,\n                                               Fields.DateTimeField field,\n                                               IUpdateModel updater,\n                                               dynamic shapeHelper) {\n\n            var viewModel = new DateTimeFieldViewModel();\n\n            if (updater.TryUpdateModel(viewModel,\n                                       GetPrefix(field, part), null, null)) {\n                DateTime value;\n\n                var settings = field.PartFieldDefinition.Settings\n                                    .GetModel<DateTimeFieldSettings>();\n                if (settings.Display == DateTimeFieldDisplays.DateOnly) {\n                    viewModel.Time = DateTime.Now.ToShortTimeString();\n                }\n\n                if (settings.Display == DateTimeFieldDisplays.TimeOnly) {\n                    viewModel.Date = DateTime.Now.ToShortDateString();\n                }\n\n                if (DateTime.TryParse(\n                        viewModel.Date + \" \" + viewModel.Time, out value)) {\n                    field.DateTime = value.ToUniversalTime();\n                }\n                else {\n                    updater.AddModelError(GetPrefix(field, part),\n                                          T(\"{0} is an invalid date and time\",\n                                          field.Name));\n                    field.DateTime = null;\n                }\n            }\n\n            return Editor(part, field, shapeHelper);\n        }\n\n        protected override void Importing(ContentPart part, Fields.DateTimeField field, \n            ImportContentContext context) {\n\n            var importedText = context.Attribute(GetPrefix(field, part), \"DateTime\");\n            if (importedText != null) {\n                field.Storage.Set(null, importedText);\n            }\n        }\n\n        protected override void Exporting(ContentPart part, Fields.DateTimeField field, \n            ExportContentContext context) {\n            context.Element(GetPrefix(field, part))\n                .SetAttributeValue(\"DateTime\", field.Storage.Get<string>(null));\n        }\n    }\n}\n\n\n\nLet's enumerate a few things we're doing in this code in order to explain how it works.\n\n\nThe driver derives from \nContentFieldDriver<DateTimeField>\n in order to be recognized by Orchard and to give strongly-typed access to the field value from the driver's code.\n\n\nWe start by injecting the localizer dependency (the \nT\n property) so that we can create localizable strings throughout the code.\n\n\nThe static \nGetPrefix\n method is a conventionally defined method that is used to create unique column names in the database for instances of the field type.\n\n\nWe then have two actions, \nDisplay\n and \nEditor\n, which start by fetching the \nsettings\n and \nvalue\n for the field and build shapes out of them.\n\n\n\n\nNote: The \nUsedImplicitly\n attribute is only here to suppress a warning from Resharper. It could be removed without much harm.\n\n\n\n\nThe \nshapeHelper\n object provides some helper methods to create shapes, two of which can be seen in action here.\n\n\nThe second \nEditor\n method is the one that is called when the admin form is submitted. Its job is to map the submitted data back into the field and then to call the first \nEditor\n method to render the editor on the screen again.\n\n\nWriting the Templates\n\n\nWe need to write the views that will determine how our field is represented in admin and front-end UI.\n\n\nCreate a \nFields\n and an \nEditorTemplates\n directory under \nViews\n. Then create another \nFields\n directory under EditorTemplates. In \nViews/Fields\n, create the following \nCustom.DateTime.cshtml\n:\n\n\n<p class=\"text-field\"><span class=\"name\">@Model.Name:</span> \n    @if(Model.ShowDate) { <text>@Model.Date</text> } \n    @if(Model.ShowTime) { <text>@Model.Time</text> }\n</p>\n\n\n\nThis code renders the name of the field, a colon and then the date and time according to the field's configuration.\n\n\nNow create a file of the same name under \nViews/EditorTemplates/Fields\n with the following contents:\n\n\n@model CustomFields.DateTimeField.ViewModels.DateTimeFieldViewModel\n\n@{\nStyle.Include(\"datetime.css\");\nStyle.Require(\"jQueryUI_DatePicker\");\nStyle.Require(\"jQueryUtils_TimePicker\");\nStyle.Require(\"jQueryUI_Orchard\");\n\nScript.Require(\"jQuery\");\nScript.Require(\"jQueryUtils\");\nScript.Require(\"jQueryUI_Core\");\nScript.Require(\"jQueryUI_Widget\");\nScript.Require(\"jQueryUI_DatePicker\");\nScript.Require(\"jQueryUtils_TimePicker\");\n}\n\n<fieldset>\n  <label for=\"@Html.FieldIdFor(m => Model.Date)\">@Model.Name</label>\n\n  @if ( Model.ShowDate ) {\n  <label class=\"forpicker\"\n    for=\"@Html.FieldIdFor(m => Model.Date)\">@T(\"Date\")</label>\n  <span class=\"date\">@Html.EditorFor(m => m.Date)</span>\n  }\n\n  @if ( Model.ShowTime ) {\n  <label class=\"forpicker\"\n    for=\"@Html.FieldIdFor(m => Model.Time)\">@T(\"Time\")</label>\n  <span class=\"time\">@Html.EditorFor(m => m.Time)</span>\n  }\n  @if(Model.ShowDate) { <text>@Html.ValidationMessageFor(m=>m.Date)</text> }\n  @if(Model.ShowTime) { <text>@Html.ValidationMessageFor(m=>m.Time)</text> }\n</fieldset>\n\n@using(Script.Foot()) {\n<script type=\"text/javascript\">\n$(function () {\n  $(\"#@Html.FieldIdFor(m => Model.Date)\").datepicker();\n  $(\"#@Html.FieldIdFor(m => Model.Time)\").timepickr();\n});\n</script>\n}\n\n\n\nThis template is registering a few styles and scripts (note that if other parts register the same files, they will still be rendered only once). Then, it defines the editor as a date picker and a time picker according to the field's configuration. The fields are regular text boxes that are unobtrusively enriched by date and time pickers using jQuery UI plug-ins.\n\n\nTo specify the order and location where these templates will be rendered within the composed page, we need to add a placement.info file into the root of the module's directory:\n\n\n<Placement>\n    <Place Fields_Custom_DateTime_Edit=\"Content:2.5\"/>\n    <Place Fields_Custom_DateTime=\"Content:2.5\"/>\n</Placement>\n\n\n\nManaging the Field Settings\n\n\nWe are not quite done yet. We still need to take care of managing and persisting the settings for the field.\n\n\nAdd the following \nDateTimeFieldEditorEvents.cs\n file to the \nSettings\n folder:\n\n\nusing System.Collections.Generic;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.MetaData;\nusing Orchard.ContentManagement.MetaData.Builders;\nusing Orchard.ContentManagement.MetaData.Models;\nusing Orchard.ContentManagement.ViewModels;\n\nnamespace CustomFields.DateTimeField.Settings {\n    public class DateTimeFieldEditorEvents : ContentDefinitionEditorEventsBase {\n\n        public override IEnumerable<TemplateViewModel>\n          PartFieldEditor(ContentPartFieldDefinition definition) {\n            if (definition.FieldDefinition.Name == \"DateTimeField\") {\n                var model = definition.Settings.GetModel<DateTimeFieldSettings>();\n                yield return DefinitionTemplate(model);\n            }\n        }\n\n        public override IEnumerable<TemplateViewModel> PartFieldEditorUpdate(\n          ContentPartFieldDefinitionBuilder builder, IUpdateModel updateModel) {\n            var model = new DateTimeFieldSettings();\n            if (builder.FieldType != \"DateTimeField\") {\n              yield break;\n            }\n\n            if (updateModel.TryUpdateModel(\n              model, \"DateTimeFieldSettings\", null, null)) {\n                builder.WithSetting(\"DateTimeFieldSettings.Display\",\n                                    model.Display.ToString());\n            }\n\n            yield return DefinitionTemplate(model);\n        }\n    }\n}\n\n\n\nThis is the equivalent of a driver, but for field settings. The first method gets the settings and determines the template to render, and the second updates the model with the values from the submitted form and then calls the first.\n\n\nThe editor template for the field is defined by the following \nDateTimeFieldSettings.cshtml\n that you should create in a new \nDefinitionTemplates\n folder under \nViews\n:\n\n\n@model CustomFields.DateTimeField.Settings.DateTimeFieldSettings\n@using CustomFields.DateTimeField.Settings;\n\n<fieldset>\n    <label for=\"@Html.FieldIdFor(m => m.Display)\"\n      class=\"forcheckbox\">@T(\"Display options\")</label>  \n    <select id=\"@Html.FieldIdFor(m => m.Display)\"\n      name=\"@Html.FieldNameFor(m => m.Display)\">\n        @Html.SelectOption(DateTimeFieldDisplays.DateAndTime, \n          Model.Display == DateTimeFieldDisplays.DateAndTime,\n          T(\"Date and time\").ToString())\n        @Html.SelectOption(DateTimeFieldDisplays.DateOnly,\n          Model.Display == DateTimeFieldDisplays.DateOnly,\n          T(\"Date only\").ToString())\n        @Html.SelectOption(DateTimeFieldDisplays.TimeOnly,\n          Model.Display == DateTimeFieldDisplays.TimeOnly,\n          T(\"Time only\").ToString())\n    </select>\n\n    @Html.ValidationMessageFor(m => m.Display)\n\n</fieldset>\n\n\n\nThis template creates a label for the setting and then a drop-down that enables the site administrator to pick one of the options for the setting.\n\n\nUpdating the Project File\n\n\nIf you are using Visual Studio, you should skip this section as your project file has already been updated, provided you saved all (CTRL+SHIFT+S). Otherwise, in order for the Orchard dynamic compilation engine to be able to pick up our new module's cs files, we need to add them to the \nCustomFields.csproj\n file. \n\n\nFind the \n<Content Include=\"Properties\\AssemblyInfo.cs\"/>\n line in \nCustomFields.csproj\n. If you look at it then you will see that this is inside an \n<ItemGroup>\n element. After that end \n</ItemGroup>\n for that section add in this code:\n\n\n<ItemGroup>\n  <Compile Include=\"Drivers\\DateTimeFieldDriver.cs\" />\n  <Compile Include=\"Fields\\DateTimeField.cs\" />\n  <Compile Include=\"Settings\\DateTimeFieldEditorEvents.cs\" />\n  <Compile Include=\"Settings\\DateTimeFieldSettings.cs\" />\n  <Compile Include=\"ViewModels\\DateTimeFieldViewModel.cs\" />\n</ItemGroup>\n\n\n\nAdding the Style Sheet\n\n\nCreate a \nStyles\n directory and create the following \ndatetime.css\n:\n\n\nhtml.dyn label.forpicker {\n    display:none;\n}\n\nhtml.dyn input.hinted {\n    color:#ccc;\n    font-style:italic;\n}\n.date input{\n    width:10em;\n}\n.time input {\n    width:6em;\n}\n\n\n\nUsing the Field\n\n\nIn order to be able to use the new field, you must first make sure that the \nOrchard.ContentTypes\n feature is enabled. Also enable our new \nDateTimeField\n feature under \nFields\n. Once it is, you can click on \nManage content types\n in the admin menu. Click \nCreate new type\n and give it the name \"Event\". Click \nAdd\n next to fields and type in \"When\" as the name of the field. Select our new \nDateTime\n field type as the type of the field.\n\n\nNow in the type editor, you should see our new \nWhen\n field, and you should be able to deploy its settings section by clicking the \"\n>\n\" on its left:\n\n\n\nWe chose to keep both date and time displayed. The settings for the field are also the opportunity to determine where the field will appear on the front end if you want to override the defaults. Let's skip that for now. Add the \nRoute\n part so that our events can have a title, then hit Save.\n\n\nWe can now add a new event by clicking \nCreate Event\n in the admin menu. The editor that gets created for us has a when field with nice date and time pickers:\n\n\n\nCreate an event and save it. You can now view it on the site:\n\n\n\n\nGetting the Code\n\n\nDownload the code here: \nCustomFields.zip\n. The code is also hosted on \nhttp://orcharddatetimefield.codeplex.com/\n.",
            "title": "Writing a Content Field"
        },
        {
            "location": "/Documentation/Creating-a-custom-field-type/#objectives",
            "text": "Learn the steps to add a new field type to Orchard. The goal is to have a Date and Time editor so that any existing or new Content Type can let the user select a Date or a Time very easily.",
            "title": "Objectives"
        },
        {
            "location": "/Documentation/Creating-a-custom-field-type/#creating-a-module",
            "text": "We will create the new field type inside a new Orchard module so that it can be easily distributed. We will use Code Generation feature for that.    Important:  Before you can generate the file structure for your module, you need to download, install, and enable the  Code Generation  feature for Orchard. For more information, see  Command-line Code Generation .   Once the  Code Generation  feature has been enabled, you can type the following  codegen  command on the Orchard command-line.  codegen module CustomFields /IncludeInSolution:true  This should create a new  CustomFields  folder under Modules, pre-populated with a few folders and files. For example, you may open the  module.txt  manifest file and modify it:  Name: CustomFields\nAntiForgery: enabled\nAuthor: Me\nWebsite: http://orcharddatetimefield.codeplex.com\nVersion: 0.6.1\nOrchardVersion: 0.8.0\nDescription: A bunch of custom fields for use in your custom content types.\nFeatures:\n    CustomFields:\n        Description: Custom fields for Orchard.\n        Category: Fields\n    DateTimeField:\n        Description: A date and time field with a friendly UI.\n        Category: Fields\n        Dependencies: CustomFields, Orchard.jQuery, Common, Settings  We are defining two features here because this module will eventually contain more fields and we want to distinguish between the default feature of the module (which has the same name as the module itself and has to exist in any module) and the date field feature. This also demonstrates categories and dependencies.",
            "title": "Creating a Module"
        },
        {
            "location": "/Documentation/Creating-a-custom-field-type/#modeling-the-field",
            "text": "Let's now create a  Fields  folder inside of our  CustomFields  folder and create the following  DateTimeField.cs  file in there:  using System;\nusing System.Globalization;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.FieldStorage;\nusing Orchard.Environment.Extensions;\n\nnamespace CustomFields.DateTimeField.Fields {\n    [OrchardFeature(\"DateTimeField\")]\n    public class DateTimeField : ContentField {\n\n        public DateTime? DateTime {\n            get {\n                var value = Storage.Get<string>();\n                DateTime parsedDateTime;\n\n                if (System.DateTime.TryParse(value, CultureInfo.InvariantCulture,\n                    DateTimeStyles.AdjustToUniversal, out parsedDateTime)) {\n\n                    return parsedDateTime;\n                }\n\n                return null;\n            }\n\n            set {\n                Storage.Set(value == null ?\n                    String.Empty :\n                    value.Value.ToString(CultureInfo.InvariantCulture));\n            }\n        }\n    }\n}  The field is defined as a class that derives from  ContentField , which gives us a few services for free, such as the storage of the value of the field. The fields will be stored as strings. The conversion of dates to and from strings could be handled automatically, but we are doing it explicitly here to give a good idea of how you would do things for more complex field types.",
            "title": "Modeling the Field"
        },
        {
            "location": "/Documentation/Creating-a-custom-field-type/#creating-a-view-model",
            "text": "It is good practice (although not mandatory) to create one or several view models that will be used as the model in the admin template that we will use to render instances of our field. Let's create the following  DateTimeFieldViewModel.cs  file in a new  ViewModels  folder:  namespace CustomFields.DateTimeField.ViewModels {\n\n    public class DateTimeFieldViewModel {\n\n        public string Name { get; set; }\n\n        public string Date { get; set; }\n        public string Time { get; set; }\n\n        public bool ShowDate { get; set; }\n        public bool ShowTime { get; set; }\n    }\n}  This not only exposes the date and time as separate properties, it also has some parameters that can be passed into the view to customize the rendering.",
            "title": "Creating a View Model"
        },
        {
            "location": "/Documentation/Creating-a-custom-field-type/#creating-settings-for-the-field",
            "text": "This flexibility in rendering that we just introduced in the view model can be exposed as settings for the field. This way, administrators can configure fields on the content types they create in order to adapt them to their exact needs.  Create a  Settings  folder and add the following  DateTimeFieldSettings.cs  file to it:  namespace CustomFields.DateTimeField.Settings {\n\n    public enum DateTimeFieldDisplays {\n        DateAndTime,\n        DateOnly,\n        TimeOnly\n    }\n\n    public class DateTimeFieldSettings {\n        public DateTimeFieldDisplays Display { get; set; }\n    }\n}  We have defined here an enumeration describing the possible values of our display setting, which is the only setting for the field. The settings class itself is just an ordinary class with one property typed with that enumeration.",
            "title": "Creating Settings for the Field"
        },
        {
            "location": "/Documentation/Creating-a-custom-field-type/#writing-the-driver",
            "text": "Exactly like a part, a field has a driver that will be responsible for handling display and editing actions on the field when it's been added to a content type.  Create a  Drivers  folder and add the following  DateTimeFieldDriver.cs :  using System;\nusing JetBrains.Annotations;\nusing Orchard;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Drivers;\nusing CustomFields.DateTimeField.Settings;\nusing CustomFields.DateTimeField.ViewModels;\nusing Orchard.ContentManagement.Handlers;\nusing Orchard.Localization;\n\nnamespace CustomFields.DateTimeField.Drivers {\n    [UsedImplicitly]\n    public class DateTimeFieldDriver : ContentFieldDriver<Fields.DateTimeField> {\n        public IOrchardServices Services { get; set; }\n\n        // EditorTemplates/Fields/Custom.DateTime.cshtml\n        private const string TemplateName = \"Fields/Custom.DateTime\";\n\n        public DateTimeFieldDriver(IOrchardServices services) {\n            Services = services;\n            T = NullLocalizer.Instance;\n        }\n\n        public Localizer T { get; set; }\n\n        private static string GetPrefix(ContentField field, ContentPart part) {\n            // handles spaces in field names\n            return (part.PartDefinition.Name + \".\" + field.Name)\n                   .Replace(\" \", \"_\");\n        }\n\n        protected override DriverResult Display(\n            ContentPart part, Fields.DateTimeField field,\n            string displayType, dynamic shapeHelper) {\n\n            var settings = field.PartFieldDefinition.Settings\n                                .GetModel<DateTimeFieldSettings>();\n            var value = field.DateTime;\n\n            return ContentShape(\"Fields_Custom_DateTime\", // key in Shape Table\n                    field.Name, // used to differentiate shapes in placement.info overrides, e.g. Fields_Common_Text-DIFFERENTIATOR\n                    // this is the actual Shape which will be resolved\n                    // (Fields/Custom.DateTime.cshtml)\n                    s =>\n                    s.Name(field.Name)\n                     .Date(value.HasValue ?\n                         value.Value.ToLocalTime().ToShortDateString() :\n                         String.Empty)\n                     .Time(value.HasValue ?\n                         value.Value.ToLocalTime().ToShortTimeString() :\n                         String.Empty)\n                     .ShowDate(\n                         settings.Display == DateTimeFieldDisplays.DateAndTime ||\n                         settings.Display == DateTimeFieldDisplays.DateOnly)\n                     .ShowTime(\n                         settings.Display == DateTimeFieldDisplays.DateAndTime ||\n                         settings.Display == DateTimeFieldDisplays.TimeOnly)\n                );\n        }\n\n        protected override DriverResult Editor(ContentPart part,\n                                               Fields.DateTimeField field,\n                                               dynamic shapeHelper) {\n\n            var settings = field.PartFieldDefinition.Settings\n                                .GetModel<DateTimeFieldSettings>();\n            var value = field.DateTime;\n\n            if (value.HasValue) {\n                value = value.Value.ToLocalTime();\n            }\n\n            var viewModel = new DateTimeFieldViewModel {\n                Name = field.Name,\n                Date = value.HasValue ?\n                       value.Value.ToLocalTime().ToShortDateString() : \"\",\n                Time = value.HasValue ?\n                       value.Value.ToLocalTime().ToShortTimeString() : \"\",\n                ShowDate =\n                    settings.Display == DateTimeFieldDisplays.DateAndTime ||\n                    settings.Display == DateTimeFieldDisplays.DateOnly,\n                ShowTime =\n                    settings.Display == DateTimeFieldDisplays.DateAndTime ||\n                    settings.Display == DateTimeFieldDisplays.TimeOnly\n\n            };\n\n            return ContentShape(\"Fields_Custom_DateTime_Edit\",\n                () => shapeHelper.EditorTemplate(\n                          TemplateName: TemplateName,\n                          Model: viewModel,\n                          Prefix: GetPrefix(field, part)));\n        }\n\n        protected override DriverResult Editor(ContentPart part,\n                                               Fields.DateTimeField field,\n                                               IUpdateModel updater,\n                                               dynamic shapeHelper) {\n\n            var viewModel = new DateTimeFieldViewModel();\n\n            if (updater.TryUpdateModel(viewModel,\n                                       GetPrefix(field, part), null, null)) {\n                DateTime value;\n\n                var settings = field.PartFieldDefinition.Settings\n                                    .GetModel<DateTimeFieldSettings>();\n                if (settings.Display == DateTimeFieldDisplays.DateOnly) {\n                    viewModel.Time = DateTime.Now.ToShortTimeString();\n                }\n\n                if (settings.Display == DateTimeFieldDisplays.TimeOnly) {\n                    viewModel.Date = DateTime.Now.ToShortDateString();\n                }\n\n                if (DateTime.TryParse(\n                        viewModel.Date + \" \" + viewModel.Time, out value)) {\n                    field.DateTime = value.ToUniversalTime();\n                }\n                else {\n                    updater.AddModelError(GetPrefix(field, part),\n                                          T(\"{0} is an invalid date and time\",\n                                          field.Name));\n                    field.DateTime = null;\n                }\n            }\n\n            return Editor(part, field, shapeHelper);\n        }\n\n        protected override void Importing(ContentPart part, Fields.DateTimeField field, \n            ImportContentContext context) {\n\n            var importedText = context.Attribute(GetPrefix(field, part), \"DateTime\");\n            if (importedText != null) {\n                field.Storage.Set(null, importedText);\n            }\n        }\n\n        protected override void Exporting(ContentPart part, Fields.DateTimeField field, \n            ExportContentContext context) {\n            context.Element(GetPrefix(field, part))\n                .SetAttributeValue(\"DateTime\", field.Storage.Get<string>(null));\n        }\n    }\n}  Let's enumerate a few things we're doing in this code in order to explain how it works.  The driver derives from  ContentFieldDriver<DateTimeField>  in order to be recognized by Orchard and to give strongly-typed access to the field value from the driver's code.  We start by injecting the localizer dependency (the  T  property) so that we can create localizable strings throughout the code.  The static  GetPrefix  method is a conventionally defined method that is used to create unique column names in the database for instances of the field type.  We then have two actions,  Display  and  Editor , which start by fetching the  settings  and  value  for the field and build shapes out of them.   Note: The  UsedImplicitly  attribute is only here to suppress a warning from Resharper. It could be removed without much harm.   The  shapeHelper  object provides some helper methods to create shapes, two of which can be seen in action here.  The second  Editor  method is the one that is called when the admin form is submitted. Its job is to map the submitted data back into the field and then to call the first  Editor  method to render the editor on the screen again.",
            "title": "Writing the Driver"
        },
        {
            "location": "/Documentation/Creating-a-custom-field-type/#writing-the-templates",
            "text": "We need to write the views that will determine how our field is represented in admin and front-end UI.  Create a  Fields  and an  EditorTemplates  directory under  Views . Then create another  Fields  directory under EditorTemplates. In  Views/Fields , create the following  Custom.DateTime.cshtml :  <p class=\"text-field\"><span class=\"name\">@Model.Name:</span> \n    @if(Model.ShowDate) { <text>@Model.Date</text> } \n    @if(Model.ShowTime) { <text>@Model.Time</text> }\n</p>  This code renders the name of the field, a colon and then the date and time according to the field's configuration.  Now create a file of the same name under  Views/EditorTemplates/Fields  with the following contents:  @model CustomFields.DateTimeField.ViewModels.DateTimeFieldViewModel\n\n@{\nStyle.Include(\"datetime.css\");\nStyle.Require(\"jQueryUI_DatePicker\");\nStyle.Require(\"jQueryUtils_TimePicker\");\nStyle.Require(\"jQueryUI_Orchard\");\n\nScript.Require(\"jQuery\");\nScript.Require(\"jQueryUtils\");\nScript.Require(\"jQueryUI_Core\");\nScript.Require(\"jQueryUI_Widget\");\nScript.Require(\"jQueryUI_DatePicker\");\nScript.Require(\"jQueryUtils_TimePicker\");\n}\n\n<fieldset>\n  <label for=\"@Html.FieldIdFor(m => Model.Date)\">@Model.Name</label>\n\n  @if ( Model.ShowDate ) {\n  <label class=\"forpicker\"\n    for=\"@Html.FieldIdFor(m => Model.Date)\">@T(\"Date\")</label>\n  <span class=\"date\">@Html.EditorFor(m => m.Date)</span>\n  }\n\n  @if ( Model.ShowTime ) {\n  <label class=\"forpicker\"\n    for=\"@Html.FieldIdFor(m => Model.Time)\">@T(\"Time\")</label>\n  <span class=\"time\">@Html.EditorFor(m => m.Time)</span>\n  }\n  @if(Model.ShowDate) { <text>@Html.ValidationMessageFor(m=>m.Date)</text> }\n  @if(Model.ShowTime) { <text>@Html.ValidationMessageFor(m=>m.Time)</text> }\n</fieldset>\n\n@using(Script.Foot()) {\n<script type=\"text/javascript\">\n$(function () {\n  $(\"#@Html.FieldIdFor(m => Model.Date)\").datepicker();\n  $(\"#@Html.FieldIdFor(m => Model.Time)\").timepickr();\n});\n</script>\n}  This template is registering a few styles and scripts (note that if other parts register the same files, they will still be rendered only once). Then, it defines the editor as a date picker and a time picker according to the field's configuration. The fields are regular text boxes that are unobtrusively enriched by date and time pickers using jQuery UI plug-ins.  To specify the order and location where these templates will be rendered within the composed page, we need to add a placement.info file into the root of the module's directory:  <Placement>\n    <Place Fields_Custom_DateTime_Edit=\"Content:2.5\"/>\n    <Place Fields_Custom_DateTime=\"Content:2.5\"/>\n</Placement>",
            "title": "Writing the Templates"
        },
        {
            "location": "/Documentation/Creating-a-custom-field-type/#managing-the-field-settings",
            "text": "We are not quite done yet. We still need to take care of managing and persisting the settings for the field.  Add the following  DateTimeFieldEditorEvents.cs  file to the  Settings  folder:  using System.Collections.Generic;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.MetaData;\nusing Orchard.ContentManagement.MetaData.Builders;\nusing Orchard.ContentManagement.MetaData.Models;\nusing Orchard.ContentManagement.ViewModels;\n\nnamespace CustomFields.DateTimeField.Settings {\n    public class DateTimeFieldEditorEvents : ContentDefinitionEditorEventsBase {\n\n        public override IEnumerable<TemplateViewModel>\n          PartFieldEditor(ContentPartFieldDefinition definition) {\n            if (definition.FieldDefinition.Name == \"DateTimeField\") {\n                var model = definition.Settings.GetModel<DateTimeFieldSettings>();\n                yield return DefinitionTemplate(model);\n            }\n        }\n\n        public override IEnumerable<TemplateViewModel> PartFieldEditorUpdate(\n          ContentPartFieldDefinitionBuilder builder, IUpdateModel updateModel) {\n            var model = new DateTimeFieldSettings();\n            if (builder.FieldType != \"DateTimeField\") {\n              yield break;\n            }\n\n            if (updateModel.TryUpdateModel(\n              model, \"DateTimeFieldSettings\", null, null)) {\n                builder.WithSetting(\"DateTimeFieldSettings.Display\",\n                                    model.Display.ToString());\n            }\n\n            yield return DefinitionTemplate(model);\n        }\n    }\n}  This is the equivalent of a driver, but for field settings. The first method gets the settings and determines the template to render, and the second updates the model with the values from the submitted form and then calls the first.  The editor template for the field is defined by the following  DateTimeFieldSettings.cshtml  that you should create in a new  DefinitionTemplates  folder under  Views :  @model CustomFields.DateTimeField.Settings.DateTimeFieldSettings\n@using CustomFields.DateTimeField.Settings;\n\n<fieldset>\n    <label for=\"@Html.FieldIdFor(m => m.Display)\"\n      class=\"forcheckbox\">@T(\"Display options\")</label>  \n    <select id=\"@Html.FieldIdFor(m => m.Display)\"\n      name=\"@Html.FieldNameFor(m => m.Display)\">\n        @Html.SelectOption(DateTimeFieldDisplays.DateAndTime, \n          Model.Display == DateTimeFieldDisplays.DateAndTime,\n          T(\"Date and time\").ToString())\n        @Html.SelectOption(DateTimeFieldDisplays.DateOnly,\n          Model.Display == DateTimeFieldDisplays.DateOnly,\n          T(\"Date only\").ToString())\n        @Html.SelectOption(DateTimeFieldDisplays.TimeOnly,\n          Model.Display == DateTimeFieldDisplays.TimeOnly,\n          T(\"Time only\").ToString())\n    </select>\n\n    @Html.ValidationMessageFor(m => m.Display)\n\n</fieldset>  This template creates a label for the setting and then a drop-down that enables the site administrator to pick one of the options for the setting.",
            "title": "Managing the Field Settings"
        },
        {
            "location": "/Documentation/Creating-a-custom-field-type/#updating-the-project-file",
            "text": "If you are using Visual Studio, you should skip this section as your project file has already been updated, provided you saved all (CTRL+SHIFT+S). Otherwise, in order for the Orchard dynamic compilation engine to be able to pick up our new module's cs files, we need to add them to the  CustomFields.csproj  file.   Find the  <Content Include=\"Properties\\AssemblyInfo.cs\"/>  line in  CustomFields.csproj . If you look at it then you will see that this is inside an  <ItemGroup>  element. After that end  </ItemGroup>  for that section add in this code:  <ItemGroup>\n  <Compile Include=\"Drivers\\DateTimeFieldDriver.cs\" />\n  <Compile Include=\"Fields\\DateTimeField.cs\" />\n  <Compile Include=\"Settings\\DateTimeFieldEditorEvents.cs\" />\n  <Compile Include=\"Settings\\DateTimeFieldSettings.cs\" />\n  <Compile Include=\"ViewModels\\DateTimeFieldViewModel.cs\" />\n</ItemGroup>",
            "title": "Updating the Project File"
        },
        {
            "location": "/Documentation/Creating-a-custom-field-type/#adding-the-style-sheet",
            "text": "Create a  Styles  directory and create the following  datetime.css :  html.dyn label.forpicker {\n    display:none;\n}\n\nhtml.dyn input.hinted {\n    color:#ccc;\n    font-style:italic;\n}\n.date input{\n    width:10em;\n}\n.time input {\n    width:6em;\n}",
            "title": "Adding the Style Sheet"
        },
        {
            "location": "/Documentation/Creating-a-custom-field-type/#using-the-field",
            "text": "In order to be able to use the new field, you must first make sure that the  Orchard.ContentTypes  feature is enabled. Also enable our new  DateTimeField  feature under  Fields . Once it is, you can click on  Manage content types  in the admin menu. Click  Create new type  and give it the name \"Event\". Click  Add  next to fields and type in \"When\" as the name of the field. Select our new  DateTime  field type as the type of the field.  Now in the type editor, you should see our new  When  field, and you should be able to deploy its settings section by clicking the \" > \" on its left:  \nWe chose to keep both date and time displayed. The settings for the field are also the opportunity to determine where the field will appear on the front end if you want to override the defaults. Let's skip that for now. Add the  Route  part so that our events can have a title, then hit Save.  We can now add a new event by clicking  Create Event  in the admin menu. The editor that gets created for us has a when field with nice date and time pickers:  \nCreate an event and save it. You can now view it on the site:",
            "title": "Using the Field"
        },
        {
            "location": "/Documentation/Creating-a-custom-field-type/#getting-the-code",
            "text": "Download the code here:  CustomFields.zip . The code is also hosted on  http://orcharddatetimefield.codeplex.com/ .",
            "title": "Getting the Code"
        },
        {
            "location": "/Documentation/Packaging-and-sharing-a-module/",
            "text": "After developing a module extension to Orchard, you probably want to share it with others.  Orchard provides a module packaging feature that can be used to create a package file containing your module.  To enable this feature, visit the \"Features\" section of the Orchard admin panel and enable the \"Orchard.Packaging\" feature.\n\n\n\n\nAlternatively, you can enable the Orchard.Packaging feature from the Orchard command-line. To do this, run bin\\orchard.exe from the root of your Orchard installation, or the root of the Orchard.Web project if you are running against a \nsource enlistment\n.\n\n\norchard> feature enable Orchard.Packaging\n\n\n\nWhen the Orchard.Packaging feature is enabled, the Orchard command-line tool supports additional commands that can be used to create a package (\n.nupkg file\n) from any module in your Orchard installation, and to install a new module from a packaged .nupkg file.\n\n\npackage create <extensionName> <path>\n    Create a package for the extension <extensionName>\n    (an extension being a module or a theme).\n    The package will be output at the <path> specified.\n    The default filename is Orchard.[Module|Theme].<extensionName>.<extensionVersion>.nupkg.\n    For example, \"package create SampleModule c:\\temp\" will create the package\n    \"c:\\temp\\Orchard.Module.SampleModule.1.0.0.nupkg\".\n\npackage install <packageId> <location> /Version:<version>\n        Install a module or a theme from a package file.\n\npackage uninstall <packageId>\n    Uninstall a module or a theme.\n    The <packageId> should take the format Orchard.[Module|Theme].<extensionName>.\n    For example, \"package uninstall Orchard.Module.SampleModule\" will uninstall the Module under the \"~/Modules/SampleModule\" directory and\n    \"package uninstall Orchard.Theme.SampleTheme\" will uninstall the Theme under the \"~/Themes/SampleTheme\" directory.\n\nuser create /UserName:<username> /Password:<password> /Email:<email>\n        Creates a new User\n\n\n\nBy running the \"package create\" command, you can create a zip file of a module.\n\n\norchard> package create Lucene C:\\Temp\nPackage \"C:\\Temp\\Orchard.Module.Lucene.1.0.0.nupkg\" successfully created\n\n\n\nOrchard uses the \nNuGet\n packaging format to create module packages (basically .zip files with extra metadata information about your package).  NuGet is based on the OPC packaging format, which you can learn more about at \nhttp://en.wikipedia.org/wiki/Open_Packaging_Conventions\n.\n\n\nOnce you've created a module package, you can share it easily with others.  Orchard provides the ability to browse and install a module from the \"Modules\" section of the Orchard admin panel.  Refer to the \nInstalling and upgrading modules\n topic for more details.\n\n\nAdditionally, Orchard provides a Gallery feature that can register one or more gallery feeds of module extensions (OData format).  Users can easily install modules from any registered feed.  A default gallery feed is exposed from this website, at \nhttp://packages.orchardproject.net/FeedService.svc\n.  For more information, refer to the \nModule gallery feeds\n topic.\n\n\nYou can visit the Gallery admin panel menu to browse and install available modules and themes online.  The \nhttp://gallery.orchardproject.net/\n website provides a browsable front-end for finding and downloading available modules and themes too.\n\n\nYou can easily upload your custom module package to our Galllery website to share it with other Orchard users. \nRegister an account\n and \ncontribute your module here\n.",
            "title": "Packaging and Sharing a Module"
        },
        {
            "location": "/Documentation/Writing-a-widget/",
            "text": "This guide has been marked for review.\n If you are just getting started with Orchard module development you should read the \nGetting Started with Modules course\n first. It will introduce you to building modules with Orchard using Visual Studio Community, a free edition of Visual Studio. \n\n\n\n\nIn Orchard, a \nwidget\n is a piece of reusable UI that can be arbitrarily positioned on the pages of a web site. Examples of widgets could include a tag cloud, a search form, or a Twitter feed. A widget is a content type, which enables you to reuse existing code and UI.\n\n\nThis article describes how to write a widget by first creating a content part and then turning that part into a widget.\n\n\nCreating a Content Part\n\n\nFor this example, you will use the \nMap\n part that is described in \nWriting a content part\n. If you did not create the \nMap\n part, do so now. \n\n\nTurning a Part into a Widget\n\n\nTo turn a content part into a widget, you must update the database with your widget's type definition. You do this by adding an \nUpdateFrom{version}\n method to the part's \nMigrations.cs\n file.\n\n\nThe following example shows the \nMap\n part's \nMigrations.cs\n file with the \nUpdateFrom1\n method added.\n\n\nusing System.Data;\nusing Maps.Models;\nusing Orchard.ContentManagement.MetaData;\nusing Orchard.Core.Contents.Extensions;\nusing Orchard.Data.Migration;\n\nnamespace Maps\n{\n    public class Migrations : DataMigrationImpl\n    {\n        public int Create()\n        {\n            // Creating table MapRecord\n            SchemaBuilder.CreateTable(\"MapRecord\", table => table\n                .ContentPartRecord()\n                .Column(\"Latitude\", DbType.Single)\n                .Column(\"Longitude\", DbType.Single)\n            );\n\n            ContentDefinitionManager.AlterPartDefinition(typeof(MapPart).Name, cfg => cfg\n                .Attachable());\n\n            return 1;\n        }\n\n        public int UpdateFrom1()\n        {\n            // Create a new widget content type with our map. We make use of the AsWidgetWithIdentity() helper.\n            ContentDefinitionManager.AlterTypeDefinition(\"MapWidget\", cfg => cfg\n                .WithPart(\"MapPart\")\n                .AsWidgetWithIdentity());\n\n            return 2;\n        }\n    }\n}\n\n\n\nIn this example, the \nUpdateFrom1\n method creates \nMapWidget\n by combining \nMapPart\n, \nWidgetPart\n, and \nCommonPart\n, and then setting the widget stereotype. The \nWidgetPart\n and \nCommonPart\n objects are built into Orchard. The method returns 2, which is the new version number.\n\n\nThe part has now been transformed into a widget.\n\n\nDisplaying the Widget\n\n\nAfter you create the new widget, open the Orchard \nDashboard\n and click \nWidgets\n. You can then select the layer and zone where you want to display the widget. The following image shows the \nManage Widgets\n page.\n\n\n\n\nFor information about how to display your widget, see \nManaging Widgets\n.\n\n\nSharing Your Widget\n\n\nTo share the widget with others or to upload it to the widget gallery, you first need to package you widget to a module \n.zip\n file. This is done the same way any module is packaged in Orchard. For information, see \nPackaging and sharing a module\n.",
            "title": "Writing a Widget"
        },
        {
            "location": "/Documentation/Writing-a-widget/#creating-a-content-part",
            "text": "For this example, you will use the  Map  part that is described in  Writing a content part . If you did not create the  Map  part, do so now.",
            "title": "Creating a Content Part"
        },
        {
            "location": "/Documentation/Writing-a-widget/#turning-a-part-into-a-widget",
            "text": "To turn a content part into a widget, you must update the database with your widget's type definition. You do this by adding an  UpdateFrom{version}  method to the part's  Migrations.cs  file.  The following example shows the  Map  part's  Migrations.cs  file with the  UpdateFrom1  method added.  using System.Data;\nusing Maps.Models;\nusing Orchard.ContentManagement.MetaData;\nusing Orchard.Core.Contents.Extensions;\nusing Orchard.Data.Migration;\n\nnamespace Maps\n{\n    public class Migrations : DataMigrationImpl\n    {\n        public int Create()\n        {\n            // Creating table MapRecord\n            SchemaBuilder.CreateTable(\"MapRecord\", table => table\n                .ContentPartRecord()\n                .Column(\"Latitude\", DbType.Single)\n                .Column(\"Longitude\", DbType.Single)\n            );\n\n            ContentDefinitionManager.AlterPartDefinition(typeof(MapPart).Name, cfg => cfg\n                .Attachable());\n\n            return 1;\n        }\n\n        public int UpdateFrom1()\n        {\n            // Create a new widget content type with our map. We make use of the AsWidgetWithIdentity() helper.\n            ContentDefinitionManager.AlterTypeDefinition(\"MapWidget\", cfg => cfg\n                .WithPart(\"MapPart\")\n                .AsWidgetWithIdentity());\n\n            return 2;\n        }\n    }\n}  In this example, the  UpdateFrom1  method creates  MapWidget  by combining  MapPart ,  WidgetPart , and  CommonPart , and then setting the widget stereotype. The  WidgetPart  and  CommonPart  objects are built into Orchard. The method returns 2, which is the new version number.  The part has now been transformed into a widget.",
            "title": "Turning a Part into a Widget"
        },
        {
            "location": "/Documentation/Writing-a-widget/#displaying-the-widget",
            "text": "After you create the new widget, open the Orchard  Dashboard  and click  Widgets . You can then select the layer and zone where you want to display the widget. The following image shows the  Manage Widgets  page.   For information about how to display your widget, see  Managing Widgets .",
            "title": "Displaying the Widget"
        },
        {
            "location": "/Documentation/Writing-a-widget/#sharing-your-widget",
            "text": "To share the widget with others or to upload it to the widget gallery, you first need to package you widget to a module  .zip  file. This is done the same way any module is packaged in Orchard. For information, see  Packaging and sharing a module .",
            "title": "Sharing Your Widget"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/",
            "text": "It is very common for contents to consist in part of lists or choices in lists. For example, an address can have a state or region property where the value is one in a predefined list of choices. That is a 1-n relationship. A n-n relationship could be for example a list of commercial rewards that a customer can benefit from. Orchard does of course provide support for those scenarios. This topic is going to walk you through the creation of such contents.\n\n\nBuilding a \n1-N\n Relationship\n\n\nThe model that we're going to build here consists of an Address part that can be attached for example to a Customer content type. The address part has a street address, a zip code, a city name and a state. The state is what we are going to model as a 1-n relationship to a table of states.\n\n\n\n\nNote: this is clearly over-normalized, as a state in an address would usually be sufficiently well represented by a simple two-letter state code. The UI can then take care of representing the choice of that code as a constrained choice in a list of states. We are not claiming what we are building here is the correct way to represent a state in an address, but that the process exposed here is representative of what you'd follow to build a real-world 1-n association in Orchard.\n\n\n\n\nModeling the Address Part\n\n\nHere is the code for the \nAddress\n part:\n\n\nusing Orchard.ContentManagement;\n\nnamespace RelationSample.Models {\n    public class AddressPart : ContentPart<AddressPartRecord> {\n        public string Address {\n            get { return Retrieve(r => r.Address); }\n            set { Store(r => r.Address, value); }\n        }\n\n        public string City {\n            get { return Retrieve(r => r.City); }\n            set { Store(r => r.City, value); }\n        }\n\n        public StateRecord State {\n            get {\n                var rawStateRecord = Retrieve<string>(\"StateRecord\");\n                return StateRecord.DeserializeStateRecord(rawStateRecord);\n            }\n            set {\n                var serializedStateRecord = StateRecord.SerializeStateRecord(value);\n                Store(\"StateRecord\", serializedStateRecord);\n            }\n        }\n\n        public string Zip {\n            get { return Retrieve(r => r.Zip); }\n            set { Store(r => r.Zip, value); }\n        }\n    }\n}\n\n\n\nThis uses stores the data in the infoset and in a database record. However you can only store simple datatypes in the infoset so you can see that \nState\n field runs some extra code to encode the class into a string. \n\n\nAll properties in the \nAddressPart\n are proxies to the record properties:\n\n\nusing Orchard.ContentManagement.Records;\n\nnamespace RelationSample.Models {\n    public class AddressPartRecord : ContentPartRecord {\n        public virtual string Address { get; set; }\n        public virtual string City { get; set; }\n        public virtual StateRecord StateRecord { get; set; }\n        public virtual string Zip { get; set; }\n    }\n}\n\n\n\nThe state record class itself has a two-letter code and a name. It also has methods to serialize and deserialize its data into a string so that the \nAddressPart\n above can store its data in the infoset.\n\n\nnamespace RelationSample.Models {\n    public class StateRecord {\n        public virtual int Id { get; set; }\n        public virtual string Code { get; set; }\n        public virtual string Name { get; set; }\n\n        public static StateRecord DeserializeStateRecord(string rawStateRecord) {\n            if (rawStateRecord == null) {\n                return new StateRecord();\n            }\n\n            var stateRecordArray = rawStateRecord.Split(new[] { ',' });\n\n            return new StateRecord() {\n                Id = String.IsNullOrEmpty(stateRecordArray[0]) ? 0 : Int32.Parse(stateRecordArray[0]),\n                Code = stateRecordArray[1],\n                Name = stateRecordArray[2]\n            };\n        }\n\n        public static string SerializeStateRecord(StateRecord stateRecord) {\n            if(stateRecord == null) {\n                return \"\";\n            }\n\n            return String.Join(\",\", stateRecord.Id, stateRecord.Code, stateRecord.Name);\n        }            \n    }\n}\n\n\n\nHere is a representation of what we just showed in code:\n\n\n\nCreating the Database Tables and Part\n\n\nThe database structure for the model we just built can be created from a migration:\n\n\npublic int Create() {\n    SchemaBuilder.CreateTable(\"AddressPartRecord\",\n        table => table\n            .ContentPartRecord()\n            .Column<string>(\"Address\")\n            .Column<string>(\"City\")\n            .Column<int>(\"StateRecord_Id\")\n            .Column<string>(\"Zip\")\n        );\n\n    SchemaBuilder.CreateTable(\"StateRecord\",\n        table => table\n            .Column<int>(\"Id\", column => column.PrimaryKey().Identity())\n            .Column<string>(\"Code\", column => column.WithLength(2))\n            .Column<string>(\"Name\")\n        );\n\n    ContentDefinitionManager.AlterPartDefinition(\"AddressPart\",\n        builder => builder.Attachable());\n\n    return 1;\n}\n\n\n\nThis migration creates an AddressPartRecord table that is a content part record (this gets us the default fields that a content part needs). It adds columns for address, city and zip that are going to be auto-mapped to our record's properties.\n\n\nThe interesting column here is StateRecord_Id. As you can see, its type is the same as the type of the Id column of the StateRecord class, because the system will be able to recognize this as a foreign key and to map that integer value to a StateRecord property by just following the relation. It is important here that the name of the column that will represent the relation is the name of the column on the \"1\" end of the relation, followed by an underscore and the name of the column of the \"n\" end of the relation.\n\n\nThere is nothing remarkable on the StateRecord table: it's just mapping Id to be the primary key and constraining the Code column to be 2 characters long.\n\n\nThe last statement before the return in the migration is declaring the AddressPart and making it attachable. That will enable us to attach it to any content type.\n\n\nPopulating the State Table\n\n\n\n\nNote: this section is included for completeness of the sample code but is far from essential to understanding how to implement relationships in Orchard. Please consider it as sample data generation. If you're following along and want to import this data you can find code in the \nmigrations.cs\n file. This is included in the downloadable source code example link at the end of this guide.\n\n\n\n\nBecause the list of states is going to be relatively stable, I did not make them content items (although that would be entirely possible with just a little more work). Instead, I'm populating the table with a list of states right in the migration code. The migration class has a reference to the state repository:\n\n\nprivate readonly IRepository<StateRecord> _stateRepository;\n[...]\npublic RelationSampleDataMigration(IRepository<StateRecord> stateRepository) {\n    _stateRepository = stateRepository;\n}\n\n\n\nIt also has the list of states to add to the database:\n\n\nprivate readonly IEnumerable<StateRecord> _states =\nnew List<StateRecord> {\n    new StateRecord {Code = \"AL\", Name = \"Alabama\"},\n    new StateRecord {Code = \"AK\", Name = \"Alaska\"},\n[...]\n    new StateRecord {Code = \"WS\", Name = \"Western Australia\"},\n};\n\n\n\nThe population of the table is done by the following code:\n\n\npublic int UpdateFrom1() {\n    if (_stateRepository == null)\n        throw new InvalidOperationException(\"Couldn't find state repository.\");\n    foreach (var state in _states) {\n        _stateRepository.Create(state);\n    }\n    return 2;\n}\n\n\n\nThe Address Part Handler\n\n\nThe handler for the address part is rather uninteresting and just wires up the repository:\n\n\nusing Orchard.Data;\nusing Orchard.ContentManagement.Handlers;\nusing RelationSample.Models;\n\nnamespace RelationSample.Handlers {\n    public class AddressPartHandler : ContentHandler {\n        public AddressPartHandler(IRepository<AddressPartRecord> repository) {\n            Filters.Add(StorageFilter.For(repository));\n        }\n    }\n}\n\n\n\nThe Address Part Driver\n\n\nThe driver is more interesting as it prepares the shapes for rendering and handles posted back admin forms.\n\n\nusing JetBrains.Annotations;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Drivers;\nusing RelationSample.Models;\nusing RelationSample.Services;\nusing RelationSample.ViewModels;\n\nnamespace RelationSample.Drivers {\n    [UsedImplicitly]\n    public class AddressPartDriver : ContentPartDriver<AddressPart> {\n        private readonly IAddressService _addressService;\n\n        private const string TemplateName = \"Parts/Address\";\n\n        public AddressPartDriver(IAddressService addressService) {\n            _addressService = addressService;\n        }\n\n        protected override string Prefix {\n            get { return \"Address\"; }\n        }\n\n        protected override DriverResult Display(\n            AddressPart part,\n            string displayType,\n            dynamic shapeHelper) {\n\n            return ContentShape(\"Parts_Address\",\n                            () => shapeHelper.Parts_Address(\n                                ContentPart: part,\n                                Address: part.Address,\n                                City: part.City,\n                                Zip: part.Zip,\n                                StateCode: part.State.Code,\n                                StateName: part.State.Name));\n        }\n\n        protected override DriverResult Editor(\n            AddressPart part,\n            dynamic shapeHelper) {\n\n            return ContentShape(\"Parts_Address_Edit\",\n                    () => shapeHelper.EditorTemplate(\n                        TemplateName: TemplateName,\n                        Model: BuildEditorViewModel(part),\n                        Prefix: Prefix));\n        }\n\n        protected override DriverResult Editor(\n            AddressPart part,\n            IUpdateModel updater,\n            dynamic shapeHelper) {\n\n            var model = new EditAddressViewModel();\n            if (updater.TryUpdateModel(model, Prefix, null, null))\n            {\n                if (part.ContentItem.Id != 0)\n                {\n                    _addressService.UpdateAddressForContentItem(\n                        part.ContentItem, model);\n                }\n            }\n\n            return Editor(part, shapeHelper);\n        }\n\n        private EditAddressViewModel BuildEditorViewModel(AddressPart part) {\n            var avm = new EditAddressViewModel {\n                Address = part.Address,\n                City = part.City,\n                Zip = part.Zip,\n                States = _addressService.GetStates()\n            };\n            if (part.State != null) {\n                avm.StateCode = part.State.Code;\n                avm.StateName = part.State.Name;\n            }\n            return avm;\n        }\n    }\n}\n\n\n\nWhen displaying on the front-end, we prepare a Parts_Address shape that has a reference to the original part (although that is not necessary), all the part properties flattened out and the state is available as both a code and a name.\n\n\nWhen in the admin UI, we build shapes with a statically-typed view model because these are still easier to use when using form fields and MVC model binding. That view model, like the shape used on the front-end, has a flattened view of the data that we need to display, but it also has a full list of all the available states, that the view will use to render the state drop-down list:\n\n\nusing System.Collections.Generic;\nusing RelationSample.Models;\n\nnamespace RelationSample.ViewModels {\n    public class EditAddressViewModel {\n        public string Address { get; set; }\n        public string City { get; set; }\n        public string StateCode { get; set; }\n        public string StateName { get; set; }\n        public string Zip { get; set; }\n        public IEnumerable<StateRecord> States { get; set; }\n    }\n}\n\n\n\nThe last thing to notice in the driver is that the Editor override that handles postbacks is just using \nupdater.TryUpdateModel()\n, which is enough to incorporate the submitted form values onto the view model. This is followed by a call into the address service class which will update the actual content part data with the updated model.\n\n\nThe Address Service Class\n\n\nThe address service class takes a dependency on the state repository in order to be able to query for the full list of states. Its other method, \nUpdateAddressForContentItem\n, copies an EditAddressViewModel onto the address content part of a content item. It does so by looking up a state record from the state repository using the state code from the model.\n\n\nusing System.Collections.Generic;\nusing System.Linq;\nusing Orchard;\nusing Orchard.ContentManagement;\nusing Orchard.Data;\nusing RelationSample.Models;\nusing RelationSample.ViewModels;\n\nnamespace RelationSample.Services {\n    public interface IAddressService : IDependency {\n        void UpdateAddressForContentItem(\n            ContentItem item, EditAddressViewModel model);\n        IEnumerable<StateRecord> GetStates();\n    }\n\n    public class AddressService : IAddressService {\n        private readonly IRepository<StateRecord> _stateRepository;\n\n        public AddressService(IRepository<StateRecord> stateRepository) {\n            _stateRepository = stateRepository;\n        }\n\n        public void UpdateAddressForContentItem(\n            ContentItem item,\n            EditAddressViewModel model) {\n\n            var addressPart = item.As<AddressPart>();\n            addressPart.Address = model.Address;\n            addressPart.City = model.City;\n            addressPart.Zip = model.Zip;\n            addressPart.State = _stateRepository.Get(\n                s => s.Code == model.StateCode);\n        }\n\n        public IEnumerable<StateRecord> GetStates() {\n            return _stateRepository.Table.ToList();\n        }\n    }\n}\n\n\n\nBuilding the Views\n\n\nThe Front-End View\n\n\nThe front-end view for the part is straightforward as it's just displaying the properties of the shape:\n\n\n<p class=\"adr\">\n    <div class=\"street-address\">@Model.Address</div>\n    <span class=\"locality\">@Model.City</span>,\n    <span class=\"region\">@Model.StateCode</span>\n    <span class=\"postal-code\">@Model.Zip</span>\n</p>\n\n\n\nWe are using the vcard microformat in this template so the address can get picked-up by consumers that understand this format.\n\n\nThe Editor View\n\n\nThe editor view is also relatively straightforward, with just the editor for the state being of a little more interest:\n\n\n@model RelationSample.ViewModels.EditAddressViewModel\n<fieldset>\n  <legend>Address</legend>\n\n  <div class=\"editor-label\">\n    @Html.LabelFor(model => model.Address, T(\"Street Address\"))\n  </div>\n  <div class=\"editor-field\">\n    @Html.TextAreaFor(model => model.Address)\n    @Html.ValidationMessageFor(model => model.Address)\n  </div>\n\n  <div class=\"editor-label\">\n    @Html.LabelFor(model => model.City, T(\"City\"))\n  </div>\n  <div class=\"editor-field\">\n    @Html.TextBoxFor(model => model.City)\n    @Html.ValidationMessageFor(model => model.City)\n  </div>\n\n  <div class=\"editor-label\">\n    @Html.LabelFor(model => model.StateCode, T(\"State\"))\n  </div>\n  <div class=\"editor-field\">\n    @Html.DropDownListFor(model => model.StateCode,\n                      Model.States.Select(s => new SelectListItem {\n                          Selected = s.Code == Model.StateCode,\n                          Text = s.Code + \" \" + s.Name,\n                          Value = s.Code\n                      }),\n                      \"Choose a state...\")\n    @Html.ValidationMessageFor(model => model.StateCode)\n  </div>\n\n  <div class=\"editor-label\">\n    @Html.LabelFor(model => model.Zip, T(\"Zip\"))\n  </div>\n  <div class=\"editor-field\">\n    @Html.TextBoxFor(model => model.Zip)\n    @Html.ValidationMessageFor(model => model.Zip)\n  </div>\n</fieldset>\n\n\n\nThe DropDownListFor method takes an expression for the property to represent, and a list of SelectListItems that we build on the fly from the complete list of states and what we know of the current state for that address (notice the expression for Selected).\n\n\nThe Placement File\n\n\nFinally, we need a placement file to determine the default position of our part within a larger content type:\n\n\n<Placement>\n    <Place Parts_Address_Edit=\"Content:10\"/>\n    <Place Parts_Address=\"Content:10\"/>\n</Placement>\n\n\n\nUsing the Address Part\n\n\nWe can now go into the \"Features\" admin page and enable the RelationSample feature under the Sample category. Once this is done we can go to \"Content Types\" and create a new \"Customer\" content type. Add the Common and Address parts, as well as a text field named \"Name\".\n\n\n\n\nWe now have a new \"Customer\" menu entry under \"New\", enabling us to create a new customer:\n\n\n\n\nThe customer can be displayed on the front-end as well.\n\n\n\n\nBuilding an \nN-N\n Relationship\n\n\nBuilding a n-n relationship in Orchard relies on the same principles as what we did for the 1-n relationship. The main difference is that instead of having one foreign key on the part record, we have an intermediary object for the relationship that has two foreign keys to the records. This is of course close to the way this is done in relational databases.\n\n\nIn this section, we are going to build a part that can record an arbitrary number of associations with reward programs for our customers.\n\n\nModeling the Rewards Part\n\n\nThe rewards part and its association with reward programs are modeled as follows:\n\n\n\n\nThe Rewards Part Record\n\n\nThe part record has just one property, the collection of rewards:\n\n\nusing System.Collections.Generic;\nusing Orchard.ContentManagement.Records;\n\nnamespace RelationSample.Models {\n    public class RewardsPartRecord : ContentPartRecord {\n        public RewardsPartRecord() {\n            Rewards = new List<ContentRewardProgramsRecord>();\n        }\n        public virtual IList<ContentRewardProgramsRecord> Rewards { get; set; }\n    }\n}\n\n\n\nThe Rewards Part\n\n\nThe rewards part itself proxies the Rewards property to the record:\n\n\nusing System.Collections.Generic;\nusing System.Linq;\nusing Orchard.ContentManagement;\n\nnamespace RelationSample.Models {\n    public class RewardsPart : ContentPart<RewardsPartRecord> {\n        public IEnumerable<RewardProgramRecord> Rewards {\n            get {\n                return Record.Rewards.Select(r => r.RewardProgramRecord);\n            }\n        }\n    }\n}\n\n\n\nThe Reward Program Record\n\n\nReward programs have a name and a discount rate:\n\n\nnamespace RelationSample.Models {\n    public class RewardProgramRecord {\n        public virtual int Id { get; set; }\n        public virtual string Name { get; set; }\n        public virtual double Discount { get; set; }\n    }\n}\n\n\n\nThe Association Record\n\n\nFinally, the association record has a reference to a reward part record and a reference to a reward program:\n\n\nnamespace RelationSample.Models {\n    public class ContentRewardProgramsRecord {\n        public virtual int Id { get; set; }\n        public virtual RewardsPartRecord RewardsPartRecord { get; set; }\n        public virtual RewardProgramRecord RewardProgramRecord { get; set; }\n    }\n}\n\n\n\nCreating the Database Tables and Record\n\n\nHere is the migration:\n\n\npublic int UpdateFrom2() {\n    SchemaBuilder.CreateTable(\"RewardsPartRecord\",\n        table => table\n            .ContentPartRecord()\n        );\n\n    SchemaBuilder.CreateTable(\"RewardProgramRecord\",\n        table => table\n            .Column<int>(\"Id\", column => column.PrimaryKey().Identity())\n            .Column<string>(\"Name\")\n            .Column<double>(\"Discount\")\n        );\n\n    SchemaBuilder.CreateTable(\"ContentRewardProgramsRecord\",\n        table => table\n            .Column<int>(\"Id\", column => column.PrimaryKey().Identity())\n            .Column<int>(\"RewardsPartRecord_Id\")\n            .Column<int>(\"RewardProgramRecord_Id\")\n        );\n\n    ContentDefinitionManager.AlterPartDefinition(\n        \"RewardsPart\",\n        builder => builder.Attachable());\n\n    return 3;\n}\n\n\n\nThis code creates the three tables we need to persist the three records that we just modeled. It also declares the RewardsPart and makes it attachable.\n\n\nAs with addresses and states, you can see the convention for relations in action here: the columns for the association record table are of type integer (the type of the id of each of the associated tables) and bears the name of the linked table, an underscore and the name of the key column of the associated table.\n\n\nPopulating the Reward Program Table\n\n\nLike we did with states, we pre-populate the reward program table from the migration class. In a real world scenario, the rewards could be content items and you could have a specific management screen for them. There would be nothing specific about that coming from the fact that these items happen to be at one end of a n-n relation.\n\n\nprivate readonly IRepository<RewardProgramRecord> _rewardProgramRepository;\n[...]\nprivate readonly IEnumerable<RewardProgramRecord> _rewardPrograms =\n    new List<RewardProgramRecord> {\n        new RewardProgramRecord {Name = \"Senior\", Discount = 0.05},\n        new RewardProgramRecord {Name = \"Family\", Discount = 0.10},\n        new RewardProgramRecord {Name = \"Member\", Discount = 0.15},\n    };\n[...]\npublic int UpdateFrom3() {\n    if (_rewardProgramRepository == null)\n        throw new InvalidOperationException(\n            \"Couldn't find reward program repository.\");\n    foreach (var rewardProgram in _rewardPrograms) {\n        _rewardProgramRepository.Create(rewardProgram);\n    }\n    return 4;\n}\n\n\n\nThe Reward Handler\n\n\nThere is nothing remarkable with the driver for this part, which is just wiring the repository:\n\n\nusing Orchard.Data;\nusing Orchard.ContentManagement.Handlers;\nusing RelationSample.Models;\n\nnamespace RelationSample.Handlers {\n    public class RewardsPartHandler : ContentHandler {\n        public RewardsPartHandler(IRepository<RewardsPartRecord> repository) {\n            Filters.Add(StorageFilter.For(repository));\n        }\n    }\n}\n\n\n\nThe Reward Driver\n\n\nThe driver is also surprisingly unsurprising given the requirement to persist the n-n relationship:\n\n\nusing System.Linq;\nusing JetBrains.Annotations;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Drivers;\nusing RelationSample.Models;\nusing RelationSample.Services;\nusing RelationSample.ViewModels;\n\nnamespace RelationSample.Drivers {\n    [UsedImplicitly]\n    public class RewardsPartDriver : ContentPartDriver<RewardsPart> {\n        private readonly IRewardService _rewardService;\n\n        private const string TemplateName = \"Parts/Rewards\";\n\n        public RewardsPartDriver(IRewardService rewardService) {\n            _rewardService = rewardService;\n        }\n\n        protected override string Prefix {\n            get { return \"Rewards\"; }\n        }\n\n        protected override DriverResult Display(\n            RewardsPart part,\n            string displayType,\n            dynamic shapeHelper) {\n\n            return ContentShape(\"Parts_Rewards\",\n                            () => shapeHelper.Parts_Rewards(\n                                ContentPart: part,\n                                Rewards: part.Rewards));\n        }\n\n        protected override DriverResult Editor(\n            RewardsPart part,\n            dynamic shapeHelper) {\n\n            return ContentShape(\"Parts_Rewards_Edit\",\n                    () => shapeHelper.EditorTemplate(\n                        TemplateName: TemplateName,\n                        Model: BuildEditorViewModel(part),\n                        Prefix: Prefix));\n        }\n\n        protected override DriverResult Editor(\n            RewardsPart part,\n            IUpdateModel updater,\n            dynamic shapeHelper) {\n\n            var model = new EditRewardsViewModel();\n            updater.TryUpdateModel(model, Prefix, null, null);\n\n            if (part.ContentItem.Id != 0) {\n                _rewardService.UpdateRewardsForContentItem(\n                    part.ContentItem, model.Rewards);\n            }\n\n            return Editor(part, shapeHelper);\n        }\n\n        private EditRewardsViewModel BuildEditorViewModel(RewardsPart part) {\n            var itemRewards = part.Rewards.ToLookup(r => r.Id);\n            return new EditRewardsViewModel {\n                Rewards = _rewardService.GetRewards().Select(\n                    r => new RewardProgramEntry {\n                        RewardProgram = r,\n                        IsChecked = itemRewards.Contains(r.Id)\n                    }).ToList()\n            };\n        }\n    }\n}\n\n\n\nLike with the address part, we are fetching all the reward programs and putting them on the editor view model for the template to display as checkboxes. In BuildEditorViewModel, you can see that we build the current rewards as a lookup and then use that to determine the checked state of each reward program.\n\n\nHere is the editor view model:\n\n\nusing System.Collections.Generic;\nusing RelationSample.Models;\n\nnamespace RelationSample.ViewModels {\n    public class EditRewardsViewModel {\n        public IList<RewardProgramEntry> Rewards { get; set; }\n    }\n\n    public class RewardProgramEntry {\n        public RewardProgramRecord RewardProgram { get; set; }\n        public bool IsChecked { get; set; }\n    }\n}\n\n\n\n\n\nNote: we are making the assumption here that there are only a few reward programs. If you are modeling a relationship with a large number of records on both sides of the relationship, the basic principles and models exposed here still stand but you'll have to adapt and optimize the code. In particular, using checkboxes to select the associated records is the best UI solution for small numbers of records but it won't scale well to more than a few dozens of records. Instead, you'd probably need to use a search UI of sorts and an Add/Remove pattern.\n\n\n\n\nThe Rewards Service\n\n\nThe rewards service is responsible for driving the relatively complex task of updating the database for the new values for the relation:\n\n\nusing System.Collections.Generic;\nusing System.Linq;\nusing Orchard;\nusing Orchard.ContentManagement;\nusing Orchard.Data;\nusing RelationSample.Models;\nusing RelationSample.ViewModels;\n\nnamespace RelationSample.Services {\n    public interface IRewardService : IDependency {\n        void UpdateRewardsForContentItem(\n            ContentItem item,\n            IEnumerable<RewardProgramEntry> rewards);\n        IEnumerable<RewardProgramRecord> GetRewards();\n    }\n\n    public class RewardService : IRewardService {\n        private readonly IRepository<RewardProgramRecord>\n            _rewardProgramRepository;\n        private readonly IRepository<ContentRewardProgramsRecord>\n            _contentRewardRepository;\n\n        public RewardService(\n            IRepository<RewardProgramRecord> rewardProgramRepository,\n            IRepository<ContentRewardProgramsRecord> contentRewardRepository) {\n\n            _rewardProgramRepository = rewardProgramRepository;\n            _contentRewardRepository = contentRewardRepository;\n        }\n\n        public void UpdateRewardsForContentItem(\n            ContentItem item,\n            IEnumerable<RewardProgramEntry> rewards) {\n\n            var record = item.As<RewardsPart>().Record;\n            var oldRewards = _contentRewardRepository.Fetch(\n                r => r.RewardsPartRecord == record);\n            var lookupNew = rewards\n                .Where(e => e.IsChecked)\n                .Select(e => e.RewardProgram)\n                .ToDictionary(r => r, r => false);\n            // Delete the rewards that are no longer there\n            // and mark the ones that should stay\n            foreach(var contentRewardProgramsRecord in oldRewards) {\n                if (lookupNew.ContainsKey(\n                    contentRewardProgramsRecord.RewardProgramRecord)) {\n\n                    lookupNew[contentRewardProgramsRecord.RewardProgramRecord]\n                        = true;\n                }\n                else {\n                    _contentRewardRepository.Delete(contentRewardProgramsRecord);\n                }\n            }\n            // Add the new rewards\n            foreach(var reward in lookupNew.Where(kvp => !kvp.Value)\n                                           .Select(kvp => kvp.Key)) {\n                _contentRewardRepository.Create(new ContentRewardProgramsRecord {\n                    RewardsPartRecord = record,\n                    RewardProgramRecord = reward\n                });\n            }\n        }\n\n        public IEnumerable<RewardProgramRecord> GetRewards() {\n            return _rewardProgramRepository.Table.ToList();\n        }\n    }\n}\n\n\n\n\n\nNote: again, this is designed for small numbers of reward programs. If you have larger models and have adopted an Add/Remove pattern talked about in the previous note, the code for the service actually becomes simpler as it executes lower-level operations that affect one program at a time rather than try to synchronize the whole collection at once.\n\n\n\n\nBuilding the Views\n\n\nThe Front-End View\n\n\nThe front-end view is just displaying the list of rewards as an unordered list:\n\n\n<h4>@T(\"Rewards\"):</h4>\n<ul>\n@foreach (var reward in Model.Rewards) {\n    <li>@string.Format(\"{0} ({1:P1})\", reward.Name,  -reward.Discount)</li>\n}\n</ul>\n\n\n\nThe Editor View\n\n\nThe editor view is a little more remarkable:\n\n\n@model RelationSample.ViewModels.EditRewardsViewModel\n<fieldset><legend>@T(\"Rewards\")</legend>\n<ul>\n@{\n var rewardIndex = 0;\n}\n@foreach (var reward in Model.Rewards) {\n    <li><input type=\"hidden\" value=\"@reward.RewardProgram.Id\"\n        name=\"@Html.FieldNameFor(m => m.Rewards[rewardIndex].RewardProgram.Id)\"/>\n        <label for=\"@Html.FieldNameFor(m => m.Rewards[rewardIndex].IsChecked)\">\n            <input type=\"checkbox\" value=\"true\"\n                name=\"@Html.FieldNameFor(m => m.Rewards[rewardIndex].IsChecked)\"\n                id=\"@Html.FieldNameFor(m => m.Rewards[rewardIndex].IsChecked)\"\n                @if (reward.IsChecked) {<text>checked=\"checked\"</text>}/>\n            @string.Format(\"{0} ({1:P1})\",\n                reward.RewardProgram.Name,\n                -reward.RewardProgram.Discount))\n        </label>\n        @{rewardIndex++;}\n    </li>\n}\n</ul>\n</fieldset>\n\n\n\nNotice how the check-boxes use Html.FieldNameFor. This will ensure that they will have a name that the model binder will be able to understand and correctly bind when it is posted back.\n\n\nAlso noticeable is the hidden input, which is a standard workaround for the peculiar way in which HTML check-boxes don't post anything when not checked. The model binder knows how to use the information for both the hidden input and the check-box to determine the Boolean values to set.\n\n\nOf course, any variation from that naming scheme would make the binding fail.\n\n\nThe Placement File\n\n\nFor the parts to appear at all in the UI, we need to update our placement.info file:\n\n\n<Placement>\n    <Place Parts_Address_Edit=\"Content:10\"/>\n    <Place Parts_Address=\"Content:10\"/>\n    <Place Parts_Rewards_Edit=\"Content:11\"/>\n    <Place Parts_Rewards=\"Content:11\"/>\n</Placement>\n\n\n\nUsing the Rewards Part\n\n\nIf you haven't used the application's admin UI since you wrote the migration, it should now warn you that a feature needs to be upgraded. That is our sample feature, as the system noticed the latest executed migration does not match the highest available. Go to the features screen, locate the RelationSample and click \"Update\".\n\n\nIn order to use the new part on our customer content items, we need to add it to the type. Go to the \"Content Types\" screen and click \"Edit\" next to \"Customer\". Click \"Add\" next to \"Parts\", check the Rewards part and save.\n\n\n\n\nIf you go back to an existing customer's edit screen or create a new one, you'll see a screen such as this:\n\n\n\n\nOn the front-end, the customer now looks like this:\n\n\n\n\nBuilding a Relation Between Content Items\n\n\nOur third example will establish a relation between content items, which is a step up from our previous examples which were establishing relations between records. Doing the same thing with items is not fundamentally very different, but there are a couple of caveats that justify a specific example.\n\n\nThe example that we will build is a Sponsor part that records that a specific customer was sponsored by another.\n\n\nModeling the Sponsor Part\n\n\nThe Sponsor part will consist of a single Sponsor property. This time, we will use a lazy field so that its content only gets fetched when it is needed.\n\n\nusing Orchard.ContentManagement;\nusing Orchard.Core.Common.Utilities;\n\nnamespace RelationSample.Models {\n    public class SponsorPart : ContentPart<SponsorPartRecord> {\n        private readonly LazyField<IContent> _sponsor = new LazyField<IContent>();\n\n        public LazyField<IContent> SponsorField { get { return _sponsor; } }\n\n        public IContent Sponsor {\n            get { return _sponsor.Value; }\n            set { _sponsor.Value = value; }\n        }\n    }\n}\n\n\n\nWe will see how the lazy field gets set and populated when we look at the code for the handler.\n\n\nThe corresponding record is extremely simple:\n\n\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Records;\n\nnamespace RelationSample.Models {\n    public class SponsorPartRecord : ContentPartRecord {\n        public virtual ContentItemRecord Sponsor { get; set; }\n    }\n}\n\n\n\nBuilding the Database Table and Part\n\n\nThe migration for this part is as follows:\n\n\npublic int UpdateFrom4() {\n\n    SchemaBuilder.CreateTable(\"SponsorPartRecord\",\n        table => table\n            .ContentPartRecord()\n            .Column<int>(\"Sponsor_Id\")\n        );\n\n    ContentDefinitionManager.AlterPartDefinition(\n        \"SponsorPart\", builder => builder.Attachable());\n\n    return 5;\n}\n\n\n\nWe are in known territory here: the table uses the convention that we have already applied twice in the previous examples, where the name of the column establishing the relation is the concatenation of the column names in both records.\n\n\nWe also make the new SponsorPart attachable, as usual.\n\n\nThe Sponsor Handler\n\n\nThe handler is going to be a little more elaborate than usual, because of the use of lazy fields:\n\n\nusing Orchard.ContentManagement;\nusing Orchard.Data;\nusing Orchard.ContentManagement.Handlers;\nusing RelationSample.Models;\n\nnamespace RelationSample.Handlers {\n    public class SponsorPartHandler : ContentHandler {\n        private readonly IContentManager _contentManager;\n\n        public SponsorPartHandler(\n            IRepository<SponsorPartRecord> repository,\n            IContentManager contentManager) {\n\n            Filters.Add(StorageFilter.For(repository));\n            _contentManager = contentManager;\n\n            OnInitializing<SponsorPart>(PropertySetHandlers);\n            OnLoaded<SponsorPart>(LazyLoadHandlers);\n        }\n\n        void LazyLoadHandlers(LoadContentContext context, SponsorPart part) {\n            // add handlers that will load content just-in-time\n            part.SponsorField.Loader(() =>\n                part.Record.Sponsor == null ?\n                null : _contentManager.Get(part.Record.Sponsor.Id));\n        }\n\n        static void PropertySetHandlers(\n            InitializingContentContext context, SponsorPart part) {\n            // add handlers that will update records when part properties are set\n            part.SponsorField.Setter(sponsor => {\n                part.Record.Sponsor = sponsor == null\n                    ? null\n                    : sponsor.ContentItem.Record;\n                return sponsor;\n            });\n\n            // Force call to setter if we had already set a value\n            if (part.SponsorField.Value != null)\n                part.SponsorField.Value = part.SponsorField.Value;\n        }\n    }\n}\n\n\n\nThe storage filter is as usual setting up the repository of sponsor part records, but we also have OnInitializing and OnLoaded event handlers that will respectively set-up the setter for the lazy field and the loader of the value that will be executed the first time the field is accessed.\n\n\nAt loading time, we look at the record, and if there is a sponsor we get the full content item from the content manager using the record's id.\n\n\nThe lazy field setter just sets the underlying record's Sponsor property.\n\n\nThe Driver\n\n\nThe driver is relying on the following view model:\n\n\nusing System.Collections.Generic;\nusing Orchard.ContentManagement;\nusing RelationSample.Models;\n\nnamespace RelationSample.ViewModels {\n    public class EditSponsorViewModel {\n        public int CustomerId { get; set; }\n        public int SponsorId { get; set; }\n        public IEnumerable<CustomerViewModel> Customers { get; set; }\n    }\n\n    public class CustomerViewModel {\n        public int Id { get; set;}\n        public string Name { get; set;}\n    }\n}\n\n\n\nHere is the code for the driver itself, which should by now seem very familiar:\n\n\nusing System.Linq;\nusing JetBrains.Annotations;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Drivers;\nusing RelationSample.Models;\nusing RelationSample.Services;\nusing RelationSample.ViewModels;\n\nnamespace RelationSample.Drivers {\n    [UsedImplicitly]\n    public class SponsorPartDriver : ContentPartDriver<SponsorPart> {\n        private readonly ICustomerService _customerService;\n\n        private const string TemplateName = \"Parts/Sponsor\";\n\n        public SponsorPartDriver(ICustomerService customerService) {\n            _customerService = customerService;\n        }\n\n        protected override string Prefix {\n            get { return \"Sponsor\"; }\n        }\n\n        protected override DriverResult Display(\n            SponsorPart part, string displayType, dynamic shapeHelper) {\n\n            return ContentShape(\"Parts_Sponsor\",\n                () => shapeHelper.Parts_Sponsor(\n                    ContentPart: part,\n                    Sponsor: part.Sponsor,\n                    SponsorName: _customerService.GetCustomerName(part.Sponsor)\n                    ));\n        }\n\n        protected override DriverResult Editor(\n            SponsorPart part, dynamic shapeHelper) {\n\n            return ContentShape(\"Parts_Sponsor_Edit\",\n                    () => shapeHelper.EditorTemplate(\n                        TemplateName: TemplateName,\n                        Model: BuildEditorViewModel(part),\n                        Prefix: Prefix));\n        }\n\n        protected override DriverResult Editor(\n            SponsorPart part, IUpdateModel updater, dynamic shapeHelper) {\n\n            var model = new EditSponsorViewModel();\n            updater.TryUpdateModel(model, Prefix, null, null);\n\n            if (part.ContentItem.Id != 0) {\n                _customerService.UpdateSponsorForContentItem(\n                    part.ContentItem, model);\n            }\n\n            return Editor(part, shapeHelper);\n        }\n\n        private EditSponsorViewModel BuildEditorViewModel(SponsorPart part) {\n            var itemSponsor = new EditSponsorViewModel {\n                CustomerId = part.ContentItem.Id,\n                Customers = _customerService.GetCustomers()\n            };\n            if (part.Sponsor != null) {\n                itemSponsor.SponsorId = part.Sponsor.Id;\n            }\n            return itemSponsor;\n        }\n    }\n}\n\n\n\nThe Service Class\n\n\nThe driver is also using the following helper service:\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Orchard;\nusing Orchard.ContentManagement;\nusing Orchard.Data;\nusing RelationSample.Models;\nusing RelationSample.ViewModels;\n\nnamespace RelationSample.Services {\n    public interface ICustomerService : IDependency {\n        void UpdateSponsorForContentItem(\n            ContentItem item, EditSponsorViewModel model);\n        string GetCustomerName(IContent customer);\n        IEnumerable<CustomerViewModel> GetCustomers();\n    }\n\n    public class CustomerService : ICustomerService {\n        private readonly IContentManager _contentManager;\n\n        public CustomerService(IContentManager contentManager) {\n            _contentManager = contentManager;\n        }\n\n        public void UpdateSponsorForContentItem(\n            ContentItem item, EditSponsorViewModel model) {\n\n            var sponsorPart = item.As<SponsorPart>();\n            sponsorPart.Sponsor = _contentManager.Get(model.SponsorId);\n        }\n\n        public string GetCustomerName(IContent customer) {\n            return customer.ContentItem.Parts\n                .SelectMany(p => p.Fields)\n                .Where(f => f.Name == \"Name\")\n                .First()\n                .Storage.Get<string>(null);\n        }\n\n        public IEnumerable<CustomerViewModel> GetCustomers() {\n            return _contentManager\n                .Query(\"Customer\")\n                .List()\n                .Select(ci => new CustomerViewModel {\n                    Id = ci.Id,\n                    Name = GetCustomerName(ci)\n                });\n        }\n    }\n}\n\n\n\nThe only notable thing here is the way we are assuming the content type has a \"Name\" field that we'll use to build the list of customers that will be used to build the UI to select the sponsor. The GetCustomerName is implementing this assumption. Of course, you could also have a Customer part that has a Name property, or you could use Routable and its Title.\n\n\nBuilding the Views\n\n\nThe editor and front-end views should by now look fairly familiar:\n\n\n@model RelationSample.ViewModels.EditSponsorViewModel\n<fieldset>\n  <legend>Sponsor</legend>\n  <div class=\"editor-field\">\n    @Html.DropDownListFor(model => model.SponsorId,\n        Model.Customers\n            .Where(c => c.Id != Model.CustomerId)\n            .Select(c => new SelectListItem {\n                Selected = c.Id == Model.SponsorId,\n                Text = c.Name,\n                Value = c.Id.ToString()\n            }),\n        \"Choose a customer...\")\n    @Html.ValidationMessageFor(model => model.SponsorId)\n  </div>\n</fieldset>\n\n\n\n\n\nNote:\n Again, we are assuming a small number of customers. In a real scenario where there are too many customers to be handled in a drop-down-list, it would be possible to adapt the code in this sample by changing among other things the kind of UI that is used to select the sponsor customer.\n\n\n\n\nThe front-end view is as follows:\n\n\n@if (Model.Sponsor != null) {\n  <text>Customer sponsored by @Model.SponsorName.</text>\n}\n\n\n\nOf course, the placement file also needs to be updated:\n\n\n<Placement>\n    <Place Parts_Address_Edit=\"Content:10\"/>\n    <Place Parts_Address=\"Content:10\"/>\n    <Place Parts_Rewards_Edit=\"Content:11\"/>\n    <Place Parts_Rewards=\"Content:11\"/>\n    <Place Parts_Sponsor_Edit=\"Content:12\"/>\n    <Place Parts_Sponsor=\"Content:12\"/>\n</Placement>\n\n\n\nUsing the Sponsor Part\n\n\nWe can now go back to the Customer type definition and add our new part. Now when we create a new customer, we can choose his sponsor:\n\n\n\n\nOn the front-end, the sponsor now also appears:\n\n\n\n\nAccessing NHibernate Configuration directly\n\n\nFor most relationships these conventions should create and auto-map your data model appropriately. However, for more complex data models you may find that it's necessary to access the NHibernate configuration directly in order to appropriately map classes. You can do this by implementing the ISessionConfigurationEvents interface like so:\n\n\nusing FluentNHibernate.Automapping;\nusing FluentNHibernate.Cfg;\nusing NHibernate.Cfg;\nusing Orchard.Data;\nusing Orchard.Utility;\n\nnamespace DataMapping.Example\n{\n    public class Mappings : ISessionConfigurationEvents\n    {\n        public void Created(FluentConfiguration cfg, AutoPersistenceModel defaultModel)\n        {\n            //Many-to-many mapping example\n            defaultModel.Override<ClassA>(x => x.HasManyToMany(y => y.ClassB).Cascade.All()\n                .Table(\"DataMapping_Example_ClassAClassBCrossReferenceTable\"));\n\n            //One-to-One example\n            defaultModel.Override<ClassA>(x => x.HasOne(y => y.ClassB));\n\n        }\n\n        public void Prepared(FluentConfiguration cfg) {}\n\n        public void Building(Configuration cfg) {}\n\n        public void Finished(Configuration cfg) {}\n\n        public void ComputingHash(Hash hash) {}\n    }\n}\n\n\n\nConclusion\n\n\nThis topic should show the way for the creation of complex content parts involving arbitrary data relations. There is actually not much to it, as the system already knows how to persist and bind such complex objects. Rather, it's a matter of building the model according to the conventions in place.\n\n\nYou may download the code for this topic from this link: \nOrchard.Module.RelationSample.0.5.0.zip",
            "title": "Creating _1-N_ and _N-N_ Relations"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#building-a-1-n-relationship",
            "text": "The model that we're going to build here consists of an Address part that can be attached for example to a Customer content type. The address part has a street address, a zip code, a city name and a state. The state is what we are going to model as a 1-n relationship to a table of states.   Note: this is clearly over-normalized, as a state in an address would usually be sufficiently well represented by a simple two-letter state code. The UI can then take care of representing the choice of that code as a constrained choice in a list of states. We are not claiming what we are building here is the correct way to represent a state in an address, but that the process exposed here is representative of what you'd follow to build a real-world 1-n association in Orchard.",
            "title": "Building a 1-N Relationship"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#modeling-the-address-part",
            "text": "Here is the code for the  Address  part:  using Orchard.ContentManagement;\n\nnamespace RelationSample.Models {\n    public class AddressPart : ContentPart<AddressPartRecord> {\n        public string Address {\n            get { return Retrieve(r => r.Address); }\n            set { Store(r => r.Address, value); }\n        }\n\n        public string City {\n            get { return Retrieve(r => r.City); }\n            set { Store(r => r.City, value); }\n        }\n\n        public StateRecord State {\n            get {\n                var rawStateRecord = Retrieve<string>(\"StateRecord\");\n                return StateRecord.DeserializeStateRecord(rawStateRecord);\n            }\n            set {\n                var serializedStateRecord = StateRecord.SerializeStateRecord(value);\n                Store(\"StateRecord\", serializedStateRecord);\n            }\n        }\n\n        public string Zip {\n            get { return Retrieve(r => r.Zip); }\n            set { Store(r => r.Zip, value); }\n        }\n    }\n}  This uses stores the data in the infoset and in a database record. However you can only store simple datatypes in the infoset so you can see that  State  field runs some extra code to encode the class into a string.   All properties in the  AddressPart  are proxies to the record properties:  using Orchard.ContentManagement.Records;\n\nnamespace RelationSample.Models {\n    public class AddressPartRecord : ContentPartRecord {\n        public virtual string Address { get; set; }\n        public virtual string City { get; set; }\n        public virtual StateRecord StateRecord { get; set; }\n        public virtual string Zip { get; set; }\n    }\n}  The state record class itself has a two-letter code and a name. It also has methods to serialize and deserialize its data into a string so that the  AddressPart  above can store its data in the infoset.  namespace RelationSample.Models {\n    public class StateRecord {\n        public virtual int Id { get; set; }\n        public virtual string Code { get; set; }\n        public virtual string Name { get; set; }\n\n        public static StateRecord DeserializeStateRecord(string rawStateRecord) {\n            if (rawStateRecord == null) {\n                return new StateRecord();\n            }\n\n            var stateRecordArray = rawStateRecord.Split(new[] { ',' });\n\n            return new StateRecord() {\n                Id = String.IsNullOrEmpty(stateRecordArray[0]) ? 0 : Int32.Parse(stateRecordArray[0]),\n                Code = stateRecordArray[1],\n                Name = stateRecordArray[2]\n            };\n        }\n\n        public static string SerializeStateRecord(StateRecord stateRecord) {\n            if(stateRecord == null) {\n                return \"\";\n            }\n\n            return String.Join(\",\", stateRecord.Id, stateRecord.Code, stateRecord.Name);\n        }            \n    }\n}  Here is a representation of what we just showed in code:",
            "title": "Modeling the Address Part"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#creating-the-database-tables-and-part",
            "text": "The database structure for the model we just built can be created from a migration:  public int Create() {\n    SchemaBuilder.CreateTable(\"AddressPartRecord\",\n        table => table\n            .ContentPartRecord()\n            .Column<string>(\"Address\")\n            .Column<string>(\"City\")\n            .Column<int>(\"StateRecord_Id\")\n            .Column<string>(\"Zip\")\n        );\n\n    SchemaBuilder.CreateTable(\"StateRecord\",\n        table => table\n            .Column<int>(\"Id\", column => column.PrimaryKey().Identity())\n            .Column<string>(\"Code\", column => column.WithLength(2))\n            .Column<string>(\"Name\")\n        );\n\n    ContentDefinitionManager.AlterPartDefinition(\"AddressPart\",\n        builder => builder.Attachable());\n\n    return 1;\n}  This migration creates an AddressPartRecord table that is a content part record (this gets us the default fields that a content part needs). It adds columns for address, city and zip that are going to be auto-mapped to our record's properties.  The interesting column here is StateRecord_Id. As you can see, its type is the same as the type of the Id column of the StateRecord class, because the system will be able to recognize this as a foreign key and to map that integer value to a StateRecord property by just following the relation. It is important here that the name of the column that will represent the relation is the name of the column on the \"1\" end of the relation, followed by an underscore and the name of the column of the \"n\" end of the relation.  There is nothing remarkable on the StateRecord table: it's just mapping Id to be the primary key and constraining the Code column to be 2 characters long.  The last statement before the return in the migration is declaring the AddressPart and making it attachable. That will enable us to attach it to any content type.",
            "title": "Creating the Database Tables and Part"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#populating-the-state-table",
            "text": "Note: this section is included for completeness of the sample code but is far from essential to understanding how to implement relationships in Orchard. Please consider it as sample data generation. If you're following along and want to import this data you can find code in the  migrations.cs  file. This is included in the downloadable source code example link at the end of this guide.   Because the list of states is going to be relatively stable, I did not make them content items (although that would be entirely possible with just a little more work). Instead, I'm populating the table with a list of states right in the migration code. The migration class has a reference to the state repository:  private readonly IRepository<StateRecord> _stateRepository;\n[...]\npublic RelationSampleDataMigration(IRepository<StateRecord> stateRepository) {\n    _stateRepository = stateRepository;\n}  It also has the list of states to add to the database:  private readonly IEnumerable<StateRecord> _states =\nnew List<StateRecord> {\n    new StateRecord {Code = \"AL\", Name = \"Alabama\"},\n    new StateRecord {Code = \"AK\", Name = \"Alaska\"},\n[...]\n    new StateRecord {Code = \"WS\", Name = \"Western Australia\"},\n};  The population of the table is done by the following code:  public int UpdateFrom1() {\n    if (_stateRepository == null)\n        throw new InvalidOperationException(\"Couldn't find state repository.\");\n    foreach (var state in _states) {\n        _stateRepository.Create(state);\n    }\n    return 2;\n}",
            "title": "Populating the State Table"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#the-address-part-handler",
            "text": "The handler for the address part is rather uninteresting and just wires up the repository:  using Orchard.Data;\nusing Orchard.ContentManagement.Handlers;\nusing RelationSample.Models;\n\nnamespace RelationSample.Handlers {\n    public class AddressPartHandler : ContentHandler {\n        public AddressPartHandler(IRepository<AddressPartRecord> repository) {\n            Filters.Add(StorageFilter.For(repository));\n        }\n    }\n}",
            "title": "The Address Part Handler"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#the-address-part-driver",
            "text": "The driver is more interesting as it prepares the shapes for rendering and handles posted back admin forms.  using JetBrains.Annotations;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Drivers;\nusing RelationSample.Models;\nusing RelationSample.Services;\nusing RelationSample.ViewModels;\n\nnamespace RelationSample.Drivers {\n    [UsedImplicitly]\n    public class AddressPartDriver : ContentPartDriver<AddressPart> {\n        private readonly IAddressService _addressService;\n\n        private const string TemplateName = \"Parts/Address\";\n\n        public AddressPartDriver(IAddressService addressService) {\n            _addressService = addressService;\n        }\n\n        protected override string Prefix {\n            get { return \"Address\"; }\n        }\n\n        protected override DriverResult Display(\n            AddressPart part,\n            string displayType,\n            dynamic shapeHelper) {\n\n            return ContentShape(\"Parts_Address\",\n                            () => shapeHelper.Parts_Address(\n                                ContentPart: part,\n                                Address: part.Address,\n                                City: part.City,\n                                Zip: part.Zip,\n                                StateCode: part.State.Code,\n                                StateName: part.State.Name));\n        }\n\n        protected override DriverResult Editor(\n            AddressPart part,\n            dynamic shapeHelper) {\n\n            return ContentShape(\"Parts_Address_Edit\",\n                    () => shapeHelper.EditorTemplate(\n                        TemplateName: TemplateName,\n                        Model: BuildEditorViewModel(part),\n                        Prefix: Prefix));\n        }\n\n        protected override DriverResult Editor(\n            AddressPart part,\n            IUpdateModel updater,\n            dynamic shapeHelper) {\n\n            var model = new EditAddressViewModel();\n            if (updater.TryUpdateModel(model, Prefix, null, null))\n            {\n                if (part.ContentItem.Id != 0)\n                {\n                    _addressService.UpdateAddressForContentItem(\n                        part.ContentItem, model);\n                }\n            }\n\n            return Editor(part, shapeHelper);\n        }\n\n        private EditAddressViewModel BuildEditorViewModel(AddressPart part) {\n            var avm = new EditAddressViewModel {\n                Address = part.Address,\n                City = part.City,\n                Zip = part.Zip,\n                States = _addressService.GetStates()\n            };\n            if (part.State != null) {\n                avm.StateCode = part.State.Code;\n                avm.StateName = part.State.Name;\n            }\n            return avm;\n        }\n    }\n}  When displaying on the front-end, we prepare a Parts_Address shape that has a reference to the original part (although that is not necessary), all the part properties flattened out and the state is available as both a code and a name.  When in the admin UI, we build shapes with a statically-typed view model because these are still easier to use when using form fields and MVC model binding. That view model, like the shape used on the front-end, has a flattened view of the data that we need to display, but it also has a full list of all the available states, that the view will use to render the state drop-down list:  using System.Collections.Generic;\nusing RelationSample.Models;\n\nnamespace RelationSample.ViewModels {\n    public class EditAddressViewModel {\n        public string Address { get; set; }\n        public string City { get; set; }\n        public string StateCode { get; set; }\n        public string StateName { get; set; }\n        public string Zip { get; set; }\n        public IEnumerable<StateRecord> States { get; set; }\n    }\n}  The last thing to notice in the driver is that the Editor override that handles postbacks is just using  updater.TryUpdateModel() , which is enough to incorporate the submitted form values onto the view model. This is followed by a call into the address service class which will update the actual content part data with the updated model.",
            "title": "The Address Part Driver"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#the-address-service-class",
            "text": "The address service class takes a dependency on the state repository in order to be able to query for the full list of states. Its other method,  UpdateAddressForContentItem , copies an EditAddressViewModel onto the address content part of a content item. It does so by looking up a state record from the state repository using the state code from the model.  using System.Collections.Generic;\nusing System.Linq;\nusing Orchard;\nusing Orchard.ContentManagement;\nusing Orchard.Data;\nusing RelationSample.Models;\nusing RelationSample.ViewModels;\n\nnamespace RelationSample.Services {\n    public interface IAddressService : IDependency {\n        void UpdateAddressForContentItem(\n            ContentItem item, EditAddressViewModel model);\n        IEnumerable<StateRecord> GetStates();\n    }\n\n    public class AddressService : IAddressService {\n        private readonly IRepository<StateRecord> _stateRepository;\n\n        public AddressService(IRepository<StateRecord> stateRepository) {\n            _stateRepository = stateRepository;\n        }\n\n        public void UpdateAddressForContentItem(\n            ContentItem item,\n            EditAddressViewModel model) {\n\n            var addressPart = item.As<AddressPart>();\n            addressPart.Address = model.Address;\n            addressPart.City = model.City;\n            addressPart.Zip = model.Zip;\n            addressPart.State = _stateRepository.Get(\n                s => s.Code == model.StateCode);\n        }\n\n        public IEnumerable<StateRecord> GetStates() {\n            return _stateRepository.Table.ToList();\n        }\n    }\n}",
            "title": "The Address Service Class"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#building-the-views",
            "text": "",
            "title": "Building the Views"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#the-front-end-view",
            "text": "The front-end view for the part is straightforward as it's just displaying the properties of the shape:  <p class=\"adr\">\n    <div class=\"street-address\">@Model.Address</div>\n    <span class=\"locality\">@Model.City</span>,\n    <span class=\"region\">@Model.StateCode</span>\n    <span class=\"postal-code\">@Model.Zip</span>\n</p>  We are using the vcard microformat in this template so the address can get picked-up by consumers that understand this format.",
            "title": "The Front-End View"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#the-editor-view",
            "text": "The editor view is also relatively straightforward, with just the editor for the state being of a little more interest:  @model RelationSample.ViewModels.EditAddressViewModel\n<fieldset>\n  <legend>Address</legend>\n\n  <div class=\"editor-label\">\n    @Html.LabelFor(model => model.Address, T(\"Street Address\"))\n  </div>\n  <div class=\"editor-field\">\n    @Html.TextAreaFor(model => model.Address)\n    @Html.ValidationMessageFor(model => model.Address)\n  </div>\n\n  <div class=\"editor-label\">\n    @Html.LabelFor(model => model.City, T(\"City\"))\n  </div>\n  <div class=\"editor-field\">\n    @Html.TextBoxFor(model => model.City)\n    @Html.ValidationMessageFor(model => model.City)\n  </div>\n\n  <div class=\"editor-label\">\n    @Html.LabelFor(model => model.StateCode, T(\"State\"))\n  </div>\n  <div class=\"editor-field\">\n    @Html.DropDownListFor(model => model.StateCode,\n                      Model.States.Select(s => new SelectListItem {\n                          Selected = s.Code == Model.StateCode,\n                          Text = s.Code + \" \" + s.Name,\n                          Value = s.Code\n                      }),\n                      \"Choose a state...\")\n    @Html.ValidationMessageFor(model => model.StateCode)\n  </div>\n\n  <div class=\"editor-label\">\n    @Html.LabelFor(model => model.Zip, T(\"Zip\"))\n  </div>\n  <div class=\"editor-field\">\n    @Html.TextBoxFor(model => model.Zip)\n    @Html.ValidationMessageFor(model => model.Zip)\n  </div>\n</fieldset>  The DropDownListFor method takes an expression for the property to represent, and a list of SelectListItems that we build on the fly from the complete list of states and what we know of the current state for that address (notice the expression for Selected).",
            "title": "The Editor View"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#the-placement-file",
            "text": "Finally, we need a placement file to determine the default position of our part within a larger content type:  <Placement>\n    <Place Parts_Address_Edit=\"Content:10\"/>\n    <Place Parts_Address=\"Content:10\"/>\n</Placement>",
            "title": "The Placement File"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#using-the-address-part",
            "text": "We can now go into the \"Features\" admin page and enable the RelationSample feature under the Sample category. Once this is done we can go to \"Content Types\" and create a new \"Customer\" content type. Add the Common and Address parts, as well as a text field named \"Name\".   We now have a new \"Customer\" menu entry under \"New\", enabling us to create a new customer:   The customer can be displayed on the front-end as well.",
            "title": "Using the Address Part"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#building-an-n-n-relationship",
            "text": "Building a n-n relationship in Orchard relies on the same principles as what we did for the 1-n relationship. The main difference is that instead of having one foreign key on the part record, we have an intermediary object for the relationship that has two foreign keys to the records. This is of course close to the way this is done in relational databases.  In this section, we are going to build a part that can record an arbitrary number of associations with reward programs for our customers.",
            "title": "Building an N-N Relationship"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#modeling-the-rewards-part",
            "text": "The rewards part and its association with reward programs are modeled as follows:",
            "title": "Modeling the Rewards Part"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#the-rewards-part-record",
            "text": "The part record has just one property, the collection of rewards:  using System.Collections.Generic;\nusing Orchard.ContentManagement.Records;\n\nnamespace RelationSample.Models {\n    public class RewardsPartRecord : ContentPartRecord {\n        public RewardsPartRecord() {\n            Rewards = new List<ContentRewardProgramsRecord>();\n        }\n        public virtual IList<ContentRewardProgramsRecord> Rewards { get; set; }\n    }\n}",
            "title": "The Rewards Part Record"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#the-rewards-part",
            "text": "The rewards part itself proxies the Rewards property to the record:  using System.Collections.Generic;\nusing System.Linq;\nusing Orchard.ContentManagement;\n\nnamespace RelationSample.Models {\n    public class RewardsPart : ContentPart<RewardsPartRecord> {\n        public IEnumerable<RewardProgramRecord> Rewards {\n            get {\n                return Record.Rewards.Select(r => r.RewardProgramRecord);\n            }\n        }\n    }\n}",
            "title": "The Rewards Part"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#the-reward-program-record",
            "text": "Reward programs have a name and a discount rate:  namespace RelationSample.Models {\n    public class RewardProgramRecord {\n        public virtual int Id { get; set; }\n        public virtual string Name { get; set; }\n        public virtual double Discount { get; set; }\n    }\n}",
            "title": "The Reward Program Record"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#the-association-record",
            "text": "Finally, the association record has a reference to a reward part record and a reference to a reward program:  namespace RelationSample.Models {\n    public class ContentRewardProgramsRecord {\n        public virtual int Id { get; set; }\n        public virtual RewardsPartRecord RewardsPartRecord { get; set; }\n        public virtual RewardProgramRecord RewardProgramRecord { get; set; }\n    }\n}",
            "title": "The Association Record"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#creating-the-database-tables-and-record",
            "text": "Here is the migration:  public int UpdateFrom2() {\n    SchemaBuilder.CreateTable(\"RewardsPartRecord\",\n        table => table\n            .ContentPartRecord()\n        );\n\n    SchemaBuilder.CreateTable(\"RewardProgramRecord\",\n        table => table\n            .Column<int>(\"Id\", column => column.PrimaryKey().Identity())\n            .Column<string>(\"Name\")\n            .Column<double>(\"Discount\")\n        );\n\n    SchemaBuilder.CreateTable(\"ContentRewardProgramsRecord\",\n        table => table\n            .Column<int>(\"Id\", column => column.PrimaryKey().Identity())\n            .Column<int>(\"RewardsPartRecord_Id\")\n            .Column<int>(\"RewardProgramRecord_Id\")\n        );\n\n    ContentDefinitionManager.AlterPartDefinition(\n        \"RewardsPart\",\n        builder => builder.Attachable());\n\n    return 3;\n}  This code creates the three tables we need to persist the three records that we just modeled. It also declares the RewardsPart and makes it attachable.  As with addresses and states, you can see the convention for relations in action here: the columns for the association record table are of type integer (the type of the id of each of the associated tables) and bears the name of the linked table, an underscore and the name of the key column of the associated table.",
            "title": "Creating the Database Tables and Record"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#populating-the-reward-program-table",
            "text": "Like we did with states, we pre-populate the reward program table from the migration class. In a real world scenario, the rewards could be content items and you could have a specific management screen for them. There would be nothing specific about that coming from the fact that these items happen to be at one end of a n-n relation.  private readonly IRepository<RewardProgramRecord> _rewardProgramRepository;\n[...]\nprivate readonly IEnumerable<RewardProgramRecord> _rewardPrograms =\n    new List<RewardProgramRecord> {\n        new RewardProgramRecord {Name = \"Senior\", Discount = 0.05},\n        new RewardProgramRecord {Name = \"Family\", Discount = 0.10},\n        new RewardProgramRecord {Name = \"Member\", Discount = 0.15},\n    };\n[...]\npublic int UpdateFrom3() {\n    if (_rewardProgramRepository == null)\n        throw new InvalidOperationException(\n            \"Couldn't find reward program repository.\");\n    foreach (var rewardProgram in _rewardPrograms) {\n        _rewardProgramRepository.Create(rewardProgram);\n    }\n    return 4;\n}",
            "title": "Populating the Reward Program Table"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#the-reward-handler",
            "text": "There is nothing remarkable with the driver for this part, which is just wiring the repository:  using Orchard.Data;\nusing Orchard.ContentManagement.Handlers;\nusing RelationSample.Models;\n\nnamespace RelationSample.Handlers {\n    public class RewardsPartHandler : ContentHandler {\n        public RewardsPartHandler(IRepository<RewardsPartRecord> repository) {\n            Filters.Add(StorageFilter.For(repository));\n        }\n    }\n}",
            "title": "The Reward Handler"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#the-reward-driver",
            "text": "The driver is also surprisingly unsurprising given the requirement to persist the n-n relationship:  using System.Linq;\nusing JetBrains.Annotations;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Drivers;\nusing RelationSample.Models;\nusing RelationSample.Services;\nusing RelationSample.ViewModels;\n\nnamespace RelationSample.Drivers {\n    [UsedImplicitly]\n    public class RewardsPartDriver : ContentPartDriver<RewardsPart> {\n        private readonly IRewardService _rewardService;\n\n        private const string TemplateName = \"Parts/Rewards\";\n\n        public RewardsPartDriver(IRewardService rewardService) {\n            _rewardService = rewardService;\n        }\n\n        protected override string Prefix {\n            get { return \"Rewards\"; }\n        }\n\n        protected override DriverResult Display(\n            RewardsPart part,\n            string displayType,\n            dynamic shapeHelper) {\n\n            return ContentShape(\"Parts_Rewards\",\n                            () => shapeHelper.Parts_Rewards(\n                                ContentPart: part,\n                                Rewards: part.Rewards));\n        }\n\n        protected override DriverResult Editor(\n            RewardsPart part,\n            dynamic shapeHelper) {\n\n            return ContentShape(\"Parts_Rewards_Edit\",\n                    () => shapeHelper.EditorTemplate(\n                        TemplateName: TemplateName,\n                        Model: BuildEditorViewModel(part),\n                        Prefix: Prefix));\n        }\n\n        protected override DriverResult Editor(\n            RewardsPart part,\n            IUpdateModel updater,\n            dynamic shapeHelper) {\n\n            var model = new EditRewardsViewModel();\n            updater.TryUpdateModel(model, Prefix, null, null);\n\n            if (part.ContentItem.Id != 0) {\n                _rewardService.UpdateRewardsForContentItem(\n                    part.ContentItem, model.Rewards);\n            }\n\n            return Editor(part, shapeHelper);\n        }\n\n        private EditRewardsViewModel BuildEditorViewModel(RewardsPart part) {\n            var itemRewards = part.Rewards.ToLookup(r => r.Id);\n            return new EditRewardsViewModel {\n                Rewards = _rewardService.GetRewards().Select(\n                    r => new RewardProgramEntry {\n                        RewardProgram = r,\n                        IsChecked = itemRewards.Contains(r.Id)\n                    }).ToList()\n            };\n        }\n    }\n}  Like with the address part, we are fetching all the reward programs and putting them on the editor view model for the template to display as checkboxes. In BuildEditorViewModel, you can see that we build the current rewards as a lookup and then use that to determine the checked state of each reward program.  Here is the editor view model:  using System.Collections.Generic;\nusing RelationSample.Models;\n\nnamespace RelationSample.ViewModels {\n    public class EditRewardsViewModel {\n        public IList<RewardProgramEntry> Rewards { get; set; }\n    }\n\n    public class RewardProgramEntry {\n        public RewardProgramRecord RewardProgram { get; set; }\n        public bool IsChecked { get; set; }\n    }\n}   Note: we are making the assumption here that there are only a few reward programs. If you are modeling a relationship with a large number of records on both sides of the relationship, the basic principles and models exposed here still stand but you'll have to adapt and optimize the code. In particular, using checkboxes to select the associated records is the best UI solution for small numbers of records but it won't scale well to more than a few dozens of records. Instead, you'd probably need to use a search UI of sorts and an Add/Remove pattern.",
            "title": "The Reward Driver"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#the-rewards-service",
            "text": "The rewards service is responsible for driving the relatively complex task of updating the database for the new values for the relation:  using System.Collections.Generic;\nusing System.Linq;\nusing Orchard;\nusing Orchard.ContentManagement;\nusing Orchard.Data;\nusing RelationSample.Models;\nusing RelationSample.ViewModels;\n\nnamespace RelationSample.Services {\n    public interface IRewardService : IDependency {\n        void UpdateRewardsForContentItem(\n            ContentItem item,\n            IEnumerable<RewardProgramEntry> rewards);\n        IEnumerable<RewardProgramRecord> GetRewards();\n    }\n\n    public class RewardService : IRewardService {\n        private readonly IRepository<RewardProgramRecord>\n            _rewardProgramRepository;\n        private readonly IRepository<ContentRewardProgramsRecord>\n            _contentRewardRepository;\n\n        public RewardService(\n            IRepository<RewardProgramRecord> rewardProgramRepository,\n            IRepository<ContentRewardProgramsRecord> contentRewardRepository) {\n\n            _rewardProgramRepository = rewardProgramRepository;\n            _contentRewardRepository = contentRewardRepository;\n        }\n\n        public void UpdateRewardsForContentItem(\n            ContentItem item,\n            IEnumerable<RewardProgramEntry> rewards) {\n\n            var record = item.As<RewardsPart>().Record;\n            var oldRewards = _contentRewardRepository.Fetch(\n                r => r.RewardsPartRecord == record);\n            var lookupNew = rewards\n                .Where(e => e.IsChecked)\n                .Select(e => e.RewardProgram)\n                .ToDictionary(r => r, r => false);\n            // Delete the rewards that are no longer there\n            // and mark the ones that should stay\n            foreach(var contentRewardProgramsRecord in oldRewards) {\n                if (lookupNew.ContainsKey(\n                    contentRewardProgramsRecord.RewardProgramRecord)) {\n\n                    lookupNew[contentRewardProgramsRecord.RewardProgramRecord]\n                        = true;\n                }\n                else {\n                    _contentRewardRepository.Delete(contentRewardProgramsRecord);\n                }\n            }\n            // Add the new rewards\n            foreach(var reward in lookupNew.Where(kvp => !kvp.Value)\n                                           .Select(kvp => kvp.Key)) {\n                _contentRewardRepository.Create(new ContentRewardProgramsRecord {\n                    RewardsPartRecord = record,\n                    RewardProgramRecord = reward\n                });\n            }\n        }\n\n        public IEnumerable<RewardProgramRecord> GetRewards() {\n            return _rewardProgramRepository.Table.ToList();\n        }\n    }\n}   Note: again, this is designed for small numbers of reward programs. If you have larger models and have adopted an Add/Remove pattern talked about in the previous note, the code for the service actually becomes simpler as it executes lower-level operations that affect one program at a time rather than try to synchronize the whole collection at once.",
            "title": "The Rewards Service"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#building-the-views_1",
            "text": "",
            "title": "Building the Views"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#the-front-end-view_1",
            "text": "The front-end view is just displaying the list of rewards as an unordered list:  <h4>@T(\"Rewards\"):</h4>\n<ul>\n@foreach (var reward in Model.Rewards) {\n    <li>@string.Format(\"{0} ({1:P1})\", reward.Name,  -reward.Discount)</li>\n}\n</ul>",
            "title": "The Front-End View"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#the-editor-view_1",
            "text": "The editor view is a little more remarkable:  @model RelationSample.ViewModels.EditRewardsViewModel\n<fieldset><legend>@T(\"Rewards\")</legend>\n<ul>\n@{\n var rewardIndex = 0;\n}\n@foreach (var reward in Model.Rewards) {\n    <li><input type=\"hidden\" value=\"@reward.RewardProgram.Id\"\n        name=\"@Html.FieldNameFor(m => m.Rewards[rewardIndex].RewardProgram.Id)\"/>\n        <label for=\"@Html.FieldNameFor(m => m.Rewards[rewardIndex].IsChecked)\">\n            <input type=\"checkbox\" value=\"true\"\n                name=\"@Html.FieldNameFor(m => m.Rewards[rewardIndex].IsChecked)\"\n                id=\"@Html.FieldNameFor(m => m.Rewards[rewardIndex].IsChecked)\"\n                @if (reward.IsChecked) {<text>checked=\"checked\"</text>}/>\n            @string.Format(\"{0} ({1:P1})\",\n                reward.RewardProgram.Name,\n                -reward.RewardProgram.Discount))\n        </label>\n        @{rewardIndex++;}\n    </li>\n}\n</ul>\n</fieldset>  Notice how the check-boxes use Html.FieldNameFor. This will ensure that they will have a name that the model binder will be able to understand and correctly bind when it is posted back.  Also noticeable is the hidden input, which is a standard workaround for the peculiar way in which HTML check-boxes don't post anything when not checked. The model binder knows how to use the information for both the hidden input and the check-box to determine the Boolean values to set.  Of course, any variation from that naming scheme would make the binding fail.",
            "title": "The Editor View"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#the-placement-file_1",
            "text": "For the parts to appear at all in the UI, we need to update our placement.info file:  <Placement>\n    <Place Parts_Address_Edit=\"Content:10\"/>\n    <Place Parts_Address=\"Content:10\"/>\n    <Place Parts_Rewards_Edit=\"Content:11\"/>\n    <Place Parts_Rewards=\"Content:11\"/>\n</Placement>",
            "title": "The Placement File"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#using-the-rewards-part",
            "text": "If you haven't used the application's admin UI since you wrote the migration, it should now warn you that a feature needs to be upgraded. That is our sample feature, as the system noticed the latest executed migration does not match the highest available. Go to the features screen, locate the RelationSample and click \"Update\".  In order to use the new part on our customer content items, we need to add it to the type. Go to the \"Content Types\" screen and click \"Edit\" next to \"Customer\". Click \"Add\" next to \"Parts\", check the Rewards part and save.   If you go back to an existing customer's edit screen or create a new one, you'll see a screen such as this:   On the front-end, the customer now looks like this:",
            "title": "Using the Rewards Part"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#building-a-relation-between-content-items",
            "text": "Our third example will establish a relation between content items, which is a step up from our previous examples which were establishing relations between records. Doing the same thing with items is not fundamentally very different, but there are a couple of caveats that justify a specific example.  The example that we will build is a Sponsor part that records that a specific customer was sponsored by another.",
            "title": "Building a Relation Between Content Items"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#modeling-the-sponsor-part",
            "text": "The Sponsor part will consist of a single Sponsor property. This time, we will use a lazy field so that its content only gets fetched when it is needed.  using Orchard.ContentManagement;\nusing Orchard.Core.Common.Utilities;\n\nnamespace RelationSample.Models {\n    public class SponsorPart : ContentPart<SponsorPartRecord> {\n        private readonly LazyField<IContent> _sponsor = new LazyField<IContent>();\n\n        public LazyField<IContent> SponsorField { get { return _sponsor; } }\n\n        public IContent Sponsor {\n            get { return _sponsor.Value; }\n            set { _sponsor.Value = value; }\n        }\n    }\n}  We will see how the lazy field gets set and populated when we look at the code for the handler.  The corresponding record is extremely simple:  using Orchard.ContentManagement;\nusing Orchard.ContentManagement.Records;\n\nnamespace RelationSample.Models {\n    public class SponsorPartRecord : ContentPartRecord {\n        public virtual ContentItemRecord Sponsor { get; set; }\n    }\n}",
            "title": "Modeling the Sponsor Part"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#building-the-database-table-and-part",
            "text": "The migration for this part is as follows:  public int UpdateFrom4() {\n\n    SchemaBuilder.CreateTable(\"SponsorPartRecord\",\n        table => table\n            .ContentPartRecord()\n            .Column<int>(\"Sponsor_Id\")\n        );\n\n    ContentDefinitionManager.AlterPartDefinition(\n        \"SponsorPart\", builder => builder.Attachable());\n\n    return 5;\n}  We are in known territory here: the table uses the convention that we have already applied twice in the previous examples, where the name of the column establishing the relation is the concatenation of the column names in both records.  We also make the new SponsorPart attachable, as usual.",
            "title": "Building the Database Table and Part"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#the-sponsor-handler",
            "text": "The handler is going to be a little more elaborate than usual, because of the use of lazy fields:  using Orchard.ContentManagement;\nusing Orchard.Data;\nusing Orchard.ContentManagement.Handlers;\nusing RelationSample.Models;\n\nnamespace RelationSample.Handlers {\n    public class SponsorPartHandler : ContentHandler {\n        private readonly IContentManager _contentManager;\n\n        public SponsorPartHandler(\n            IRepository<SponsorPartRecord> repository,\n            IContentManager contentManager) {\n\n            Filters.Add(StorageFilter.For(repository));\n            _contentManager = contentManager;\n\n            OnInitializing<SponsorPart>(PropertySetHandlers);\n            OnLoaded<SponsorPart>(LazyLoadHandlers);\n        }\n\n        void LazyLoadHandlers(LoadContentContext context, SponsorPart part) {\n            // add handlers that will load content just-in-time\n            part.SponsorField.Loader(() =>\n                part.Record.Sponsor == null ?\n                null : _contentManager.Get(part.Record.Sponsor.Id));\n        }\n\n        static void PropertySetHandlers(\n            InitializingContentContext context, SponsorPart part) {\n            // add handlers that will update records when part properties are set\n            part.SponsorField.Setter(sponsor => {\n                part.Record.Sponsor = sponsor == null\n                    ? null\n                    : sponsor.ContentItem.Record;\n                return sponsor;\n            });\n\n            // Force call to setter if we had already set a value\n            if (part.SponsorField.Value != null)\n                part.SponsorField.Value = part.SponsorField.Value;\n        }\n    }\n}  The storage filter is as usual setting up the repository of sponsor part records, but we also have OnInitializing and OnLoaded event handlers that will respectively set-up the setter for the lazy field and the loader of the value that will be executed the first time the field is accessed.  At loading time, we look at the record, and if there is a sponsor we get the full content item from the content manager using the record's id.  The lazy field setter just sets the underlying record's Sponsor property.",
            "title": "The Sponsor Handler"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#the-driver",
            "text": "The driver is relying on the following view model:  using System.Collections.Generic;\nusing Orchard.ContentManagement;\nusing RelationSample.Models;\n\nnamespace RelationSample.ViewModels {\n    public class EditSponsorViewModel {\n        public int CustomerId { get; set; }\n        public int SponsorId { get; set; }\n        public IEnumerable<CustomerViewModel> Customers { get; set; }\n    }\n\n    public class CustomerViewModel {\n        public int Id { get; set;}\n        public string Name { get; set;}\n    }\n}  Here is the code for the driver itself, which should by now seem very familiar:  using System.Linq;\nusing JetBrains.Annotations;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Drivers;\nusing RelationSample.Models;\nusing RelationSample.Services;\nusing RelationSample.ViewModels;\n\nnamespace RelationSample.Drivers {\n    [UsedImplicitly]\n    public class SponsorPartDriver : ContentPartDriver<SponsorPart> {\n        private readonly ICustomerService _customerService;\n\n        private const string TemplateName = \"Parts/Sponsor\";\n\n        public SponsorPartDriver(ICustomerService customerService) {\n            _customerService = customerService;\n        }\n\n        protected override string Prefix {\n            get { return \"Sponsor\"; }\n        }\n\n        protected override DriverResult Display(\n            SponsorPart part, string displayType, dynamic shapeHelper) {\n\n            return ContentShape(\"Parts_Sponsor\",\n                () => shapeHelper.Parts_Sponsor(\n                    ContentPart: part,\n                    Sponsor: part.Sponsor,\n                    SponsorName: _customerService.GetCustomerName(part.Sponsor)\n                    ));\n        }\n\n        protected override DriverResult Editor(\n            SponsorPart part, dynamic shapeHelper) {\n\n            return ContentShape(\"Parts_Sponsor_Edit\",\n                    () => shapeHelper.EditorTemplate(\n                        TemplateName: TemplateName,\n                        Model: BuildEditorViewModel(part),\n                        Prefix: Prefix));\n        }\n\n        protected override DriverResult Editor(\n            SponsorPart part, IUpdateModel updater, dynamic shapeHelper) {\n\n            var model = new EditSponsorViewModel();\n            updater.TryUpdateModel(model, Prefix, null, null);\n\n            if (part.ContentItem.Id != 0) {\n                _customerService.UpdateSponsorForContentItem(\n                    part.ContentItem, model);\n            }\n\n            return Editor(part, shapeHelper);\n        }\n\n        private EditSponsorViewModel BuildEditorViewModel(SponsorPart part) {\n            var itemSponsor = new EditSponsorViewModel {\n                CustomerId = part.ContentItem.Id,\n                Customers = _customerService.GetCustomers()\n            };\n            if (part.Sponsor != null) {\n                itemSponsor.SponsorId = part.Sponsor.Id;\n            }\n            return itemSponsor;\n        }\n    }\n}",
            "title": "The Driver"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#the-service-class",
            "text": "The driver is also using the following helper service:  using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Orchard;\nusing Orchard.ContentManagement;\nusing Orchard.Data;\nusing RelationSample.Models;\nusing RelationSample.ViewModels;\n\nnamespace RelationSample.Services {\n    public interface ICustomerService : IDependency {\n        void UpdateSponsorForContentItem(\n            ContentItem item, EditSponsorViewModel model);\n        string GetCustomerName(IContent customer);\n        IEnumerable<CustomerViewModel> GetCustomers();\n    }\n\n    public class CustomerService : ICustomerService {\n        private readonly IContentManager _contentManager;\n\n        public CustomerService(IContentManager contentManager) {\n            _contentManager = contentManager;\n        }\n\n        public void UpdateSponsorForContentItem(\n            ContentItem item, EditSponsorViewModel model) {\n\n            var sponsorPart = item.As<SponsorPart>();\n            sponsorPart.Sponsor = _contentManager.Get(model.SponsorId);\n        }\n\n        public string GetCustomerName(IContent customer) {\n            return customer.ContentItem.Parts\n                .SelectMany(p => p.Fields)\n                .Where(f => f.Name == \"Name\")\n                .First()\n                .Storage.Get<string>(null);\n        }\n\n        public IEnumerable<CustomerViewModel> GetCustomers() {\n            return _contentManager\n                .Query(\"Customer\")\n                .List()\n                .Select(ci => new CustomerViewModel {\n                    Id = ci.Id,\n                    Name = GetCustomerName(ci)\n                });\n        }\n    }\n}  The only notable thing here is the way we are assuming the content type has a \"Name\" field that we'll use to build the list of customers that will be used to build the UI to select the sponsor. The GetCustomerName is implementing this assumption. Of course, you could also have a Customer part that has a Name property, or you could use Routable and its Title.",
            "title": "The Service Class"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#building-the-views_2",
            "text": "The editor and front-end views should by now look fairly familiar:  @model RelationSample.ViewModels.EditSponsorViewModel\n<fieldset>\n  <legend>Sponsor</legend>\n  <div class=\"editor-field\">\n    @Html.DropDownListFor(model => model.SponsorId,\n        Model.Customers\n            .Where(c => c.Id != Model.CustomerId)\n            .Select(c => new SelectListItem {\n                Selected = c.Id == Model.SponsorId,\n                Text = c.Name,\n                Value = c.Id.ToString()\n            }),\n        \"Choose a customer...\")\n    @Html.ValidationMessageFor(model => model.SponsorId)\n  </div>\n</fieldset>   Note:  Again, we are assuming a small number of customers. In a real scenario where there are too many customers to be handled in a drop-down-list, it would be possible to adapt the code in this sample by changing among other things the kind of UI that is used to select the sponsor customer.   The front-end view is as follows:  @if (Model.Sponsor != null) {\n  <text>Customer sponsored by @Model.SponsorName.</text>\n}  Of course, the placement file also needs to be updated:  <Placement>\n    <Place Parts_Address_Edit=\"Content:10\"/>\n    <Place Parts_Address=\"Content:10\"/>\n    <Place Parts_Rewards_Edit=\"Content:11\"/>\n    <Place Parts_Rewards=\"Content:11\"/>\n    <Place Parts_Sponsor_Edit=\"Content:12\"/>\n    <Place Parts_Sponsor=\"Content:12\"/>\n</Placement>",
            "title": "Building the Views"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#using-the-sponsor-part",
            "text": "We can now go back to the Customer type definition and add our new part. Now when we create a new customer, we can choose his sponsor:   On the front-end, the sponsor now also appears:",
            "title": "Using the Sponsor Part"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#accessing-nhibernate-configuration-directly",
            "text": "For most relationships these conventions should create and auto-map your data model appropriately. However, for more complex data models you may find that it's necessary to access the NHibernate configuration directly in order to appropriately map classes. You can do this by implementing the ISessionConfigurationEvents interface like so:  using FluentNHibernate.Automapping;\nusing FluentNHibernate.Cfg;\nusing NHibernate.Cfg;\nusing Orchard.Data;\nusing Orchard.Utility;\n\nnamespace DataMapping.Example\n{\n    public class Mappings : ISessionConfigurationEvents\n    {\n        public void Created(FluentConfiguration cfg, AutoPersistenceModel defaultModel)\n        {\n            //Many-to-many mapping example\n            defaultModel.Override<ClassA>(x => x.HasManyToMany(y => y.ClassB).Cascade.All()\n                .Table(\"DataMapping_Example_ClassAClassBCrossReferenceTable\"));\n\n            //One-to-One example\n            defaultModel.Override<ClassA>(x => x.HasOne(y => y.ClassB));\n\n        }\n\n        public void Prepared(FluentConfiguration cfg) {}\n\n        public void Building(Configuration cfg) {}\n\n        public void Finished(Configuration cfg) {}\n\n        public void ComputingHash(Hash hash) {}\n    }\n}",
            "title": "Accessing NHibernate Configuration directly"
        },
        {
            "location": "/Documentation/Creating-1-n-and-n-n-relations/#conclusion",
            "text": "This topic should show the way for the creation of complex content parts involving arbitrary data relations. There is actually not much to it, as the system already knows how to persist and bind such complex objects. Rather, it's a matter of building the model according to the conventions in place.  You may download the code for this topic from this link:  Orchard.Module.RelationSample.0.5.0.zip",
            "title": "Conclusion"
        },
        {
            "location": "/Documentation/Manifest-files/",
            "text": "In the Orchard CMS, modules and themes are important tools for extending and customizing an application. Every module and theme is required to have a manifest, which is a text file named \nmodule.txt\n or \ntheme.txt\n that resides in the root folder of the associated module or theme. A manifest stores metadata that Orchard uses to describe modules and themes to the system, such as name, version, description, author, and tags.\n\n\nThis topic is a reference for manifest files. If you create a custom module or theme, or if you write code that accesses modules or themes, you must understand the metadata fields in a manifest. The data in a manifest is structured into name-value pairs in the form \nField Name: Value\n. \n\n\nThe following sections describe the available fields in a manifest for themes and for modules. Because a theme is a type of module, many of the same metadata fields occur in both theme manifests and module manifests.\n\n\nModule manifest fields\n\n\nThe manifest for a module should be called \nmodule.txt\n and should be located in the root of the project. \n\n\nA module's manifest is made up of an overall description of the package itself and then an optional repeating section describing each of the individual features. \n\n\nThe module can be comprised of a default single feature or a group of individually defined features. This allows module developers to specify separate areas of the module and allow users to enable them on a per-feature basis.\n\n\nMain module.txt fields\n\n\nSome of the fields may be overridden if a module defines multiple features. These are detailed in the \nFeatures:\n sub-section fields\n table below.\n\n\n\n\n\n\n\n\nField Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nName\n\n\nOptional\nProvides a human-readable name for a module.\nIf a name is provided, it will be used as the module's display name in the \nOrchard Gallery\n and in the Orchard UI.\nIf a name is not provided in the manifest, the ID is used instead.\nNote: The ID of a module is generated internally from the name of the module's folder and is used for programmatic references to the module. For example, if the module is located in \n/Modules/Bing.Maps/\n its ID would be \nBing.Maps\n. To make things more friendly to the end user module developers should provide a name in the manifest such as \nBing Mapping Component\n or even \nBing Maps\n (notice that the \".\" is removed).\n\n\n\n\n\n\nPath\n\n\nOptional\nProvides a name that is used to build more readable URLs for routing purposes compared to URLs that are based on module names or ID values.\nIf a path is not provided, Orchard builds URLs based on the module's name (if one is provided) or on the ID. However, module names often have spaces, and ID values often have \".\" characters, neither of which result in very readable URLs.\nFor example, for the \nOrchard.ArchiveLater\n module, its name is \nArchive Later\n, and its ID is \nArchive.Later\n. In the manifest, a path is provided with the value of \nArchiveLater\n, which enables Orchard to build a more readable URL than the module name or the ID would.\nNote: If specified, the Path must be a valid URL segment. If you're unsure what this means the best bet is to stick with letters and numbers with no spaces.\n\n\n\n\n\n\nAntiForgery\n\n\nRequired\nPossible values are \nenabled\n or \ndisabled\n.\nA value that indicates whether request validation is enabled for a module.\n\n\n\n\n\n\nAuthor\n\n\nOptional\nThe developer of the module.\nThis can be an organization, individual, or a list of individuals.\n\n\n\n\n\n\nWebsite\n\n\nOptional\nThe URL for the website of the module developer.\n\n\n\n\n\n\nVersion\n\n\nRequired\nThe version number of the module in \nSemVer\n format.\nThe version information is displayed in the \nOrchard Gallery\n and in the Orchard UI.\nIt is also used to determine whether an update is available.\n\n\n\n\n\n\nOrchardVersion\n\n\nRequired\nThe minimum version of Orchard CMS that the module has been tested against.\n\n\n\n\n\n\nDescription\n\n\nOptional\nA brief summary of what the module does.\nThe description is used in the \nOrchard Gallery\n and in the Orchard UI.\nWill be overridden by the \nFeatureDescription\n field when present.\n\n\n\n\n\n\nDependencies\n\n\nRequired if the feature has dependencies. If all features are defined in the \nFeatures:\n subsection this field is not required.\nA comma-separated list of the application \nId\n values of all features that the specified feature depends on.\nNote: dependencies are \ncase sensitive\n.\n\n\n\n\n\n\nCategory\n\n\nOptional\nDefaults to \nuncategorized\n.\nThis field groups the module together in the Modules page of the Orchard admin dashboard. Related modules which have the same category are displayed together. The category field can be assigned one category. To aid in discoverability, module developers should review the Modules page of the Orchard admin dashboard and choose a related category from existing categories. If a relevant category doesn't exist modules can freely define a new category within this field.\n\n\n\n\n\n\nTags\n\n\nOptional\nA comma-separated lists of tags for the module.\nThe tags field allow users to find related modules in the \nOrchard Gallery\n.\n\n\n\n\n\n\nFeatureDescription\n\n\nOptional\nA description of the default feature in a module.\nIf the module has only a single feature, use either the \nFeatureDescription\n or \nDescription\n field to describe it. The \nFeatureDescription\n will override the \nDescription\n field.\nIf the module has multiple features and one of the features is the default, use the \nFeatureDescription\n field to describe the default feature. The \nFeatureDescription\n will override the \nDescription\n field.\nIf the module has multiple features and doesn't define a default feature then leave this field out and follow the instructions in its description down in the \nFeatures:\n table below.\n\n\n\n\n\n\nFeatures\n\n\nOptional\nA special repeating section of the manifest which allows a module to define multiple features within a module.\nSupports several sub-fields as described by the table in the next section.\nThe features section should be placed at the end of the manifest.\n\n\n\n\n\n\n\n\nModule.txt \nFeatures:\n sub-section fields\n\n\nIf a module provides multiple individual features within a single module then the repeating \nFeatures:\n sub-section should be used. It allows module developers to specify separate manifest fields for each individual feature. These individual features can then be enabled and disabled separately by end users.\n\n\nThe \nFeatures:\n field doesn't have any assigned value. It is a placemarker field that indicates the beginning of a repeating list of features.\n\n\nExamples of the formatting to be used for this part of the manifest can be found in the next section.\n\n\n\n\n\n\n\n\nField Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFeatureId\n\n\nRequired\nBecause the feature is already contained within the module ID module developers need to supply a unique ID for Orchard to use internally as a reference.\nThe \nFeatureId\n should take the form of the name of the feature with no punctuation and full stops where spaces would be.\nThis is a special field. The line must begin with either a \nsingle tab character\n \nor\n \nfour spaces\n. Immediately following this the \nFeatured Id\n itself (the \nvalue\n not the field name) must be entered, followed by a colon \n:\n. This serve as an indented header for the specification of the feature.\nImportant:\n All fields below must begin with either \ntwo tab characters\n \nor\n \neight spaces\n. This indentation process resets back to the left margin and the process repeats with the next feature. Examples of this are shown in the next section.\n\n\n\n\n\n\nName\n\n\nOptional\nProvides a human-readable name for the feature.\nIf a name is provided, it will be used as the features display name in the Modules section of the Orchard admin dashboard.\nIf a name is not provided in the manifest, the \nFeatureId\n is used instead.\n\n\n\n\n\n\nDescription\n\n\nOptional\nA description of the feature. If this is the default feature of the module use the \nFeatureDescription\n instead.\n\n\n\n\n\n\nFeatureDescription\n\n\nOptional\nEither the main manifest section should define this field or a single feature in the features sub-section should assign this field.\nIt should contain a description of the individual feature.\n\n\n\n\n\n\nCategory\n\n\nOptional\nDefaults to \nuncategorized\n.\nThis field groups the feature together in the Modules page of the Orchard admin dashboard. Related features which have the same category are displayed together.\nEach individual feature can be assigned one category, however the different features included in the module may have each have their own category to move that feature into the most relevant area of the admin dashboard.\nTo aid in discoverability, module developers should prefer to review the Modules page of the Orchard admin dashboard and choose a related category from existing categories. If a relevant category doesn't exist modules can freely define a new category within this field of the manifest.\n\n\n\n\n\n\nDependencies\n\n\nRequired if the feature has dependencies\nA comma-separated list of the application \nId\n values of all features that the specified feature depends on.\nEach individual feature should only define its own dependencies. If all features are defined in the \nFeatures:\n subsection this main \nDependencies\n field is not required.\nNote: dependencies are \ncase sensitive\n.\n\n\n\n\n\n\nPriority\n\n\nOptional\nThe default is \n0\n and higher priorities will take precedence.\nUsed by Orchard to determine how to resolve dependencies implementing a specific interface.\n\n\n\n\n\n\n\n\nModule manifest examples\n\n\nListed below are the three different ways you can use the module manifest.\n\n\nSingle feature module\n\n\nName: Modules\nAntiForgery: enabled\nAuthor: The Orchard Team\nWebsite: http://orchardproject.net\nVersion: 1.9.1\nOrchardVersion: 1.9\nDescription: The Modules module enables the administrator of the site to manage the installed modules as well as activate and de-activate features.\nFeatureDescription: Standard module and feature management.\nDependencies: Orchard.ExampleModule, Orchard.AnotherModule\nCategory: Core\n\n\n\nMultiple features with a default module in the main manifest\n\n\nThe Orchard.Alias module itself (defined as \nName: Alias\n) is its own default feature. There are two extra optional features defined in the \nFeatures\n which can be separately enabled. In this case they both have dependencies on their parent feature \nOrchard.Alias\n but module developers can define independent features as well.\n\n\nName: Alias\nAntiForgery: enabled\nAuthor: The Orchard Team\nWebsite: http://orchardproject.net\nVersion: 1.9.1\nOrchardVersion: 1.9\nDescription: Maps friendly urls to specific module actions.\nFeatureDescription: Maps friendly urls to specific module actions.\nCategory: Content\nFeatures:\n    Orchard.Alias.UI:\n        Name: Alias UI\n        Description: Admin user interface for Orchard.Alias.\n        Dependencies: Orchard.Alias, Orchard.ExampleModule\n        Category: Content\n    Orchard.Alias.Updater:\n        Name: Alias Updater\n        Description: Synchronizes aliases when created from different servers.\n        Dependencies: Orchard.Alias\n        Category: Content\n\n\n\nMultiple features all defined in the features sub-section of the manifest\n\n\nName: AntiSpam\nAntiForgery: enabled\nAuthor: The Orchard Team\nWebsite: http://orchardproject.net\nVersion: 1.9.1\nOrchardVersion: 1.9\nDescription: Provides anti-spam services to protect your content from malicious submissions.\nFeatures:\n    Orchard.AntiSpam:\n        Name: Anti-Spam\n        Description: Provides anti-spam services to protect your content from malicious submissions.\n        Category: Security\n        Dependencies: Orchard.Tokens, Orchard.jQuery\n    Akismet.Filter:\n        Name: Akismet Anti-Spam Filter\n        Description: Provides an anti-spam filter based on Akismet.\n        Category: Security\n        Dependencies: Orchard.AntiSpam\n    TypePad.Filter: \n        Name: TypePad Anti-Spam Filter\n        Description: Provides an anti-spam filter based on TypePad.\n        Category: Security\n        Dependencies: Orchard.AntiSpam\n\n\n\nNotice the structure that is used for each feature described in the \nFeatures\n field. The \nFeatureId\n of the feature is listed followed by a colon \n:\n. Then on a new line for each field, you can specify the other relevant fields including \nName\n, \nDescription\n, \nCategory\n and \nDependencies\n. \n\n\nFor more information about how to create a module, including how to generate a manifest file and how to modify the manifest, see these guides:\n\n\n\n\nGetting Started with Modules course\n\n\nWriting a Content Part\n\n\nWriting a Content Field\n\n\nBuilding a Hello World Module\n.\n\n\n\n\nTheme manifest fields\n\n\nA theme manifest can have the following fields:\n\n\n\n\n\n\n\n\nField Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nName\n\n\nProvides a human-readable name for a theme that is an alternative to using the theme's ID. The ID of a theme is the name of the theme's folder in the virtual base path (the default virtual base path is \n~/Themes\n), and is used for programmatic references. For example, for a theme whose ID is \nOrchard.Theme.Contoso\n, you might provide a name in the manifest such as \nContoso Theme\n. If you do not provide a name in the manifest, the ID is used instead. If you do provide a name, it will be used as the theme's display name in the \nOrchard Gallery\n and in the Orchard UI.\n\n\n\n\n\n\nDescription\n\n\nA brief summary of a theme's appearance and layout details. The description is used in the \nOrchard Gallery\n and in the Orchard UI.\n\n\n\n\n\n\nVersion\n\n\nThe version number of a theme. The version information is displayed in the \nOrchard Gallery\n and the Orchard UI, and is also used to determine whether an update is needed.\n\n\n\n\n\n\nAuthor\n\n\nThe developer of a theme. This can be an organization, individual, or a list of individuals.\n\n\n\n\n\n\nWebsite\n\n\nThe URL for the website of the theme developer.\n\n\n\n\n\n\nTags\n\n\nA comma-separated lists of tags for the theme. The tags can be used to filter or group themes in a list. For example, a custom online gallery of themes can provide the ability to filter and display themes by tag.\n\n\n\n\n\n\nZones\n\n\nA comma-separated list of the Orchard zones that are used by a theme. These zones are displayed in the Orchard dashboard and can be used to customize the layout of a site by adding, removing, or arranging widgets.\n\n\n\n\n\n\nBaseTheme\n\n\nThe ID of another theme that this theme inherits from. This is an optional field. It is useful in cases where you want to customize an existing theme by copying it and then making some changes in style and appearance. When you use this approach, add the \nBaseTheme\n field to the manifest for the customized theme, and specify the \nId\n of the base theme. For example, if you customized the Contoso theme, you could add the line \nBaseTheme: Orchard.Theme.Contoso\n to the manifest of your theme.\n\n\n\n\n\n\n\n\nThe following example shows the manifest for \nThe Theme Machine\n theme, which is the default Orchard theme.  \n\n\nName: The Theme Machine\nAuthor: jowall, mibach, loudej, heskew\nDescription: Orchard Theme Machine is a flexible multi-zone theme that provides a solid foundation to build your site. It features 20 collapsible widget zones and is flexible enough to cover a wide range of layouts.\nVersion: 1.9.1\nTags: Awesome\nWebsite: http://orchardproject.net\nZones: Header, Navigation, Featured, BeforeMain, AsideFirst, Messages, BeforeContent, Content, AfterContent, AsideSecond, AfterMain, TripelFirst, TripelSecond, TripelThird, FooterQuadFirst, FooterQuadSecond, FooterQuadThird, FooterQuadFourth, Footer\n\n\n\nFor more information about how to write a theme, including how to generate and modify a manifest, see \nWriting a New Theme\n. For information about how to customize an existing theme and then generate a manifest for it, see \nCustomizing Themes\n.",
            "title": "Manifest Files for Modules and Themes"
        },
        {
            "location": "/Documentation/Manifest-files/#module-manifest-fields",
            "text": "The manifest for a module should be called  module.txt  and should be located in the root of the project.   A module's manifest is made up of an overall description of the package itself and then an optional repeating section describing each of the individual features.   The module can be comprised of a default single feature or a group of individually defined features. This allows module developers to specify separate areas of the module and allow users to enable them on a per-feature basis.",
            "title": "Module manifest fields"
        },
        {
            "location": "/Documentation/Manifest-files/#main-moduletxt-fields",
            "text": "Some of the fields may be overridden if a module defines multiple features. These are detailed in the  Features:  sub-section fields  table below.     Field Name  Description      Name  Optional Provides a human-readable name for a module. If a name is provided, it will be used as the module's display name in the  Orchard Gallery  and in the Orchard UI. If a name is not provided in the manifest, the ID is used instead. Note: The ID of a module is generated internally from the name of the module's folder and is used for programmatic references to the module. For example, if the module is located in  /Modules/Bing.Maps/  its ID would be  Bing.Maps . To make things more friendly to the end user module developers should provide a name in the manifest such as  Bing Mapping Component  or even  Bing Maps  (notice that the \".\" is removed).    Path  Optional Provides a name that is used to build more readable URLs for routing purposes compared to URLs that are based on module names or ID values. If a path is not provided, Orchard builds URLs based on the module's name (if one is provided) or on the ID. However, module names often have spaces, and ID values often have \".\" characters, neither of which result in very readable URLs. For example, for the  Orchard.ArchiveLater  module, its name is  Archive Later , and its ID is  Archive.Later . In the manifest, a path is provided with the value of  ArchiveLater , which enables Orchard to build a more readable URL than the module name or the ID would. Note: If specified, the Path must be a valid URL segment. If you're unsure what this means the best bet is to stick with letters and numbers with no spaces.    AntiForgery  Required Possible values are  enabled  or  disabled . A value that indicates whether request validation is enabled for a module.    Author  Optional The developer of the module. This can be an organization, individual, or a list of individuals.    Website  Optional The URL for the website of the module developer.    Version  Required The version number of the module in  SemVer  format. The version information is displayed in the  Orchard Gallery  and in the Orchard UI. It is also used to determine whether an update is available.    OrchardVersion  Required The minimum version of Orchard CMS that the module has been tested against.    Description  Optional A brief summary of what the module does. The description is used in the  Orchard Gallery  and in the Orchard UI. Will be overridden by the  FeatureDescription  field when present.    Dependencies  Required if the feature has dependencies. If all features are defined in the  Features:  subsection this field is not required. A comma-separated list of the application  Id  values of all features that the specified feature depends on. Note: dependencies are  case sensitive .    Category  Optional Defaults to  uncategorized . This field groups the module together in the Modules page of the Orchard admin dashboard. Related modules which have the same category are displayed together. The category field can be assigned one category. To aid in discoverability, module developers should review the Modules page of the Orchard admin dashboard and choose a related category from existing categories. If a relevant category doesn't exist modules can freely define a new category within this field.    Tags  Optional A comma-separated lists of tags for the module. The tags field allow users to find related modules in the  Orchard Gallery .    FeatureDescription  Optional A description of the default feature in a module. If the module has only a single feature, use either the  FeatureDescription  or  Description  field to describe it. The  FeatureDescription  will override the  Description  field. If the module has multiple features and one of the features is the default, use the  FeatureDescription  field to describe the default feature. The  FeatureDescription  will override the  Description  field. If the module has multiple features and doesn't define a default feature then leave this field out and follow the instructions in its description down in the  Features:  table below.    Features  Optional A special repeating section of the manifest which allows a module to define multiple features within a module. Supports several sub-fields as described by the table in the next section. The features section should be placed at the end of the manifest.",
            "title": "Main module.txt fields"
        },
        {
            "location": "/Documentation/Manifest-files/#moduletxt-features-sub-section-fields",
            "text": "If a module provides multiple individual features within a single module then the repeating  Features:  sub-section should be used. It allows module developers to specify separate manifest fields for each individual feature. These individual features can then be enabled and disabled separately by end users.  The  Features:  field doesn't have any assigned value. It is a placemarker field that indicates the beginning of a repeating list of features.  Examples of the formatting to be used for this part of the manifest can be found in the next section.     Field Name  Description      FeatureId  Required Because the feature is already contained within the module ID module developers need to supply a unique ID for Orchard to use internally as a reference. The  FeatureId  should take the form of the name of the feature with no punctuation and full stops where spaces would be. This is a special field. The line must begin with either a  single tab character   or   four spaces . Immediately following this the  Featured Id  itself (the  value  not the field name) must be entered, followed by a colon  : . This serve as an indented header for the specification of the feature. Important:  All fields below must begin with either  two tab characters   or   eight spaces . This indentation process resets back to the left margin and the process repeats with the next feature. Examples of this are shown in the next section.    Name  Optional Provides a human-readable name for the feature. If a name is provided, it will be used as the features display name in the Modules section of the Orchard admin dashboard. If a name is not provided in the manifest, the  FeatureId  is used instead.    Description  Optional A description of the feature. If this is the default feature of the module use the  FeatureDescription  instead.    FeatureDescription  Optional Either the main manifest section should define this field or a single feature in the features sub-section should assign this field. It should contain a description of the individual feature.    Category  Optional Defaults to  uncategorized . This field groups the feature together in the Modules page of the Orchard admin dashboard. Related features which have the same category are displayed together. Each individual feature can be assigned one category, however the different features included in the module may have each have their own category to move that feature into the most relevant area of the admin dashboard. To aid in discoverability, module developers should prefer to review the Modules page of the Orchard admin dashboard and choose a related category from existing categories. If a relevant category doesn't exist modules can freely define a new category within this field of the manifest.    Dependencies  Required if the feature has dependencies A comma-separated list of the application  Id  values of all features that the specified feature depends on. Each individual feature should only define its own dependencies. If all features are defined in the  Features:  subsection this main  Dependencies  field is not required. Note: dependencies are  case sensitive .    Priority  Optional The default is  0  and higher priorities will take precedence. Used by Orchard to determine how to resolve dependencies implementing a specific interface.",
            "title": "Module.txt Features: sub-section fields"
        },
        {
            "location": "/Documentation/Manifest-files/#module-manifest-examples",
            "text": "Listed below are the three different ways you can use the module manifest.",
            "title": "Module manifest examples"
        },
        {
            "location": "/Documentation/Manifest-files/#single-feature-module",
            "text": "Name: Modules\nAntiForgery: enabled\nAuthor: The Orchard Team\nWebsite: http://orchardproject.net\nVersion: 1.9.1\nOrchardVersion: 1.9\nDescription: The Modules module enables the administrator of the site to manage the installed modules as well as activate and de-activate features.\nFeatureDescription: Standard module and feature management.\nDependencies: Orchard.ExampleModule, Orchard.AnotherModule\nCategory: Core",
            "title": "Single feature module"
        },
        {
            "location": "/Documentation/Manifest-files/#multiple-features-with-a-default-module-in-the-main-manifest",
            "text": "The Orchard.Alias module itself (defined as  Name: Alias ) is its own default feature. There are two extra optional features defined in the  Features  which can be separately enabled. In this case they both have dependencies on their parent feature  Orchard.Alias  but module developers can define independent features as well.  Name: Alias\nAntiForgery: enabled\nAuthor: The Orchard Team\nWebsite: http://orchardproject.net\nVersion: 1.9.1\nOrchardVersion: 1.9\nDescription: Maps friendly urls to specific module actions.\nFeatureDescription: Maps friendly urls to specific module actions.\nCategory: Content\nFeatures:\n    Orchard.Alias.UI:\n        Name: Alias UI\n        Description: Admin user interface for Orchard.Alias.\n        Dependencies: Orchard.Alias, Orchard.ExampleModule\n        Category: Content\n    Orchard.Alias.Updater:\n        Name: Alias Updater\n        Description: Synchronizes aliases when created from different servers.\n        Dependencies: Orchard.Alias\n        Category: Content",
            "title": "Multiple features with a default module in the main manifest"
        },
        {
            "location": "/Documentation/Manifest-files/#multiple-features-all-defined-in-the-features-sub-section-of-the-manifest",
            "text": "Name: AntiSpam\nAntiForgery: enabled\nAuthor: The Orchard Team\nWebsite: http://orchardproject.net\nVersion: 1.9.1\nOrchardVersion: 1.9\nDescription: Provides anti-spam services to protect your content from malicious submissions.\nFeatures:\n    Orchard.AntiSpam:\n        Name: Anti-Spam\n        Description: Provides anti-spam services to protect your content from malicious submissions.\n        Category: Security\n        Dependencies: Orchard.Tokens, Orchard.jQuery\n    Akismet.Filter:\n        Name: Akismet Anti-Spam Filter\n        Description: Provides an anti-spam filter based on Akismet.\n        Category: Security\n        Dependencies: Orchard.AntiSpam\n    TypePad.Filter: \n        Name: TypePad Anti-Spam Filter\n        Description: Provides an anti-spam filter based on TypePad.\n        Category: Security\n        Dependencies: Orchard.AntiSpam  Notice the structure that is used for each feature described in the  Features  field. The  FeatureId  of the feature is listed followed by a colon  : . Then on a new line for each field, you can specify the other relevant fields including  Name ,  Description ,  Category  and  Dependencies .   For more information about how to create a module, including how to generate a manifest file and how to modify the manifest, see these guides:   Getting Started with Modules course  Writing a Content Part  Writing a Content Field  Building a Hello World Module .",
            "title": "Multiple features all defined in the features sub-section of the manifest"
        },
        {
            "location": "/Documentation/Manifest-files/#theme-manifest-fields",
            "text": "A theme manifest can have the following fields:     Field Name  Description      Name  Provides a human-readable name for a theme that is an alternative to using the theme's ID. The ID of a theme is the name of the theme's folder in the virtual base path (the default virtual base path is  ~/Themes ), and is used for programmatic references. For example, for a theme whose ID is  Orchard.Theme.Contoso , you might provide a name in the manifest such as  Contoso Theme . If you do not provide a name in the manifest, the ID is used instead. If you do provide a name, it will be used as the theme's display name in the  Orchard Gallery  and in the Orchard UI.    Description  A brief summary of a theme's appearance and layout details. The description is used in the  Orchard Gallery  and in the Orchard UI.    Version  The version number of a theme. The version information is displayed in the  Orchard Gallery  and the Orchard UI, and is also used to determine whether an update is needed.    Author  The developer of a theme. This can be an organization, individual, or a list of individuals.    Website  The URL for the website of the theme developer.    Tags  A comma-separated lists of tags for the theme. The tags can be used to filter or group themes in a list. For example, a custom online gallery of themes can provide the ability to filter and display themes by tag.    Zones  A comma-separated list of the Orchard zones that are used by a theme. These zones are displayed in the Orchard dashboard and can be used to customize the layout of a site by adding, removing, or arranging widgets.    BaseTheme  The ID of another theme that this theme inherits from. This is an optional field. It is useful in cases where you want to customize an existing theme by copying it and then making some changes in style and appearance. When you use this approach, add the  BaseTheme  field to the manifest for the customized theme, and specify the  Id  of the base theme. For example, if you customized the Contoso theme, you could add the line  BaseTheme: Orchard.Theme.Contoso  to the manifest of your theme.     The following example shows the manifest for  The Theme Machine  theme, which is the default Orchard theme.    Name: The Theme Machine\nAuthor: jowall, mibach, loudej, heskew\nDescription: Orchard Theme Machine is a flexible multi-zone theme that provides a solid foundation to build your site. It features 20 collapsible widget zones and is flexible enough to cover a wide range of layouts.\nVersion: 1.9.1\nTags: Awesome\nWebsite: http://orchardproject.net\nZones: Header, Navigation, Featured, BeforeMain, AsideFirst, Messages, BeforeContent, Content, AfterContent, AsideSecond, AfterMain, TripelFirst, TripelSecond, TripelThird, FooterQuadFirst, FooterQuadSecond, FooterQuadThird, FooterQuadFourth, Footer  For more information about how to write a theme, including how to generate and modify a manifest, see  Writing a New Theme . For information about how to customize an existing theme and then generate a manifest for it, see  Customizing Themes .",
            "title": "Theme manifest fields"
        },
        {
            "location": "/Documentation/Caching/",
            "text": "Here are the different levels of caching that Orchard can provide:\n\n\nApplication Settings Cache Using ICacheManager\n\n\nThis is used to store application settings and can be invalidated based on an extensible set of parameters.\nBy default you find expiration tokens based on time, file system and signals.\nThis is a very powerful caching API but has one drawback: it is not meant to provide farm invalidation,\nbecause it has not been designed for this purpose and should not be used for data which is volatile.\nUsing for settings is totally fine, like for Content Types, module settings, etc. because those values\nmust not change on a production farm.\nYou never create a content type on production on a farm, or you have to restart all nodes one after the other.\n\n\nAnother reason to use this module (and why it has been done) is that it is not dependent on memory pressure,\nso entries won't be removed if your system memory consumption grows, as opposed to the ASP.NET cache.\nAll the other cache providers are and must use memory pressure limits.\n\n\n2nd Level NHibernate Caching\n\n\nThis is used to prevent recurring sql queries to the database.\n\n\nBecause the accessors are simple and well defined (checking a string in the dictionary),\nit's safe to use it on a farm as long as the data is store in a central repository, like using Memcached.\n\n\nA simple Memcached provider for it is tricky as you need to configure the provider (location, port),\nand usually the settings are best placed in the database, but it's the chicken and egg issue and\nyou can't bootstrap it from a module. The only solution is then to have the configuration for it inside\nthe web.config, or maybe the settings.txt when it will be extensible.\n\n\nOutput Caching Using Contrib.Cache\n\n\nThe goal of this module is to provide output caching like ASP.NET does, and to provide cache headers\nmanagement (max-age, Cache-Control, ETag). It was recently extended to be able to define the storage mechanism\ndynamically for the cache data as distributed setups where more widely used.\nThis is why there are two distributed storage provider, one based on the Database and the other one based on Memcached. \n\n\nHere is the set of related modules:\n\n\n\n\nhttp://orchardcache.codeplex.com/\n\n\nhttps://bitbucket.org/sebastienros/contrib.cache.database\n\n\nhttps://bitbucket.org/sebastienros/contrib.cache.memcached\n\n\n\n\nNot a single Orchard website should go into production without this module.\nNot only does it improve responsiveness but also throughput, and finally it frees your CPU from unneeded cycles.\nUsing the Max Age setting you also enable IIS Kernel caching plus public proxy cache which makes your application\neven faster. You can get thousands of requests per seconds with a very small server.\n\n\nBusiness Data Caching Using Orchard.Caching\n\n\nBecause of the limitations of the ICacheManager in terms of distributed caching, another set of modules was\nnecessary to cache business data which has to be shared across servers.\nThis module can set and get entries by a key only, and invalidate by name or time.\nThis is the only requirement for storage providers in this module, which allows its usage on farms. \n\n\nThis is implemented in:\n\n\n\n\nhttps://bitbucket.org/sebastienros/orchard.caching\n\n\nhttps://bitbucket.org/sebastienros/orchard.caching.memcached\n\n\n\n\nWhy Memcached ?\n\n\nImplementing Memcached providers by default is done for a specific reason, which is that Azure Caching Services\nare binary compatible with it. So this implementation works by default on both custom Memcached servers\nand also Azure services.",
            "title": "Caching"
        },
        {
            "location": "/Documentation/Caching/#application-settings-cache-using-icachemanager",
            "text": "This is used to store application settings and can be invalidated based on an extensible set of parameters.\nBy default you find expiration tokens based on time, file system and signals.\nThis is a very powerful caching API but has one drawback: it is not meant to provide farm invalidation,\nbecause it has not been designed for this purpose and should not be used for data which is volatile.\nUsing for settings is totally fine, like for Content Types, module settings, etc. because those values\nmust not change on a production farm.\nYou never create a content type on production on a farm, or you have to restart all nodes one after the other.  Another reason to use this module (and why it has been done) is that it is not dependent on memory pressure,\nso entries won't be removed if your system memory consumption grows, as opposed to the ASP.NET cache.\nAll the other cache providers are and must use memory pressure limits.",
            "title": "Application Settings Cache Using ICacheManager"
        },
        {
            "location": "/Documentation/Caching/#2nd-level-nhibernate-caching",
            "text": "This is used to prevent recurring sql queries to the database.  Because the accessors are simple and well defined (checking a string in the dictionary),\nit's safe to use it on a farm as long as the data is store in a central repository, like using Memcached.  A simple Memcached provider for it is tricky as you need to configure the provider (location, port),\nand usually the settings are best placed in the database, but it's the chicken and egg issue and\nyou can't bootstrap it from a module. The only solution is then to have the configuration for it inside\nthe web.config, or maybe the settings.txt when it will be extensible.",
            "title": "2nd Level NHibernate Caching"
        },
        {
            "location": "/Documentation/Caching/#output-caching-using-contribcache",
            "text": "The goal of this module is to provide output caching like ASP.NET does, and to provide cache headers\nmanagement (max-age, Cache-Control, ETag). It was recently extended to be able to define the storage mechanism\ndynamically for the cache data as distributed setups where more widely used.\nThis is why there are two distributed storage provider, one based on the Database and the other one based on Memcached.   Here is the set of related modules:   http://orchardcache.codeplex.com/  https://bitbucket.org/sebastienros/contrib.cache.database  https://bitbucket.org/sebastienros/contrib.cache.memcached   Not a single Orchard website should go into production without this module.\nNot only does it improve responsiveness but also throughput, and finally it frees your CPU from unneeded cycles.\nUsing the Max Age setting you also enable IIS Kernel caching plus public proxy cache which makes your application\neven faster. You can get thousands of requests per seconds with a very small server.",
            "title": "Output Caching Using Contrib.Cache"
        },
        {
            "location": "/Documentation/Caching/#business-data-caching-using-orchardcaching",
            "text": "Because of the limitations of the ICacheManager in terms of distributed caching, another set of modules was\nnecessary to cache business data which has to be shared across servers.\nThis module can set and get entries by a key only, and invalidate by name or time.\nThis is the only requirement for storage providers in this module, which allows its usage on farms.   This is implemented in:   https://bitbucket.org/sebastienros/orchard.caching  https://bitbucket.org/sebastienros/orchard.caching.memcached",
            "title": "Business Data Caching Using Orchard.Caching"
        },
        {
            "location": "/Documentation/Caching/#why-memcached",
            "text": "Implementing Memcached providers by default is done for a specific reason, which is that Azure Caching Services\nare binary compatible with it. So this implementation works by default on both custom Memcached servers\nand also Azure services.",
            "title": "Why Memcached ?"
        },
        {
            "location": "/Documentation/Adding-custom-settings/",
            "text": "Sometimes you may need to persist some global settings \n(eg. license code, service login, default width etc.)\nto be reused across your module. Orchard makes it really \nsimple and I'll show you how to do it.\n\n\nBasically, there are two scopes you can define your settings in:\n\n\n\n\nSite scope\n - for global site settings.\n\n\nContent type scope\n - for settings common to all items of a given type\n(eg. a Page, a Blog, a BlogPost and so on).\n\n\n\n\nDefining site scope settings (Orchard 1.8 Onwards)\n\n\nOrchard 1.8 drastically simplifies creation of site settings, removing the previous need for \"Part Records\" and migration files. To create new site settings for your module you now only need three classes; A \nContentPart\n, a \nHandler\n and potentially a view file if you want the settings to be edited via the \"Site Settings\" area of Admin. For a real world example look for the \nRegistrationSettingsPart\n, \nRegistrationSetttingsPartHandler\n and \nUsers.RegistrationSettings.cshtml\n files in the \nOrchard.Users\n module.\n\n\nThe Content Part\n\n\npublic class ShareBarSettingsPart : ContentPart {\n    public string AddThisAccount {\n        get { return this.Retrieve(x=> x.AddThisAccount); }\n        set { this.Store(x=> x.AddThisAccount, value); }\n        }\n    }\n\n\n\nThe Handler\n\n\n[UsedImplicitly]\npublic class ShareBarSettingsPartHandler : ContentHandler {\n    public ShareBarSettingsPartHandler() {\n        T = NullLocalizer.Instance;\n        Filters.Add(new ActivatingFilter<ShareBarSettingsPart>(\"Site\"));\n        Filters.Add(new TemplateFilterForPart<ShareBarSettingsPart>(\"ShareBarSettings\", \"Parts/ShareBar.ShareBarSettings\", \"Modules\"));\n    }\n\n    public Localizer T { get; set; }\n\n    protected override void GetItemMetadata(GetContentItemMetadataContext context)\n    {\n        if (context.ContentItem.ContentType != \"Site\")\n            return;\n        base.GetItemMetadata(context);\n        context.Metadata.EditorGroupInfo.Add(new GroupInfo(T(\"Modules\")));\n    }\n}\n\n\n\nThe View\n\n\n@model Szmyd.Orchard.Modules.Sharing.Models.ShareBarSettingsPart\n<fieldset>\n    <legend>@T(\"Content sharing settigs\")</legend>\n    <div>\n        @Html.LabelFor(m => m.AddThisAccount, @T(\"AddThis service account\"))\n        @Html.EditorFor(m => m.AddThisAccount)\n        @Html.ValidationMessageFor(m => m.AddThisAccount, \"*\")\n    </div>\n</fieldset>\n\n\n\nUsing site scope settings\n\n\nAccessing your site setting is a simple one liner:\n\n\nvar shareSettings = _services.WorkContext.CurrentSite.As<ShareBarSettingsPart>();\n\n\n\nWhere _services is the \nIOrchardServices\n object (eg. injected in the constructor).\n\n\nDefining site scope settings (Pre-Orchard 1.8)\n\n\nDefining custom site scope settings for before Orchard 1.8 can be in \nAdding Custom Settings pre Orchard 1.8\n\n\nDefining settings for Content Types\n\n\nWe're now going to create settings and defaults wired with specific content type (like Page, User, Blog etc.).\n\n\nThis looks much different comparing to the previous one, but also requires less coding.\nThere are just two classes and one shape involved and that's all.\nAs before, we'll use the simplified examples taken from the\n\nOrchard Sharing\n project.\n\n\nThe goal:\n\n\n\n\n\"I want all of my Blog Posts to have ShareBar with the same look.\"\n\n\n\n\nImagine that you're writing posts via LiveWriter (like me).\nDo you want to log in and edit every post after publishing just to change the share bar?\nI don't. I want to have it defined upfront.\n\n\nThe first thing you have to do is to create a class holding your settings:\n\n\npublic class ShareBarTypePartSettings {\n    public ShareBarMode Mode { get; set; }\n    public IEnumerable<dynamic> AvailableModes { get; set; }\n}\n\n\n\nThis class has one property - \nMode\n, which holds the default mode for all ShareBarParts\nattached to some content items of a given type.\n\nShareBarMode\n is just an enum type defining the display modes.\nFor the sake of brevity, I won't paste the code here.\nThis could be any type you want.\nThe second property is just used for the display purposes (holds items for display in drop-down list),\nas this class is also used as a ViewModel. It is not being persisted.\n\n\nThe second class can be thought of as a kind of a driver for the settings.\nIt's not the Orchard ContentDriver we wrote previously, but also it's responsible\nfor rendering the edit form and saving the posted data:\n\n\npublic class ShareBarSettingsHooks : ContentDefinitionEditorEventsBase {\n    public override IEnumerable<TemplateViewModel> TypePartEditor(\n        ContentTypePartDefinition definition) {\n\n        if (definition.PartDefinition.Name != \"ShareBarPart\") yield break;\n        var model = definition.Settings.GetModel<ShareBarTypePartSettings>();\n\n        model.AvailableModes = Enum.GetValues(typeof(ShareBarMode))\n            .Cast<int>()\n            .Select(i =>\n                new {\n                    Text = Enum.GetName(typeof(ShareBarMode), i),\n                    Value = i\n                });\n\n        yield return DefinitionTemplate(model);\n    }\n\n    public override IEnumerable<TemplateViewModel> TypePartEditorUpdate(\n        ContentTypePartDefinitionBuilder builder,\n        IUpdateModel updateModel) {\n\n        if (builder.Name != \"ShareBarPart\") yield break;\n\n        var model = new ShareBarTypePartSettings();\n        updateModel.TryUpdateModel(model, \"ShareBarTypePartSettings\", null, null);\n        builder.WithSetting(\"ShareBarTypePartSettings.Mode\",\n            ((int)model.Mode).ToString());\n        yield return DefinitionTemplate(model);\n    }\n}\n\n\n\nThis class overrides the \nContentDefinitionEditorEventsBase\n which defines two overridable methods:\n\nTypePartEditor\n and \nTypePartEditorUpdate\n.\nThe first one gets called when the edit form is being rendered (GET) and the second one\nwhen the edit form data gets posted (POST).\nUnlike the generic content part drivers, this class is not bound to the specific content type\n(as the content types are just a list of names for a collection of parts),\nso each of the methods we just defined will be called for every content type and for every part.\nThis is why the \nyield break\n statement is used - to filter only the ones containing the part we need, \nShareBarPart\n.\n\n\nBy convention, as shown in the TypePartEditorUpdate method, settings should be named as\n\n<prefix>.<propertyName>\n when passing to \nbuilder.WithSetting(...)\n,\nwhere \nprefix\n is the string passed to the updateModel.TryUpdateModel.\n\nPrefix\n can be anything, but has to be unique. Remember though,\nwhen you use string other than your settings class name,\nyou cannot use \nSettings.GetModel<Your_Settings_Type>()\n\n(as shown in the TypePartEditor method above).\nIn this case you have to use \nSettings.GetModel<Your_Settings_Type>(prefix)\n instead.\n\n\n\n\nIt should be considered best practice to use your settings class name as a \nprefix\n (as in the code above).\n\n\nSettings are persisted within the content type definition in the db in the string form.\nYou have to be sure that the properties you define are convertible to and from the string representation.\n\n\n\n\n\n\nNotice the usage of \nEnum.GetValues(typeof(someEnum)), Enum.GetNames(typeof(someEnum))\n\nand \nEnum.GetName(typeof(someEnum), i)\n.\nThis methods get very useful when you want to iterate over the names/values of an enum.\n\n\n\n\nIf you're done with the code above, there's only one thing left:\ncreating a .cshtml view (shape) to render our form.\n\n\n\n\nShapes defining edit forms for content type settings has to be placed under\n\n/Views/DefinitionTemplates/\n with the name \n<settingsClassName>.cshtml\n.\nSo in our case it'll look like on the picture above.\nInside, it's just like any other Razor view file:\n\n\n@model Szmyd.Orchard.Modules.Sharing.Settings.ShareBarTypePartSettings\n<fieldset>\n    <div>\n        @Html.LabelFor(m => m.Mode, T(\"Share bar display style\"))\n        @Html.DropDownListFor(m => m.Mode,\n            new System.Web.Mvc.SelectList(\n                Model.AvailableModes, \"Value\", \"Text\", (int)Model.Mode))\n    </div>\n</fieldset>\n\n\n\nThis renders the dropdown list so user can choose one of the predefined Modes.\n\nModel.AvailableModes\n contains the available ones: we populated the property with appropriate\ndata in \nTypePartEditor\n method above.\n\n\nHooray, we're done!\n\n\nNow you possibly wonder, where will this edit form be shown?\nOrchard will render settings form when you'll try to edit the content type containing your part.\nThe steps are like this: \nContent Types -> Edit the type you want -> Add your part -> Voila!\n\nThere is a nice arrow image next to your part. If you click it - the form shows.\n\n\n\n\nUsing settings for content type\n\n\nAs for site-scoped settings, this section is also a one-liner.\nThe part below is some content part (in this case a ShareBarPart from the\n\nOrchard Sharing\n project).\n\n\nvar typeSettings = part.Settings.GetModel<ShareBarTypePartSettings>();\n\n\n\nYou can retrieve and use the settings wherever you have access to your part\n(particularly in the driver Display/Editor methods, but also shapes, handlers and so on).\nI used it in the ShareBarPart driver Display method to change the look of a share bar part.",
            "title": "Custom Site Settings"
        },
        {
            "location": "/Documentation/Adding-custom-settings/#defining-site-scope-settings-orchard-18-onwards",
            "text": "Orchard 1.8 drastically simplifies creation of site settings, removing the previous need for \"Part Records\" and migration files. To create new site settings for your module you now only need three classes; A  ContentPart , a  Handler  and potentially a view file if you want the settings to be edited via the \"Site Settings\" area of Admin. For a real world example look for the  RegistrationSettingsPart ,  RegistrationSetttingsPartHandler  and  Users.RegistrationSettings.cshtml  files in the  Orchard.Users  module.",
            "title": "Defining site scope settings (Orchard 1.8 Onwards)"
        },
        {
            "location": "/Documentation/Adding-custom-settings/#the-content-part",
            "text": "public class ShareBarSettingsPart : ContentPart {\n    public string AddThisAccount {\n        get { return this.Retrieve(x=> x.AddThisAccount); }\n        set { this.Store(x=> x.AddThisAccount, value); }\n        }\n    }",
            "title": "The Content Part"
        },
        {
            "location": "/Documentation/Adding-custom-settings/#the-handler",
            "text": "[UsedImplicitly]\npublic class ShareBarSettingsPartHandler : ContentHandler {\n    public ShareBarSettingsPartHandler() {\n        T = NullLocalizer.Instance;\n        Filters.Add(new ActivatingFilter<ShareBarSettingsPart>(\"Site\"));\n        Filters.Add(new TemplateFilterForPart<ShareBarSettingsPart>(\"ShareBarSettings\", \"Parts/ShareBar.ShareBarSettings\", \"Modules\"));\n    }\n\n    public Localizer T { get; set; }\n\n    protected override void GetItemMetadata(GetContentItemMetadataContext context)\n    {\n        if (context.ContentItem.ContentType != \"Site\")\n            return;\n        base.GetItemMetadata(context);\n        context.Metadata.EditorGroupInfo.Add(new GroupInfo(T(\"Modules\")));\n    }\n}",
            "title": "The Handler"
        },
        {
            "location": "/Documentation/Adding-custom-settings/#the-view",
            "text": "@model Szmyd.Orchard.Modules.Sharing.Models.ShareBarSettingsPart\n<fieldset>\n    <legend>@T(\"Content sharing settigs\")</legend>\n    <div>\n        @Html.LabelFor(m => m.AddThisAccount, @T(\"AddThis service account\"))\n        @Html.EditorFor(m => m.AddThisAccount)\n        @Html.ValidationMessageFor(m => m.AddThisAccount, \"*\")\n    </div>\n</fieldset>",
            "title": "The View"
        },
        {
            "location": "/Documentation/Adding-custom-settings/#using-site-scope-settings",
            "text": "Accessing your site setting is a simple one liner:  var shareSettings = _services.WorkContext.CurrentSite.As<ShareBarSettingsPart>();  Where _services is the  IOrchardServices  object (eg. injected in the constructor).",
            "title": "Using site scope settings"
        },
        {
            "location": "/Documentation/Adding-custom-settings/#defining-site-scope-settings-pre-orchard-18",
            "text": "Defining custom site scope settings for before Orchard 1.8 can be in  Adding Custom Settings pre Orchard 1.8",
            "title": "Defining site scope settings (Pre-Orchard 1.8)"
        },
        {
            "location": "/Documentation/Adding-custom-settings/#defining-settings-for-content-types",
            "text": "We're now going to create settings and defaults wired with specific content type (like Page, User, Blog etc.).  This looks much different comparing to the previous one, but also requires less coding.\nThere are just two classes and one shape involved and that's all.\nAs before, we'll use the simplified examples taken from the Orchard Sharing  project.  The goal:   \"I want all of my Blog Posts to have ShareBar with the same look.\"   Imagine that you're writing posts via LiveWriter (like me).\nDo you want to log in and edit every post after publishing just to change the share bar?\nI don't. I want to have it defined upfront.  The first thing you have to do is to create a class holding your settings:  public class ShareBarTypePartSettings {\n    public ShareBarMode Mode { get; set; }\n    public IEnumerable<dynamic> AvailableModes { get; set; }\n}  This class has one property -  Mode , which holds the default mode for all ShareBarParts\nattached to some content items of a given type. ShareBarMode  is just an enum type defining the display modes.\nFor the sake of brevity, I won't paste the code here.\nThis could be any type you want.\nThe second property is just used for the display purposes (holds items for display in drop-down list),\nas this class is also used as a ViewModel. It is not being persisted.  The second class can be thought of as a kind of a driver for the settings.\nIt's not the Orchard ContentDriver we wrote previously, but also it's responsible\nfor rendering the edit form and saving the posted data:  public class ShareBarSettingsHooks : ContentDefinitionEditorEventsBase {\n    public override IEnumerable<TemplateViewModel> TypePartEditor(\n        ContentTypePartDefinition definition) {\n\n        if (definition.PartDefinition.Name != \"ShareBarPart\") yield break;\n        var model = definition.Settings.GetModel<ShareBarTypePartSettings>();\n\n        model.AvailableModes = Enum.GetValues(typeof(ShareBarMode))\n            .Cast<int>()\n            .Select(i =>\n                new {\n                    Text = Enum.GetName(typeof(ShareBarMode), i),\n                    Value = i\n                });\n\n        yield return DefinitionTemplate(model);\n    }\n\n    public override IEnumerable<TemplateViewModel> TypePartEditorUpdate(\n        ContentTypePartDefinitionBuilder builder,\n        IUpdateModel updateModel) {\n\n        if (builder.Name != \"ShareBarPart\") yield break;\n\n        var model = new ShareBarTypePartSettings();\n        updateModel.TryUpdateModel(model, \"ShareBarTypePartSettings\", null, null);\n        builder.WithSetting(\"ShareBarTypePartSettings.Mode\",\n            ((int)model.Mode).ToString());\n        yield return DefinitionTemplate(model);\n    }\n}  This class overrides the  ContentDefinitionEditorEventsBase  which defines two overridable methods: TypePartEditor  and  TypePartEditorUpdate .\nThe first one gets called when the edit form is being rendered (GET) and the second one\nwhen the edit form data gets posted (POST).\nUnlike the generic content part drivers, this class is not bound to the specific content type\n(as the content types are just a list of names for a collection of parts),\nso each of the methods we just defined will be called for every content type and for every part.\nThis is why the  yield break  statement is used - to filter only the ones containing the part we need,  ShareBarPart .  By convention, as shown in the TypePartEditorUpdate method, settings should be named as <prefix>.<propertyName>  when passing to  builder.WithSetting(...) ,\nwhere  prefix  is the string passed to the updateModel.TryUpdateModel. Prefix  can be anything, but has to be unique. Remember though,\nwhen you use string other than your settings class name,\nyou cannot use  Settings.GetModel<Your_Settings_Type>() \n(as shown in the TypePartEditor method above).\nIn this case you have to use  Settings.GetModel<Your_Settings_Type>(prefix)  instead.   It should be considered best practice to use your settings class name as a  prefix  (as in the code above).  Settings are persisted within the content type definition in the db in the string form.\nYou have to be sure that the properties you define are convertible to and from the string representation.    Notice the usage of  Enum.GetValues(typeof(someEnum)), Enum.GetNames(typeof(someEnum)) \nand  Enum.GetName(typeof(someEnum), i) .\nThis methods get very useful when you want to iterate over the names/values of an enum.   If you're done with the code above, there's only one thing left:\ncreating a .cshtml view (shape) to render our form.   Shapes defining edit forms for content type settings has to be placed under /Views/DefinitionTemplates/  with the name  <settingsClassName>.cshtml .\nSo in our case it'll look like on the picture above.\nInside, it's just like any other Razor view file:  @model Szmyd.Orchard.Modules.Sharing.Settings.ShareBarTypePartSettings\n<fieldset>\n    <div>\n        @Html.LabelFor(m => m.Mode, T(\"Share bar display style\"))\n        @Html.DropDownListFor(m => m.Mode,\n            new System.Web.Mvc.SelectList(\n                Model.AvailableModes, \"Value\", \"Text\", (int)Model.Mode))\n    </div>\n</fieldset>  This renders the dropdown list so user can choose one of the predefined Modes. Model.AvailableModes  contains the available ones: we populated the property with appropriate\ndata in  TypePartEditor  method above.  Hooray, we're done!  Now you possibly wonder, where will this edit form be shown?\nOrchard will render settings form when you'll try to edit the content type containing your part.\nThe steps are like this:  Content Types -> Edit the type you want -> Add your part -> Voila! \nThere is a nice arrow image next to your part. If you click it - the form shows.",
            "title": "Defining settings for Content Types"
        },
        {
            "location": "/Documentation/Adding-custom-settings/#using-settings-for-content-type",
            "text": "As for site-scoped settings, this section is also a one-liner.\nThe part below is some content part (in this case a ShareBarPart from the Orchard Sharing  project).  var typeSettings = part.Settings.GetModel<ShareBarTypePartSettings>();  You can retrieve and use the settings wherever you have access to your part\n(particularly in the driver Display/Editor methods, but also shapes, handlers and so on).\nI used it in the ShareBarPart driver Display method to change the look of a share bar part.",
            "title": "Using settings for content type"
        },
        {
            "location": "/Documentation/WebApi-In-Orchard/",
            "text": "Web Api is available in Orchard. You can implement a web api to fit your needs in a custom module.\n\n\nCreating Api Controllers\n\n\nThe process of creating an Api Controller in Orchard is very similar to how you would do so in a standard .NET Web Api application. Create your controller class and have it inherit from ApiController:\n\n\nnamespace MyCustomModule.Controllers.Api{\n    public class MyApiController : ApiController{\n        public IHttpActionResult Get(){\n            var itemsList = new List<string>{\n                \"Item 1\",\n                \"Item 2\", \n                \"Item 3\"\n            };\n\n            return Ok(itemsList);\n        }\n    }\n}\n\n\n\nThe above code sample will return the 3 item list shown in code when you hit the endpoint \"/api/MyCustomModule/MyApi\".\n\n\nDeclaring custom Api Routes\n\n\nTo generate more friendly Api routes, you follow a similar process to declaring custom MVC routes in Orchard. Implement the IHttpRouteProvider interface like so:\n\n\nnamespace MyCustomModule {\n    public class ApiRoutes : IHttpRouteProvider {\n        public IEnumerable<RouteDescriptor> GetRoutes() {\n            return new RouteDescriptor[] {\n                new HttpRouteDescriptor {\n                    Name = \"Default Api\",\n                    Priority = 0,\n                    RouteTemplate = \"api/myapi/{id}\",\n                    Defaults = new {\n                        area = \"MyCustomModule\",\n                        controller = \"MyApi\",\n                        id = RouteParameter.Optional\n                    }\n                }\n            };\n        }\n\n        public void GetRoutes(ICollection<RouteDescriptor> routes) {\n            foreach (RouteDescriptor routeDescriptor in GetRoutes()) {\n                routes.Add(routeDescriptor);\n            }\n        }\n    }\n}\n\n\n\nNow, the Api endpoint can be reached by hitting \"/api/myapi\".\n\n\nConfiguring Web Api in Orchard\n\n\nSince Orchard doesn't have the concept of an AppStart file, in order to add custom configuration to Web Api in Orchard, you must do so in an Autofac module. For example, the following will set the default Web Api return type to Json, and will ensure that Json objects/properties returned by the Api follow the camelCased naming convention.\n\n\nnamespace MyCustomModule {\n    public class WebApiConfig : Module {\n        protected override void Load(ContainerBuilder builder) {\n            GlobalConfiguration.Configuration.Formatters.JsonFormatter.SupportedMediaTypes.Add(new MediaTypeHeaderValue(\"text/html\"));\n\n            var jsonFormatter = GlobalConfiguration.Configuration.Formatters.OfType<JsonMediaTypeFormatter>().FirstOrDefault();\n\n            if (jsonFormatter != null) {\n                jsonFormatter.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();\n            }\n        }\n    }\n}\n\n\n\nConclusion\n\n\nThis document should provide the basics of getting started with Web Api in Orchard. Enjoy!",
            "title": "Web Api in Orchard"
        },
        {
            "location": "/Documentation/WebApi-In-Orchard/#creating-api-controllers",
            "text": "The process of creating an Api Controller in Orchard is very similar to how you would do so in a standard .NET Web Api application. Create your controller class and have it inherit from ApiController:  namespace MyCustomModule.Controllers.Api{\n    public class MyApiController : ApiController{\n        public IHttpActionResult Get(){\n            var itemsList = new List<string>{\n                \"Item 1\",\n                \"Item 2\", \n                \"Item 3\"\n            };\n\n            return Ok(itemsList);\n        }\n    }\n}  The above code sample will return the 3 item list shown in code when you hit the endpoint \"/api/MyCustomModule/MyApi\".",
            "title": "Creating Api Controllers"
        },
        {
            "location": "/Documentation/WebApi-In-Orchard/#declaring-custom-api-routes",
            "text": "To generate more friendly Api routes, you follow a similar process to declaring custom MVC routes in Orchard. Implement the IHttpRouteProvider interface like so:  namespace MyCustomModule {\n    public class ApiRoutes : IHttpRouteProvider {\n        public IEnumerable<RouteDescriptor> GetRoutes() {\n            return new RouteDescriptor[] {\n                new HttpRouteDescriptor {\n                    Name = \"Default Api\",\n                    Priority = 0,\n                    RouteTemplate = \"api/myapi/{id}\",\n                    Defaults = new {\n                        area = \"MyCustomModule\",\n                        controller = \"MyApi\",\n                        id = RouteParameter.Optional\n                    }\n                }\n            };\n        }\n\n        public void GetRoutes(ICollection<RouteDescriptor> routes) {\n            foreach (RouteDescriptor routeDescriptor in GetRoutes()) {\n                routes.Add(routeDescriptor);\n            }\n        }\n    }\n}  Now, the Api endpoint can be reached by hitting \"/api/myapi\".",
            "title": "Declaring custom Api Routes"
        },
        {
            "location": "/Documentation/WebApi-In-Orchard/#configuring-web-api-in-orchard",
            "text": "Since Orchard doesn't have the concept of an AppStart file, in order to add custom configuration to Web Api in Orchard, you must do so in an Autofac module. For example, the following will set the default Web Api return type to Json, and will ensure that Json objects/properties returned by the Api follow the camelCased naming convention.  namespace MyCustomModule {\n    public class WebApiConfig : Module {\n        protected override void Load(ContainerBuilder builder) {\n            GlobalConfiguration.Configuration.Formatters.JsonFormatter.SupportedMediaTypes.Add(new MediaTypeHeaderValue(\"text/html\"));\n\n            var jsonFormatter = GlobalConfiguration.Configuration.Formatters.OfType<JsonMediaTypeFormatter>().FirstOrDefault();\n\n            if (jsonFormatter != null) {\n                jsonFormatter.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();\n            }\n        }\n    }\n}",
            "title": "Configuring Web Api in Orchard"
        },
        {
            "location": "/Documentation/WebApi-In-Orchard/#conclusion",
            "text": "This document should provide the basics of getting started with Web Api in Orchard. Enjoy!",
            "title": "Conclusion"
        },
        {
            "location": "/Documentation/Understanding-data-access/",
            "text": "This topic has been updated for the Orchard 1.9 release.\n\n\n\n\nData access in an Orchard project is different than data access in a traditional web application, because the data model is built through code rather than through a database management system. You define your data properties in code and the Orchard framework builds the database components to persist the data. If you need to change the data structure, you write code that specifies the changes, and those changes are then propagated by that code to the database system. This code-centric model includes layers of abstraction that permit you to reuse components in different content types and to add or change behaviors without breaking other layers.\n\n\nThe key concepts of data access are the following:\n\n\n\n\nRecords\n\n\nData migrations\n\n\nContent handlers\n\n\nContent drivers\n\n\n\n\nRecords\n\n\nA record is a class that represents the database schema for a content part. To create a record, you define a class that derives from \nContentPartRecord\n and add the properties that you need in order to store data for the content part. Each property must be virtual. For example, a \nMap\n part might include the following record:\n\n\nnamespace Map.Models {\n    public class MapRecord : ContentPartRecord {\n        public virtual double Latitude { get; set; }\n        public virtual double Longitude { get; set; }\n    }\n}\n\n\n\nTypically, the record class resides in a folder named Models. The parent class, \nContentPartRecord\n, also includes a property named \nid\n and a reference to the content item object. Therefore, an instance of the \nMapRecord\n class includes not just \nLatitude\n and \nLongitude\n but also the \nid\n property and the content item object that is used to maintain the relationships between the part and other content.\n\n\nWhen you define a content part, you use the record as shown below:\n\n\nnamespace Maps.Models\n{\n    public class MapPart : ContentPart<MapRecord>\n    {\n        [Required]\n        public double Latitude\n        {\n            get { return Retrieve(r => r.Latitude); }\n            set { Store(r => r.Latitude, value); }\n        }\n\n        [Required]\n        public double Longitude\n        {\n            get { return Retrieve(r => r.Longitude); }\n            set { Store(r => r.Longitude, value); }\n        }\n    }\n}\n\n\n\nNotice that only data that's relevant to the part is defined in the \nMapPart\n class. You do not define any properties that are needed to maintain the data relationships between \nMapPart\n and other content.\n\n\nFor a complete example of the MapPart, see \nWriting a Content Part\n. You can also read the \nGetting Started with Modules course\n to familiarize yourself with the overall concepts of module development.\n\n\nData Migrations\n\n\nCreating the record class does not create the database table; it only creates a model of the schema. To create the database table, you must write a data migration class.\n\n\nA data migration class enables you to create and update the schema for a database table. The code in a migration class is executed when an administrator chooses to enable or update the part. The update methods provide a history of changes to the database schema. When an update is available, the site administrator can choose to run the update.\n\n\nYou can create a data migration class by running the following command from the Orchard command line:\n\n\ncodegen datamigration <feature_name>\n\n\n\nThis command creates a \nMigrations.cs\n file in the root of the feature. A \nCreate\n method is automatically created in the migration class.\n\n\nIn the \nCreate\n method, you use the \nSchemaBuilder\n class to create the database table, as shown below for the \nMapPart\n feature.\n\n\nIn the \nUninstall\n method you can implement destructive operations that will be executed when the module is uninstalled. Keep in mind that when a module is re-added and enabled after it was uninstalled it will be installed again, thus the \nCreate\n method of migrations will also run.\n\n\nnamespace Map.DataMigrations {\n    public class Migrations : DataMigrationImpl {\n\n        public int Create() {\n            // Creating table MapRecord\n            SchemaBuilder.CreateTable(\"MapRecord\", table => table\n                .ContentPartRecord()\n                .Column(\"Latitude\", DbType.Double)\n                .Column(\"Longitude\", DbType.Double)\n            );\n\n            ContentDefinitionManager.AlterPartDefinition(\n                typeof(MapPart).Name, cfg => cfg.Attachable());\n\n            return 1;\n        }\n\n        public void Uninstall() {\n            // Dropping tables can potentially cause data loss for users so be sure to warn them in your module's documentation about the implications.\n            SchemaBuilder.DropTable(\"MapRecord\");\n            ContentDefinitionManager.DeletePartDefinition(typeof(MapPart).Name);\n        }\n    }\n}\n\n\n\nBy including \n.ContentPartRecord()\n with your properties in the definition of the database schema, you ensure that other essential fields are included in the table. In this case, an \nid\n field is included with \nLatitude\n and \nLongitude\n.\n\n\nThe return value is important, because it specifies the version number for the feature. You will use this version number to update the schema.\n\n\nYou can update the database table by adding a method with the naming convention \nUpdateFromN\n, where \nN\n is the number of the version to update. The following code shows the migration class with a method that updates version by adding a new column.\n\n\nnamespace Map.DataMigrations {\n    public class Migrations : DataMigrationImpl {\n\n        public int Create() {\n            // Creating table MapRecord\n            SchemaBuilder.CreateTable(\"MapRecord\", table => table\n                .ContentPartRecord()\n                .Column(\"Latitude\", DbType.Double)\n                .Column(\"Longitude\", DbType.Double)\n            );\n\n            ContentDefinitionManager.AlterPartDefinition(\n                typeof(MapPart).Name, cfg => cfg.Attachable());\n\n            return 1;\n        }\n\n        public int UpdateFrom1() {\n            SchemaBuilder.AlterTable(\"MapRecord\", table => table\n                .AddColumn(\"Description\", DbType.String)\n           );\n            return 2;\n        }\n\n    }\n}\n\n\n\nThe update method returns 2, because after the column is added, the version number is 2. If you have to add another update method, that method would be called \nUpdateFrom2()\n.\n\n\nAfter you add the update method and run the project the module will be silently & automatically upgraded.\n\n\nContent Handlers\n\n\nA content handler is similar to a filter in ASP.NET MVC. In the handler, you define actions for specific events. In a simple content handler, you just define the repository of record objects for the content part, as shown in the following example:\n\n\nnamespace Map.Handlers {\n    public class MapHandler : ContentHandler {\n        public MapHandler(IRepository<MapRecord> repository) {\n            Filters.Add(StorageFilter.For(repository));\n        }\n    }\n}\n\n\n\nIn more advanced content handlers, you define actions that are performed when an event occurs, such as when the feature is published or activated. For more information about content handlers, see \nUnderstanding Content Handlers\n.\n\n\nContent Drivers\n\n\nA content driver is similar to a controller in ASP.NET MVC. It contains code that is specific to a content part type and is usually involved in creating data shapes for different conditions, such as display or edit modes. Typically, you override the \nDisplay\n and \nEditor\n methods to return the \nContentShapeResult\n object for your scenario.\n\n\nFor an example of using a content driver, see \nAccessing and Rendering Shapes\n.",
            "title": "Understanding Data Access"
        },
        {
            "location": "/Documentation/Understanding-data-access/#records",
            "text": "A record is a class that represents the database schema for a content part. To create a record, you define a class that derives from  ContentPartRecord  and add the properties that you need in order to store data for the content part. Each property must be virtual. For example, a  Map  part might include the following record:  namespace Map.Models {\n    public class MapRecord : ContentPartRecord {\n        public virtual double Latitude { get; set; }\n        public virtual double Longitude { get; set; }\n    }\n}  Typically, the record class resides in a folder named Models. The parent class,  ContentPartRecord , also includes a property named  id  and a reference to the content item object. Therefore, an instance of the  MapRecord  class includes not just  Latitude  and  Longitude  but also the  id  property and the content item object that is used to maintain the relationships between the part and other content.  When you define a content part, you use the record as shown below:  namespace Maps.Models\n{\n    public class MapPart : ContentPart<MapRecord>\n    {\n        [Required]\n        public double Latitude\n        {\n            get { return Retrieve(r => r.Latitude); }\n            set { Store(r => r.Latitude, value); }\n        }\n\n        [Required]\n        public double Longitude\n        {\n            get { return Retrieve(r => r.Longitude); }\n            set { Store(r => r.Longitude, value); }\n        }\n    }\n}  Notice that only data that's relevant to the part is defined in the  MapPart  class. You do not define any properties that are needed to maintain the data relationships between  MapPart  and other content.  For a complete example of the MapPart, see  Writing a Content Part . You can also read the  Getting Started with Modules course  to familiarize yourself with the overall concepts of module development.",
            "title": "Records"
        },
        {
            "location": "/Documentation/Understanding-data-access/#data-migrations",
            "text": "Creating the record class does not create the database table; it only creates a model of the schema. To create the database table, you must write a data migration class.  A data migration class enables you to create and update the schema for a database table. The code in a migration class is executed when an administrator chooses to enable or update the part. The update methods provide a history of changes to the database schema. When an update is available, the site administrator can choose to run the update.  You can create a data migration class by running the following command from the Orchard command line:  codegen datamigration <feature_name>  This command creates a  Migrations.cs  file in the root of the feature. A  Create  method is automatically created in the migration class.  In the  Create  method, you use the  SchemaBuilder  class to create the database table, as shown below for the  MapPart  feature.  In the  Uninstall  method you can implement destructive operations that will be executed when the module is uninstalled. Keep in mind that when a module is re-added and enabled after it was uninstalled it will be installed again, thus the  Create  method of migrations will also run.  namespace Map.DataMigrations {\n    public class Migrations : DataMigrationImpl {\n\n        public int Create() {\n            // Creating table MapRecord\n            SchemaBuilder.CreateTable(\"MapRecord\", table => table\n                .ContentPartRecord()\n                .Column(\"Latitude\", DbType.Double)\n                .Column(\"Longitude\", DbType.Double)\n            );\n\n            ContentDefinitionManager.AlterPartDefinition(\n                typeof(MapPart).Name, cfg => cfg.Attachable());\n\n            return 1;\n        }\n\n        public void Uninstall() {\n            // Dropping tables can potentially cause data loss for users so be sure to warn them in your module's documentation about the implications.\n            SchemaBuilder.DropTable(\"MapRecord\");\n            ContentDefinitionManager.DeletePartDefinition(typeof(MapPart).Name);\n        }\n    }\n}  By including  .ContentPartRecord()  with your properties in the definition of the database schema, you ensure that other essential fields are included in the table. In this case, an  id  field is included with  Latitude  and  Longitude .  The return value is important, because it specifies the version number for the feature. You will use this version number to update the schema.  You can update the database table by adding a method with the naming convention  UpdateFromN , where  N  is the number of the version to update. The following code shows the migration class with a method that updates version by adding a new column.  namespace Map.DataMigrations {\n    public class Migrations : DataMigrationImpl {\n\n        public int Create() {\n            // Creating table MapRecord\n            SchemaBuilder.CreateTable(\"MapRecord\", table => table\n                .ContentPartRecord()\n                .Column(\"Latitude\", DbType.Double)\n                .Column(\"Longitude\", DbType.Double)\n            );\n\n            ContentDefinitionManager.AlterPartDefinition(\n                typeof(MapPart).Name, cfg => cfg.Attachable());\n\n            return 1;\n        }\n\n        public int UpdateFrom1() {\n            SchemaBuilder.AlterTable(\"MapRecord\", table => table\n                .AddColumn(\"Description\", DbType.String)\n           );\n            return 2;\n        }\n\n    }\n}  The update method returns 2, because after the column is added, the version number is 2. If you have to add another update method, that method would be called  UpdateFrom2() .  After you add the update method and run the project the module will be silently & automatically upgraded.",
            "title": "Data Migrations"
        },
        {
            "location": "/Documentation/Understanding-data-access/#content-handlers",
            "text": "A content handler is similar to a filter in ASP.NET MVC. In the handler, you define actions for specific events. In a simple content handler, you just define the repository of record objects for the content part, as shown in the following example:  namespace Map.Handlers {\n    public class MapHandler : ContentHandler {\n        public MapHandler(IRepository<MapRecord> repository) {\n            Filters.Add(StorageFilter.For(repository));\n        }\n    }\n}  In more advanced content handlers, you define actions that are performed when an event occurs, such as when the feature is published or activated. For more information about content handlers, see  Understanding Content Handlers .",
            "title": "Content Handlers"
        },
        {
            "location": "/Documentation/Understanding-data-access/#content-drivers",
            "text": "A content driver is similar to a controller in ASP.NET MVC. It contains code that is specific to a content part type and is usually involved in creating data shapes for different conditions, such as display or edit modes. Typically, you override the  Display  and  Editor  methods to return the  ContentShapeResult  object for your scenario.  For an example of using a content driver, see  Accessing and Rendering Shapes .",
            "title": "Content Drivers"
        },
        {
            "location": "/Documentation/Understanding-content-handlers/",
            "text": "This topic has been updated for the Orchard 1.9.1 release.\n\n\n\n\nA content handler defines what happens with a content part in response to specific events, such as when the part is activated. The content handler enables you to perform actions at particular moments in the lifecycle of the content item. It also enables you to set up data repositories and manipulate the data model prior to rendering the content item.\n\n\nTypically, you define a handler for a content part by creating a class that inherits from \nContentHandler\n. The \nContentHandler\n class is a base class that provides the methods and properties you will commonly need when defining your own content handler. Alternately, you can also create your own content handler by creating a class that implements \nIContentHandler\n.\n\n\nDefining Data Repository and Adding Filters\n\n\nWhen working with a content part that persists data, add a constructor for the handler that accepts an \nIRepository\n parameter for objects of the type you defined for records in the part. The following code shows a basic implementation of a content handler. \nMapRecord\n is a class defined in a separate file.\n\n\nusing Map.Models;\nusing Orchard.ContentManagement.Handlers;\nusing Orchard.Data;\n\nnamespace Map.Handlers {\n    public class MapHandler : ContentHandler {\n        public MapHandler(IRepository<MapRecord> repository) {\n            Filters.Add(StorageFilter.For(repository));\n        }\n    }\n}\n\n\n\nYou can add other types of filters to the content handler. For example, you can add an \nActivatingFilter\n to the \nFilters\n collection to define how the part is added to a type.\n\n\nBuilt-in filter types\n\n\n\n\nStorageFilter\n class - Takes care of persisting the data from \nrepository\n object to the database. Its usage is shown in the example above.\n\n\nActivatingFilter\n class - Attaches a part to a content type from code. As opposed to attaching parts via migrations, parts attached using this filter will neither be displayed in the Dashboard, nor users will be able to remove them from types. It's a legitimate way of attaching parts that should \nalways\n exist on a given content type.\n\n\n\n\nLifecycle Events\n\n\nIn addition to defining the repository, you can add code for handling events. You use the following methods to add the code that is executed for the event:\n\n\n\n\nOnActivated\n\n\nOnCreated\n\n\nOnCreating\n\n\nOnDestroyed\n\n\nOnDestroying\n\n\nOnGetContentItemMetadata\n\n\nOnGetDisplayShape\n\n\nOnGetEditorShape\n\n\nOnIndexed\n\n\nOnIndexing\n\n\nOnInitialized\n\n\nOnInitializing\n\n\nOnLoaded\n\n\nOnLoading\n\n\nOnPublished\n\n\nOnPublishing\n\n\nOnRemoved\n\n\nOnRemoving\n\n\nOnUpdated\n\n\nOnUpdateEditorShape\n\n\nOnUpdating\n\n\nOnUnpublished\n\n\nOnUnpublishing\n\n\nOnVersioned\n\n\nOnVersioning\n\n\n\n\nFor example, the \nTagPartHandler\n class contains code to take action for the \nRemoved\n and \nIndexing\n events, as shown in the following example:\n\n\npublic class TagsPartHandler : ContentHandler {\n    public TagsPartHandler(IRepository<TagsPartRecord> repository, ITagService tagService) {\n        Filters.Add(StorageFilter.For(repository));\n\n        OnRemoved<TagsPart>((context, tags) => \n            tagService.RemoveTagsForContentItem(context.ContentItem));\n\n        OnIndexing<TagsPart>((context, tagsPart) => \n            context.DocumentIndex.Add(\"tags\", String.Join(\", \", tagsPart.CurrentTags.Select(t => t.TagName))).Analyze());\n    }\n}\n\n\n\nData Manipulation\n\n\nYou can override the following methods to perform actions related to the state of the data:\n\n\n\n\nGetItemMetadata\n\n\nBuildDisplayShape\n\n\nBuildEditorShape\n\n\nUpdateEditorShape\n\n\n\n\nFor example, the \nBlogPostPartHandler\n class overrides the \nGetItemMetadata\n method to add route values using code like the following:\n\n\nprotected override void GetItemMetadata(GetContentItemMetadataContext context) {\n    var blogPost = context.ContentItem.As<BlogPostPart>();\n\n    if (blogPost == null)\n        return;\n\n    context.Metadata.CreateRouteValues = new RouteValueDictionary {\n        {\"Area\", \"Orchard.Blogs\"},\n        {\"Controller\", \"BlogPostAdmin\"},\n        {\"Action\", \"Create\"},\n        {\"blogId\", blogPost.BlogPart.Id}\n    };\n    context.Metadata.EditorRouteValues = new RouteValueDictionary {\n        {\"Area\", \"Orchard.Blogs\"},\n        {\"Controller\", \"BlogPostAdmin\"},\n        {\"Action\", \"Edit\"},\n        {\"postId\", context.ContentItem.Id},\n        {\"blogId\", blogPost.BlogPart.Id}\n    };\n    context.Metadata.RemoveRouteValues = new RouteValueDictionary {\n        {\"Area\", \"Orchard.Blogs\"},\n        {\"Controller\", \"BlogPostAdmin\"},\n        {\"Action\", \"Delete\"},\n        {\"postId\", context.ContentItem.Id},\n        {\"blogSlug\", blogPost.BlogPart.As<RoutePart>().Slug}\n    };\n}",
            "title": "Understanding Content Handlers"
        },
        {
            "location": "/Documentation/Understanding-content-handlers/#defining-data-repository-and-adding-filters",
            "text": "When working with a content part that persists data, add a constructor for the handler that accepts an  IRepository  parameter for objects of the type you defined for records in the part. The following code shows a basic implementation of a content handler.  MapRecord  is a class defined in a separate file.  using Map.Models;\nusing Orchard.ContentManagement.Handlers;\nusing Orchard.Data;\n\nnamespace Map.Handlers {\n    public class MapHandler : ContentHandler {\n        public MapHandler(IRepository<MapRecord> repository) {\n            Filters.Add(StorageFilter.For(repository));\n        }\n    }\n}  You can add other types of filters to the content handler. For example, you can add an  ActivatingFilter  to the  Filters  collection to define how the part is added to a type.",
            "title": "Defining Data Repository and Adding Filters"
        },
        {
            "location": "/Documentation/Understanding-content-handlers/#built-in-filter-types",
            "text": "StorageFilter  class - Takes care of persisting the data from  repository  object to the database. Its usage is shown in the example above.  ActivatingFilter  class - Attaches a part to a content type from code. As opposed to attaching parts via migrations, parts attached using this filter will neither be displayed in the Dashboard, nor users will be able to remove them from types. It's a legitimate way of attaching parts that should  always  exist on a given content type.",
            "title": "Built-in filter types"
        },
        {
            "location": "/Documentation/Understanding-content-handlers/#lifecycle-events",
            "text": "In addition to defining the repository, you can add code for handling events. You use the following methods to add the code that is executed for the event:   OnActivated  OnCreated  OnCreating  OnDestroyed  OnDestroying  OnGetContentItemMetadata  OnGetDisplayShape  OnGetEditorShape  OnIndexed  OnIndexing  OnInitialized  OnInitializing  OnLoaded  OnLoading  OnPublished  OnPublishing  OnRemoved  OnRemoving  OnUpdated  OnUpdateEditorShape  OnUpdating  OnUnpublished  OnUnpublishing  OnVersioned  OnVersioning   For example, the  TagPartHandler  class contains code to take action for the  Removed  and  Indexing  events, as shown in the following example:  public class TagsPartHandler : ContentHandler {\n    public TagsPartHandler(IRepository<TagsPartRecord> repository, ITagService tagService) {\n        Filters.Add(StorageFilter.For(repository));\n\n        OnRemoved<TagsPart>((context, tags) => \n            tagService.RemoveTagsForContentItem(context.ContentItem));\n\n        OnIndexing<TagsPart>((context, tagsPart) => \n            context.DocumentIndex.Add(\"tags\", String.Join(\", \", tagsPart.CurrentTags.Select(t => t.TagName))).Analyze());\n    }\n}",
            "title": "Lifecycle Events"
        },
        {
            "location": "/Documentation/Understanding-content-handlers/#data-manipulation",
            "text": "You can override the following methods to perform actions related to the state of the data:   GetItemMetadata  BuildDisplayShape  BuildEditorShape  UpdateEditorShape   For example, the  BlogPostPartHandler  class overrides the  GetItemMetadata  method to add route values using code like the following:  protected override void GetItemMetadata(GetContentItemMetadataContext context) {\n    var blogPost = context.ContentItem.As<BlogPostPart>();\n\n    if (blogPost == null)\n        return;\n\n    context.Metadata.CreateRouteValues = new RouteValueDictionary {\n        {\"Area\", \"Orchard.Blogs\"},\n        {\"Controller\", \"BlogPostAdmin\"},\n        {\"Action\", \"Create\"},\n        {\"blogId\", blogPost.BlogPart.Id}\n    };\n    context.Metadata.EditorRouteValues = new RouteValueDictionary {\n        {\"Area\", \"Orchard.Blogs\"},\n        {\"Controller\", \"BlogPostAdmin\"},\n        {\"Action\", \"Edit\"},\n        {\"postId\", context.ContentItem.Id},\n        {\"blogId\", blogPost.BlogPart.Id}\n    };\n    context.Metadata.RemoveRouteValues = new RouteValueDictionary {\n        {\"Area\", \"Orchard.Blogs\"},\n        {\"Controller\", \"BlogPostAdmin\"},\n        {\"Action\", \"Delete\"},\n        {\"postId\", context.ContentItem.Id},\n        {\"blogSlug\", blogPost.BlogPart.As<RoutePart>().Slug}\n    };\n}",
            "title": "Data Manipulation"
        },
        {
            "location": "/Documentation/Writing-a-new-theme/",
            "text": "This topic was updated for the Orchard 1.0 release.\n\n\n\n\nAn Orchard theme defines an application's appearance and is used to customize the look and feel of an Orchard website. A theme can override the style sheets, images, layouts, or content templates provided by any Orchard module. In addition, a theme can contain code that overrides targeted code in a module.\n\n\nThis article shows how to create a theme from scratch. It is intended to be an introduction to theme development and has been kept simple by design. \n\n\nInstead of starting from scratch, you can create a theme by customizing an existing theme (a parent theme). Orchard provides a theme named \"TheThemeMachine\" that is designed as an easy-to-use parent for custom themes. For more information about using a parent theme, see \nCustomizing the Default Theme\n.\n\n\nGenerating a New Theme\n\n\nBefore you can use the command-line command \ncodegen\n to generate the code structure for you new theme, you must download and enable the \nCode Generation\n feature. This feature is not installed to Orchard by default. For more information, see \nCommand-line code generation\n.\n\n\nTo generate the code structure for a new theme, open the Orchard command-line utility and enter the following command:\n\n\ncodegen theme MyFirstTheme\n\n\n\nThe \ncodegen\n command creates the code structure for a new theme and sets the name of the theme to \nMyFirstTheme\n. The command generates the following folder structure:\n\n\n\n\nThe only files created are the \nTheme.txt\n and \nViews\\Web.config\n files. The \nTheme.txt\n file is the theme manifest and is where the \nAdmin Panel\n (dashboard) looks for information such as the name of the theme. \nWeb.config\n is a configuration file that ASP.NET MVC requires for rendering any views that are in the \nViews\n folder. You seldom have to make changes in the \nWeb.config\n file. \n\n\nCreating Styles for Your Theme\n\n\nIn the \nStyles\n folder, create a file named \nSite.css\n. (You can name the file anything you want as long as it has a \n.css\n extension.)\n\n\nThe following example shows a stylesheet. (It has been kept simple for this example.) For information about the structure of this stylesheet and other CSS recommendations, see \nUI Guidelines for Theme Authors\n. \n\n\n/*\nTheme: My First Theme\nAuthor: \nCopyright: \n*/\n\n/* Colors Palette\nBackground: #d3d3d3\nText: #000\nMain Accent: #999\nLinks: #c03\n*/\n\n/* Reset\n***************************************************************/\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, font, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    outline: 0;\n    font-weight: inherit;\n    font-style: inherit;\n    font-size: 100%;\n    font-family: inherit;\n    vertical-align: baseline;                                       \n}\n\nheader, footer, aside, nav, article { display: block; }\n\n/* Clearing Float\n***************************************************************/\ngroup:after {\n    content: \".\";\n    display: block;\n    height: 0;\n    clear: both;\n    visibility: hidden;\n}\n\n.group {display: inline-block;}  /* for IE/Mac */\n\n/* General\n***************************************************************/\nbody {\n    font: normal 100% Segoe UI,Trebuchet,Arial,Sans-Serif;\n    height: 100%;\n    text-align:left;\n    color:#000;\n    background: #d3d3d3;\n}\n\n\n/* Headings */\nh1,h2,h3,h4,h5,h6,legend {font-weight:normal; font-style: normal;}\n\nh1 {font-size: 160%;}\nh2 {font-size: 145%;}\nh3 {font-size: 130%;}\nh4 {font-size: 120%;}\nh5 {font-size: 105%;}\n\np           { margin: 0 0 1em; line-height: 1.538em; }\np img.left  { float: left; margin: 0.923em 0.923em 0.923em 0; padding: 0; }\np img.right { float: right; margin: 0.923em 0 0.923em 0.923em; }\n\na:focus, \na:hover     { text-decoration: underline; }\na           { color: #c03; text-decoration: none; }\n\n#header {\n    background:#000;\n    color: #000;\n    width:100%;\n    height:50px;\n    margin-bottom:40px;\n}\n\n#branding h1{\n    font-size: 140%;\n    color:#fff;\n    padding:8px 0 0 40px;\n}\n\n/* Structure\n***************************************************************/\n#layout-navigation \n{\n    width: 960px;\n    margin: 0 auto;\n    display: block;\n    border-bottom: 1px solid #dbdbdb;\n}\n\nnav ul \n{\n    padding: 0px;\n    margin: 0px;\n}\n    nav ul li\n    {\n        border:1px solid #dbdbdb;\n        background:#f6f6f6;\n        display:block;\n        float:left;\n        margin:0 2px -1px 0;\n    }\n    nav ul li.current \n    {\n        border-bottom: 1px solid #fff;\n        background:#fff;\n    }\n    nav ul a \n    {\n        padding:0 18px;\n        display:block;\n        float:left;\n        color: #333;\n        font-size: 1.077em;\n        text-decoration:none;\n        line-height:24px;\n    }\n\n/* Main\n***************************************************************/\n#main {\n    margin:0 auto 40px;\n    width:600px;\n}\n\n/* Secondary\n***************************************************************/\n\n/* Forms\n***************************************************************/\n\n/* Misc\n***************************************************************/\n\n\n\nAdding a Layout to Your Theme\n\n\nIn the \nViews\n folder, add a layout file (\nLayout.cshtml\n) and add the following code and markup:\n\n\n@{\n    Script.Require(\"ShapesBase\");\n    Style.Include(\"site.css\");\n}\n\n<div id=\"header\">\n    <div id=\"branding\">\n        <h1>@T(\"Welcome to the Playground\")</h1>\n    </div>\n</div>\n<div id=\"layout-navigation\" class=\"group\">\n    @Display(Model.Navigation)\n</div>\n<div id=\"main\">\n@Display(Model.Content)\n</div>\n\n\n\nThis file defines the basic structure of the rendered web page. For more information about layout pages, see \nTemplate Files and their Locations\n. \n\n\nAdding a Theme Image\n\n\nYou can provide a thumbnail image that represents your new theme, which will be displayed in the \nAdmin Panel\n. The image file must be named \nTheme.png\n and it must be placed in the theme's root folder. The following image represents this new theme.\n\n\n\n\nApplying a New Theme\n\n\nTo apply a theme, in the \nDashboard\n, click \nThemes\n. Under \nAvailable\n, select the new theme and then click \nSet Current\n.\n\n\n\n\nThe \nManage Themes\n page is redisplayed showing \nMyFirstTheme\n as the current theme.\n\n\nYou can now go to your website to see the new theme in action.",
            "title": "Writing a New Theme"
        },
        {
            "location": "/Documentation/Writing-a-new-theme/#generating-a-new-theme",
            "text": "Before you can use the command-line command  codegen  to generate the code structure for you new theme, you must download and enable the  Code Generation  feature. This feature is not installed to Orchard by default. For more information, see  Command-line code generation .  To generate the code structure for a new theme, open the Orchard command-line utility and enter the following command:  codegen theme MyFirstTheme  The  codegen  command creates the code structure for a new theme and sets the name of the theme to  MyFirstTheme . The command generates the following folder structure:   The only files created are the  Theme.txt  and  Views\\Web.config  files. The  Theme.txt  file is the theme manifest and is where the  Admin Panel  (dashboard) looks for information such as the name of the theme.  Web.config  is a configuration file that ASP.NET MVC requires for rendering any views that are in the  Views  folder. You seldom have to make changes in the  Web.config  file.",
            "title": "Generating a New Theme"
        },
        {
            "location": "/Documentation/Writing-a-new-theme/#creating-styles-for-your-theme",
            "text": "In the  Styles  folder, create a file named  Site.css . (You can name the file anything you want as long as it has a  .css  extension.)  The following example shows a stylesheet. (It has been kept simple for this example.) For information about the structure of this stylesheet and other CSS recommendations, see  UI Guidelines for Theme Authors .   /*\nTheme: My First Theme\nAuthor: \nCopyright: \n*/\n\n/* Colors Palette\nBackground: #d3d3d3\nText: #000\nMain Accent: #999\nLinks: #c03\n*/\n\n/* Reset\n***************************************************************/\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, font, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    outline: 0;\n    font-weight: inherit;\n    font-style: inherit;\n    font-size: 100%;\n    font-family: inherit;\n    vertical-align: baseline;                                       \n}\n\nheader, footer, aside, nav, article { display: block; }\n\n/* Clearing Float\n***************************************************************/\ngroup:after {\n    content: \".\";\n    display: block;\n    height: 0;\n    clear: both;\n    visibility: hidden;\n}\n\n.group {display: inline-block;}  /* for IE/Mac */\n\n/* General\n***************************************************************/\nbody {\n    font: normal 100% Segoe UI,Trebuchet,Arial,Sans-Serif;\n    height: 100%;\n    text-align:left;\n    color:#000;\n    background: #d3d3d3;\n}\n\n\n/* Headings */\nh1,h2,h3,h4,h5,h6,legend {font-weight:normal; font-style: normal;}\n\nh1 {font-size: 160%;}\nh2 {font-size: 145%;}\nh3 {font-size: 130%;}\nh4 {font-size: 120%;}\nh5 {font-size: 105%;}\n\np           { margin: 0 0 1em; line-height: 1.538em; }\np img.left  { float: left; margin: 0.923em 0.923em 0.923em 0; padding: 0; }\np img.right { float: right; margin: 0.923em 0 0.923em 0.923em; }\n\na:focus, \na:hover     { text-decoration: underline; }\na           { color: #c03; text-decoration: none; }\n\n#header {\n    background:#000;\n    color: #000;\n    width:100%;\n    height:50px;\n    margin-bottom:40px;\n}\n\n#branding h1{\n    font-size: 140%;\n    color:#fff;\n    padding:8px 0 0 40px;\n}\n\n/* Structure\n***************************************************************/\n#layout-navigation \n{\n    width: 960px;\n    margin: 0 auto;\n    display: block;\n    border-bottom: 1px solid #dbdbdb;\n}\n\nnav ul \n{\n    padding: 0px;\n    margin: 0px;\n}\n    nav ul li\n    {\n        border:1px solid #dbdbdb;\n        background:#f6f6f6;\n        display:block;\n        float:left;\n        margin:0 2px -1px 0;\n    }\n    nav ul li.current \n    {\n        border-bottom: 1px solid #fff;\n        background:#fff;\n    }\n    nav ul a \n    {\n        padding:0 18px;\n        display:block;\n        float:left;\n        color: #333;\n        font-size: 1.077em;\n        text-decoration:none;\n        line-height:24px;\n    }\n\n/* Main\n***************************************************************/\n#main {\n    margin:0 auto 40px;\n    width:600px;\n}\n\n/* Secondary\n***************************************************************/\n\n/* Forms\n***************************************************************/\n\n/* Misc\n***************************************************************/",
            "title": "Creating Styles for Your Theme"
        },
        {
            "location": "/Documentation/Writing-a-new-theme/#adding-a-layout-to-your-theme",
            "text": "In the  Views  folder, add a layout file ( Layout.cshtml ) and add the following code and markup:  @{\n    Script.Require(\"ShapesBase\");\n    Style.Include(\"site.css\");\n}\n\n<div id=\"header\">\n    <div id=\"branding\">\n        <h1>@T(\"Welcome to the Playground\")</h1>\n    </div>\n</div>\n<div id=\"layout-navigation\" class=\"group\">\n    @Display(Model.Navigation)\n</div>\n<div id=\"main\">\n@Display(Model.Content)\n</div>  This file defines the basic structure of the rendered web page. For more information about layout pages, see  Template Files and their Locations .",
            "title": "Adding a Layout to Your Theme"
        },
        {
            "location": "/Documentation/Writing-a-new-theme/#adding-a-theme-image",
            "text": "You can provide a thumbnail image that represents your new theme, which will be displayed in the  Admin Panel . The image file must be named  Theme.png  and it must be placed in the theme's root folder. The following image represents this new theme.",
            "title": "Adding a Theme Image"
        },
        {
            "location": "/Documentation/Writing-a-new-theme/#applying-a-new-theme",
            "text": "To apply a theme, in the  Dashboard , click  Themes . Under  Available , select the new theme and then click  Set Current .   The  Manage Themes  page is redisplayed showing  MyFirstTheme  as the current theme.  You can now go to your website to see the new theme in action.",
            "title": "Applying a New Theme"
        },
        {
            "location": "/Documentation/Anatomy-of-a-theme/",
            "text": "Themes enable Orchard users to customize the rendering of the site and tailor it to their needs and design goals. Themes can perform targeted overrides of style sheets, images, layouts, or of any content template provided by any Orchard module.\n\n\nWhere Themes Live\n\n\nA theme is set of appropriately named files inside of a folder. That folder must be under the \nThemes\n folder under your Orchard website's root folder.\n\n\nTheThemeMachine\n\n\nThe theme named \nTheThemeMachine\n is the theme that comes built into Orchard. You can examine this theme in order to learn about Orchard themes. Like any theme, it can be found under the \nThemes\n folder.\n\n\n\n\nThe \nTheThemeMachine\n theme has been designed to be a clean-looking, modern theme and to be a good starting point for customization and for the development of new themes. This article uses this theme as an illustration.\n\n\nAnatomy of a Theme\n\n\nThis section describes required and optional elements of a theme.\n\n\nManifest\n\n\nTo be valid, a theme must have a manifest that describes it to the system. The manifest is a text file named \nTheme.txt\n that is found in the root folder of the theme it describes. Here is the manifest for the \nTheThemeMachine\n theme:\n\n\nName: The Theme Machine\nAuthor: jowall, mibach, loudej, heskew\nDescription: Orchard Theme Machine is a flexible multi-zone theme that provides a solid foundation to build your site. It features 20 collapsible widget zones and is flexible enough to cover a wide range of layouts.\nVersion: 1.8.1\nTags: Awesome\nWebsite: http://orchardproject.net\nZones: Header, Navigation, Featured, BeforeMain, AsideFirst, Messages, BeforeContent, Content, AfterContent, AsideSecond, AfterMain, TripelFirst, TripelSecond, TripelThird, FooterQuadFirst, FooterQuadSecond, FooterQuadThird, FooterQuadFourth, Footer\n\n\n\nThe beginning of the file gives the theme a friendly name, description, author, description, and tags. The \nZones\n field provides a list of all the zone names that are going to be available for widgets throughout the theme's layouts and templates. Zones are containers that can be added to any template or layout. Various UI elements can be injected into zones, but the most common ones are widgets. Not all zones need to be exposed in the manifest, only those that are intended to host widgets.\n\n\n\n\nThis illustration shows 19 zones, which is typically more than you need for a site. The zones include a header and footer, which are zones situated on the top and bottom of the page. There is a navigation zone, which is typically where navigation menus would be inserted. The \nFeatured\n zone is where you might put a site banner. \nBeforeMain\n and \nAfterMain\n surround the main zones on the top and bottom. \nAsideFirst\n and \nAsideSecond\n are sidebars that are rendered on the left and right of the main content. In the center of the page there is a \nMessages\n zone where notifications go, followed by \nBeforeContent\n, the content itself, the \nContent\n zone and the \nAfterContent\n zone. On the bottom of the page, there are \nTripelFirst\n, \nTripelSecond\n, and \nTripelThird\n that you can use if you want three columns on the bottom, and the \nFooterQuad*\n zones that you can use if you want four columns.\n\n\nAll zones in \nTheThemeMachine\n theme are collapsible, which means that they will only be rendered if there is content in them.\n\n\nIcon or Thumbnail\n\n\nA \nTheme.png\n file should be included with all Orchard themes. This image should be at least 400x400 pixels and is meant to represent the theme in the gallery or in the theme administration page. It usually is a thumbnail image of a page of a site rendered using that theme.\n\n\nWidget Zones Preview Image\n\n\nOptionally, a preview image for the widget zones can be added to the theme. The image should be placed at the root of the theme and be called ThemeZonePreview.png. This image should be 400 pixels wide and should show the different zones and their names. An example can be found in TheThemeMachine.\n\n\n\n\nStatic Resources\n\n\nA theme typically contains a number of static resources, such as CSS style sheets, JavaScript files, or images. Those files must be in the following folders:\n\n\n\n\nCSS style sheets should be in the \n\\Styles\n folder of the theme.\n\n\nJavaScript files should be in the \n\\Scripts\n folder of the theme. Any scripts you put in this folder should be custom scripts that are only related to your theme, not scripts that are intended to be reused. Such reusable scripts should be included in a separate module. See the jQuery module for an example.\n\n\nImages should be in \n\\Content\\Images\n folders. If your theme contains few images, it's fine to keep them all at the same level. However, if you have many images, it is recommended that you organize them in subfolders.\n\n\n\n\n\n\nNote\n To enable files to be served, each of the folders that contains static files such as style sheets, images, or JavaScript code should contain a \nweb.config\n file that contains the following content:\n\n\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n  <system.webServer>\n    <staticContent>\n      <clientCache cacheControlMode=\"UseMaxAge\" cacheControlMaxAge=\"7.00:00:00\" />\n    </staticContent>\n\n    <handlers accessPolicy=\"Script,Read\">\n      <!--\n      iis7 - for any request to a file exists on disk, return it via native http module.\n      accessPolicy 'Script' is to allow for a managed 404 page.\n      -->\n      <add name=\"StaticFile\" path=\"*\" verb=\"*\" modules=\"StaticFileModule\" preCondition=\"integratedMode\" resourceType=\"File\" requireAccess=\"Read\" />\n    </handlers>\n  </system.webServer>\n</configuration>\n\n\n\nDocument\n\n\nThe \nDocument.cshtml\n file is usually not found in themes because there is seldom any reason to overwrite it. Most themes can just fall back to the version of the file that can be found in the \nSafeMode\n theme, under \n\\Views\n. The \nDocument.cshtml\n file is responsible for the HTML that goes around the \nbody\n element. This means it defines the \ndoctype\n element (Orchard assumes the HTML5 document type), the \nhtml\n element, the \nhead\n element (where it defines the head zone where the \nmeta\n tags), some \nscript\n elements, and the links for style sheets to be inserted. (This is different from the \nHeader\n zone, which is the top zone in the body.) The \nDocument.cshtml\n file also contains the \ntitle\n element inside the \nhead\n element. Finally, the file defines the \nbody\n element where the \nBody\n and \nTail\n zones are rendered.\n\n\nLayouts\n\n\nLayouts are the outermost shape that is rendered within the \nbody\n element. For example, this is typically where you define the main widget zones. You can read about the details of the markup inside of a layout in the \nMarkup\n section later in this document.\n\n\nA theme can contain any number of layout files, even though currently only one is supported and included in the \nTheThemeMachine\n theme, namely \nLayout.cshtml\n. For example, a theme can add specialized layouts, such as \nLayout-Blog.cshtml\n or \nLayout-HomePage.cshtml\n, that would be used instead of the default for a blog or for the homepage, provided there is an extension providing those layout shape alternates. Notice that layouts are named \nLayout-{layout name}.cshtml\n. Each layout can have a different set of zones, organized differently in markup.\n\n\nFor an example of how your own modules and themes can provide alternative layouts based on custom criteria, see \nSwitching the Layout in Orchard CMS\n.\n\n\nShape Templates\n\n\nIn Orchard, before a web page is rendered into HTML, it is built as a tree of \nshapes\n. Shapes are flexible objects that represent the objects that will contribute to the rendering of the page. Examples include zones, menus, menu items, and widgets.\n\n\nEach shape can be rendered by a template, which can be overridden by a theme. Templates have the same name as the shape they are made to render. For example, if \nMenu.cshtml\n exists, it is used to render a \nMenu\n shape.\n\n\nThe \nTheThemeMachine\n theme has two shape templates, \nBadgeOfHonor\n and \nBranding\n, which are built from \nLayout.cshtml\n and injected into the \nHeader\n and \nFooter\n zones using the following code:\n\n\n// Site name and link to the home page\nWorkContext.Layout.Header.Add(New.Branding(), \"5\");\n// Powered by Orchard\nWorkContext.Layout.Footer.Add(New.BadgeOfHonor(), \"5\");\n\n\n\n\n\nNote\n Templates are one of two ways to render shapes. In addition to templates, you can define the rendering using code, by defining a method that has a \nShape\n attribute. Look for the \nCoreShapes.cs\n file for examples. This is usually done in modules, but themes can do it as well.\n\n\n\n\nItem Templates\n\n\nThemes can override how content items are rendered by including a template in their \n\\Views\\Items\n folder. The name of the template should be \nContent-{content type name}.cshtml\n or \nContent-{content type name}.{display type}.cshtml\n. For example, a template that overrides how blog posts are rendered should be \n\\Views\\Items\\Content-BlogPost.cshtml\n, and a template that overrides the summary rendering of a blog post should be \n\\Views\\Items\\Content-BlogPost.Summary.cshtml\n.\n\n\nPart Templates\n\n\nThemes can override the rendering of content parts. The convention is similar to the convention for content item templates. The template for a part must be in \n\\Views\\Parts\n and must be named for the shape for the part. For example, the rendering for comments can be overridden by creating the file \n\\Views\\Parts\\Comments.cshtml\n.\n\n\nField Templates\n\n\nField rendering can be overridden as well, although not yet at the field instance level. In other words, you can override what a text field looks like but not what a specific text field looks like. To override a field template, create a  \n{field type name}.cshtml\n or \n{field type name}.{display type}.cshtml\n file in \n\\Views\\Fields\n. For example, the rendering of text fields can be overridden by a \n\\Views\\Fields\\Common.Text.cshtml\n template.\n\n\nAlternates\n\n\nAlternates are a set of related shapes with corresponding templates or layout files that enable you to control how different types of content are rendered within a theme. For example, you can use alternates to apply one layout file for the home page but another layout file for subpages, or you can use alternates to render elements one way when the elements are in a page but a different way when they are in a blog post.\n\n\nFor more information, see \nAlternates\n.\n\n\nWidget Overrides\n\n\nThe rendering for widgets can also be overridden by creating a template in \n\\Views\n named \nwidget-{widget type}\n. For example, you can override the rendering of the HTML widget and add a red frame around the content by putting the following \nwidget-htmlwidget.cshtml\n file into the \n\\Views\n folder of your theme:\n\n\n<div style=\"border:1px red solid\">\n@Display(Model.Content)\n</div>\n\n\n\n\n\nNote that this is just a simple example, and normally adding a frame would be better done using CSS.\n\n\nPlacement Files\n\n\nA theme can modify where shapes are rendered by including a \nplacement.info\n file at the root of the theme folder. The \nplacement.info\n file is an XML file. Here is an example:\n\n\n<Placement>\n    <!-- widgets -->\n    <Place Parts_Blogs_BlogArchives=\"Content:before\"/>\n    <Place Parts_Blogs_RecentBlogPosts=\"Content:after\"/>\n    <!-- default positioning -->\n    <Match ContentType=\"Blog\">\n        <Match DisplayType=\"Summary\">\n            <Place Parts_Blogs_Blog_Description=\"Content:before\"\n                   Parts_Blogs_Blog_BlogPostCount=\"Meta:3\"/>\n        </Match>\n    </Match>\n</Placement>\n\n\n\nMarkup\n\n\nThe markup in each file is constrained by the view engine that you choose. The default in Orchard is Razor (\n.cshtml\n files), for which a quick guide can be found in \nTemplate File Syntax Guide\n.\n\n\nWithin a template, the \nModel\n object represents the current shape being rendered. That means that if you are working with the message shape, which has a \nMessage\n property, you can display that by writing \n@Model.Message\n from within the template markup.\n\n\nAn important addition that Orchard provides is the \nDisplay\n method, which renders a shape. For example, if you look at the \nlayout.cshtml\n file, you can see how the zones are rendered, using calls such as \n@Display(Model.Content)\n.\n\n\nFinally, you can also see in various templates calls such as \n@Html.RegisterScript(\"mystyle.css\")\n or \n@Html.RegisterScript(\"myscript.js\")\n. These registration calls are necessary because the collections of scripts and stylesheets are a shared resource. The same \nlink\n or \nscript\n element should not be rendered twice even if multiple modules or multiple instances of the same widget require the same file.\n\n\nThemes with Code\n\n\nMost themes will consist only of a stylesheet, a few templates (usually layouts), and a few images. They will contain no code except for the simple code in the template files. For more advanced themes, you might want to provide settings, create custom shapes, or override shapes in code.\n\n\nTo address these scenarios, it is possible to build a theme much like a module and include a \n.csproj\n file that describes how to compile the code it contains. For information about module development, see \nWalkthrough: Writing An Orchard Module\n and \nCreating a Module with a Simple Text Editor\n.",
            "title": "The Anatomy of a Theme"
        },
        {
            "location": "/Documentation/Anatomy-of-a-theme/#where-themes-live",
            "text": "A theme is set of appropriately named files inside of a folder. That folder must be under the  Themes  folder under your Orchard website's root folder.",
            "title": "Where Themes Live"
        },
        {
            "location": "/Documentation/Anatomy-of-a-theme/#thethememachine",
            "text": "The theme named  TheThemeMachine  is the theme that comes built into Orchard. You can examine this theme in order to learn about Orchard themes. Like any theme, it can be found under the  Themes  folder.   The  TheThemeMachine  theme has been designed to be a clean-looking, modern theme and to be a good starting point for customization and for the development of new themes. This article uses this theme as an illustration.",
            "title": "TheThemeMachine"
        },
        {
            "location": "/Documentation/Anatomy-of-a-theme/#anatomy-of-a-theme",
            "text": "This section describes required and optional elements of a theme.",
            "title": "Anatomy of a Theme"
        },
        {
            "location": "/Documentation/Anatomy-of-a-theme/#manifest",
            "text": "To be valid, a theme must have a manifest that describes it to the system. The manifest is a text file named  Theme.txt  that is found in the root folder of the theme it describes. Here is the manifest for the  TheThemeMachine  theme:  Name: The Theme Machine\nAuthor: jowall, mibach, loudej, heskew\nDescription: Orchard Theme Machine is a flexible multi-zone theme that provides a solid foundation to build your site. It features 20 collapsible widget zones and is flexible enough to cover a wide range of layouts.\nVersion: 1.8.1\nTags: Awesome\nWebsite: http://orchardproject.net\nZones: Header, Navigation, Featured, BeforeMain, AsideFirst, Messages, BeforeContent, Content, AfterContent, AsideSecond, AfterMain, TripelFirst, TripelSecond, TripelThird, FooterQuadFirst, FooterQuadSecond, FooterQuadThird, FooterQuadFourth, Footer  The beginning of the file gives the theme a friendly name, description, author, description, and tags. The  Zones  field provides a list of all the zone names that are going to be available for widgets throughout the theme's layouts and templates. Zones are containers that can be added to any template or layout. Various UI elements can be injected into zones, but the most common ones are widgets. Not all zones need to be exposed in the manifest, only those that are intended to host widgets.   This illustration shows 19 zones, which is typically more than you need for a site. The zones include a header and footer, which are zones situated on the top and bottom of the page. There is a navigation zone, which is typically where navigation menus would be inserted. The  Featured  zone is where you might put a site banner.  BeforeMain  and  AfterMain  surround the main zones on the top and bottom.  AsideFirst  and  AsideSecond  are sidebars that are rendered on the left and right of the main content. In the center of the page there is a  Messages  zone where notifications go, followed by  BeforeContent , the content itself, the  Content  zone and the  AfterContent  zone. On the bottom of the page, there are  TripelFirst ,  TripelSecond , and  TripelThird  that you can use if you want three columns on the bottom, and the  FooterQuad*  zones that you can use if you want four columns.  All zones in  TheThemeMachine  theme are collapsible, which means that they will only be rendered if there is content in them.",
            "title": "Manifest"
        },
        {
            "location": "/Documentation/Anatomy-of-a-theme/#icon-or-thumbnail",
            "text": "A  Theme.png  file should be included with all Orchard themes. This image should be at least 400x400 pixels and is meant to represent the theme in the gallery or in the theme administration page. It usually is a thumbnail image of a page of a site rendered using that theme.",
            "title": "Icon or Thumbnail"
        },
        {
            "location": "/Documentation/Anatomy-of-a-theme/#widget-zones-preview-image",
            "text": "Optionally, a preview image for the widget zones can be added to the theme. The image should be placed at the root of the theme and be called ThemeZonePreview.png. This image should be 400 pixels wide and should show the different zones and their names. An example can be found in TheThemeMachine.",
            "title": "Widget Zones Preview Image"
        },
        {
            "location": "/Documentation/Anatomy-of-a-theme/#static-resources",
            "text": "A theme typically contains a number of static resources, such as CSS style sheets, JavaScript files, or images. Those files must be in the following folders:   CSS style sheets should be in the  \\Styles  folder of the theme.  JavaScript files should be in the  \\Scripts  folder of the theme. Any scripts you put in this folder should be custom scripts that are only related to your theme, not scripts that are intended to be reused. Such reusable scripts should be included in a separate module. See the jQuery module for an example.  Images should be in  \\Content\\Images  folders. If your theme contains few images, it's fine to keep them all at the same level. However, if you have many images, it is recommended that you organize them in subfolders.    Note  To enable files to be served, each of the folders that contains static files such as style sheets, images, or JavaScript code should contain a  web.config  file that contains the following content:   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n  <system.webServer>\n    <staticContent>\n      <clientCache cacheControlMode=\"UseMaxAge\" cacheControlMaxAge=\"7.00:00:00\" />\n    </staticContent>\n\n    <handlers accessPolicy=\"Script,Read\">\n      <!--\n      iis7 - for any request to a file exists on disk, return it via native http module.\n      accessPolicy 'Script' is to allow for a managed 404 page.\n      -->\n      <add name=\"StaticFile\" path=\"*\" verb=\"*\" modules=\"StaticFileModule\" preCondition=\"integratedMode\" resourceType=\"File\" requireAccess=\"Read\" />\n    </handlers>\n  </system.webServer>\n</configuration>",
            "title": "Static Resources"
        },
        {
            "location": "/Documentation/Anatomy-of-a-theme/#document",
            "text": "The  Document.cshtml  file is usually not found in themes because there is seldom any reason to overwrite it. Most themes can just fall back to the version of the file that can be found in the  SafeMode  theme, under  \\Views . The  Document.cshtml  file is responsible for the HTML that goes around the  body  element. This means it defines the  doctype  element (Orchard assumes the HTML5 document type), the  html  element, the  head  element (where it defines the head zone where the  meta  tags), some  script  elements, and the links for style sheets to be inserted. (This is different from the  Header  zone, which is the top zone in the body.) The  Document.cshtml  file also contains the  title  element inside the  head  element. Finally, the file defines the  body  element where the  Body  and  Tail  zones are rendered.",
            "title": "Document"
        },
        {
            "location": "/Documentation/Anatomy-of-a-theme/#layouts",
            "text": "Layouts are the outermost shape that is rendered within the  body  element. For example, this is typically where you define the main widget zones. You can read about the details of the markup inside of a layout in the  Markup  section later in this document.  A theme can contain any number of layout files, even though currently only one is supported and included in the  TheThemeMachine  theme, namely  Layout.cshtml . For example, a theme can add specialized layouts, such as  Layout-Blog.cshtml  or  Layout-HomePage.cshtml , that would be used instead of the default for a blog or for the homepage, provided there is an extension providing those layout shape alternates. Notice that layouts are named  Layout-{layout name}.cshtml . Each layout can have a different set of zones, organized differently in markup.  For an example of how your own modules and themes can provide alternative layouts based on custom criteria, see  Switching the Layout in Orchard CMS .",
            "title": "Layouts"
        },
        {
            "location": "/Documentation/Anatomy-of-a-theme/#shape-templates",
            "text": "In Orchard, before a web page is rendered into HTML, it is built as a tree of  shapes . Shapes are flexible objects that represent the objects that will contribute to the rendering of the page. Examples include zones, menus, menu items, and widgets.  Each shape can be rendered by a template, which can be overridden by a theme. Templates have the same name as the shape they are made to render. For example, if  Menu.cshtml  exists, it is used to render a  Menu  shape.  The  TheThemeMachine  theme has two shape templates,  BadgeOfHonor  and  Branding , which are built from  Layout.cshtml  and injected into the  Header  and  Footer  zones using the following code:  // Site name and link to the home page\nWorkContext.Layout.Header.Add(New.Branding(), \"5\");\n// Powered by Orchard\nWorkContext.Layout.Footer.Add(New.BadgeOfHonor(), \"5\");   Note  Templates are one of two ways to render shapes. In addition to templates, you can define the rendering using code, by defining a method that has a  Shape  attribute. Look for the  CoreShapes.cs  file for examples. This is usually done in modules, but themes can do it as well.",
            "title": "Shape Templates"
        },
        {
            "location": "/Documentation/Anatomy-of-a-theme/#item-templates",
            "text": "Themes can override how content items are rendered by including a template in their  \\Views\\Items  folder. The name of the template should be  Content-{content type name}.cshtml  or  Content-{content type name}.{display type}.cshtml . For example, a template that overrides how blog posts are rendered should be  \\Views\\Items\\Content-BlogPost.cshtml , and a template that overrides the summary rendering of a blog post should be  \\Views\\Items\\Content-BlogPost.Summary.cshtml .",
            "title": "Item Templates"
        },
        {
            "location": "/Documentation/Anatomy-of-a-theme/#part-templates",
            "text": "Themes can override the rendering of content parts. The convention is similar to the convention for content item templates. The template for a part must be in  \\Views\\Parts  and must be named for the shape for the part. For example, the rendering for comments can be overridden by creating the file  \\Views\\Parts\\Comments.cshtml .",
            "title": "Part Templates"
        },
        {
            "location": "/Documentation/Anatomy-of-a-theme/#field-templates",
            "text": "Field rendering can be overridden as well, although not yet at the field instance level. In other words, you can override what a text field looks like but not what a specific text field looks like. To override a field template, create a   {field type name}.cshtml  or  {field type name}.{display type}.cshtml  file in  \\Views\\Fields . For example, the rendering of text fields can be overridden by a  \\Views\\Fields\\Common.Text.cshtml  template.",
            "title": "Field Templates"
        },
        {
            "location": "/Documentation/Anatomy-of-a-theme/#alternates",
            "text": "Alternates are a set of related shapes with corresponding templates or layout files that enable you to control how different types of content are rendered within a theme. For example, you can use alternates to apply one layout file for the home page but another layout file for subpages, or you can use alternates to render elements one way when the elements are in a page but a different way when they are in a blog post.  For more information, see  Alternates .",
            "title": "Alternates"
        },
        {
            "location": "/Documentation/Anatomy-of-a-theme/#widget-overrides",
            "text": "The rendering for widgets can also be overridden by creating a template in  \\Views  named  widget-{widget type} . For example, you can override the rendering of the HTML widget and add a red frame around the content by putting the following  widget-htmlwidget.cshtml  file into the  \\Views  folder of your theme:  <div style=\"border:1px red solid\">\n@Display(Model.Content)\n</div>   Note that this is just a simple example, and normally adding a frame would be better done using CSS.",
            "title": "Widget Overrides"
        },
        {
            "location": "/Documentation/Anatomy-of-a-theme/#placement-files",
            "text": "A theme can modify where shapes are rendered by including a  placement.info  file at the root of the theme folder. The  placement.info  file is an XML file. Here is an example:  <Placement>\n    <!-- widgets -->\n    <Place Parts_Blogs_BlogArchives=\"Content:before\"/>\n    <Place Parts_Blogs_RecentBlogPosts=\"Content:after\"/>\n    <!-- default positioning -->\n    <Match ContentType=\"Blog\">\n        <Match DisplayType=\"Summary\">\n            <Place Parts_Blogs_Blog_Description=\"Content:before\"\n                   Parts_Blogs_Blog_BlogPostCount=\"Meta:3\"/>\n        </Match>\n    </Match>\n</Placement>",
            "title": "Placement Files"
        },
        {
            "location": "/Documentation/Anatomy-of-a-theme/#markup",
            "text": "The markup in each file is constrained by the view engine that you choose. The default in Orchard is Razor ( .cshtml  files), for which a quick guide can be found in  Template File Syntax Guide .  Within a template, the  Model  object represents the current shape being rendered. That means that if you are working with the message shape, which has a  Message  property, you can display that by writing  @Model.Message  from within the template markup.  An important addition that Orchard provides is the  Display  method, which renders a shape. For example, if you look at the  layout.cshtml  file, you can see how the zones are rendered, using calls such as  @Display(Model.Content) .  Finally, you can also see in various templates calls such as  @Html.RegisterScript(\"mystyle.css\")  or  @Html.RegisterScript(\"myscript.js\") . These registration calls are necessary because the collections of scripts and stylesheets are a shared resource. The same  link  or  script  element should not be rendered twice even if multiple modules or multiple instances of the same widget require the same file.",
            "title": "Markup"
        },
        {
            "location": "/Documentation/Anatomy-of-a-theme/#themes-with-code",
            "text": "Most themes will consist only of a stylesheet, a few templates (usually layouts), and a few images. They will contain no code except for the simple code in the template files. For more advanced themes, you might want to provide settings, create custom shapes, or override shapes in code.  To address these scenarios, it is possible to build a theme much like a module and include a  .csproj  file that describes how to compile the code it contains. For information about module development, see  Walkthrough: Writing An Orchard Module  and  Creating a Module with a Simple Text Editor .",
            "title": "Themes with Code"
        },
        {
            "location": "/Documentation/Understanding-placement-info/",
            "text": "In a CMS such as Orchard, content is built as a composition of arbitrary parts. For example, a blog post is an assemblage of a route (\nAutoroute\n Part), title (\nTitle\n part), contents (\nBody\n part), tags (\nTags\n part), comments (\nComment\n part), and a few additional technical parts (\nCommon\n and \nPublishLater\n). \n\n\nTo get a template to render an object like this, you could access each of these parts explicitly and render them; that's a scenario that would work in Orchard. But that would not handle well the unpredictable changes in the definition of the content types that are the essence of a CMS. For example, what if the administrator of the site downloaded a star rating module and added the rating part to posts? If the layout for the whole item were explicitly defined, you would have to explicitly modify the template. \n\n\nIn Orchard, this isn't necessary, and adding a new part and displaying it can be done without touching the templates. This is possible because Orchard separates layout into two stages:\n\n\n\n\nRendering (performed by generating HTML from templates or shape methods) and\n\n\nPlacement (done through the \nplacement.info\n file).\n\n\n\n\nThis way, parts can not only specify their default rendering, which can be overridden by themes, they can also specify where they prefer to be rendered relative to other parts (which can also be overridden by themes).\n\n\n\n\nBest Practice:\n Avoid creating templates for high level Content Types.\n\n\nInstead, create templates for Content Parts and Content Fields then change their order with placement.\n\n\n\n\nSpecifying placement using the \nplacement.info\n file is the subject of this article.\n\n\nSummary\n\n\n\n\nPlacement works only on parts (and some fields) of content items. \n\n\nPlace element attributes are shape names (not alternate names).\n\n\nFind shape names via shape tracing or in driver code.\n\n\nMatch element attributes include \nContentType\n, \nDisplayType\n, and \nPath\n.\n\n\nPath can include a \n*\n to represent all child paths.\n\n\nOverride module placements in the theme\n\n\n\n\nSyntax Overview\n\n\n<placement>\n    [ <match scope> ]\n        <place Shape_Name=\"order[;alternate][;wrapper][;shape]\" />\n    [ </match> ]\n</placement>\n\n\n\n\n\nScope\nContentType=\"value\" | DisplayType=\"value\" | Path=\"value\"\n\nOrder\nposition | suppress\n\nPosition\nzone_name[ : { int | after | before } ][ .int ][ ...n ]\n\nSuppress\n - \n\nAlternate\n;Alternate=alternate_name\n\nWrapper\n;Wrapper=wrapper_name\n\nShape\n;Shape=new_shape_name\n\n\n\n\nThe placement.info File\n\n\nIf you look at the files in your Orchard website, you'll see that most modules and themes have a \nplacement.info\n file at their root. This is an XML file that specifies the placement of each part of a content item.\n\n\nThe following example shows an example of a placement file. (It's based on the \nplacement.info\n file that comes with \nOrchard.Tags\n.)\n\n\n<Placement>\n    <Place Parts_Tags_Edit=\"Content:7\"/>\n    <Match DisplayType=\"Detail\">\n        <Place Parts_Tags_ShowTags=\"Header:after.7\"/>\n    </Match>\n    <Match DisplayType=\"Summary\">\n        <Place Parts_Tags_ShowTags=\"Header:after.7\"/>\n    </Match>\n    <Match DisplayType=\"SummaryAdmin\">\n        <Place Parts_Tags_ShowTags=\"-\"/>\n    </Match>        \n</Placement>\n\n\n\nPlacement Scope\n\n\nA placement file acts at the Content Item level. This means that you can use it to reorder the display of the parts of anything that is a content item (blog posts, pages, comments, custom items, widgets, elements, etc.), but not necessarily arbitrary shapes. If a shape that is not representing a content part needs placement, it is up to you to provide a placement mechanism for that shape.\n\n\nComments\n\n\nComments can be included in the \nplacement.info\n using normal \n<!-- comment -->\n syntax.\n\n\nThe \"Placement\" Element\n\n\nThe \nPlacement\n element must be present at the root of the \nplacement.info\n document. It is a simple container.\n\n\n\"Place\" Element\n\n\nThe \nPlace\n element is the main entity in a \nplacement.info\n file. It can have any number of attributes, although it's recommended for readability to have only one shape place defined per \nPlace\n element. For additional shapes, you can add more \nPlace\n tags, one per line.\n\n\nSingle shape per line example:\n\n\n<Place Parts_TagCloud=\"Content:5\"/>\n<Place Parts_TagCloud_Edit=\"Content:7\"/>\n\n\n\nMultiple shapes per line example:\n\n\n<Place Parts_TagCloud=\"Content:5\" Parts_TagCloud_Edit=\"Content:7\"/>\n\n\n\nShape Name Attribute\n\n\nEach attribute of a \nPlace\n element is the name of a shape (such as \nParts_Tags_ShowTags\n), as defined from the relevant part driver, and has the placement as the value. To determine the shapes that are part of the display of a given content item, you can read the code for the part drivers. Or a simpler method might be to enable the Shape Tracing module and use the shape debugging tools to examine the model.\n\n\nThe name of the attribute can be any shape name (but not an alternate name; use Match to specialize placement instead). \n\n\nThere are also special extensions for certain fields so that placement can be targeted at specific field instances. \n\n\nFor example, the following placement will display text fields named \"Occupation\" at the start of the \nlocal\n content zone:\n\n\n<Place Fields_Common_Text-Occupation=\"Content:before\"/>\n\n\n\n\n\nNote for field developers:\n you may give your own fields this capability by using a special override of ContentShape in your driver that provides the differentiator (the part after the dash in the attribute name). See the Text Field driver for example, or read \nCreating a Custom Field Type\n.\n\n\n\n\nYou can learn more about shapes and alternates in these topics: \nAccessing and Rendering Shapes\n and \nAlternates\n.\n\n\nThe value itself is split into a zone name, a colon, and then a position. \n\n\nLocal Zone Placement\n\n\nBy default the zone name will specify a \nlocal\n zone. \n\n\nIf you look inside that shape template you will see that there are several locally defined zones. Razor templates would use \n@Display(Model.Content)\n to display the content zone for example.  \n\n\nUsually you will find a zones like \nHeader\n, \nMeta\n, \nContent\n, or \nFooter\n available for placement.\n\n\nExample local zone placement:\n\n\n<Place Parts_TagCloud=\"Content:5\"/>\n\n\n\nTop-Level Zone Placement\n\n\nThe zone name can also specify a top-level zone. Top level zones are defined in the \nLayout.cshtml\n view. \n\n\nIn the case of a top-level zone, the zone name must begin with a slash, e.g. \n/AsideFirst\n\n\nExample top-level zone placement:\n\n\n<Place Parts_TagCloud=\"/AsideFirst:5\"/>\n\n\n\nPlacement Order\n\n\nThe position is defined using a dotted notation. It can be a single number (1, 5, 10, 42) or it can be a succession of numbers separated by a dot (1.2, 1.52.3, etc.). The order will be determined starting from the first number, and if multiple positions have the same first number, using the subsequent numbers. This way, 1 comes before 2.4.5, and 2.4.5 comes before 2.10.\n\n\nYou can also use \nbefore\n and \nafter\n qualifiers to position shapes before or after a certain position. For example, \nHeader:after\n positions the shape at the next available position following everything that's defined using numeric positions.\n\n\nPlacement order examples:\n\n\n<!-- A weight of 5 in local content zone -->\n<Place Parts_TagCloud=\"Content:5\"/>\n\n<!-- Before the top-level header zone -->\n<Place Parts_TagCloud=\"/Header:Before\"/>\n\n<!-- After the top-level asidefirst zone with a weight of .5 -->\n<Place Parts_TagCloud=\"/AsideFirst:After.5\"/>\n\n\n\nSuppression\n\n\nThere is a special value, \"-\", that suppresses the shape rendering instead of sending it to a zone.\n\n\nSuppression examples:\n\n\n<!-- Suppress Parts_TagCloud everywhere -->\n<Place Parts_TagCloud=\"-\"/>\n\n<!-- Suppress Parts_TagCloud in views using SummaryAdmin -->\n<Match DisplayType=\"SummaryAdmin\">\n  <Place Parts_TagCloud=\"-\"/>\n</Match>\n\n\n\nAlternate\n\n\nAdded in v1.1\n\n\nUse \nalternate\n to specify shape alternates from \nPlace\n elements.\n\n\nFor example, if you want to enable a theme author to specify a different template for rendering the tags for blog posts, you can do the following:\n\n\n<Match ContentType=\"BlogPost\">\n  <Place\n    Parts_Tags_ShowTags=\"Header:1;Alternate=Parts_Tags_ShowTags_BlogPost\"/>\n</Match>\n\n\n\nA theme author can then provide a \nParts/Tags.ShowTags.BlogPost.cshtml\n file that customizes the display of tags for blog posts.\n\n\nWrapper\n\n\nAdded in v1.1\n\n\nUse 'wrapper' from \nPlace\n elements to wrap an extra shape around the original shape.\n\n\nSimilarly, you can provide a wrapper as part of the placement (\nHeader:after;Wrapper=Wrapper_GreenDiv\n).\n\n\nUsing a wrapper enables wrapping content with a cshtml markup. Here is a 3 step example showing how to add a div around the Html Widget to enable css styling of the widget.\n\n\nIn placement.info : \n\n\n<Match ContentType=\"Widget\">\n    <Place Parts_Common_Body=\"Content:5;Wrapper=Wrapper_HtmlContent\" />\n</Match>\n\n\n\nIf you just put the wrapper without specifying 'Content:5' the body part will not show up. By adding \nContent:5\n it specifies which zone to render the part in.\n\n\nAfter modifying your placement.info the Shape Tracing module Shape tab will show your wrapper location at the bottom. It will be: \n~/Themes/{yourTheme}/Views/Wrapper.HtmlContent.cshtml\n. \n\n\nCreate this file and put the following text in it:\n\n\n<div class=\"htmlWrapperContent\">\n    @Model.Html\n</div>\n\n\n\nThis will enable you to target the wrapper from \nsite.css\n like this:\n\n\n.htmlWrapperContent {\n    background-color: #94CCE7;\n}\n\n\n\nShape\n\n\nAdded in v1.1\n\n\nUse 'shape' from \nPlace\n elements to rename the shape.\n\n\nFor example:\n\n\n<Place Parts_Common_Body=\"Content:5;Header:after;\nShape=IPreferToCallThoseStickersForSomeReason\" />\n\n\n\n\"Match\" Element\n\n\nMatch\n elements let you scope a particular set of \nPlace\n tags. \nMatch\n elements can have the following scope attributes:\n\n\n\n\nDisplayType\n\n\nContentType\n\n\nPath\n\n\n\n\nMatch\n elements can be nested.\n\n\nDisplayType\n\n\nScopes the contained \nPlace\n tags to a specific display type. \n\n\nYou can define your own custom display types when developing content parts or fields, but Orchard uses standard ones:\n\n\n\n\nDetail - Used when rendering a single item, e.g. a blog post\n\n\nSummary - Used when rendering a list of items\n\n\nSummaryAdmin - Used when rending a list of items in the admin panel\n\n\n\n\nSome modules have registered their own such as:\n\n\n\n\nLayout - \nAdded in v1.9\n - Used by the Orchard.Layouts module when an element is rendering a shape like a ContentField or ContentItem\n\n\nDesign - \nAdded in v1.9\n - Used by the Orchard.Layouts module when showing an element in the admin panel\n\n\n\n\nContentType\n\n\nScopes the contained \nPlace\n tags to a specific content type or stereotype.\n\n\n\n\nContent Type - Such as \nBlogPost\n or \nPage\n\n\nStereotype - \nAdded in v1.1\n - Such as \nWidget\n\n\n\n\nPath\n\n\nThe \nPath\n attribute was added in v1.1\n.\n\n\nScopes the contained \nPlace\n tags to a specific path or to a path and its children. \n\n\n\n\nSpecific Path - For example, \nPath=\"/About\"\n enables changes that only affect the About page (assuming you have one)\n\n\nPath and it's Children - For example, \nPath=\"/MyBlog/*\"\n affects everything that is under the path \nMyBlog\n, such as \nMyblog\n or \nMyBlog/FirstPost\n. \n\n\n\n\nOverriding Placement\n\n\nA module should define default placements for the parts and fields it provides by having a \nplacement.info\n file at the root of the module's directory.\n\n\nWithout a placement your parts and fields will not appear on the page. By supplying a default you take the burden away from theme developers to configure your module and you make it easy for them to copy sections over to customise them. Consider the various DisplayTypes your parts and fields may be viewed and provide sensible defaults.  \n\n\nThat default placement can be overridden by any theme by placing a \nplacement.info\n file in the root of the theme directory.\n\n\nThe current theme's placement will win over that of any module.",
            "title": "Understanding the placement.info File"
        },
        {
            "location": "/Documentation/Understanding-placement-info/#summary",
            "text": "Placement works only on parts (and some fields) of content items.   Place element attributes are shape names (not alternate names).  Find shape names via shape tracing or in driver code.  Match element attributes include  ContentType ,  DisplayType , and  Path .  Path can include a  *  to represent all child paths.  Override module placements in the theme",
            "title": "Summary"
        },
        {
            "location": "/Documentation/Understanding-placement-info/#syntax-overview",
            "text": "<placement>\n    [ <match scope> ]\n        <place Shape_Name=\"order[;alternate][;wrapper][;shape]\" />\n    [ </match> ]\n</placement>   Scope ContentType=\"value\" | DisplayType=\"value\" | Path=\"value\" Order position | suppress Position zone_name[ : { int | after | before } ][ .int ][ ...n ] Suppress  -  Alternate ;Alternate=alternate_name Wrapper ;Wrapper=wrapper_name Shape ;Shape=new_shape_name",
            "title": "Syntax Overview"
        },
        {
            "location": "/Documentation/Understanding-placement-info/#the-placementinfo-file",
            "text": "If you look at the files in your Orchard website, you'll see that most modules and themes have a  placement.info  file at their root. This is an XML file that specifies the placement of each part of a content item.  The following example shows an example of a placement file. (It's based on the  placement.info  file that comes with  Orchard.Tags .)  <Placement>\n    <Place Parts_Tags_Edit=\"Content:7\"/>\n    <Match DisplayType=\"Detail\">\n        <Place Parts_Tags_ShowTags=\"Header:after.7\"/>\n    </Match>\n    <Match DisplayType=\"Summary\">\n        <Place Parts_Tags_ShowTags=\"Header:after.7\"/>\n    </Match>\n    <Match DisplayType=\"SummaryAdmin\">\n        <Place Parts_Tags_ShowTags=\"-\"/>\n    </Match>        \n</Placement>",
            "title": "The placement.info File"
        },
        {
            "location": "/Documentation/Understanding-placement-info/#placement-scope",
            "text": "A placement file acts at the Content Item level. This means that you can use it to reorder the display of the parts of anything that is a content item (blog posts, pages, comments, custom items, widgets, elements, etc.), but not necessarily arbitrary shapes. If a shape that is not representing a content part needs placement, it is up to you to provide a placement mechanism for that shape.",
            "title": "Placement Scope"
        },
        {
            "location": "/Documentation/Understanding-placement-info/#comments",
            "text": "Comments can be included in the  placement.info  using normal  <!-- comment -->  syntax.",
            "title": "Comments"
        },
        {
            "location": "/Documentation/Understanding-placement-info/#the-placement-element",
            "text": "The  Placement  element must be present at the root of the  placement.info  document. It is a simple container.",
            "title": "The \"Placement\" Element"
        },
        {
            "location": "/Documentation/Understanding-placement-info/#place-element",
            "text": "The  Place  element is the main entity in a  placement.info  file. It can have any number of attributes, although it's recommended for readability to have only one shape place defined per  Place  element. For additional shapes, you can add more  Place  tags, one per line.  Single shape per line example:  <Place Parts_TagCloud=\"Content:5\"/>\n<Place Parts_TagCloud_Edit=\"Content:7\"/>  Multiple shapes per line example:  <Place Parts_TagCloud=\"Content:5\" Parts_TagCloud_Edit=\"Content:7\"/>",
            "title": "\"Place\" Element"
        },
        {
            "location": "/Documentation/Understanding-placement-info/#shape-name-attribute",
            "text": "Each attribute of a  Place  element is the name of a shape (such as  Parts_Tags_ShowTags ), as defined from the relevant part driver, and has the placement as the value. To determine the shapes that are part of the display of a given content item, you can read the code for the part drivers. Or a simpler method might be to enable the Shape Tracing module and use the shape debugging tools to examine the model.  The name of the attribute can be any shape name (but not an alternate name; use Match to specialize placement instead).   There are also special extensions for certain fields so that placement can be targeted at specific field instances.   For example, the following placement will display text fields named \"Occupation\" at the start of the  local  content zone:  <Place Fields_Common_Text-Occupation=\"Content:before\"/>   Note for field developers:  you may give your own fields this capability by using a special override of ContentShape in your driver that provides the differentiator (the part after the dash in the attribute name). See the Text Field driver for example, or read  Creating a Custom Field Type .   You can learn more about shapes and alternates in these topics:  Accessing and Rendering Shapes  and  Alternates .  The value itself is split into a zone name, a colon, and then a position.",
            "title": "Shape Name Attribute"
        },
        {
            "location": "/Documentation/Understanding-placement-info/#local-zone-placement",
            "text": "By default the zone name will specify a  local  zone.   If you look inside that shape template you will see that there are several locally defined zones. Razor templates would use  @Display(Model.Content)  to display the content zone for example.    Usually you will find a zones like  Header ,  Meta ,  Content , or  Footer  available for placement.  Example local zone placement:  <Place Parts_TagCloud=\"Content:5\"/>",
            "title": "Local Zone Placement"
        },
        {
            "location": "/Documentation/Understanding-placement-info/#top-level-zone-placement",
            "text": "The zone name can also specify a top-level zone. Top level zones are defined in the  Layout.cshtml  view.   In the case of a top-level zone, the zone name must begin with a slash, e.g.  /AsideFirst  Example top-level zone placement:  <Place Parts_TagCloud=\"/AsideFirst:5\"/>",
            "title": "Top-Level Zone Placement"
        },
        {
            "location": "/Documentation/Understanding-placement-info/#placement-order",
            "text": "The position is defined using a dotted notation. It can be a single number (1, 5, 10, 42) or it can be a succession of numbers separated by a dot (1.2, 1.52.3, etc.). The order will be determined starting from the first number, and if multiple positions have the same first number, using the subsequent numbers. This way, 1 comes before 2.4.5, and 2.4.5 comes before 2.10.  You can also use  before  and  after  qualifiers to position shapes before or after a certain position. For example,  Header:after  positions the shape at the next available position following everything that's defined using numeric positions.  Placement order examples:  <!-- A weight of 5 in local content zone -->\n<Place Parts_TagCloud=\"Content:5\"/>\n\n<!-- Before the top-level header zone -->\n<Place Parts_TagCloud=\"/Header:Before\"/>\n\n<!-- After the top-level asidefirst zone with a weight of .5 -->\n<Place Parts_TagCloud=\"/AsideFirst:After.5\"/>",
            "title": "Placement Order"
        },
        {
            "location": "/Documentation/Understanding-placement-info/#suppression",
            "text": "There is a special value, \"-\", that suppresses the shape rendering instead of sending it to a zone.  Suppression examples:  <!-- Suppress Parts_TagCloud everywhere -->\n<Place Parts_TagCloud=\"-\"/>\n\n<!-- Suppress Parts_TagCloud in views using SummaryAdmin -->\n<Match DisplayType=\"SummaryAdmin\">\n  <Place Parts_TagCloud=\"-\"/>\n</Match>",
            "title": "Suppression"
        },
        {
            "location": "/Documentation/Understanding-placement-info/#alternate",
            "text": "Added in v1.1  Use  alternate  to specify shape alternates from  Place  elements.  For example, if you want to enable a theme author to specify a different template for rendering the tags for blog posts, you can do the following:  <Match ContentType=\"BlogPost\">\n  <Place\n    Parts_Tags_ShowTags=\"Header:1;Alternate=Parts_Tags_ShowTags_BlogPost\"/>\n</Match>  A theme author can then provide a  Parts/Tags.ShowTags.BlogPost.cshtml  file that customizes the display of tags for blog posts.",
            "title": "Alternate"
        },
        {
            "location": "/Documentation/Understanding-placement-info/#wrapper",
            "text": "Added in v1.1  Use 'wrapper' from  Place  elements to wrap an extra shape around the original shape.  Similarly, you can provide a wrapper as part of the placement ( Header:after;Wrapper=Wrapper_GreenDiv ).  Using a wrapper enables wrapping content with a cshtml markup. Here is a 3 step example showing how to add a div around the Html Widget to enable css styling of the widget.  In placement.info :   <Match ContentType=\"Widget\">\n    <Place Parts_Common_Body=\"Content:5;Wrapper=Wrapper_HtmlContent\" />\n</Match>  If you just put the wrapper without specifying 'Content:5' the body part will not show up. By adding  Content:5  it specifies which zone to render the part in.  After modifying your placement.info the Shape Tracing module Shape tab will show your wrapper location at the bottom. It will be:  ~/Themes/{yourTheme}/Views/Wrapper.HtmlContent.cshtml .   Create this file and put the following text in it:  <div class=\"htmlWrapperContent\">\n    @Model.Html\n</div>  This will enable you to target the wrapper from  site.css  like this:  .htmlWrapperContent {\n    background-color: #94CCE7;\n}",
            "title": "Wrapper"
        },
        {
            "location": "/Documentation/Understanding-placement-info/#shape",
            "text": "Added in v1.1  Use 'shape' from  Place  elements to rename the shape.  For example:  <Place Parts_Common_Body=\"Content:5;Header:after;\nShape=IPreferToCallThoseStickersForSomeReason\" />",
            "title": "Shape"
        },
        {
            "location": "/Documentation/Understanding-placement-info/#match-element",
            "text": "Match  elements let you scope a particular set of  Place  tags.  Match  elements can have the following scope attributes:   DisplayType  ContentType  Path   Match  elements can be nested.",
            "title": "\"Match\" Element"
        },
        {
            "location": "/Documentation/Understanding-placement-info/#displaytype",
            "text": "Scopes the contained  Place  tags to a specific display type.   You can define your own custom display types when developing content parts or fields, but Orchard uses standard ones:   Detail - Used when rendering a single item, e.g. a blog post  Summary - Used when rendering a list of items  SummaryAdmin - Used when rending a list of items in the admin panel   Some modules have registered their own such as:   Layout -  Added in v1.9  - Used by the Orchard.Layouts module when an element is rendering a shape like a ContentField or ContentItem  Design -  Added in v1.9  - Used by the Orchard.Layouts module when showing an element in the admin panel",
            "title": "DisplayType"
        },
        {
            "location": "/Documentation/Understanding-placement-info/#contenttype",
            "text": "Scopes the contained  Place  tags to a specific content type or stereotype.   Content Type - Such as  BlogPost  or  Page  Stereotype -  Added in v1.1  - Such as  Widget",
            "title": "ContentType"
        },
        {
            "location": "/Documentation/Understanding-placement-info/#path",
            "text": "The  Path  attribute was added in v1.1 .  Scopes the contained  Place  tags to a specific path or to a path and its children.    Specific Path - For example,  Path=\"/About\"  enables changes that only affect the About page (assuming you have one)  Path and it's Children - For example,  Path=\"/MyBlog/*\"  affects everything that is under the path  MyBlog , such as  Myblog  or  MyBlog/FirstPost .",
            "title": "Path"
        },
        {
            "location": "/Documentation/Understanding-placement-info/#overriding-placement",
            "text": "A module should define default placements for the parts and fields it provides by having a  placement.info  file at the root of the module's directory.  Without a placement your parts and fields will not appear on the page. By supplying a default you take the burden away from theme developers to configure your module and you make it easy for them to copy sections over to customise them. Consider the various DisplayTypes your parts and fields may be viewed and provide sensible defaults.    That default placement can be overridden by any theme by placing a  placement.info  file in the root of the theme directory.  The current theme's placement will win over that of any module.",
            "title": "Overriding Placement"
        },
        {
            "location": "/Documentation/Accessing-and-rendering-shapes/",
            "text": "A \nshape\n is a dynamic data model.\nThe purpose of a shape is to replace the static view model of ASP.NET MVC by using a model\nthat can be updated at run time\u2014that is, by using a dynamic shape.\nYou can think of shapes as the blobs of data that get handed to templates for rendering.\n\n\nThis article introduces the concept of shapes and explains how to work with them.\nIt's intended for module and theme developers who have at least a basic understanding of Orchard modules.\nFor information about creating modules, see the \nGetting Started with Modules course\n.\nFor information about dynamic objects, see \nCreating and Using Dynamic Objects\n.\n\n\nIntroducing Shapes\n\n\nShapes are dynamic data models that use shape templates to make the data visible to the user in the way you want.\nShape templates are fragments of markup for rendering shapes.\nExamples of shapes include menus, menu items, content items, documents, and messages.\n\n\nA shape is a data model object that derives from the \nOrchard.DisplayManagement.Shapes.Shape\n class.\nThe \nShape\n class is never instantiated. Instead, shapes are created at run time by a shape factory.\nThe default shape factory is \nOrchard.DisplayManagement.Implementation.DefaultShapeFactory\n.\nThe shapes created by the shape factory are dynamic objects.\n\n\n\n\nNote\nDynamic objects are new to the .NET Framework 4.\nAs a dynamic object, a shape exposes its members at run time instead of at compile time.\nBy contrast, an ASP.NET MVC model object is a static object that's defined at compile time.\n\n\n\n\nInformation about the shape is contained in the \nShapeMetadata\n property of the shape itself.\nThis information includes the shape's type, display type, position, prefix, wrappers, alternates,\nchild content, and a \nWasExecuted\n Boolean value.\n\n\nYou can access the shape's metadata as shown in the following example:\n\n\nvar shapeType = shapeName.Metadata.Type;\n\n\n\nAfter the shape object is created, the shape is rendered with the help of a shape template.\nA shape template is a piece of HTML markup (partial view) that is responsible for displaying the shape.\nAlternatively, you can use a shape attribute (\nOrchard.DisplayManagement.ShapeAttribute\n)\nthat enables you to write code that creates and displays the shape without using a template.\n\n\nCreating Shapes\n\n\nFor module developers, the most common need for shapes is to transport data from a driver to a template for rendering.\nA driver derives from the \nOrchard.ContentManagement.Drivers.ContentPartDriver\n class\nand typically overrides that class's \nDisplay\n and \nEditor\n methods.\nThe \nDisplay\n and \nEditor\n methods return a \nContentShapeResult\n object, which is analogous to\nthe \nActionResult\n object returned by action methods in ASP.NET MVC.\nThe \nContentShape\n method helps you create the shape and return it in a \nContentShapeResult\n object.\n\n\nAlthough the \nContentShape\n method is overloaded, the most typical use is to pass it two\nparameters\u2014the shape type and a dynamic function expression that defines the shape.\nThe shape type names the shape and binds the shape to the template that will be used to render it.\nThe naming conventions for shape types are discussed later in\n\nNaming Shapes and Templates\n.\n\n\nThe function expression can be described best by using an example.\nThe following example shows a driver's \nDisplay\n method that returns a shape result,\nwhich will be used to display a \nMap\n part.\n\n\nprotected override DriverResult Display(\n    MapPart part, string displayType, dynamic shapeHelper)\n{\nreturn ContentShape(\"Parts_Map\",\n                     () => shapeHelper.Parts_Map(\n                           Longitude: part.Longitude, \n                           Latitude: part.Latitude));\n}\n\n\n\nThe expression uses a dynamic object (\nshapeHelper\n) to define a \nParts_Map\n shape and its attributes.\nThe expression adds a \nLongitude\n property to the shape and sets it equal to the part's \nLongitude\n property.\nThe expression also adds a \nLatitude\n property to the shape and sets it equal to the part's \nLatitude\n property.\nThe \nContentShape\n method creates the results object that is returned by the \nDisplay\n method.\n\n\nThe following example shows the entire driver class that sends a shape result to a template either\nto be displayed or edited in a \nMap\n part. The \nDisplay\n method is used to display the map.\nThe \nEditor\n method marked \"GET\" is used to display the shape result in editing view for user input.\nThe \nEditor\n method marked \"POST\" is used to redisplay the editor view using the values provided by the user.\nThese methods use different overloads of the \nEditor\n method.\n\n\nusing Maps.Models;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Drivers;\n\nnamespace Maps.Drivers\n{\n    public class MapPartDriver : ContentPartDriver<MapPart>\n    {\n        protected override DriverResult Display(\n            MapPart part, string displayType, dynamic shapeHelper)\n        {\n            return ContentShape(\"Parts_Map\",\n                                () => shapeHelper.Parts_Map(\n                                      Longitude: part.Longitude, \n                                      Latitude: part.Latitude));\n        }\n\n        //GET\n        protected override DriverResult Editor(\n            MapPart part, dynamic shapeHelper)\n        {\n            return ContentShape(\"Parts_Map_Edit\",\n                                () => shapeHelper.EditorTemplate(\n                                      TemplateName: \"Parts/Map\", \n                                      Model: part));\n        }\n\n        //POST\n        protected override DriverResult Editor(\n            MapPart part, IUpdateModel updater, dynamic shapeHelper)\n        {\n            updater.TryUpdateModel(part, Prefix, null, null);\n            return Editor(part, shapeHelper);\n        }\n    }\n}\n\n\n\nThe \nEditor\n method marked \"GET\" uses the \nContentShape\n method to create a shape for an editor template.\nIn this case, the type name is \nParts_Map_Edit\n and the \nshapeHelper\n object creates an \nEditorTemplate\n shape.\nThis is a special shape that has a \nTemplateName\n property and a \nModel\n property.\nThe \nTemplateName\n property takes a partial path to the template.\nIn this case, \n\"Parts/Map\"\n causes Orchard to look for a template in your module at the following path: \n\n\nViews/EditorTemplates/Parts/Map.cshtml\n\n\nThe \nModel\n property takes the name of the part's model file, but without the file-name extension.\n\n\nNaming Shapes and Templates\n\n\nAs noted, the name given to a shape type binds the shape to the template that will be used to render the shape.\nFor example, suppose you create a part named \nMap\n that displays a map for the specified longitude and latitude.\nThe name of the shape type might be \nParts_Map\n. By convention, all part shapes begin with \nParts_\n followed by the name of the part (in this case \nMap\n). Given this name (\nParts_Map\n), Orchard looks for a template in your module at the following path: \n\n\nviews/parts/Map.cshtml\n\n\nThe following table summarizes the conventions that are used to name shape types and templates.\n\n\n\n\n\n\n\n\nApplied To\n\n\nShape Naming Convention\n\n\nShape Type Example\n\n\nTemplate Example\n\n\n\n\n\n\n\n\n\n\nContent shapes\n\n\nContent__[ContentType]\n\n\nContent__BlogPost\n\n\nContent-BlogPost\n\n\n\n\n\n\nContent shapes\n\n\nContent__[Id]\n\n\nContent__42\n\n\nContent-42\n\n\n\n\n\n\nContent shapes\n\n\nContent__[DisplayType]\n\n\nContent__Summary\n\n\nContent.Summary\n\n\n\n\n\n\nContent shapes\n\n\nContent_[DisplayType]__[ContentType]\n\n\nContent_Summary__BlogPost\n\n\nContent-BlogPost.Summary\n\n\n\n\n\n\nContent shapes\n\n\nContent_[DisplayType]__[Id]\n\n\nContent_Summary__42\n\n\nContent-42.Summary\n\n\n\n\n\n\nContent.Edit shapes\n\n\nContent_Edit__[DisplayType]\n\n\nContent_Edit__Page\n\n\nContent-Page.Edit\n\n\n\n\n\n\nContent Part templates\n\n\n[ShapeType]__[Id]\n\n\nParts_Common_Metadata__42\n\n\nParts/Common.Metadata-42\n\n\n\n\n\n\nContent Part templates\n\n\n[ShapeType]__[ContentType]\n\n\nParts_Common_Metadata__BlogPost\n\n\nParts/Common.Metadata-BlogPost\n\n\n\n\n\n\nField templates\n\n\n[ShapeType]__[FieldName]\n\n\nFields_Common_Text__Teaser\n\n\nFields/Common.Text-Teaser\n\n\n\n\n\n\nField templates\n\n\n[ShapeType]__[PartName]\n\n\nFields_Common_Text__TeaserPart\n\n\nFileds/Common.Text-TeaserPart\n\n\n\n\n\n\nField templates\n\n\n[ShapeType]__[ContentType]__[PartName]\n\n\nFields_Common_Text__Blog__TeaserPart\n\n\nFields/Common.Text-Blog-TeaserPart\n\n\n\n\n\n\nField templates\n\n\n[ShapeType]__[PartName]__[FieldName]\n\n\nFields_Common_Text__TeaserPart__Teaser\n\n\nFields/Common.Text-TeaserPart-Teaser\n\n\n\n\n\n\nField templates\n\n\n[ShapeType]__[ContentType]__[FieldName]\n\n\nFields_Common_Text__Blog__Teaser\n\n\nFields/Common.Text-Blog-Teaser\n\n\n\n\n\n\nField templates\n\n\n[ShapeType]__[ContentType]__[PartName]__[FieldName]\n\n\nFields_Common_Text__Blog__TeaserPart__Teaser\n\n\nFields/Common.Text-Blog-TeaserPart-Teaser\n\n\n\n\n\n\nLocalMenu\n\n\nLocalMenu__[MenuName]\n\n\nLocalMenu__main\n\n\nLocalMenu-main\n\n\n\n\n\n\nLocalMenuItem\n\n\nLocalMenuItem__[MenuName]\n\n\nLocalMenuItem__main\n\n\nLocalMenuItem-main\n\n\n\n\n\n\nMenu\n\n\nMenu__[MenuName]\n\n\nMenu__main\n\n\nMenu-main\n\n\n\n\n\n\nMenuItem\n\n\nMenuItem__[MenuName]\n\n\nMenuItem__main\n\n\nMenuItem-main\n\n\n\n\n\n\nResource\n\n\nResource__[FileName]\n\n\nResource__flower.gif\n\n\nResource-flower.gif\n\n\n\n\n\n\nStyle\n\n\nStyle__[FileName]\n\n\nStyle__site.css\n\n\nStyle-site.css\n\n\n\n\n\n\nWidget\n\n\nWidget__[ContentType]\n\n\nWidget__HtmlWidget\n\n\nWidget-HtmlWidget\n\n\n\n\n\n\nWidget\n\n\nWidget__[ZoneName]\n\n\nWidget__AsideSecond\n\n\nWidget-AsideSecond\n\n\n\n\n\n\nZone\n\n\nZone__[ZoneName]\n\n\nZone__AsideSecond\n\n\nZone-AsideSecond\n\n\n\n\n\n\n\n\nYou should put your templates in the project according to the following rules:\n\n\n\n\nContent item shape templates are in the \nviews/items\n folder.\n\n\nParts_\n shape templates are in the \nviews/parts\n folder.\n\n\nFields_\n shape templates are in the \nviews/fields\n folder.\n\n\nThe \nEditorTemplate\n shape templates are in the \nviews/EditorTemplates/\ntemplate\n name folder.\n\nFor example, an \nEditorTemplate\n with a template name of \nParts/Routable.RoutePart\n has its template\nat \nviews/EditorTemplates/Parts/Routable.RoutePart.cshtml\n.\n\n\nAll other shape templates are in the \nviews\n folder.\n\n\n\n\n\n\nNote\nThe template extension can be any extension supported by an active view engine, such as \n.cshtml\n, \n.vbhtml\n, or \n.ascx\n.\n\n\n\n\nFrom Template File Name to Shape Name\n\n\nMore generally, the rules to map from a template file name to the corresponding shape name are the following:\n\n\n\n\nDot (.) and backslash () change to underscore (\n).\nNote that this does not mean that an _example.cshtml\n file in a \nmyviews\n subdirectory of \nViews\n\nis equivalent to a \nmyviews_example.chtml\n file in \nViews\n.\nThe shape templates must still be in the expected directory (see above).\n\n\nHyphen (-) changes to a double underscore (__).\n\n\n\n\nFor example, \nViews/Hello.World.cshtml\n will be used to render a shape named \nHello_World\n,\nand \nViews/Hello.World-85.cshtml\n will be used to render a shape named \nHello_World__85\n.\n\n\nAlternate Shape Rendering\n\n\nAs noted, an HTML widget in the \nAsideSecond\n zone (for example) could be rendered\nby a \nwidget.cshtml\n template, by a \nwidget-htmlwidget.cshtml\n template,\nor by a \nwidget-asidesecond.cshtml\n if they exist in the current theme.\nWhen various possibilities exist to render the same content,\nthese are referred to as \nalternates\n of the shape,\nand they enable rich template overriding scenarios.\n\n\nAlternates form a group that corresponds to the same shape if they differ only by a double-underscore suffix.\nFor example, \nHello_World\n, \nHello_World__85\n, and \nHello_World__DarkBlue\n are an alternate group\nfor a \nHello_World\n shape. \nHello_World_Summary\n, conversely, does not belong to that group\nand would correspond to a \nHello_World_Shape\n shape, not to a \nHello_World\n shape.\n(Notice the difference between \"__\" and \"_\".)\n\n\nWhich Alternate Will Be Rendered?\n\n\nEven if it has alternates, a shape is always created with the base name, such as \nHello_World\n.\nAlternates give additional template name options to the theme developer beyond the default\n(such as \nhello.world.cshtml\n).\nThe system will choose the most specialized template available among the alternates,\nso \nhello.world-orange.cshtml\n will be preferred to \nhello.world.cshtml\n if it exists.\n\n\nBuilt-In Content Item Alternates\n\n\nThe table above shows possible template names for content items.\nIt should now be clear that the shape name is built from \nContent\n\nand the display type (for example \nContent_Summary\n).\n\n\nThe system also automatically adds the content type and the content ID as alternates\n(for example \nContent_Summary__Page\n and \nContent_Summary__42\n).\n\n\nFor more information about how to use alternates, see \nAlternates\n.\n\n\nRendering Shapes Using Templates\n\n\nA shape template is a fragment of markup that is used to render the shape.\nThe default view engine in Orchard is the Razor view engine.\nTherefore, shape templates use Razor syntax by default.\nFor an introduction to Razor syntax, see \nTemplate File Syntax Guide\n.\n\n\nThe following example shows a template for displaying a \nMap\n part as an image. \n\n\n<img alt=\"Location\" border=\"1\" src=\"http://maps.google.com/maps/api/staticmap? \n     &zoom=14\n     &size=256x256\n     &maptype=satellite&markers=color:blue|@Model.Latitude,@Model.Longitude\n     &sensor=false\" />\n\n\n\nThis example shows an \nimg\n element in which the \nsrc\n attribute contains a URL\nand a set of parameters passed as query-string values.\nIn this query string, \n@Model\n represents the shape that was passed into the template.\nTherefore, \n@Model.Latitude\n is the \nLatitude\n property of the shape,\nand \n@Model.Longitude\n is the \nLongitude\n property of the shape.\n\n\nThe following example shows the template for the editor.\nThis template enables the user to enter values for the latitude and longitude.\n\n\n@model Maps.Models.MapPart\n\n<fieldset>\n    <legend>Map Fields</legend>\n\n    <div class=\"editor-label\">\n        @Html.LabelFor(model => model.Longitude)\n    </div>\n    <div class=\"editor-field\">\n        @Html.TextBoxFor(model => model.Latitude)\n        @Html.ValidationMessageFor(model => model.Latitude)\n    </div>\n\n    <div class=\"editor-label\">\n        @Html.LabelFor(model => model.Longitude)\n    </div>\n    <div class=\"editor-field\">\n        @Html.TextBoxFor(model => model.Longitude)\n        @Html.ValidationMessageFor(model => model.Longitude)\n    </div>\n</fieldset>\n\n\n\nThe \n@Html.LabelFor\n expressions create labels using the name of the shape properties.\nThe \n@Html.TextBoxFor\n expressions create text boxes where users enter values for the shape properties.\nThe \n@Html.ValidationMessageFor\n expressions create messages that are displayed if users enter an invalid value.\n\n\nWrappers\n\n\nWrappers let you customize the rendering of a shape by adding markup around the shape.\nFor example, \nDocument.cshtml\n is a wrapper for the \nLayout\n shape, because it specifies\nthe markup code that  surrounds the \nLayout\n shape.\nFor more information about the relationship between \nDocument\n and \nLayout\n,\nsee \nTemplate File Syntax Guide\n.\n\n\nTypically, you add a wrapper file to the \nViews\n folder of  your theme.\nFor example, to add a wrapper for \nWidget\n, you add a \nWidget.Wrapper.cshtml\n file to\nthe \nViews\n folder of your theme.\nIf you enable the \nShape Tracing\n feature, you'll see the available wrapper names for a shape.\nYou can also specify a wrapper in the \nplacement.info\n file.\nFor more information about how to specify  a wrapper,\nsee \nUnderstanding the placement.info File\n.\n\n\nCreating a Shape Method\n\n\nAnother way to create and render a shape is to create a method that both defines and renders the shape.\nThe method must be marked with the \nShape\n attribute (the \nOrchard.DisplayManagement.ShapeAttribute\n class).\nThe method returns an \nIHtmlString\n object instead of using a template;\nthe returned object contains the markup that renders the shape. \n\n\nThe following example shows the \nDateTimeRelative\n shape.\nThis shape takes a \nDateTime\n value in the past and returns a string that relates the value to the current time.\n\n\npublic class DateTimeShapes : IDependency {\n    private readonly IClock _clock;\n\n    public DateTimeShapes(IClock clock) {\n        _clock = clock;\n        T = NullLocalizer.Instance;\n    }\n\n    public Localizer T { get; set; }\n\n    [Shape]\n    public IHtmlString DateTimeRelative(HtmlHelper Html, DateTime dateTimeUtc) {\n        var time = _clock.UtcNow - dateTimeUtc;\n\n        if (time.TotalDays > 7)\n            return Html.DateTime(dateTimeUtc, T(\"'on' MMM d yyyy 'at' h:mm tt\"));\n        if (time.TotalHours > 24)\n            return T.Plural(\"1 day ago\", \"{0} days ago\", time.Days);\n        if (time.TotalMinutes > 60)\n            return T.Plural(\"1 hour ago\", \"{0} hours ago\", time.Hours);\n        if (time.TotalSeconds > 60)\n            return T.Plural(\"1 minute ago\", \"{0} minutes ago\", time.Minutes);\n        if (time.TotalSeconds > 10)\n            return T.Plural(\"1 second ago\", \"{0} seconds ago\", time.Seconds);\n\n        return T(\"a moment ago\");\n    }\n}",
            "title": "Accessing and Rendering Shapes"
        },
        {
            "location": "/Documentation/Accessing-and-rendering-shapes/#introducing-shapes",
            "text": "Shapes are dynamic data models that use shape templates to make the data visible to the user in the way you want.\nShape templates are fragments of markup for rendering shapes.\nExamples of shapes include menus, menu items, content items, documents, and messages.  A shape is a data model object that derives from the  Orchard.DisplayManagement.Shapes.Shape  class.\nThe  Shape  class is never instantiated. Instead, shapes are created at run time by a shape factory.\nThe default shape factory is  Orchard.DisplayManagement.Implementation.DefaultShapeFactory .\nThe shapes created by the shape factory are dynamic objects.   Note Dynamic objects are new to the .NET Framework 4.\nAs a dynamic object, a shape exposes its members at run time instead of at compile time.\nBy contrast, an ASP.NET MVC model object is a static object that's defined at compile time.   Information about the shape is contained in the  ShapeMetadata  property of the shape itself.\nThis information includes the shape's type, display type, position, prefix, wrappers, alternates,\nchild content, and a  WasExecuted  Boolean value.  You can access the shape's metadata as shown in the following example:  var shapeType = shapeName.Metadata.Type;  After the shape object is created, the shape is rendered with the help of a shape template.\nA shape template is a piece of HTML markup (partial view) that is responsible for displaying the shape.\nAlternatively, you can use a shape attribute ( Orchard.DisplayManagement.ShapeAttribute )\nthat enables you to write code that creates and displays the shape without using a template.",
            "title": "Introducing Shapes"
        },
        {
            "location": "/Documentation/Accessing-and-rendering-shapes/#creating-shapes",
            "text": "For module developers, the most common need for shapes is to transport data from a driver to a template for rendering.\nA driver derives from the  Orchard.ContentManagement.Drivers.ContentPartDriver  class\nand typically overrides that class's  Display  and  Editor  methods.\nThe  Display  and  Editor  methods return a  ContentShapeResult  object, which is analogous to\nthe  ActionResult  object returned by action methods in ASP.NET MVC.\nThe  ContentShape  method helps you create the shape and return it in a  ContentShapeResult  object.  Although the  ContentShape  method is overloaded, the most typical use is to pass it two\nparameters\u2014the shape type and a dynamic function expression that defines the shape.\nThe shape type names the shape and binds the shape to the template that will be used to render it.\nThe naming conventions for shape types are discussed later in Naming Shapes and Templates .  The function expression can be described best by using an example.\nThe following example shows a driver's  Display  method that returns a shape result,\nwhich will be used to display a  Map  part.  protected override DriverResult Display(\n    MapPart part, string displayType, dynamic shapeHelper)\n{\nreturn ContentShape(\"Parts_Map\",\n                     () => shapeHelper.Parts_Map(\n                           Longitude: part.Longitude, \n                           Latitude: part.Latitude));\n}  The expression uses a dynamic object ( shapeHelper ) to define a  Parts_Map  shape and its attributes.\nThe expression adds a  Longitude  property to the shape and sets it equal to the part's  Longitude  property.\nThe expression also adds a  Latitude  property to the shape and sets it equal to the part's  Latitude  property.\nThe  ContentShape  method creates the results object that is returned by the  Display  method.  The following example shows the entire driver class that sends a shape result to a template either\nto be displayed or edited in a  Map  part. The  Display  method is used to display the map.\nThe  Editor  method marked \"GET\" is used to display the shape result in editing view for user input.\nThe  Editor  method marked \"POST\" is used to redisplay the editor view using the values provided by the user.\nThese methods use different overloads of the  Editor  method.  using Maps.Models;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Drivers;\n\nnamespace Maps.Drivers\n{\n    public class MapPartDriver : ContentPartDriver<MapPart>\n    {\n        protected override DriverResult Display(\n            MapPart part, string displayType, dynamic shapeHelper)\n        {\n            return ContentShape(\"Parts_Map\",\n                                () => shapeHelper.Parts_Map(\n                                      Longitude: part.Longitude, \n                                      Latitude: part.Latitude));\n        }\n\n        //GET\n        protected override DriverResult Editor(\n            MapPart part, dynamic shapeHelper)\n        {\n            return ContentShape(\"Parts_Map_Edit\",\n                                () => shapeHelper.EditorTemplate(\n                                      TemplateName: \"Parts/Map\", \n                                      Model: part));\n        }\n\n        //POST\n        protected override DriverResult Editor(\n            MapPart part, IUpdateModel updater, dynamic shapeHelper)\n        {\n            updater.TryUpdateModel(part, Prefix, null, null);\n            return Editor(part, shapeHelper);\n        }\n    }\n}  The  Editor  method marked \"GET\" uses the  ContentShape  method to create a shape for an editor template.\nIn this case, the type name is  Parts_Map_Edit  and the  shapeHelper  object creates an  EditorTemplate  shape.\nThis is a special shape that has a  TemplateName  property and a  Model  property.\nThe  TemplateName  property takes a partial path to the template.\nIn this case,  \"Parts/Map\"  causes Orchard to look for a template in your module at the following path:   Views/EditorTemplates/Parts/Map.cshtml  The  Model  property takes the name of the part's model file, but without the file-name extension.",
            "title": "Creating Shapes"
        },
        {
            "location": "/Documentation/Accessing-and-rendering-shapes/#naming-shapes-and-templates",
            "text": "As noted, the name given to a shape type binds the shape to the template that will be used to render the shape.\nFor example, suppose you create a part named  Map  that displays a map for the specified longitude and latitude.\nThe name of the shape type might be  Parts_Map . By convention, all part shapes begin with  Parts_  followed by the name of the part (in this case  Map ). Given this name ( Parts_Map ), Orchard looks for a template in your module at the following path:   views/parts/Map.cshtml  The following table summarizes the conventions that are used to name shape types and templates.     Applied To  Shape Naming Convention  Shape Type Example  Template Example      Content shapes  Content__[ContentType]  Content__BlogPost  Content-BlogPost    Content shapes  Content__[Id]  Content__42  Content-42    Content shapes  Content__[DisplayType]  Content__Summary  Content.Summary    Content shapes  Content_[DisplayType]__[ContentType]  Content_Summary__BlogPost  Content-BlogPost.Summary    Content shapes  Content_[DisplayType]__[Id]  Content_Summary__42  Content-42.Summary    Content.Edit shapes  Content_Edit__[DisplayType]  Content_Edit__Page  Content-Page.Edit    Content Part templates  [ShapeType]__[Id]  Parts_Common_Metadata__42  Parts/Common.Metadata-42    Content Part templates  [ShapeType]__[ContentType]  Parts_Common_Metadata__BlogPost  Parts/Common.Metadata-BlogPost    Field templates  [ShapeType]__[FieldName]  Fields_Common_Text__Teaser  Fields/Common.Text-Teaser    Field templates  [ShapeType]__[PartName]  Fields_Common_Text__TeaserPart  Fileds/Common.Text-TeaserPart    Field templates  [ShapeType]__[ContentType]__[PartName]  Fields_Common_Text__Blog__TeaserPart  Fields/Common.Text-Blog-TeaserPart    Field templates  [ShapeType]__[PartName]__[FieldName]  Fields_Common_Text__TeaserPart__Teaser  Fields/Common.Text-TeaserPart-Teaser    Field templates  [ShapeType]__[ContentType]__[FieldName]  Fields_Common_Text__Blog__Teaser  Fields/Common.Text-Blog-Teaser    Field templates  [ShapeType]__[ContentType]__[PartName]__[FieldName]  Fields_Common_Text__Blog__TeaserPart__Teaser  Fields/Common.Text-Blog-TeaserPart-Teaser    LocalMenu  LocalMenu__[MenuName]  LocalMenu__main  LocalMenu-main    LocalMenuItem  LocalMenuItem__[MenuName]  LocalMenuItem__main  LocalMenuItem-main    Menu  Menu__[MenuName]  Menu__main  Menu-main    MenuItem  MenuItem__[MenuName]  MenuItem__main  MenuItem-main    Resource  Resource__[FileName]  Resource__flower.gif  Resource-flower.gif    Style  Style__[FileName]  Style__site.css  Style-site.css    Widget  Widget__[ContentType]  Widget__HtmlWidget  Widget-HtmlWidget    Widget  Widget__[ZoneName]  Widget__AsideSecond  Widget-AsideSecond    Zone  Zone__[ZoneName]  Zone__AsideSecond  Zone-AsideSecond     You should put your templates in the project according to the following rules:   Content item shape templates are in the  views/items  folder.  Parts_  shape templates are in the  views/parts  folder.  Fields_  shape templates are in the  views/fields  folder.  The  EditorTemplate  shape templates are in the  views/EditorTemplates/ template  name folder. \nFor example, an  EditorTemplate  with a template name of  Parts/Routable.RoutePart  has its template\nat  views/EditorTemplates/Parts/Routable.RoutePart.cshtml .  All other shape templates are in the  views  folder.    Note The template extension can be any extension supported by an active view engine, such as  .cshtml ,  .vbhtml , or  .ascx .",
            "title": "Naming Shapes and Templates"
        },
        {
            "location": "/Documentation/Accessing-and-rendering-shapes/#from-template-file-name-to-shape-name",
            "text": "More generally, the rules to map from a template file name to the corresponding shape name are the following:   Dot (.) and backslash () change to underscore ( ).\nNote that this does not mean that an _example.cshtml  file in a  myviews  subdirectory of  Views \nis equivalent to a  myviews_example.chtml  file in  Views .\nThe shape templates must still be in the expected directory (see above).  Hyphen (-) changes to a double underscore (__).   For example,  Views/Hello.World.cshtml  will be used to render a shape named  Hello_World ,\nand  Views/Hello.World-85.cshtml  will be used to render a shape named  Hello_World__85 .",
            "title": "From Template File Name to Shape Name"
        },
        {
            "location": "/Documentation/Accessing-and-rendering-shapes/#alternate-shape-rendering",
            "text": "As noted, an HTML widget in the  AsideSecond  zone (for example) could be rendered\nby a  widget.cshtml  template, by a  widget-htmlwidget.cshtml  template,\nor by a  widget-asidesecond.cshtml  if they exist in the current theme.\nWhen various possibilities exist to render the same content,\nthese are referred to as  alternates  of the shape,\nand they enable rich template overriding scenarios.  Alternates form a group that corresponds to the same shape if they differ only by a double-underscore suffix.\nFor example,  Hello_World ,  Hello_World__85 , and  Hello_World__DarkBlue  are an alternate group\nfor a  Hello_World  shape.  Hello_World_Summary , conversely, does not belong to that group\nand would correspond to a  Hello_World_Shape  shape, not to a  Hello_World  shape.\n(Notice the difference between \"__\" and \"_\".)",
            "title": "Alternate Shape Rendering"
        },
        {
            "location": "/Documentation/Accessing-and-rendering-shapes/#which-alternate-will-be-rendered",
            "text": "Even if it has alternates, a shape is always created with the base name, such as  Hello_World .\nAlternates give additional template name options to the theme developer beyond the default\n(such as  hello.world.cshtml ).\nThe system will choose the most specialized template available among the alternates,\nso  hello.world-orange.cshtml  will be preferred to  hello.world.cshtml  if it exists.",
            "title": "Which Alternate Will Be Rendered?"
        },
        {
            "location": "/Documentation/Accessing-and-rendering-shapes/#built-in-content-item-alternates",
            "text": "The table above shows possible template names for content items.\nIt should now be clear that the shape name is built from  Content \nand the display type (for example  Content_Summary ).  The system also automatically adds the content type and the content ID as alternates\n(for example  Content_Summary__Page  and  Content_Summary__42 ).  For more information about how to use alternates, see  Alternates .",
            "title": "Built-In Content Item Alternates"
        },
        {
            "location": "/Documentation/Accessing-and-rendering-shapes/#rendering-shapes-using-templates",
            "text": "A shape template is a fragment of markup that is used to render the shape.\nThe default view engine in Orchard is the Razor view engine.\nTherefore, shape templates use Razor syntax by default.\nFor an introduction to Razor syntax, see  Template File Syntax Guide .  The following example shows a template for displaying a  Map  part as an image.   <img alt=\"Location\" border=\"1\" src=\"http://maps.google.com/maps/api/staticmap? \n     &zoom=14\n     &size=256x256\n     &maptype=satellite&markers=color:blue|@Model.Latitude,@Model.Longitude\n     &sensor=false\" />  This example shows an  img  element in which the  src  attribute contains a URL\nand a set of parameters passed as query-string values.\nIn this query string,  @Model  represents the shape that was passed into the template.\nTherefore,  @Model.Latitude  is the  Latitude  property of the shape,\nand  @Model.Longitude  is the  Longitude  property of the shape.  The following example shows the template for the editor.\nThis template enables the user to enter values for the latitude and longitude.  @model Maps.Models.MapPart\n\n<fieldset>\n    <legend>Map Fields</legend>\n\n    <div class=\"editor-label\">\n        @Html.LabelFor(model => model.Longitude)\n    </div>\n    <div class=\"editor-field\">\n        @Html.TextBoxFor(model => model.Latitude)\n        @Html.ValidationMessageFor(model => model.Latitude)\n    </div>\n\n    <div class=\"editor-label\">\n        @Html.LabelFor(model => model.Longitude)\n    </div>\n    <div class=\"editor-field\">\n        @Html.TextBoxFor(model => model.Longitude)\n        @Html.ValidationMessageFor(model => model.Longitude)\n    </div>\n</fieldset>  The  @Html.LabelFor  expressions create labels using the name of the shape properties.\nThe  @Html.TextBoxFor  expressions create text boxes where users enter values for the shape properties.\nThe  @Html.ValidationMessageFor  expressions create messages that are displayed if users enter an invalid value.",
            "title": "Rendering Shapes Using Templates"
        },
        {
            "location": "/Documentation/Accessing-and-rendering-shapes/#wrappers",
            "text": "Wrappers let you customize the rendering of a shape by adding markup around the shape.\nFor example,  Document.cshtml  is a wrapper for the  Layout  shape, because it specifies\nthe markup code that  surrounds the  Layout  shape.\nFor more information about the relationship between  Document  and  Layout ,\nsee  Template File Syntax Guide .  Typically, you add a wrapper file to the  Views  folder of  your theme.\nFor example, to add a wrapper for  Widget , you add a  Widget.Wrapper.cshtml  file to\nthe  Views  folder of your theme.\nIf you enable the  Shape Tracing  feature, you'll see the available wrapper names for a shape.\nYou can also specify a wrapper in the  placement.info  file.\nFor more information about how to specify  a wrapper,\nsee  Understanding the placement.info File .",
            "title": "Wrappers"
        },
        {
            "location": "/Documentation/Accessing-and-rendering-shapes/#creating-a-shape-method",
            "text": "Another way to create and render a shape is to create a method that both defines and renders the shape.\nThe method must be marked with the  Shape  attribute (the  Orchard.DisplayManagement.ShapeAttribute  class).\nThe method returns an  IHtmlString  object instead of using a template;\nthe returned object contains the markup that renders the shape.   The following example shows the  DateTimeRelative  shape.\nThis shape takes a  DateTime  value in the past and returns a string that relates the value to the current time.  public class DateTimeShapes : IDependency {\n    private readonly IClock _clock;\n\n    public DateTimeShapes(IClock clock) {\n        _clock = clock;\n        T = NullLocalizer.Instance;\n    }\n\n    public Localizer T { get; set; }\n\n    [Shape]\n    public IHtmlString DateTimeRelative(HtmlHelper Html, DateTime dateTimeUtc) {\n        var time = _clock.UtcNow - dateTimeUtc;\n\n        if (time.TotalDays > 7)\n            return Html.DateTime(dateTimeUtc, T(\"'on' MMM d yyyy 'at' h:mm tt\"));\n        if (time.TotalHours > 24)\n            return T.Plural(\"1 day ago\", \"{0} days ago\", time.Days);\n        if (time.TotalMinutes > 60)\n            return T.Plural(\"1 hour ago\", \"{0} hours ago\", time.Hours);\n        if (time.TotalSeconds > 60)\n            return T.Plural(\"1 minute ago\", \"{0} minutes ago\", time.Minutes);\n        if (time.TotalSeconds > 10)\n            return T.Plural(\"1 second ago\", \"{0} seconds ago\", time.Seconds);\n\n        return T(\"a moment ago\");\n    }\n}",
            "title": "Creating a Shape Method"
        },
        {
            "location": "/Documentation/Alternates/",
            "text": "Alternates are optional variations of a shape that you can implement in a theme in order to customize\nthe rendering of the shape for specific cases.\nBy using alternates, you can override which template is used to render content,\nbased on the type (or other characteristic) of that content.\nFor example, you can use alternates to apply one layout file for the home page but another layout file for subpages.\nOr you can use alternates to render tags one way when the tags are in a page but\na different way when the tags are in a blog post.\nAlternates are particularly useful when you have different types of content and\nyou want to customize the appearance of these different types of content. \n\n\nThe Orchard framework uses a naming convention to determine whether an alternate template\nis used for rendering content.\nThe naming convention enables you to add template files that are used automatically,\nwithout requiring you to modify any code.\n\n\nNaming Convention for Alternates\n\n\nAlternate shapes are named using the name of the base shape followed by a double underscore (__)\nand an ending that is specific to the alternate shape.\nFor example, a \nParts_Tags_ShowTags\n shape can have alternates with names such as\n\nParts_Tags_ShowTags__BlogPost\n and \nParts_Tags_ShowTags__Page\n.\nThe part of the alternate name after the double underscore reflects when the shape is used,\nsuch as the current content type. (For more information about how shapes are named,\nsee \nAccessing and Rendering Shapes\n.)\n\n\nMapping a Template File to an Alternate\n\n\nTo create a template file that maps to the corresponding shape name,\nyou must name the template according to the  following naming convention:\n\n\n\n\nConvert an underscore (_) in the shape name to either a dot (.) or backslash (\\) in the template name.\nA backslash indicates that the template resides in a subfolder.\n\n\nConvert a double underscore (__) in the shape name to a hyphen (-).\n\n\nFor any Display type value in the shape name, place the type name after a dot (.)\nat the end of the template name, such as Content-BlogPost.Summary.\n\n\n\n\nAll templates for alternates must reside in the \nViews\n folder.\nThe \nViews\n folder can be located either in the theme or in the module.\nThe following table shows which subfolders of \nViews\n to use for different types of templates.\n\n\n\n\n\n\n\n\nShape type\n\n\nTemplate Folder\n\n\n\n\n\n\n\n\n\n\nContent item\n\n\nViews\\Items\n\n\n\n\n\n\nParts\n\n\nViews\\Parts\n\n\n\n\n\n\nFields\n\n\nViews\\Fields\n\n\n\n\n\n\nEditorTemplate\n\n\nViews\\EditorTemplates\\[template type folder]\n (For example, an \nEditorTemplate\n for a part is located at \nViews\\EditorTemplates\\Parts\n.)\n\n\n\n\n\n\nAll other\n\n\nViews\n\n\n\n\n\n\n\n\nFor example, to create an alternate template for the \nTags\n part, you can add a template\nto the \nMyTheme\\Views\\Parts\n folder.\nHowever, because the underscore can be converted to either a dot (.) or backslash (),\nyou can also create a template in the \nViews\n folder and add \nParts.\n to the beginning of the name.\nA template at either \nViews\\Parts\\Tags.ShowTags-BlogPost.cshtml\n or\n\nViews\\Parts.Tags.ShowTags-BlogPost.cshtml\n will map to a shape named \nParts_Tags_ShowTags__BlogPost\n.\n\n\nIf the Orchard framework cannot locate an alternate template that has the expected name,\nthe default template will be used for those shapes.\nFor example, if you do not create an alternate for showing tags, the default template for tags\n(located at \nViews\\Parts\\Tags.ShowTags.cshtml\n) is used.\n\n\nThe Orchard framework automatically creates many alternates that you can use in your application.\nHowever, you can create templates for these alternate shapes.\nThe patterns for creating alternates are shown below, with examples of matching templates in parenthesis.\n\n\nFor \nContent\n shapes:\n\n\n\n\nContent__[DisplayType]\n. (Example template: \nContent.Summary\n)\n\n\nContent__[ContentType]\n. (Example template: \nContent-BlogPost\n)\n\n\nContent__[Id]\n. (Example template: \nContent-42\n)\n\n\nContent\n[DisplayType]__[ContentType]_. (Example template: \nContent-BlogPost.Summary\n)\n\n\nContent\n[DisplayType]__[Id]_. (Example template: \nContent-42.Summary\n)\n\n\n\n\nFor \nZone\n shapes:\n\n\n\n\nZone__[ZoneName]\n. (Example template: \nZone-SideBar\n)\n\n\n\n\nFor \nNavigation\n shapes (the new menu system since version 1.5):\n\n\n\n\nMenuItemLink__[MenuName]\n. (Example template: \nMenuItemLink-main-menu\n)\n\n\nMenuItemLink__[ContentType]\n. (Examples template: \nMenuItemLink-ContentMenuItem\n, \nMenuItemLink-HtmlMenuItem\n, \nMenuItemLink-Blog\n)\n\n\n\n\nFor menu and menu item shapes:\n\n\n\n\nMenu__[MenuName]\n. (Example template: \nMenu-main\n)\n\n\nMenuItem__[MenuName]\n. (Example template: \nMenuItem-main\n)\n\n\n\n\nFor local menu and local menu item shapes:\n\n\n\n\nLocalMenu__[MenuName]\n. (Example template: \nLocalMenu-main\n)\n\n\nLocalMenuItem__[MenuName]\n. (Example template: \nLocalMenuItem-main\n)\n\n\n\n\nFor styles and resources:\n\n\n\n\nStyle__[FileName]\n\n\nResource__[FileName]\n\n\n\n\nFor widget shapes:\n\n\n\n\nWidget__[ZoneName]\n. (Example template: \nWidget-SideBar\n)\n\n\nWidget__[ContentType]\n. (Example template: \nWidget-BlogArchive\n)\n\n\n\n\nFor fields:\n\n\n\n\n[ShapeType__FieldName]\n. (Example template: \nFields\\Common.Text-Teaser\n)\n\n\n[ShapeType__PartName]\n. (Example template: \nFields\\Common.Text-TeaserPart\n)\n\n\n[ShapeType]__[ContentType]__[PartName]\n. (Example template: \nFields\\Common.Text-Blog-TeaserPart\n)\n\n\n[ShapeType]__[PartName]__[FieldName]\n. (Example template: \nFields\\Common.Text-TeaserPart-Teaser\n)\n\n\n[ShapeType]__[ContentType]__[FieldName]\n. (Example template: \nFields\\Common.Text-Blog-Teaser\n)\n\n\n[ShapeType]__[ContentType]__[PartName]__[FieldName]\n. (Example template: \nFields\\Common.Text-Blog-TeaserPart-Teaser\n)\n\n\n\n\nFor content parts:\n\n\n\n\n[ShapeType]__[Id]\n. (Example template: \nParts\\Common.Metadata-42\n)\n\n\n[ShapeType]__[ContentType]\n. (Example template: \nParts\\Common.Metadata-BlogPost\n)\n\n\n\n\nYou can use the \nShape Tracing\n module to generate alternate templates through the \nShape Tracing\n user interface. For more information, see \nCustomizing Orchard using Designer Helper Tools\n.\n\n\nURL and Widget Alternates\n\n\nThe \nURL Alternates\n module enables you to create templates for specific URLs,\nand the \nWidget Alternates\n enables additional alternates for widgets of certain types and in specific zones.\nYou must enable the \nURL Alternates\n and \nWidget Alternates\n modules in order to use their features.\nWhen enabled, alternate shapes are created based on the URL or the zone.\nThese URL alternates are combined with the alternate patterns defined above.\n\n\nFor example, the URL \n/my-blog/post-1\n has alternates available for a \nMenuItem\n object\nwith the following template names:\n\n\nMenuItem-main\n\n\nMenuItem-main-url-my-blog\n\n\nMenuItem-main-url-my-blog-post-1\n\n\nFor the homepage, the following alternate is available:\n\n\nMenuItem-main-url-homepage\n\n\nUsing this module, you can add URL-specific alternates to the \nLayout\n shape, such as the following: \n\nLayout-url-homepage\n. This adds a specific layout for your About page of your site.\n\n\nCreating a new layout file in your Themes/ThemeName/Views named \nLayout-url-About.cshtml\n\nwould be picked up and used when viewing the /About page in your site.\n\n\n\n\nNote:\n if the changes are only small, perhaps using alternate url naming to the zone would be more appropriate.\n\n\n\n\nYou can enable URL Alternates by downloading the Designer Tools module from the Orchard Team\nin the Orchard Modules Gallery:\n\nOrchard Designer Tools\n\n\nSimilarly, widget alternates add new templates names that you can use to change the rendering\nof content parts when they are rendered as part of a specific widget type or inside of a\nspecific zone. \nShape Tracing\n\n(another feature of the \nOrchard Designer Tools\n\nmodule) is a great way to discover what alternates are available for any shape template on the page.\n\n\nHere are some examples of widget alternate template names:\n\n\nParts.Common.Body-HtmlWidget-TripelSecond\n\n\nParts.Common.Body-TripelSecond\n\n\nExplicitly Designating an Alternate Template\n\n\nIn addition to using the automatically generated alternates, you can manually specify an alternate.\nIn a \nplacement.info\n file, you can specify which alternates are available for a content type.\nFor example, to specify a different template (identified as \nParts_Tags_ShowTags_BlogPost\n)\nfor rendering the tags for blog posts, you can revise the \nplacement.info\n file for the\n\nOrchard.Tags\n module to include an element that matches \nBlogPost\n types.\nThe following example shows the revised file.\n\n\n<Placement>\n    <Place Parts_Tags_Edit=\"Content:7\"/>\n    <Match ContentType=\"BlogPost\">\n        <Place Parts_Tags_ShowTags=\"Header:after.7;Alternate=ShowTags_BlogPost\"/>\n    </Match>  \n    <Match DisplayType=\"Detail\">\n        <Place Parts_Tags_ShowTags=\"Header:after.7\"/>\n    </Match>\n    <Match DisplayType=\"Summary\">\n        <Place Parts_Tags_ShowTags=\"Header:after.7\"/>\n    </Match>\n</Placement>\n\n\n\nThe ordering of the \nMatch\n elements is significant.\nOnly the first matched element is used to render the item.\nIn the example, placing the element for \nBlogPost\n below \nDetail\n and \nSummary\n means\nthat \nShowTags_BlogPost\n will not be used, even for \nBlogPost\n items,\nbecause the earlier elements match the item.\nFor more information about the \nplacement.info\n file, see\n\nUnderstanding placement.info\n.\n\n\nAlternates for MVC views\n\n\nSome modules in Orchard use regular MVC views to render the results of an action that was invoked on a custom controller. To customize the look of the pages produced by custom MVC controllers in Orchard, you need to add a version of the view file in your theme's \nViews\n folder.\n\n\nFor example, if you want to customize the search results page of the Orchard Search module (Orchard.Search) you need to add a file in the following folder of your theme:\n\n\n/Themes/{Your theme}/Views/Orchard.Search/Search/Index.cshtml\n\n\n\nThis file will override the default view used by the Orchard.Search module. \nThe ViewEngine used by Orchard will look for the following pattern when resolving MVC views.\n\n\n\n\n~/Themes/{Active theme}/Views/{Area}/{Controller}/{View}.cshtml\n\n\n~/Themes/{Active theme}/Views/{Controller}/{View}.cshtml\n\n\n~/Themes/{Active theme}/{Partial}.cshtml\n\n\n~/Themes/{Active theme}/DisplayTemplates/{TemplateName}.cshtml\n\n\n~/Themes/{Active theme}/EditorTemplates/{TemplateName}.cshtml\n\n\n\n\nPlease be aware, any other convention that is normally supported in MVC is not supported within a theme. Unless specified in the list above. \n\n\nAdding Alternates Through Code\n\n\nIn addition to methods described above for adding alternates, you can add alternates through code.\nTo designate an alternate through code, you create a class that implements the \nIShapeTableProvider\n interface.\nThen, you add a handler for \nOnDisplaying\n for each type of shape that needs an alternate.\nYou specify the shape name as the parameter for the \nDescribe\n method on the \nShapeTableBuilder\n class.\nWithin the handler, you add any logic that you need to specify when the alternate is used.\nThe following example first shows how to specify an alternate for shape named \nContent\n,\nbut only when the user is on the home page.\nIt also shows how to specify an alternate for a shape named \nParts_Tags_ShowTags\n\nwhen the \nDisplayType\n is \nSummary\n.\n\n\nusing Orchard;\nusing Orchard.ContentManagement;\nusing Orchard.DisplayManagement.Descriptors;\n\nnamespace MyTheme.ShapeProviders\n{\n    public class ExampleShapeProvider : IShapeTableProvider\n    {\n        private readonly IWorkContextAccessor _workContextAccessor;\n\n        public ExampleShapeProvider(IWorkContextAccessor workContextAccessor)\n        {\n            _workContextAccessor = workContextAccessor;\n        }\n\n        public void Discover(ShapeTableBuilder builder)\n        {\n            builder.Describe(\"Content\")\n                .OnDisplaying(displaying =>\n                {\n                    if (displaying.ShapeMetadata.DisplayType == \"Detail\")\n                    {\n                        ContentItem contentItem = displaying.Shape.ContentItem;\n                        if (_workContextAccessor.GetContext().CurrentSite.HomePage\n                            .EndsWith(';' + contentItem.Id.ToString())) {\n\n                            displaying.ShapeMetadata.Alternates\n                                .Add(\"Content__HomePage\");\n                        }\n                    }\n                });\n\n            builder.Describe(\"Parts_Tags_ShowTags\")\n                .OnDisplaying(displaying =>\n                {\n                    if (displaying.ShapeMetadata.DisplayType == \"Summary\")\n                    {\n                        displaying.ShapeMetadata.Alternates\n                            .Add(\"Tags_ShowTags_Summary\");\n                    }\n                });\n        }\n    }\n}",
            "title": "Alternates"
        },
        {
            "location": "/Documentation/Alternates/#naming-convention-for-alternates",
            "text": "Alternate shapes are named using the name of the base shape followed by a double underscore (__)\nand an ending that is specific to the alternate shape.\nFor example, a  Parts_Tags_ShowTags  shape can have alternates with names such as Parts_Tags_ShowTags__BlogPost  and  Parts_Tags_ShowTags__Page .\nThe part of the alternate name after the double underscore reflects when the shape is used,\nsuch as the current content type. (For more information about how shapes are named,\nsee  Accessing and Rendering Shapes .)",
            "title": "Naming Convention for Alternates"
        },
        {
            "location": "/Documentation/Alternates/#mapping-a-template-file-to-an-alternate",
            "text": "To create a template file that maps to the corresponding shape name,\nyou must name the template according to the  following naming convention:   Convert an underscore (_) in the shape name to either a dot (.) or backslash (\\) in the template name.\nA backslash indicates that the template resides in a subfolder.  Convert a double underscore (__) in the shape name to a hyphen (-).  For any Display type value in the shape name, place the type name after a dot (.)\nat the end of the template name, such as Content-BlogPost.Summary.   All templates for alternates must reside in the  Views  folder.\nThe  Views  folder can be located either in the theme or in the module.\nThe following table shows which subfolders of  Views  to use for different types of templates.     Shape type  Template Folder      Content item  Views\\Items    Parts  Views\\Parts    Fields  Views\\Fields    EditorTemplate  Views\\EditorTemplates\\[template type folder]  (For example, an  EditorTemplate  for a part is located at  Views\\EditorTemplates\\Parts .)    All other  Views     For example, to create an alternate template for the  Tags  part, you can add a template\nto the  MyTheme\\Views\\Parts  folder.\nHowever, because the underscore can be converted to either a dot (.) or backslash (),\nyou can also create a template in the  Views  folder and add  Parts.  to the beginning of the name.\nA template at either  Views\\Parts\\Tags.ShowTags-BlogPost.cshtml  or Views\\Parts.Tags.ShowTags-BlogPost.cshtml  will map to a shape named  Parts_Tags_ShowTags__BlogPost .  If the Orchard framework cannot locate an alternate template that has the expected name,\nthe default template will be used for those shapes.\nFor example, if you do not create an alternate for showing tags, the default template for tags\n(located at  Views\\Parts\\Tags.ShowTags.cshtml ) is used.  The Orchard framework automatically creates many alternates that you can use in your application.\nHowever, you can create templates for these alternate shapes.\nThe patterns for creating alternates are shown below, with examples of matching templates in parenthesis.  For  Content  shapes:   Content__[DisplayType] . (Example template:  Content.Summary )  Content__[ContentType] . (Example template:  Content-BlogPost )  Content__[Id] . (Example template:  Content-42 )  Content [DisplayType]__[ContentType]_. (Example template:  Content-BlogPost.Summary )  Content [DisplayType]__[Id]_. (Example template:  Content-42.Summary )   For  Zone  shapes:   Zone__[ZoneName] . (Example template:  Zone-SideBar )   For  Navigation  shapes (the new menu system since version 1.5):   MenuItemLink__[MenuName] . (Example template:  MenuItemLink-main-menu )  MenuItemLink__[ContentType] . (Examples template:  MenuItemLink-ContentMenuItem ,  MenuItemLink-HtmlMenuItem ,  MenuItemLink-Blog )   For menu and menu item shapes:   Menu__[MenuName] . (Example template:  Menu-main )  MenuItem__[MenuName] . (Example template:  MenuItem-main )   For local menu and local menu item shapes:   LocalMenu__[MenuName] . (Example template:  LocalMenu-main )  LocalMenuItem__[MenuName] . (Example template:  LocalMenuItem-main )   For styles and resources:   Style__[FileName]  Resource__[FileName]   For widget shapes:   Widget__[ZoneName] . (Example template:  Widget-SideBar )  Widget__[ContentType] . (Example template:  Widget-BlogArchive )   For fields:   [ShapeType__FieldName] . (Example template:  Fields\\Common.Text-Teaser )  [ShapeType__PartName] . (Example template:  Fields\\Common.Text-TeaserPart )  [ShapeType]__[ContentType]__[PartName] . (Example template:  Fields\\Common.Text-Blog-TeaserPart )  [ShapeType]__[PartName]__[FieldName] . (Example template:  Fields\\Common.Text-TeaserPart-Teaser )  [ShapeType]__[ContentType]__[FieldName] . (Example template:  Fields\\Common.Text-Blog-Teaser )  [ShapeType]__[ContentType]__[PartName]__[FieldName] . (Example template:  Fields\\Common.Text-Blog-TeaserPart-Teaser )   For content parts:   [ShapeType]__[Id] . (Example template:  Parts\\Common.Metadata-42 )  [ShapeType]__[ContentType] . (Example template:  Parts\\Common.Metadata-BlogPost )   You can use the  Shape Tracing  module to generate alternate templates through the  Shape Tracing  user interface. For more information, see  Customizing Orchard using Designer Helper Tools .",
            "title": "Mapping a Template File to an Alternate"
        },
        {
            "location": "/Documentation/Alternates/#url-and-widget-alternates",
            "text": "The  URL Alternates  module enables you to create templates for specific URLs,\nand the  Widget Alternates  enables additional alternates for widgets of certain types and in specific zones.\nYou must enable the  URL Alternates  and  Widget Alternates  modules in order to use their features.\nWhen enabled, alternate shapes are created based on the URL or the zone.\nThese URL alternates are combined with the alternate patterns defined above.  For example, the URL  /my-blog/post-1  has alternates available for a  MenuItem  object\nwith the following template names:  MenuItem-main  MenuItem-main-url-my-blog  MenuItem-main-url-my-blog-post-1  For the homepage, the following alternate is available:  MenuItem-main-url-homepage  Using this module, you can add URL-specific alternates to the  Layout  shape, such as the following:  Layout-url-homepage . This adds a specific layout for your About page of your site.  Creating a new layout file in your Themes/ThemeName/Views named  Layout-url-About.cshtml \nwould be picked up and used when viewing the /About page in your site.   Note:  if the changes are only small, perhaps using alternate url naming to the zone would be more appropriate.   You can enable URL Alternates by downloading the Designer Tools module from the Orchard Team\nin the Orchard Modules Gallery: Orchard Designer Tools  Similarly, widget alternates add new templates names that you can use to change the rendering\nof content parts when they are rendered as part of a specific widget type or inside of a\nspecific zone.  Shape Tracing \n(another feature of the  Orchard Designer Tools \nmodule) is a great way to discover what alternates are available for any shape template on the page.  Here are some examples of widget alternate template names:  Parts.Common.Body-HtmlWidget-TripelSecond  Parts.Common.Body-TripelSecond",
            "title": "URL and Widget Alternates"
        },
        {
            "location": "/Documentation/Alternates/#explicitly-designating-an-alternate-template",
            "text": "In addition to using the automatically generated alternates, you can manually specify an alternate.\nIn a  placement.info  file, you can specify which alternates are available for a content type.\nFor example, to specify a different template (identified as  Parts_Tags_ShowTags_BlogPost )\nfor rendering the tags for blog posts, you can revise the  placement.info  file for the Orchard.Tags  module to include an element that matches  BlogPost  types.\nThe following example shows the revised file.  <Placement>\n    <Place Parts_Tags_Edit=\"Content:7\"/>\n    <Match ContentType=\"BlogPost\">\n        <Place Parts_Tags_ShowTags=\"Header:after.7;Alternate=ShowTags_BlogPost\"/>\n    </Match>  \n    <Match DisplayType=\"Detail\">\n        <Place Parts_Tags_ShowTags=\"Header:after.7\"/>\n    </Match>\n    <Match DisplayType=\"Summary\">\n        <Place Parts_Tags_ShowTags=\"Header:after.7\"/>\n    </Match>\n</Placement>  The ordering of the  Match  elements is significant.\nOnly the first matched element is used to render the item.\nIn the example, placing the element for  BlogPost  below  Detail  and  Summary  means\nthat  ShowTags_BlogPost  will not be used, even for  BlogPost  items,\nbecause the earlier elements match the item.\nFor more information about the  placement.info  file, see Understanding placement.info .",
            "title": "Explicitly Designating an Alternate Template"
        },
        {
            "location": "/Documentation/Alternates/#alternates-for-mvc-views",
            "text": "Some modules in Orchard use regular MVC views to render the results of an action that was invoked on a custom controller. To customize the look of the pages produced by custom MVC controllers in Orchard, you need to add a version of the view file in your theme's  Views  folder.  For example, if you want to customize the search results page of the Orchard Search module (Orchard.Search) you need to add a file in the following folder of your theme:  /Themes/{Your theme}/Views/Orchard.Search/Search/Index.cshtml  This file will override the default view used by the Orchard.Search module. \nThe ViewEngine used by Orchard will look for the following pattern when resolving MVC views.   ~/Themes/{Active theme}/Views/{Area}/{Controller}/{View}.cshtml  ~/Themes/{Active theme}/Views/{Controller}/{View}.cshtml  ~/Themes/{Active theme}/{Partial}.cshtml  ~/Themes/{Active theme}/DisplayTemplates/{TemplateName}.cshtml  ~/Themes/{Active theme}/EditorTemplates/{TemplateName}.cshtml   Please be aware, any other convention that is normally supported in MVC is not supported within a theme. Unless specified in the list above.",
            "title": "Alternates for MVC views"
        },
        {
            "location": "/Documentation/Alternates/#adding-alternates-through-code",
            "text": "In addition to methods described above for adding alternates, you can add alternates through code.\nTo designate an alternate through code, you create a class that implements the  IShapeTableProvider  interface.\nThen, you add a handler for  OnDisplaying  for each type of shape that needs an alternate.\nYou specify the shape name as the parameter for the  Describe  method on the  ShapeTableBuilder  class.\nWithin the handler, you add any logic that you need to specify when the alternate is used.\nThe following example first shows how to specify an alternate for shape named  Content ,\nbut only when the user is on the home page.\nIt also shows how to specify an alternate for a shape named  Parts_Tags_ShowTags \nwhen the  DisplayType  is  Summary .  using Orchard;\nusing Orchard.ContentManagement;\nusing Orchard.DisplayManagement.Descriptors;\n\nnamespace MyTheme.ShapeProviders\n{\n    public class ExampleShapeProvider : IShapeTableProvider\n    {\n        private readonly IWorkContextAccessor _workContextAccessor;\n\n        public ExampleShapeProvider(IWorkContextAccessor workContextAccessor)\n        {\n            _workContextAccessor = workContextAccessor;\n        }\n\n        public void Discover(ShapeTableBuilder builder)\n        {\n            builder.Describe(\"Content\")\n                .OnDisplaying(displaying =>\n                {\n                    if (displaying.ShapeMetadata.DisplayType == \"Detail\")\n                    {\n                        ContentItem contentItem = displaying.Shape.ContentItem;\n                        if (_workContextAccessor.GetContext().CurrentSite.HomePage\n                            .EndsWith(';' + contentItem.Id.ToString())) {\n\n                            displaying.ShapeMetadata.Alternates\n                                .Add(\"Content__HomePage\");\n                        }\n                    }\n                });\n\n            builder.Describe(\"Parts_Tags_ShowTags\")\n                .OnDisplaying(displaying =>\n                {\n                    if (displaying.ShapeMetadata.DisplayType == \"Summary\")\n                    {\n                        displaying.ShapeMetadata.Alternates\n                            .Add(\"Tags_ShowTags_Summary\");\n                    }\n                });\n        }\n    }\n}",
            "title": "Adding Alternates Through Code"
        },
        {
            "location": "/Documentation/Template-file-syntax-guide/",
            "text": "Orchard uses templates and shapes to build views. Templates are conceptually similar to partial views in ASP.NET MVC, and they provide the basic structure for rendering shape data in a page. A template can contain web page content such as HTML markup, CSS styles, and JavaScript code to help render shape data. In addition, a template can contain server-code blocks so that you can access and render shape data in a web page. Shapes are dynamic data models that represent content structures such as menus, menu items, content items, documents, and messages. Shapes provide the data for dynamic views (as opposed to the static ASP.NET views in MVC) that templates render at run time. For more information about working with shapes, see \nAccessing and Rendering Shapes\n. \n\n\nThe view engine is responsible for parsing the template and rendering the shape data into a web page. The default view engine for Orchard is the Razor view engine, which is installed with \nASP.NET MVC 3\n. In order for the Razor view engine to correctly parse a template, you must write the template using the Razor syntax, which defines a small set of rules for writing web page templates that contain a mixture of static web page content (such as HTML markup) and programming code. \n\n\nThis topic gives an overview of the Razor syntax used in templates and layout pages. It then shows you how to create your own shape template.\n\n\nRazor Syntax Primer\n\n\nUsing the simple rules of the Razor syntax, you can embed server-based code (in C# or Visual Basic) into web page markup. Like server code in other ASP.NET web applications, the server code that you embed in a web page using the Razor syntax runs on the server before the page is sent to the browser. The server code in ASP.NET web pages can dynamically generate client content such as HTML markup, CSS, or JavaScript, and then send it to the browser along with any static HTML that the page contains.\n\n\nThe most commonly used language for writing server code with the Razor syntax is C#, and the examples in this article are all written in C#. For an introduction to web page programming using the Razor syntax with C#, see \nCoding with the Razor Syntax\n. For a Visual Basic version of the introduction, see \nASP.NET Web Pages Visual Basic\n.\n\n\nWeb pages that contain Razor content have a special file extension (\n.cshtml\n for C#, \n.vbhtml\n for Visual Basic). The Microsoft feature name for these pages is ASP.NET Web Pages with Razor Syntax. These pages contain the full functionality of the ASP.NET MVC page framework, with the added capability of the Razor syntax for writing page templates. The server recognizes these file extensions, runs the code that's marked with Razor syntax, and sends the resulting page to the browser.\n\n\nExperimenting with Razor Syntax\n\n\nIf you want to experiment with Razor syntax, you might want to start with WebMatrix. WebMatrix is a free programming environment for creating ASP.NET Web Pages with Razor syntax. It includes IIS Express (a development web server), ASP.NET, and SQL Server Compact (an embedded database also used by Orchard).\n\n\nWebMatrix gives you productivity features that support Razor syntax, such as syntax highlighting for code and IntelliSense for HTML markup and CSS. You can also work with Razor syntax in Visual Studio 2010, which provides the added features of full IntelliSense for your server code, and also lets you use the Visual Studio debugger. For more information, see \nProgram ASP.NET Web Pages in Visual Studio\n. However, you can use any text editor to experiment with Razor syntax. \n\n\nTo download and install WebMatrix, go to the \nWebMatrix downloads page\n and click the link for the Microsoft Web Platform Installer to start your download.\n\n\nCode Blocks and Inline Expressions\n\n\nYou add code to a web page using the \n@\n character. Braces ({ }) are used to mark a code block. For example, the following expression assigns the string \"Hello World\" to a variable named \nmyMessage\n.\n\n\n@{ var myMessage = \"Hello World\"; }\n\n\n\nCode blocks can be inserted in the web page interspersed with HTML markup. The following code defines a greeting message that includes the current day of the week and embeds the message in the page markup.\n\n\n@{\n    var greeting = \"Welcome to our site!\";\n    var weekDay = DateTime.Now.DayOfWeek;\n    var greetingMessage = greeting + \" Today is: \" + weekDay;\n}\n<p>The greeting is: @greetingMessage</p>\n\n\n\n\n\nWhen the code block consists of a single expression, such as a \nfor\n loop, you can place the \n@\n character in front of a language keyword. In this case, the \nfor\n loop serves as the entire code block, so you do not need an outer \n@\n character and braces to enclose the block. You can use the same approach with other block coding structures in C#:  \nif-then\n statements, \nforeach\n and \nwhile\n loops, \ncase\n statements, and so on. In the following expression, the \n@\n character is placed in front of the keyword \nfor\n. The loop prints a set of numbered lines from 10 to 20. \n\n\n@for(var i = 10; i < 21; i++)\n{\n    <p>Line #: @i</p>\n}\n\n\n\n\n\nThe following example shows how to embed server-side comments in your web pages. These comments are stripped from the markup before the web page is sent to the browser, so users cannot see them. In contrast, client markup comments (\n<!-- -->\n) are not stripped from the markup, so users can see them.\n\n\n@* This is a one-line comment. *@\n\n@*\n   This is a multi-line comment.\n   It can continue for any number of lines.\n*@\n\n\n\nComments within a Razor syntax code block can also use the standard C# commenting syntax (\n//\n).\n\n\nAccessing Orchard Objects in Code\n\n\nOrchard 1.1 provides simplified access to objects in code, because you can directly access content part objects without having to use casting or extension methods.  \n\n\nThe following examples show how to access a \nTitle\n property on a widget part. The first code example shows the older way of access the property from Orchard version 1.0.20, found in the \n~\\Modules\\Orchard.Widgets\\Views\\Widget.Wrapper.cshtml\n file. Note that the code casts the returned object to the \nIContent\n interface and uses an \nAs\n extension method to access the property.\n\n\nvar title = ((IContent)Model.ContentItem).As<WidgetPart>().Title;\n\n\n\nHere is the updated and simplified way that you can access the property in Orchard 1.1:\n\n\nvar title = Model.ContentItem.WidgetPart.Title;\n\n\n\nHere is a second example of Orchard object access that has been simplified in version 1.1. The following code is in Orchard version 1.0.02 to access the fields for a content item. This example is from a content shape, so the \nContentItem\n object is accessed directly on the \nModel\n object. The first line of code casts to \nContentItem\n, and then the second line uses an \nAs()\n extension method to access the collection of fields on the content part. The return value of the code is the picture width.\n\n\nvar contentItem = (ContentItem)Model.ContentItem;\nvar picture = (ImageField)contentItem.As<ProfilePart>().Fields.First(f => f.Name == \"Picture\");\n@picture.Width\n\n\n\nHere is an approach you can use in Orchard 1.1, with the amount of code required to get the picture width reduced from three lines to just one:\n\n\n@Model.ContentItem.ProfilePart.Picture.Width\n\n\n\nCreating Shape Templates\n\n\nShape templates are fragments of HTML markup for rendering shapes. To demonstrate how shape templates are used, suppose you want display a map on your web page. The shapes that will contain the map settings for display and edit are defined in the following driver code.\n\n\nusing Maps.Models;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Drivers;\n\nnamespace Maps.Drivers\n{\n    public class MapPartDriver : ContentPartDriver<MapPart>\n    {\n        protected override DriverResult Display(\n            MapPart part, string displayType, dynamic shapeHelper)\n        {\n            return ContentShape(\"Parts_Map\",\n                                () => shapeHelper.Parts_Map(\n                                      Longitude: part.Longitude, \n                                      Latitude: part.Latitude));\n        }\n\n        //GET\n        protected override DriverResult Editor(\n            MapPart part, dynamic shapeHelper)\n        {\n            return ContentShape(\"Parts_Map_Edit\",\n                                () => shapeHelper.EditorTemplate(\n                                      TemplateName: \"Parts/Map\", \n                                      Model: part));\n        }\n\n        //POST\n        protected override DriverResult Editor(\n            MapPart part, IUpdateModel updater, dynamic shapeHelper)\n        {\n            updater.TryUpdateModel(part, Prefix, null, null);\n            return Editor(part, shapeHelper);\n        }\n    }\n}\n\n\n\nThe \nDisplay\n method is used to display the map. The \nEditor\n method marked \n//GET\n is used to display the shape result in editing view for user input. The \nEditor\n method marked \n//POST\n is used to redisplay the editor view using the values provided by the user. These methods use different overloads of the \nEditor\n method.\n\n\nFor more information about how to define shapes, see \nAccessing and Rendering Shapes\n.\n\n\nThe following example shows a simple template that is used to display the map. \n\n\n<img alt=\"Location\" border=\"1\" src=\"http://maps.google.com/maps/api/staticmap? \n     &zoom=14\n     &size=256x256\n     &maptype=satellite&markers=color:blue|@Model.Latitude,@Model.Longitude\n     &sensor=false\" />\n\n\n\nThis example shows an \nimg\n element in which the \nsrc\n attribute contains a URL and a set of parameters passed as query-string values. In this query string, \n@Model\n represents the shape that was passed into the template. Therefore, \n@Model.Latitude\n is the \nLatitude\n property of the shape, and \n@Model.Longitude\n is the \nLongitude\n property of the shape.\n\n\nThe following example shows the template for the editor. This template enables the user to enter values for latitude and longitude.\n\n\n@model Maps.Models.MapPart\n\n<fieldset>\n    <legend>Map Fields</legend>\n\n    <div class=\"editor-label\">\n        @Html.LabelFor(model => model.Longitude)\n    </div>\n    <div class=\"editor-field\">\n        @Html.TextBoxFor(model => model.Latitude)\n        @Html.ValidationMessageFor(model => model.Latitude)\n    </div>\n\n    <div class=\"editor-label\">\n        @Html.LabelFor(model => model.Longitude)\n    </div>\n    <div class=\"editor-field\">\n        @Html.TextBoxFor(model => model.Longitude)\n        @Html.ValidationMessageFor(model => model.Longitude)\n    </div>\n\n</fieldset>\n\n\n\nThe \n@Html.LabelFor\n expressions create labels using the name of the shape properties. The \n@Html.TextBoxFor\n expressions create text boxes where users enter values for the shape properties. The \n@Html.ValidationMessageFor\n expressions create messages that are displayed if users enter an invalid value.\n\n\nLayout and Document Templates\n\n\nThe layout and document templates are special template types that define the structure of a web page. These templates are most often used in themes for laying out a web page. Each web page has a \nLayout\n shape (dynamic object) associated with it. The \nLayout\n shape defines the zones that are available to hold web page contents. The layout and document templates determine how the zones defined in the \nLayout\n shape will be laid out on the web page.\n\n\nThe layout template (\nLayout.cshtml\n) lays out the zones for the body of the web page. The document template (\nDocument.cshtml\n) wraps around the layout template and lays out the remainder of the web page.\n\n\nBy default, the \nLayout\n shape defines three zones for use in the document template (\nHead\n, \nBody\n, and \nTail\n) and one shape for the layout template (\nContent\n). In the document template, the \nHead\n zone is used to define the header of the web page, the \nBody\n zone is where the layout template is inserted, and the \nTail\n zone is used for the footer of the web page.\n\n\nThe following example shows a typical document template. \n\n\n@using Orchard.Mvc.Html;\n@using Orchard.UI.Resources;\n@{\n    RegisterLink(new LinkEntry {Type = \"image/x-icon\", Rel = \"shortcut icon\", \n       Href = Url.Content(\"~/modules/orchard.themes/Content/orchard.ico\")});\n    Script.Include(\"html5.js\").AtLocation(ResourceLocation.Head);\n\n    var title = (Request.Path != Request.ApplicationPath && !string.IsNullOrWhiteSpace((string)Model.Title)\n                    ? Model.Title + WorkContext.CurrentSite.PageTitleSeparator\n                    : \"\") +\n        WorkContext.CurrentSite.SiteName;\n}\n<!DOCTYPE html> \n<html lang=\"en\" class=\"static @Html.ClassForPage()\"> \n<head> \n    <meta charset=\"utf-8\" />\n    <title>@title</title> \n    @Display(Model.Head)\n    < script>(function(d){d.className=\"dyn\"+d.className.substring(6,d.className.length);})(document.documentElement);</script>\n</head> \n<body>\n@* Layout (template) is in the Body zone at the default position *@\n@Display(Model.Body)\n@Display(Model.Tail)\n</body>\n</html>\n\n\n\nThis document template contains a code block that links to an icon and formats the page title. It also contains the basic HTML structure for the web page, and it determines placement of the \nHead\n, \nBody\n, and \nTail\n zones.\n\n\nThe following example shows a typical layout template. Notice that the layout template references zones in addition to the \nContent\n zone. These new zones are added to the \nLayout\n shape if content is added to the zone.  \n\n\n@* Html.RegisterStyle(\"site.css\"); *@\n@{ \n    Model.Header.Add(Display.Header(), \"5\");\n    Model.Header.Add(Display.User(), \"10\");\n    Model.Header.Add(Model.Navigation, \"15\");\n}\n<div id=\"page\">\n    <header>\n        @Display(Model.Header)\n    </header>\n    <div id=\"main\">\n        <div id=\"messages\">\n            @Display(Model.Messages)\n        </div>\n        <div id=\"content-wrapper\">\n            <div id=\"content\">\n                @Display(Model.Content)\n            </div>\n        </div>\n        <div id=\"sidebar-wrapper\">\n            <div id=\"sidebar\">\n                @Display(Model.Sidebar)\n            </div>\n        </div>\n    </div>\n    <div id=\"footer-wrapper\">\n        <footer>\n            @Display(Model.Footer)\n        </footer>\n    </div>\n</div>\n\n\n\nThis layout template contains a code block that adds subzones to the \nHeader\n zone. It also refers to the following new zones: \nMessages\n, \nSidebar\n, and \nFooter\n.\n\n\nIn order for these zones to appear in the Orchard UI so you can add content to them, you must reference the zones in the theme's \nTheme.txt\n file, as shown in the following example.\n\n\nName: SimpleTheme\nAuthor: \nDescription: Simple example theme.\nVersion: 1.0\nTags: Simple\nWebsite: http://www.orchardproject.net\nZones: Header, User, Navigation, Messages, Content, Sidebar, Footer\n\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.1\n\n\n4-4-11: Updated introduction to the Razor syntax. Added new section on accessing Orchard objects in code.",
            "title": "Template File Syntax Guide"
        },
        {
            "location": "/Documentation/Template-file-syntax-guide/#razor-syntax-primer",
            "text": "Using the simple rules of the Razor syntax, you can embed server-based code (in C# or Visual Basic) into web page markup. Like server code in other ASP.NET web applications, the server code that you embed in a web page using the Razor syntax runs on the server before the page is sent to the browser. The server code in ASP.NET web pages can dynamically generate client content such as HTML markup, CSS, or JavaScript, and then send it to the browser along with any static HTML that the page contains.  The most commonly used language for writing server code with the Razor syntax is C#, and the examples in this article are all written in C#. For an introduction to web page programming using the Razor syntax with C#, see  Coding with the Razor Syntax . For a Visual Basic version of the introduction, see  ASP.NET Web Pages Visual Basic .  Web pages that contain Razor content have a special file extension ( .cshtml  for C#,  .vbhtml  for Visual Basic). The Microsoft feature name for these pages is ASP.NET Web Pages with Razor Syntax. These pages contain the full functionality of the ASP.NET MVC page framework, with the added capability of the Razor syntax for writing page templates. The server recognizes these file extensions, runs the code that's marked with Razor syntax, and sends the resulting page to the browser.",
            "title": "Razor Syntax Primer"
        },
        {
            "location": "/Documentation/Template-file-syntax-guide/#experimenting-with-razor-syntax",
            "text": "If you want to experiment with Razor syntax, you might want to start with WebMatrix. WebMatrix is a free programming environment for creating ASP.NET Web Pages with Razor syntax. It includes IIS Express (a development web server), ASP.NET, and SQL Server Compact (an embedded database also used by Orchard).  WebMatrix gives you productivity features that support Razor syntax, such as syntax highlighting for code and IntelliSense for HTML markup and CSS. You can also work with Razor syntax in Visual Studio 2010, which provides the added features of full IntelliSense for your server code, and also lets you use the Visual Studio debugger. For more information, see  Program ASP.NET Web Pages in Visual Studio . However, you can use any text editor to experiment with Razor syntax.   To download and install WebMatrix, go to the  WebMatrix downloads page  and click the link for the Microsoft Web Platform Installer to start your download.",
            "title": "Experimenting with Razor Syntax"
        },
        {
            "location": "/Documentation/Template-file-syntax-guide/#code-blocks-and-inline-expressions",
            "text": "You add code to a web page using the  @  character. Braces ({ }) are used to mark a code block. For example, the following expression assigns the string \"Hello World\" to a variable named  myMessage .  @{ var myMessage = \"Hello World\"; }  Code blocks can be inserted in the web page interspersed with HTML markup. The following code defines a greeting message that includes the current day of the week and embeds the message in the page markup.  @{\n    var greeting = \"Welcome to our site!\";\n    var weekDay = DateTime.Now.DayOfWeek;\n    var greetingMessage = greeting + \" Today is: \" + weekDay;\n}\n<p>The greeting is: @greetingMessage</p>   When the code block consists of a single expression, such as a  for  loop, you can place the  @  character in front of a language keyword. In this case, the  for  loop serves as the entire code block, so you do not need an outer  @  character and braces to enclose the block. You can use the same approach with other block coding structures in C#:   if-then  statements,  foreach  and  while  loops,  case  statements, and so on. In the following expression, the  @  character is placed in front of the keyword  for . The loop prints a set of numbered lines from 10 to 20.   @for(var i = 10; i < 21; i++)\n{\n    <p>Line #: @i</p>\n}   The following example shows how to embed server-side comments in your web pages. These comments are stripped from the markup before the web page is sent to the browser, so users cannot see them. In contrast, client markup comments ( <!-- --> ) are not stripped from the markup, so users can see them.  @* This is a one-line comment. *@\n\n@*\n   This is a multi-line comment.\n   It can continue for any number of lines.\n*@  Comments within a Razor syntax code block can also use the standard C# commenting syntax ( // ).",
            "title": "Code Blocks and Inline Expressions"
        },
        {
            "location": "/Documentation/Template-file-syntax-guide/#accessing-orchard-objects-in-code",
            "text": "Orchard 1.1 provides simplified access to objects in code, because you can directly access content part objects without having to use casting or extension methods.    The following examples show how to access a  Title  property on a widget part. The first code example shows the older way of access the property from Orchard version 1.0.20, found in the  ~\\Modules\\Orchard.Widgets\\Views\\Widget.Wrapper.cshtml  file. Note that the code casts the returned object to the  IContent  interface and uses an  As  extension method to access the property.  var title = ((IContent)Model.ContentItem).As<WidgetPart>().Title;  Here is the updated and simplified way that you can access the property in Orchard 1.1:  var title = Model.ContentItem.WidgetPart.Title;  Here is a second example of Orchard object access that has been simplified in version 1.1. The following code is in Orchard version 1.0.02 to access the fields for a content item. This example is from a content shape, so the  ContentItem  object is accessed directly on the  Model  object. The first line of code casts to  ContentItem , and then the second line uses an  As()  extension method to access the collection of fields on the content part. The return value of the code is the picture width.  var contentItem = (ContentItem)Model.ContentItem;\nvar picture = (ImageField)contentItem.As<ProfilePart>().Fields.First(f => f.Name == \"Picture\");\n@picture.Width  Here is an approach you can use in Orchard 1.1, with the amount of code required to get the picture width reduced from three lines to just one:  @Model.ContentItem.ProfilePart.Picture.Width",
            "title": "Accessing Orchard Objects in Code"
        },
        {
            "location": "/Documentation/Template-file-syntax-guide/#creating-shape-templates",
            "text": "Shape templates are fragments of HTML markup for rendering shapes. To demonstrate how shape templates are used, suppose you want display a map on your web page. The shapes that will contain the map settings for display and edit are defined in the following driver code.  using Maps.Models;\nusing Orchard.ContentManagement;\nusing Orchard.ContentManagement.Drivers;\n\nnamespace Maps.Drivers\n{\n    public class MapPartDriver : ContentPartDriver<MapPart>\n    {\n        protected override DriverResult Display(\n            MapPart part, string displayType, dynamic shapeHelper)\n        {\n            return ContentShape(\"Parts_Map\",\n                                () => shapeHelper.Parts_Map(\n                                      Longitude: part.Longitude, \n                                      Latitude: part.Latitude));\n        }\n\n        //GET\n        protected override DriverResult Editor(\n            MapPart part, dynamic shapeHelper)\n        {\n            return ContentShape(\"Parts_Map_Edit\",\n                                () => shapeHelper.EditorTemplate(\n                                      TemplateName: \"Parts/Map\", \n                                      Model: part));\n        }\n\n        //POST\n        protected override DriverResult Editor(\n            MapPart part, IUpdateModel updater, dynamic shapeHelper)\n        {\n            updater.TryUpdateModel(part, Prefix, null, null);\n            return Editor(part, shapeHelper);\n        }\n    }\n}  The  Display  method is used to display the map. The  Editor  method marked  //GET  is used to display the shape result in editing view for user input. The  Editor  method marked  //POST  is used to redisplay the editor view using the values provided by the user. These methods use different overloads of the  Editor  method.  For more information about how to define shapes, see  Accessing and Rendering Shapes .  The following example shows a simple template that is used to display the map.   <img alt=\"Location\" border=\"1\" src=\"http://maps.google.com/maps/api/staticmap? \n     &zoom=14\n     &size=256x256\n     &maptype=satellite&markers=color:blue|@Model.Latitude,@Model.Longitude\n     &sensor=false\" />  This example shows an  img  element in which the  src  attribute contains a URL and a set of parameters passed as query-string values. In this query string,  @Model  represents the shape that was passed into the template. Therefore,  @Model.Latitude  is the  Latitude  property of the shape, and  @Model.Longitude  is the  Longitude  property of the shape.  The following example shows the template for the editor. This template enables the user to enter values for latitude and longitude.  @model Maps.Models.MapPart\n\n<fieldset>\n    <legend>Map Fields</legend>\n\n    <div class=\"editor-label\">\n        @Html.LabelFor(model => model.Longitude)\n    </div>\n    <div class=\"editor-field\">\n        @Html.TextBoxFor(model => model.Latitude)\n        @Html.ValidationMessageFor(model => model.Latitude)\n    </div>\n\n    <div class=\"editor-label\">\n        @Html.LabelFor(model => model.Longitude)\n    </div>\n    <div class=\"editor-field\">\n        @Html.TextBoxFor(model => model.Longitude)\n        @Html.ValidationMessageFor(model => model.Longitude)\n    </div>\n\n</fieldset>  The  @Html.LabelFor  expressions create labels using the name of the shape properties. The  @Html.TextBoxFor  expressions create text boxes where users enter values for the shape properties. The  @Html.ValidationMessageFor  expressions create messages that are displayed if users enter an invalid value.",
            "title": "Creating Shape Templates"
        },
        {
            "location": "/Documentation/Template-file-syntax-guide/#layout-and-document-templates",
            "text": "The layout and document templates are special template types that define the structure of a web page. These templates are most often used in themes for laying out a web page. Each web page has a  Layout  shape (dynamic object) associated with it. The  Layout  shape defines the zones that are available to hold web page contents. The layout and document templates determine how the zones defined in the  Layout  shape will be laid out on the web page.  The layout template ( Layout.cshtml ) lays out the zones for the body of the web page. The document template ( Document.cshtml ) wraps around the layout template and lays out the remainder of the web page.  By default, the  Layout  shape defines three zones for use in the document template ( Head ,  Body , and  Tail ) and one shape for the layout template ( Content ). In the document template, the  Head  zone is used to define the header of the web page, the  Body  zone is where the layout template is inserted, and the  Tail  zone is used for the footer of the web page.  The following example shows a typical document template.   @using Orchard.Mvc.Html;\n@using Orchard.UI.Resources;\n@{\n    RegisterLink(new LinkEntry {Type = \"image/x-icon\", Rel = \"shortcut icon\", \n       Href = Url.Content(\"~/modules/orchard.themes/Content/orchard.ico\")});\n    Script.Include(\"html5.js\").AtLocation(ResourceLocation.Head);\n\n    var title = (Request.Path != Request.ApplicationPath && !string.IsNullOrWhiteSpace((string)Model.Title)\n                    ? Model.Title + WorkContext.CurrentSite.PageTitleSeparator\n                    : \"\") +\n        WorkContext.CurrentSite.SiteName;\n}\n<!DOCTYPE html> \n<html lang=\"en\" class=\"static @Html.ClassForPage()\"> \n<head> \n    <meta charset=\"utf-8\" />\n    <title>@title</title> \n    @Display(Model.Head)\n    < script>(function(d){d.className=\"dyn\"+d.className.substring(6,d.className.length);})(document.documentElement);</script>\n</head> \n<body>\n@* Layout (template) is in the Body zone at the default position *@\n@Display(Model.Body)\n@Display(Model.Tail)\n</body>\n</html>  This document template contains a code block that links to an icon and formats the page title. It also contains the basic HTML structure for the web page, and it determines placement of the  Head ,  Body , and  Tail  zones.  The following example shows a typical layout template. Notice that the layout template references zones in addition to the  Content  zone. These new zones are added to the  Layout  shape if content is added to the zone.    @* Html.RegisterStyle(\"site.css\"); *@\n@{ \n    Model.Header.Add(Display.Header(), \"5\");\n    Model.Header.Add(Display.User(), \"10\");\n    Model.Header.Add(Model.Navigation, \"15\");\n}\n<div id=\"page\">\n    <header>\n        @Display(Model.Header)\n    </header>\n    <div id=\"main\">\n        <div id=\"messages\">\n            @Display(Model.Messages)\n        </div>\n        <div id=\"content-wrapper\">\n            <div id=\"content\">\n                @Display(Model.Content)\n            </div>\n        </div>\n        <div id=\"sidebar-wrapper\">\n            <div id=\"sidebar\">\n                @Display(Model.Sidebar)\n            </div>\n        </div>\n    </div>\n    <div id=\"footer-wrapper\">\n        <footer>\n            @Display(Model.Footer)\n        </footer>\n    </div>\n</div>  This layout template contains a code block that adds subzones to the  Header  zone. It also refers to the following new zones:  Messages ,  Sidebar , and  Footer .  In order for these zones to appear in the Orchard UI so you can add content to them, you must reference the zones in the theme's  Theme.txt  file, as shown in the following example.  Name: SimpleTheme\nAuthor: \nDescription: Simple example theme.\nVersion: 1.0\nTags: Simple\nWebsite: http://www.orchardproject.net\nZones: Header, User, Navigation, Messages, Content, Sidebar, Footer",
            "title": "Layout and Document Templates"
        },
        {
            "location": "/Documentation/Template-file-syntax-guide/#change-history",
            "text": "Updates for Orchard 1.1  4-4-11: Updated introduction to the Razor syntax. Added new section on accessing Orchard objects in code.",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Packaging-and-sharing-themes/",
            "text": "This topic is being updated for the Orchard 1.1 release.\n\n\n\n\nOrchard provides a packaging feature that lets you share themes you have created. The feature creates a package (\n.zip\n file, in \n.nupkg\n format) that contains your theme. It also lets you upload your new theme to the Orchard Gallery.\n\n\nThis article shows you how to package a theme and upload it the Orchard Gallery, and how users can download and install your theme.\n\n\nViewing the Packaging Modules\n\n\nTo view the packaging modules, open the Orchard dashboard and click \nModules\n. Scroll to \nPackaging\n. \n\n\n\n\nThe \nPackaging\n modules are enabled by default. If any of the modules have been disabled, you must enable them in order to package and upload your theme.\n\n\nPackaging Your Theme\n\n\nTo package your theme, open the \nOrchard command line\n and type the following command, replacing \nMyFirstTheme\n with the name of your theme, and \nC:\\Temp\n with the output path for the generated package file. \n\n\npackage create MyFirstTheme C:\\Temp\n\n\n\nThe package feature creates a \n.nupkg\n file. (For more information, see \nNuGet.org\n.) The name of the \n.nupkg\n file is the name of your theme plus its version number, as in the following example:\n\n\nOrchard.Theme.<nameOfYourTheme>.<version>.nupkg\n\n\n\nUploading Your Theme to Gallery\n\n\nAfter creating your package, you can share your theme by giving someone the package file. You can also contribute your theme to the Orchard Gallery. For information about how to contribute your theme, see \nContributing a Module or Theme to the Gallery\n.\n\n\nInstalling a Packaged Theme\n\n\nTo install a packaged theme in Orchard, open the Orchard dashboard. Click \nThemes\n, and then click \nInstall a theme from my compter\n.\n\n\n\n\nClick \nChoose File\n. Browse to, and select, the theme package (\n.nupkg\n) file, and then click \nOpen\n. Then click \nInstall\n. If Orchard is running on a remote server, you will be browsing your local computer; you do not need to put the \n.nupkg\n file onto the server before installing.\n\n\n\n\nYour new theme appears under \nAvailable\n.",
            "title": "Packaging and Sharing Themes"
        },
        {
            "location": "/Documentation/Packaging-and-sharing-themes/#viewing-the-packaging-modules",
            "text": "To view the packaging modules, open the Orchard dashboard and click  Modules . Scroll to  Packaging .    The  Packaging  modules are enabled by default. If any of the modules have been disabled, you must enable them in order to package and upload your theme.",
            "title": "Viewing the Packaging Modules"
        },
        {
            "location": "/Documentation/Packaging-and-sharing-themes/#packaging-your-theme",
            "text": "To package your theme, open the  Orchard command line  and type the following command, replacing  MyFirstTheme  with the name of your theme, and  C:\\Temp  with the output path for the generated package file.   package create MyFirstTheme C:\\Temp  The package feature creates a  .nupkg  file. (For more information, see  NuGet.org .) The name of the  .nupkg  file is the name of your theme plus its version number, as in the following example:  Orchard.Theme.<nameOfYourTheme>.<version>.nupkg",
            "title": "Packaging Your Theme"
        },
        {
            "location": "/Documentation/Packaging-and-sharing-themes/#uploading-your-theme-to-gallery",
            "text": "After creating your package, you can share your theme by giving someone the package file. You can also contribute your theme to the Orchard Gallery. For information about how to contribute your theme, see  Contributing a Module or Theme to the Gallery .",
            "title": "Uploading Your Theme to Gallery"
        },
        {
            "location": "/Documentation/Packaging-and-sharing-themes/#installing-a-packaged-theme",
            "text": "To install a packaged theme in Orchard, open the Orchard dashboard. Click  Themes , and then click  Install a theme from my compter .   Click  Choose File . Browse to, and select, the theme package ( .nupkg ) file, and then click  Open . Then click  Install . If Orchard is running on a remote server, you will be browsing your local computer; you do not need to put the  .nupkg  file onto the server before installing.   Your new theme appears under  Available .",
            "title": "Installing a Packaged Theme"
        },
        {
            "location": "/Documentation/UI-guidelines-for-theme-authors/",
            "text": "This topic was updated for the Orchard 1.0 release.\n\n\n\n\nThis article presents recommendations for coding and formatting HTML markup and CSS that will help you keep your themes organized.\n\n\nGeneral Guidelines\n\n\nThis section contains guidelines for a number of design topics, such as browser testing, file names, HTML elements, JavaScript and images.\n\n\nBrowser Testing\n\n\nYou should test all templates using the latest versions of the following browsers. For older versions of browsers, such as Internet Explorer 6, you should ensure that your site and templates remain functional, but don't attempt to resolve rendering issue that do not affect the user's ability to consume the content. \n\n\n\n\nMicrosoft Internet Explorer\n\n\nGoogle Chrome\n\n\nMozilla Firefox\n\n\nApple Safari\n\n\nOpera\n\n\n\n\nFile Names\n\n\nThe following lists file naming rules followed by the Orchard development team.\n\n\n\n\nInclude files use an underscore (_) as a prefix\n\n\n.cshtml\n, \n.vbhtml\n, HTML, and CSS files should be named using camel casing.\n\n\n\n\nHTML doctype Directive\n\n\nUse the HTML5 \ndoctype\n declaration, because it lets you use HTML5 markup but is also compatible with existing markup that complies to HTML 4.01 and XHTML.\n\n\n<!DOCTYPE html>\n\n\n\nHTML Elements\n\n\nOrchard assumes the use of HTML5. Although you are not required to use HTML5, it is a strong recommendation. One reason is that templates from different modules and parent themes might be used on a single page, where there is only one \ndoctype\n declaration. \n\n\nThe following tables lists some commonly used HTML5 elements that provide for better structure in web pages than earlier versions of HTML did. For more information about HTML5, see the W3C article \nHTML5 difference from HTML4\n.\n\n\n\n\n<section>\n\n\n<article>\n\n\n<aside>\n\n\n<hgroup>\n\n\n<header>\n\n\n<footer>\n\n\n<nav>\n\n\n<figure>\n\n\n<figcaption>\n\n\n\n\nExample:\n\n\n<figure>\n      <video src=\"tgif.vid\"></video>\n      <figcaption>Example</figcaption>\n</figure>\n\n\n\nIf you are using any of these new elements, in order to avoid breaking script libraries in older versions of Internet Explorer, we recommend that you use the workaround described in \nStyling New HTML5 Elements\n.\n\n\nJavaScript and jQuery\n\n\nYour web pages should work even if JavaScript is disabled in the browser. Scripts should be used only to enhance the experience of the page, which is referred to as \nprogressive enhancement\n. For more information, see \nProgressive Enhancement with JavaScript\n.\n\n\nOrchard has jQuery built in. The Orchard team has standardized on jQuery as its JavaScript framework. \n\n\nImages\n\n\nUse the appropriate image format for the scenario, as described in the following list:\n\n\n\n\nPhotos and gradients should use the \njpeg\n format.\n\n\nGraphical elements should use the \npng\n format.\n\n\nUse alpha transparency via the \n24-bit png\n format.\n\n\nUse sprites where possible to improve load time and to reduce the number of requests made to the server.\n\n\n\n\nFor more information about sprites, see \nCSS Sprites: Image Slicing's Kiss of Death\n.\n\n\nAccessibility\n\n\nYour HTML and CSS templates should pass the accessibility tests provided by \nWave the web accessibility evaluation tool\n. Your templates should satisfy the requirements of WCAG 2.0 level AA.\n\n\nMarkup Validation\n\n\nWe recommend that you always strive for standards compliance. Ensure that your templates pass validation by using the \nW3C Markup Validation Service\n.\n\n\nCSS Organization\n\n\nTo allow users to easily find and read styles for modification, we recommend that you standardize on a structure and coding format. The organizational structure that is introduced in this section is used by the Orchard team.\n\n\nTo help you abide by the CSS standards, keep the following guidelines in mind:\n\n\n\n\nDo not use workarounds like conditional \nif\n statements in stylesheets. \n\n\nCSS markup should be valid CSS 2.1 or higher. You can also use optional progressively enhanced CSS 3 markup.\n\n\n\n\nCSS Format Rules\n\n\nThe following list contains guidelines for formatting CSS markup.\n\n\n\n\nUse four spaces instead of tabs for indentation. (This is the default setting in Visual Studio.)\n\n\nUse a hyphen (-) between words in selectors.\n\n\nRemove unused CSS selections (except for reset styles).\n\n\nUse lowercase for color definitions.\n\n\nUse shorthand notation where possible, such as for color codes; use collapsed properties when practical.\n\n\nUse IDs instead of classes where possible. Using IDs for template elements makes it easy to identify the important selectors in CSS and HTML.\n\n\nUse one line per property definition.\n\n\nUse \"tab-nested\" selectors. For more information, see \nCSS DIY Organization\n.\n\n\n\n\nCSS File Structure\n\n\nThe recommended CSS structure was partly adapted from suggestions provided by Dan Cederholm of SimpleBits. This structure resides in the Style.css file. The file comprises the following sections:\n\n\n\n\nInfo\n - A commented section for the theme that the style is associated with, the author, website, and any copyright information. \n\n\nColor Palette\n - A commented section that defines the overall color scheme for the theme. It provides a single place to define colors and makes it easy for users to find, replace, and modify color definitions. \n\n\nReset\n - Definitions that are used to normalize settings across browsers. \n\n\nClearing Floats\n - Definitions that are used to clear parent items that contain children that float. \n\n\nTypography\n - (Optional) Contains CSS code or a reference to a typography reset framework (such as YUI Fonts) that normalizes font sizes across browsers.  \n\n\nGeneral\n - Definitions for global HTML elements such as \n<body>\n, headings, links, and any other elements where you want to apply a different style and override the reset. This can include styles for elements like \n<ul>\n, \n<p>\n, etc. \n\n\nStructure\n - Layout definitions for major structural components of your templates, such as containers, headers, footers, etc. This section can be subdivided with comments into sections such as navigation, header, etc. \n\n\nMain\n - Main styles related to your theme. This can contain definitions for blog posts, tags, etc. \n\n\nSecondary\n - Secondary styles related to your theme for things like stylized text, errors, etc. \n\n\nForms\n - All styling related to form items.\n\n\nMisc\n - Miscellaneous definitions that are needed to render the look of your template. \n\n\n\n\nThe following example shows this structure applied to a CSS file.\n\n\n/*\nTheme: My Sample Theme\nAuthor: \nCopyright: \n*/\n\n/* Colors Palette\nBackground: #fff\nText: #434343\nMain Accent: #999\nLinks: #443444\n*/\n\n/* Reset\n***************************************************************/\nYOUR CSS RESET CODE GOES HERE\n\n/* Clearing Float\n***************************************************************/\ngroup:after {\n    content: \".\";\n    display: block;\n    height: 0;\n    clear: both;\n    visibility: hidden;\n}\n\n.group {display: inline-block;}  /* for IE/Mac */\n\n/* Typography (Optional)\n***************************************************************/\n@import url(http://yui.yahooapis.com/2.8.1/build/fonts/fonts-min.css);\n\n\n/* General\n***************************************************************/\nbody {}\n\na {}\na:link {}\na:hover{}\na:visited{}\n\nh1,h2,h3,h4,h5,h6 {}\n\n/* Structure\n***************************************************************/\n#container {}\n\n#header {}\n       #logo {}\n\n#footer {}\n\n/* Main\n***************************************************************/\n\n/* Secondary\n***************************************************************/\n\n/* Forms\n***************************************************************/\n\n/* Misc\n***************************************************************/\n\n\n\nCSS Reset\n\n\nYou should always use a reset to normalize styling between browsers and then apply default markup manually. For more information about resets, see \nReset Reloaded\n. You can optionally use a reset library. \n\n\nTo reset a global style\n\n\n\n\nApply the reset.\n\n\nApply a default style to any global element (defined in the general section).\n\n\n\n\nExample:  \n\n    p {\n       padding: 0 10px;\n       line-height: 150%;\n\n    }   \n\n\nTypography\n\n\nUse relative font sizes and set a default base size to ensure consistent font sizes across browsers, and to allow browser users to increase font size to enhance readability. However, remember that relative sizes are cumulative. For example, if you set the size of div tags to \n2em\n, then you then embed a \n<div>\n element inside another \n<div>\n element and another inside that, you'll end up with an effective setting of \n8em\n for the innermost \n<div>\n element.\n\n\nThe following list shows the methods by which you can enhance readability.\n\n\n\n\n(Method 1) Use ems and set the base font size on the \n<body>\n element. The default size for medium text in all modern browsers is \n16px\n. First, reduce this size for the entire document by setting font size in the \n<body>\n element to 62.5%. You can then think in pixels but still set sizes in terms of ems: 1em is 10px, 0.8em is 8px, 1.6em is 16px, etc. For more information, see \nHow to size text using ems\n.\n\n\n(Method 2) Use a framework reset such as \nYUI 2 Fonts CSS\n.\n\n\n\n\nClearing Floats\n\n\nThere are two methods you can use to clear floats without adding markup.\n\n\n\n\n(Method 1) Us the \nposition if everything\n method with semantic modification as suggested by \nSimpleBits\n. This method involves applying a \nclear\n property to any parent element that contains items that you want to float.\nThe SimpleBits modification changes the class name to \ngroup\n, which adds semantic value because you often float related items as a group.\n\n\n(Method 2) Apply the \noverflow:auto\n property to the parent container.\nCertain combinations of margin and padding can force internal scrollbars. If you can't tweak things to remove the scrollbars, you can try using \noverflow:hidden\n, which has virtually the same effect without the scrollbars. The only drawback of \nhidden\n seems to be that some images are cropped if they're placed lower in the page.\n\n\n\n\nForms\n\n\nMark up form elements using the \"ordered-list\" method. This method describes form elements as a sequential list of inputs that the user needs to fill in. It provides both semantic meaning and order to the form, which aids accessibility. When forms are rendered without style sheets, they are clearly labeled in sequential order and have a count associated with them. The ordered list provides additional information for some screen readers that announce the number of list items when they first encounter the list.\n\n\n<fieldset>\n  <legend>Delivery Details</legend>\n  <ol>\n    <li>\n      <label for=\"name\">Name<em>*</em></label>\n      <input id=\"name\" />\n    </li>\n    <li>\n      <label for=\"address1\">Address<em>*</em></label>\n      <input id=\"address1\" />\n    </li>\n    <li>\n      <label for=\"town-city\">Town/City</label>\n      <input id=\"town-city\" />\n    </li>\n    <li>\n      <fieldset>\n        <legend>Is this address also your invoice address?<em>*</em></legend>\n        <label><input type=\"radio\" name=\"invoice-address\" /> Yes</label>\n        <label><input type=\"radio\" name=\"invoice-address\" /> No</label>\n      </fieldset>\n    </li>\n  </ol>\n</fieldset>\n\n\n\nProgressive Enhancements\n\n\nBase your designs on modern browsers that implement up-to-date patterns, but without handicapping the experience of older browsers. If you feel it is important to the design, use known CSS techniques such as sliding door to achieve the desired effect.\n\n\n\n\nBorder radius\n\n\nMultiple background images \n\n\nGradient \n\n\nTransparency (RGBA and opacity)\n\n\nShadows \n\n\nText-Shadows",
            "title": "UI Guidelines for Theme Authors"
        },
        {
            "location": "/Documentation/UI-guidelines-for-theme-authors/#general-guidelines",
            "text": "This section contains guidelines for a number of design topics, such as browser testing, file names, HTML elements, JavaScript and images.",
            "title": "General Guidelines"
        },
        {
            "location": "/Documentation/UI-guidelines-for-theme-authors/#browser-testing",
            "text": "You should test all templates using the latest versions of the following browsers. For older versions of browsers, such as Internet Explorer 6, you should ensure that your site and templates remain functional, but don't attempt to resolve rendering issue that do not affect the user's ability to consume the content.    Microsoft Internet Explorer  Google Chrome  Mozilla Firefox  Apple Safari  Opera",
            "title": "Browser Testing"
        },
        {
            "location": "/Documentation/UI-guidelines-for-theme-authors/#file-names",
            "text": "The following lists file naming rules followed by the Orchard development team.   Include files use an underscore (_) as a prefix  .cshtml ,  .vbhtml , HTML, and CSS files should be named using camel casing.",
            "title": "File Names"
        },
        {
            "location": "/Documentation/UI-guidelines-for-theme-authors/#html-doctype-directive",
            "text": "Use the HTML5  doctype  declaration, because it lets you use HTML5 markup but is also compatible with existing markup that complies to HTML 4.01 and XHTML.  <!DOCTYPE html>",
            "title": "HTML doctype Directive"
        },
        {
            "location": "/Documentation/UI-guidelines-for-theme-authors/#html-elements",
            "text": "Orchard assumes the use of HTML5. Although you are not required to use HTML5, it is a strong recommendation. One reason is that templates from different modules and parent themes might be used on a single page, where there is only one  doctype  declaration.   The following tables lists some commonly used HTML5 elements that provide for better structure in web pages than earlier versions of HTML did. For more information about HTML5, see the W3C article  HTML5 difference from HTML4 .   <section>  <article>  <aside>  <hgroup>  <header>  <footer>  <nav>  <figure>  <figcaption>   Example:  <figure>\n      <video src=\"tgif.vid\"></video>\n      <figcaption>Example</figcaption>\n</figure>  If you are using any of these new elements, in order to avoid breaking script libraries in older versions of Internet Explorer, we recommend that you use the workaround described in  Styling New HTML5 Elements .",
            "title": "HTML Elements"
        },
        {
            "location": "/Documentation/UI-guidelines-for-theme-authors/#javascript-and-jquery",
            "text": "Your web pages should work even if JavaScript is disabled in the browser. Scripts should be used only to enhance the experience of the page, which is referred to as  progressive enhancement . For more information, see  Progressive Enhancement with JavaScript .  Orchard has jQuery built in. The Orchard team has standardized on jQuery as its JavaScript framework.",
            "title": "JavaScript and jQuery"
        },
        {
            "location": "/Documentation/UI-guidelines-for-theme-authors/#images",
            "text": "Use the appropriate image format for the scenario, as described in the following list:   Photos and gradients should use the  jpeg  format.  Graphical elements should use the  png  format.  Use alpha transparency via the  24-bit png  format.  Use sprites where possible to improve load time and to reduce the number of requests made to the server.   For more information about sprites, see  CSS Sprites: Image Slicing's Kiss of Death .",
            "title": "Images"
        },
        {
            "location": "/Documentation/UI-guidelines-for-theme-authors/#accessibility",
            "text": "Your HTML and CSS templates should pass the accessibility tests provided by  Wave the web accessibility evaluation tool . Your templates should satisfy the requirements of WCAG 2.0 level AA.",
            "title": "Accessibility"
        },
        {
            "location": "/Documentation/UI-guidelines-for-theme-authors/#markup-validation",
            "text": "We recommend that you always strive for standards compliance. Ensure that your templates pass validation by using the  W3C Markup Validation Service .",
            "title": "Markup Validation"
        },
        {
            "location": "/Documentation/UI-guidelines-for-theme-authors/#css-organization",
            "text": "To allow users to easily find and read styles for modification, we recommend that you standardize on a structure and coding format. The organizational structure that is introduced in this section is used by the Orchard team.  To help you abide by the CSS standards, keep the following guidelines in mind:   Do not use workarounds like conditional  if  statements in stylesheets.   CSS markup should be valid CSS 2.1 or higher. You can also use optional progressively enhanced CSS 3 markup.",
            "title": "CSS Organization"
        },
        {
            "location": "/Documentation/UI-guidelines-for-theme-authors/#css-format-rules",
            "text": "The following list contains guidelines for formatting CSS markup.   Use four spaces instead of tabs for indentation. (This is the default setting in Visual Studio.)  Use a hyphen (-) between words in selectors.  Remove unused CSS selections (except for reset styles).  Use lowercase for color definitions.  Use shorthand notation where possible, such as for color codes; use collapsed properties when practical.  Use IDs instead of classes where possible. Using IDs for template elements makes it easy to identify the important selectors in CSS and HTML.  Use one line per property definition.  Use \"tab-nested\" selectors. For more information, see  CSS DIY Organization .",
            "title": "CSS Format Rules"
        },
        {
            "location": "/Documentation/UI-guidelines-for-theme-authors/#css-file-structure",
            "text": "The recommended CSS structure was partly adapted from suggestions provided by Dan Cederholm of SimpleBits. This structure resides in the Style.css file. The file comprises the following sections:   Info  - A commented section for the theme that the style is associated with, the author, website, and any copyright information.   Color Palette  - A commented section that defines the overall color scheme for the theme. It provides a single place to define colors and makes it easy for users to find, replace, and modify color definitions.   Reset  - Definitions that are used to normalize settings across browsers.   Clearing Floats  - Definitions that are used to clear parent items that contain children that float.   Typography  - (Optional) Contains CSS code or a reference to a typography reset framework (such as YUI Fonts) that normalizes font sizes across browsers.    General  - Definitions for global HTML elements such as  <body> , headings, links, and any other elements where you want to apply a different style and override the reset. This can include styles for elements like  <ul> ,  <p> , etc.   Structure  - Layout definitions for major structural components of your templates, such as containers, headers, footers, etc. This section can be subdivided with comments into sections such as navigation, header, etc.   Main  - Main styles related to your theme. This can contain definitions for blog posts, tags, etc.   Secondary  - Secondary styles related to your theme for things like stylized text, errors, etc.   Forms  - All styling related to form items.  Misc  - Miscellaneous definitions that are needed to render the look of your template.    The following example shows this structure applied to a CSS file.  /*\nTheme: My Sample Theme\nAuthor: \nCopyright: \n*/\n\n/* Colors Palette\nBackground: #fff\nText: #434343\nMain Accent: #999\nLinks: #443444\n*/\n\n/* Reset\n***************************************************************/\nYOUR CSS RESET CODE GOES HERE\n\n/* Clearing Float\n***************************************************************/\ngroup:after {\n    content: \".\";\n    display: block;\n    height: 0;\n    clear: both;\n    visibility: hidden;\n}\n\n.group {display: inline-block;}  /* for IE/Mac */\n\n/* Typography (Optional)\n***************************************************************/\n@import url(http://yui.yahooapis.com/2.8.1/build/fonts/fonts-min.css);\n\n\n/* General\n***************************************************************/\nbody {}\n\na {}\na:link {}\na:hover{}\na:visited{}\n\nh1,h2,h3,h4,h5,h6 {}\n\n/* Structure\n***************************************************************/\n#container {}\n\n#header {}\n       #logo {}\n\n#footer {}\n\n/* Main\n***************************************************************/\n\n/* Secondary\n***************************************************************/\n\n/* Forms\n***************************************************************/\n\n/* Misc\n***************************************************************/",
            "title": "CSS File Structure"
        },
        {
            "location": "/Documentation/UI-guidelines-for-theme-authors/#css-reset",
            "text": "You should always use a reset to normalize styling between browsers and then apply default markup manually. For more information about resets, see  Reset Reloaded . You can optionally use a reset library.   To reset a global style   Apply the reset.  Apply a default style to any global element (defined in the general section).   Example:   \n    p {\n       padding: 0 10px;\n       line-height: 150%; \n    }",
            "title": "CSS Reset"
        },
        {
            "location": "/Documentation/UI-guidelines-for-theme-authors/#typography",
            "text": "Use relative font sizes and set a default base size to ensure consistent font sizes across browsers, and to allow browser users to increase font size to enhance readability. However, remember that relative sizes are cumulative. For example, if you set the size of div tags to  2em , then you then embed a  <div>  element inside another  <div>  element and another inside that, you'll end up with an effective setting of  8em  for the innermost  <div>  element.  The following list shows the methods by which you can enhance readability.   (Method 1) Use ems and set the base font size on the  <body>  element. The default size for medium text in all modern browsers is  16px . First, reduce this size for the entire document by setting font size in the  <body>  element to 62.5%. You can then think in pixels but still set sizes in terms of ems: 1em is 10px, 0.8em is 8px, 1.6em is 16px, etc. For more information, see  How to size text using ems .  (Method 2) Use a framework reset such as  YUI 2 Fonts CSS .",
            "title": "Typography"
        },
        {
            "location": "/Documentation/UI-guidelines-for-theme-authors/#clearing-floats",
            "text": "There are two methods you can use to clear floats without adding markup.   (Method 1) Us the  position if everything  method with semantic modification as suggested by  SimpleBits . This method involves applying a  clear  property to any parent element that contains items that you want to float. The SimpleBits modification changes the class name to  group , which adds semantic value because you often float related items as a group.  (Method 2) Apply the  overflow:auto  property to the parent container. Certain combinations of margin and padding can force internal scrollbars. If you can't tweak things to remove the scrollbars, you can try using  overflow:hidden , which has virtually the same effect without the scrollbars. The only drawback of  hidden  seems to be that some images are cropped if they're placed lower in the page.",
            "title": "Clearing Floats"
        },
        {
            "location": "/Documentation/UI-guidelines-for-theme-authors/#forms",
            "text": "Mark up form elements using the \"ordered-list\" method. This method describes form elements as a sequential list of inputs that the user needs to fill in. It provides both semantic meaning and order to the form, which aids accessibility. When forms are rendered without style sheets, they are clearly labeled in sequential order and have a count associated with them. The ordered list provides additional information for some screen readers that announce the number of list items when they first encounter the list.  <fieldset>\n  <legend>Delivery Details</legend>\n  <ol>\n    <li>\n      <label for=\"name\">Name<em>*</em></label>\n      <input id=\"name\" />\n    </li>\n    <li>\n      <label for=\"address1\">Address<em>*</em></label>\n      <input id=\"address1\" />\n    </li>\n    <li>\n      <label for=\"town-city\">Town/City</label>\n      <input id=\"town-city\" />\n    </li>\n    <li>\n      <fieldset>\n        <legend>Is this address also your invoice address?<em>*</em></legend>\n        <label><input type=\"radio\" name=\"invoice-address\" /> Yes</label>\n        <label><input type=\"radio\" name=\"invoice-address\" /> No</label>\n      </fieldset>\n    </li>\n  </ol>\n</fieldset>",
            "title": "Forms"
        },
        {
            "location": "/Documentation/UI-guidelines-for-theme-authors/#progressive-enhancements",
            "text": "Base your designs on modern browsers that implement up-to-date patterns, but without handicapping the experience of older browsers. If you feel it is important to the design, use known CSS techniques such as sliding door to achieve the desired effect.   Border radius  Multiple background images   Gradient   Transparency (RGBA and opacity)  Shadows   Text-Shadows",
            "title": "Progressive Enhancements"
        },
        {
            "location": "/Documentation/Customizing-Orchard-using-Designer-Helper-Tools/",
            "text": "Orchard provides a designer tool named \nShape Tracing\n that enables you to customize the appearance of your site. The \nShape Tracing\n module provides tools that you can use to select sections of your website and discover information about the rendering code.\n\n\nGetting Started with Shape Tracing\n\n\nTo use \nShape Tracing\n, first enable the \nShape Tracing\n feature in the dashboard. The \nShape Tracing\n feature comes with the \nDesigner Tools\n module, that you may have to install. After you enable the feature, you will notice a narrow frame across the bottom of the web page when you navigate to your site, similar to the following illustration:\n\n\n\n\nWhen the \nShape Tracing\n frame is collapsed, your site functions as it would normally. However, when you click the icon, the frame expands and displays \nShape Tracing\n features.\n\n\nShape Information\n\n\nWhen the \nShape Tracing\n frame is expanded, you can hold the mouse pointer over a section of a page and that section is highlighted. Click the highlighted section to display information about the shape and how it is rendered.\n\n\n\n\nThe left side of the frame displays which shape is selected. It also enables you to select which shape to highlight by providing a navigable tree for the shapes.\n\n\n\n\nThe right side displays information about the selected shape and enables you to select which type of information to display.\n\n\n\n\nThe \nShape Tracing\n pane displays the following information:\n\n\n\n\nShape\n. Information about the shape and the template to render the shape. Includes the option of creating alternates as described later in this article.\n\n\nModel\n. Information about the model for this shape.\n\n\nPlacement\n. The \nplacement.info\n file.\n\n\nTemplate\n. The code in the template file\n\n\nHTML\n. The HTML for rendering this shape.\n\n\n\n\nCreating Alternate Templates\n\n\nThe \nShape Tracing\n interface displays links that let you automatically create alternate templates for a shape. The interface displays the available alternate templates and includes a link titled \nCreate\n to generate that template.\n\n\n\n\nThe \nCreate\n option only creates the template in the specified directory. You must customize the template to render the shape as needed. If you are using Visual Studio, you must include the template in your project by selecting \nAdd\n > \nExisting Item\n in \nSolution Explorer\n. \n\n\nFor more information about how to create alternates, see \nAlternates\n.",
            "title": "Customizing Orchard Using Designer Helper Tools"
        },
        {
            "location": "/Documentation/Customizing-Orchard-using-Designer-Helper-Tools/#getting-started-with-shape-tracing",
            "text": "To use  Shape Tracing , first enable the  Shape Tracing  feature in the dashboard. The  Shape Tracing  feature comes with the  Designer Tools  module, that you may have to install. After you enable the feature, you will notice a narrow frame across the bottom of the web page when you navigate to your site, similar to the following illustration:   When the  Shape Tracing  frame is collapsed, your site functions as it would normally. However, when you click the icon, the frame expands and displays  Shape Tracing  features.",
            "title": "Getting Started with Shape Tracing"
        },
        {
            "location": "/Documentation/Customizing-Orchard-using-Designer-Helper-Tools/#shape-information",
            "text": "When the  Shape Tracing  frame is expanded, you can hold the mouse pointer over a section of a page and that section is highlighted. Click the highlighted section to display information about the shape and how it is rendered.   The left side of the frame displays which shape is selected. It also enables you to select which shape to highlight by providing a navigable tree for the shapes.   The right side displays information about the selected shape and enables you to select which type of information to display.   The  Shape Tracing  pane displays the following information:   Shape . Information about the shape and the template to render the shape. Includes the option of creating alternates as described later in this article.  Model . Information about the model for this shape.  Placement . The  placement.info  file.  Template . The code in the template file  HTML . The HTML for rendering this shape.",
            "title": "Shape Information"
        },
        {
            "location": "/Documentation/Customizing-Orchard-using-Designer-Helper-Tools/#creating-alternate-templates",
            "text": "The  Shape Tracing  interface displays links that let you automatically create alternate templates for a shape. The interface displays the available alternate templates and includes a link titled  Create  to generate that template.   The  Create  option only creates the template in the specified directory. You must customize the template to render the shape as needed. If you are using Visual Studio, you must include the template in your project by selecting  Add  >  Existing Item  in  Solution Explorer .   For more information about how to create alternates, see  Alternates .",
            "title": "Creating Alternate Templates"
        },
        {
            "location": "/Documentation/Developer-FAQ/",
            "text": "What are the dependencies?\n\n\nOrchard uses a number of external libraries. They can all be found under \\lib directory in your enlistment. They are also enumerated in \nOrchard dependencies and libraries\n.\n\n\nWhat framework versions does Orchard support?\n\n\nOrchard supports the following versions of .net:\n\n\n\n\n\n\n\n\nOrchard Version\n\n\nFramework Required\n\n\n\n\n\n\n\n\n\n\nUp to version 1.7\n\n\nOrchard supports .NET 4.0.\n\n\n\n\n\n\nVersion 1.8\n\n\nOrchard runs on .NET 4.5 and IIS 7 (or newer)\n\n\n\n\n\n\nVersion 1.9\n\n\nOrchard runs on .NET 4.5.1 and IIS 7 (or newer)\n\n\n\n\n\n\nVersion 1.10\n\n\nOrchard runs on .NET 4.5.2 and IIS 7 (or newer)\n\n\n\n\n\n\n\n\nWhich branch should I be using when working on the codebase?\n\n\nBranches are discussed on the \ncontributing patches\n page.\n\n\nWhat types of extensions can I write?\n\n\nOrchard Modules and Themes are supported. There is extensive documentation covering these topics in the \nmain documentation index\n.\n\n\nWhere are Modules physically located?\n\n\nThe projects in the \"Modules\" folder are physically located under the \"src\\Orchard.Web\\Modules\" folder. This allows modules to contain ASP.NET views and static content without having to copy files between projects to be able to run the project.\n\n\nThe Core modules are physically located under the \"\\src\\Orchard.Web\\Core\" folder. \n\n\nWhat is a Module.txt file?\n\n\nThis is the module manifest. It is a YAML-format file. You can learn more about module.txt in the \nmanifest files guide\n.\n\n\nWhat is the AdminMenu.cs file?\n\n\nThis file has an implementation of the Orchard interface called \nINavigationProvider\n. It lets modules hook themselves into the admin menu in the backend. This is typically where you declare what links should your module inject into the Admin menu and what controller actions these links invoke.\n\n\nWhat is the Permissions.cs file?\n\n\nThis file has an implementation of the Orchard interface called \nIPermissionProvider\n. It lets modules declare a set of permissions as well as attach those permissions to default Orchard roles. Once you add a new permission type to your module here, you will be able to use the Orchard authorization APIs to check that permission against the current user. You will also be able to manage which custom roles the permission belongs to in the Roles administration page.\n\n\nHow do I do authorization inside my module against current user/roles?\n\n\nOrchard comes with a default services implementation of the \nIOrchardServices\n interface. Simply include \nIOrchardService\n in your constructor and you will get the default implementation injected. Like:\n\n\npublic AdminController(IMyService myService, IOrchardServices orchardServices) {\n            _myService = myService;\n            _orchardServices = orchardServices;\n}\n\n\n\nAt this point, services gives you Authorizer for authorization, Notifier for writing out notifications, ContentManager for access to the Orchard content manager and TransactionManager for handling database transactions. \n\n\nTo check if the current user has a certain permission, you would simply do:\n\n\nServices.Authorizer.Authorize(Permissions.SomeModulePermission, \n   T(\"Some operation failed\"));\n\n\n\nWhat are Core Modules?\n\n\nCore Modules are Orchard Modules you can find under \\src\\Orchard.Web\\Core. They also constitute the Orchard.Core project in the solution. These are modules that are always enabled and come with the default Orchard installation. \n\n\nSee \"Why are Core modules modules?\" and \"Why are Core Modules Core Modules?\" below for more detailed information.\n\n\nWhy are Core modules modules?\n\n\nThe difference is similar to OS concepts of monolithic vs micro-kernel: it was pretty obvious during high level design of Orchard that an extensibility point such as modules was needed. Everything else would constitute the core framework. \n\n\nTake the Common module for example, which introduces the BodyPart, a core concept common to many types of content types, such as blog posts or pages. Now we could've implemented this as part of the Orchard framework dll, and have modules depend on it. But then it wouldn't get the benefit of being a module, such as being able to hook up handlers, drivers, views, routes etc. \n\n\nThis also relates to MVC and areas, where everything that belongs to an area is under the same directory. It was pretty clear that the right choice was to get some core concepts out of the framework dll into a separate dll, and have them be modules. \n\n\nThis is very similar to non-monolithic operating systems where parts of the core functionality is implemented as modules outside the kernel, talking to it via the same exact interfaces as the more higher level modules.\n\n\nWhy are Core Modules Core Modules?\n\n\nNow that we want core concepts to be implemented as modules, why not put them into the modules directory along with the rest of the more obvious Orchard modules, such as the comments module. Well, this time it's about dependencies. In Orchard, modules that are in the modules directory can be disabled, uninstalled or otherwise updated in a breaking way. \n\n\nWe prefer modules that are self-contained and don't require other non-core modules as dependencies, as much as possible. That's part of the entire dynamism behind the content type architecture. Pages and Blog posts, which belong to Pages and Blog modules, don't reference Comments or Tags modules, but it's possible to attach comments or tags to pages and blogposts. \n\n\nThis decoupled behavior is ensured by the underlying content type architecture and not by direct reference from one or the other modules. Core modules are part of the Orchard framework and it's ok for modules to depend on them. They will be distributed by us and for all practical purposes are integral parts of the Orchard framework. Modules can depend on them and directly access their public surface.\n\n\nHow do I write and run tests?\n\n\nOrchard comes with a solution folder called Tests. This hosts 2 types of tests:\n\n\n\n\nUnit Tests\n: These are NUnit test fixtures. To write a fixture for a module, simply create a new directory under Orchard.Tests.Modules and populate it with your tests. \n\n\nIntegration Tests\n: These are also NUnit tests, generated using SpecFlow (\nhttp://www.specflow.org\n) .feature files. Your integration tests would go under Orchard.Specs and there are a multitude of examples there you can look at if you are new to the BDD approach.  \n\n\n\n\nRunning the unit tests is a matter of right clicking the solution or appropriate project and choose Run Unit Tests.\n\n\n\n\nNote: this applies to writing tests for the modules that come with the standard source code distribution of Orchard. \n\n\nTo write code for your own modules you should work in your own separate project. You can use the \norchard scaffolding command\n \ncodegen moduletests <module-name>\n to set up test projects for your own modules.\n\n\n\n\nHow do I contribute my changes to Orchard?\n\n\nContributing changes to Orchard are discussed on the \ncontributing patches\n page.\n\n\nHow to build a WCF service that exposes Orchard functionality?\n\n\nTo host a WCF Service in Orchard, with all of its goodies coming from IoC you have to:\n\n\nCreate a SVC file for your service with the new Orchard Host Factory:\n\n\n<%@ ServiceHost Language=\"C#\" Debug=\"true\" \nService=\"Orchard.Service.Services.IService, Orchard.Service\"\nFactory=\"Orchard.Wcf.OrchardServiceHostFactory, Orchard.Framework\" %>\n\n\n\nRegister the service normally as an IDependency.\n\n\nusing System.ServiceModel;\n\nnamespace Orchard.Service.Services {\n  [ServiceContract]\n  public interface IService : IDependency {\n    [OperationContract]\n    string GetUserEmail(string username);\n  }\n}\n\n\n\nProvide implementation (i.e.: Service : IService).\n\n\nWhat's in \nApp_Data\n?\n\n\nThe \nApp_Data\n folder is used to store various kinds of data. Contents of \nApp_Data\n are never served. The contents are organized this way:\n\n\n\n\nFile:\ncache.dat\n is a cache XML document describing what features are enabled for each tenant in the site. This being only a cache, modifying it may have unpredictable results.\n\n\nFile:\nhrestart.txt\n stands for Host Restart. It is a file that is touched by the system to indicate a need to restart the application.\n\n\nFolder:\nDependencies\n is used by dynamic compilation to store compiled dlls and has an XML file, dependencies.xml that tracks how each module was compiled (dynamically or not).\n\n\nFolder:\nExports\n contains export XML files generated by the import/export feature.\n\n\nFolder:\nLocalization\n contains localization \n.po\n files.\n\n\nFolder:\nLogs\n contains log files.\n\n\nFolder:\nRecipeQueue\n is used during setup to queue the recipes to execute.\n\n\nFolder:\nSites\n contains one folder per tenant. The default tenant is in the Default folder, which is all there is if no tenant was created. Each folder contains the following:\n\n\nmappings.bin\n is a binary serialized cache of nHibernate mappings.\n\n\nOrchard.sdf\n is the SQL CE database file for the tenant.\n\n\nreports.dat\n is a legacy log file.\n\n\nSettings.txt\n describes the low-level settings for the tenant (database provider, connection string, etc.)\n\n\n*.settings.xml\n - You will see one of these per search index you have configured in the admin panel. They hold configuration settings for the current state of that index.\n\n\nFolder: \nIndexes\n - Used by the Lucene module to store search index cache files. \n\n\n\n\n\n\nFolder:\nWarmup\n contains cached versions of pages generated by the warmup module, and a warmup.txt file that contains the timestamp for the last warmup file generation.\n\n\n\n\nUnderstanding bug status and triage\n\n\nWhen you submit a bug, the team (or anybody subscribing to notifications) receives an e-mail. We do regular triage meetings with a small committee, sometimes as often as daily and usually at least once a week.\n\n\nWhen we do triage, we make a query that returns all bugs in \"Proposed\" state, ordered by number of votes. This means that we are always looking at the most voted bugs first. If you care about a bug, you should vote for it, and it won't fall on deaf ears.\n\n\nA bug that is still in \"Proposed\" state has not been triaged yet. When we look at a bug, several things can happen. We may close it if it doesn't reproduce, if it's by design or if it was fixed since submitted. We may ask for more information (and leave it in \"Proposed\" state). Or finally, we may move it to the \"Active\" bucket.\n\n\nA bug that is in \"Active\" state has been triaged and should have been assigned a release. The release usually is one of the planned releases. Planned releases are usually the ones we are currently working on, plus a \"Future Versions\" release that we use for bugs and features that we want to handle but don't think we can do in the current cycle. The \"Assigned to\" field is only set when the bug is scheduled to be fixed in the current iteration or cycle. If it's in \"Future Versions\" it is usually unassigned.\n\n\nImpact is usually set during triage but a \"Low\" value does not necessarily mean much: this is the default value so it might just mean that it hasn't been touched. It's OK to investigate with the team on the impact of a bug you care about.\n\n\nDeveloper Troubleshooting\n\n\n\n\nRecord Names\n: Your implementations of the ContentPartRecords shouldn't have properties that are known keywords to NHibernate. Examples include Identity, Version.",
            "title": "Developer FAQ"
        },
        {
            "location": "/Documentation/Developer-FAQ/#what-are-the-dependencies",
            "text": "Orchard uses a number of external libraries. They can all be found under \\lib directory in your enlistment. They are also enumerated in  Orchard dependencies and libraries .",
            "title": "What are the dependencies?"
        },
        {
            "location": "/Documentation/Developer-FAQ/#what-framework-versions-does-orchard-support",
            "text": "Orchard supports the following versions of .net:     Orchard Version  Framework Required      Up to version 1.7  Orchard supports .NET 4.0.    Version 1.8  Orchard runs on .NET 4.5 and IIS 7 (or newer)    Version 1.9  Orchard runs on .NET 4.5.1 and IIS 7 (or newer)    Version 1.10  Orchard runs on .NET 4.5.2 and IIS 7 (or newer)",
            "title": "What framework versions does Orchard support?"
        },
        {
            "location": "/Documentation/Developer-FAQ/#which-branch-should-i-be-using-when-working-on-the-codebase",
            "text": "Branches are discussed on the  contributing patches  page.",
            "title": "Which branch should I be using when working on the codebase?"
        },
        {
            "location": "/Documentation/Developer-FAQ/#what-types-of-extensions-can-i-write",
            "text": "Orchard Modules and Themes are supported. There is extensive documentation covering these topics in the  main documentation index .",
            "title": "What types of extensions can I write?"
        },
        {
            "location": "/Documentation/Developer-FAQ/#where-are-modules-physically-located",
            "text": "The projects in the \"Modules\" folder are physically located under the \"src\\Orchard.Web\\Modules\" folder. This allows modules to contain ASP.NET views and static content without having to copy files between projects to be able to run the project.  The Core modules are physically located under the \"\\src\\Orchard.Web\\Core\" folder.",
            "title": "Where are Modules physically located?"
        },
        {
            "location": "/Documentation/Developer-FAQ/#what-is-a-moduletxt-file",
            "text": "This is the module manifest. It is a YAML-format file. You can learn more about module.txt in the  manifest files guide .",
            "title": "What is a Module.txt file?"
        },
        {
            "location": "/Documentation/Developer-FAQ/#what-is-the-adminmenucs-file",
            "text": "This file has an implementation of the Orchard interface called  INavigationProvider . It lets modules hook themselves into the admin menu in the backend. This is typically where you declare what links should your module inject into the Admin menu and what controller actions these links invoke.",
            "title": "What is the AdminMenu.cs file?"
        },
        {
            "location": "/Documentation/Developer-FAQ/#what-is-the-permissionscs-file",
            "text": "This file has an implementation of the Orchard interface called  IPermissionProvider . It lets modules declare a set of permissions as well as attach those permissions to default Orchard roles. Once you add a new permission type to your module here, you will be able to use the Orchard authorization APIs to check that permission against the current user. You will also be able to manage which custom roles the permission belongs to in the Roles administration page.",
            "title": "What is the Permissions.cs file?"
        },
        {
            "location": "/Documentation/Developer-FAQ/#how-do-i-do-authorization-inside-my-module-against-current-userroles",
            "text": "Orchard comes with a default services implementation of the  IOrchardServices  interface. Simply include  IOrchardService  in your constructor and you will get the default implementation injected. Like:  public AdminController(IMyService myService, IOrchardServices orchardServices) {\n            _myService = myService;\n            _orchardServices = orchardServices;\n}  At this point, services gives you Authorizer for authorization, Notifier for writing out notifications, ContentManager for access to the Orchard content manager and TransactionManager for handling database transactions.   To check if the current user has a certain permission, you would simply do:  Services.Authorizer.Authorize(Permissions.SomeModulePermission, \n   T(\"Some operation failed\"));",
            "title": "How do I do authorization inside my module against current user/roles?"
        },
        {
            "location": "/Documentation/Developer-FAQ/#what-are-core-modules",
            "text": "Core Modules are Orchard Modules you can find under \\src\\Orchard.Web\\Core. They also constitute the Orchard.Core project in the solution. These are modules that are always enabled and come with the default Orchard installation.   See \"Why are Core modules modules?\" and \"Why are Core Modules Core Modules?\" below for more detailed information.",
            "title": "What are Core Modules?"
        },
        {
            "location": "/Documentation/Developer-FAQ/#why-are-core-modules-modules",
            "text": "The difference is similar to OS concepts of monolithic vs micro-kernel: it was pretty obvious during high level design of Orchard that an extensibility point such as modules was needed. Everything else would constitute the core framework.   Take the Common module for example, which introduces the BodyPart, a core concept common to many types of content types, such as blog posts or pages. Now we could've implemented this as part of the Orchard framework dll, and have modules depend on it. But then it wouldn't get the benefit of being a module, such as being able to hook up handlers, drivers, views, routes etc.   This also relates to MVC and areas, where everything that belongs to an area is under the same directory. It was pretty clear that the right choice was to get some core concepts out of the framework dll into a separate dll, and have them be modules.   This is very similar to non-monolithic operating systems where parts of the core functionality is implemented as modules outside the kernel, talking to it via the same exact interfaces as the more higher level modules.",
            "title": "Why are Core modules modules?"
        },
        {
            "location": "/Documentation/Developer-FAQ/#why-are-core-modules-core-modules",
            "text": "Now that we want core concepts to be implemented as modules, why not put them into the modules directory along with the rest of the more obvious Orchard modules, such as the comments module. Well, this time it's about dependencies. In Orchard, modules that are in the modules directory can be disabled, uninstalled or otherwise updated in a breaking way.   We prefer modules that are self-contained and don't require other non-core modules as dependencies, as much as possible. That's part of the entire dynamism behind the content type architecture. Pages and Blog posts, which belong to Pages and Blog modules, don't reference Comments or Tags modules, but it's possible to attach comments or tags to pages and blogposts.   This decoupled behavior is ensured by the underlying content type architecture and not by direct reference from one or the other modules. Core modules are part of the Orchard framework and it's ok for modules to depend on them. They will be distributed by us and for all practical purposes are integral parts of the Orchard framework. Modules can depend on them and directly access their public surface.",
            "title": "Why are Core Modules Core Modules?"
        },
        {
            "location": "/Documentation/Developer-FAQ/#how-do-i-write-and-run-tests",
            "text": "Orchard comes with a solution folder called Tests. This hosts 2 types of tests:   Unit Tests : These are NUnit test fixtures. To write a fixture for a module, simply create a new directory under Orchard.Tests.Modules and populate it with your tests.   Integration Tests : These are also NUnit tests, generated using SpecFlow ( http://www.specflow.org ) .feature files. Your integration tests would go under Orchard.Specs and there are a multitude of examples there you can look at if you are new to the BDD approach.     Running the unit tests is a matter of right clicking the solution or appropriate project and choose Run Unit Tests.   Note: this applies to writing tests for the modules that come with the standard source code distribution of Orchard.   To write code for your own modules you should work in your own separate project. You can use the  orchard scaffolding command   codegen moduletests <module-name>  to set up test projects for your own modules.",
            "title": "How do I write and run tests?"
        },
        {
            "location": "/Documentation/Developer-FAQ/#how-do-i-contribute-my-changes-to-orchard",
            "text": "Contributing changes to Orchard are discussed on the  contributing patches  page.",
            "title": "How do I contribute my changes to Orchard?"
        },
        {
            "location": "/Documentation/Developer-FAQ/#how-to-build-a-wcf-service-that-exposes-orchard-functionality",
            "text": "To host a WCF Service in Orchard, with all of its goodies coming from IoC you have to:  Create a SVC file for your service with the new Orchard Host Factory:  <%@ ServiceHost Language=\"C#\" Debug=\"true\" \nService=\"Orchard.Service.Services.IService, Orchard.Service\"\nFactory=\"Orchard.Wcf.OrchardServiceHostFactory, Orchard.Framework\" %>  Register the service normally as an IDependency.  using System.ServiceModel;\n\nnamespace Orchard.Service.Services {\n  [ServiceContract]\n  public interface IService : IDependency {\n    [OperationContract]\n    string GetUserEmail(string username);\n  }\n}  Provide implementation (i.e.: Service : IService).",
            "title": "How to build a WCF service that exposes Orchard functionality?"
        },
        {
            "location": "/Documentation/Developer-FAQ/#whats-in-app_data",
            "text": "The  App_Data  folder is used to store various kinds of data. Contents of  App_Data  are never served. The contents are organized this way:   File: cache.dat  is a cache XML document describing what features are enabled for each tenant in the site. This being only a cache, modifying it may have unpredictable results.  File: hrestart.txt  stands for Host Restart. It is a file that is touched by the system to indicate a need to restart the application.  Folder: Dependencies  is used by dynamic compilation to store compiled dlls and has an XML file, dependencies.xml that tracks how each module was compiled (dynamically or not).  Folder: Exports  contains export XML files generated by the import/export feature.  Folder: Localization  contains localization  .po  files.  Folder: Logs  contains log files.  Folder: RecipeQueue  is used during setup to queue the recipes to execute.  Folder: Sites  contains one folder per tenant. The default tenant is in the Default folder, which is all there is if no tenant was created. Each folder contains the following:  mappings.bin  is a binary serialized cache of nHibernate mappings.  Orchard.sdf  is the SQL CE database file for the tenant.  reports.dat  is a legacy log file.  Settings.txt  describes the low-level settings for the tenant (database provider, connection string, etc.)  *.settings.xml  - You will see one of these per search index you have configured in the admin panel. They hold configuration settings for the current state of that index.  Folder:  Indexes  - Used by the Lucene module to store search index cache files.     Folder: Warmup  contains cached versions of pages generated by the warmup module, and a warmup.txt file that contains the timestamp for the last warmup file generation.",
            "title": "What's in App_Data?"
        },
        {
            "location": "/Documentation/Developer-FAQ/#understanding-bug-status-and-triage",
            "text": "When you submit a bug, the team (or anybody subscribing to notifications) receives an e-mail. We do regular triage meetings with a small committee, sometimes as often as daily and usually at least once a week.  When we do triage, we make a query that returns all bugs in \"Proposed\" state, ordered by number of votes. This means that we are always looking at the most voted bugs first. If you care about a bug, you should vote for it, and it won't fall on deaf ears.  A bug that is still in \"Proposed\" state has not been triaged yet. When we look at a bug, several things can happen. We may close it if it doesn't reproduce, if it's by design or if it was fixed since submitted. We may ask for more information (and leave it in \"Proposed\" state). Or finally, we may move it to the \"Active\" bucket.  A bug that is in \"Active\" state has been triaged and should have been assigned a release. The release usually is one of the planned releases. Planned releases are usually the ones we are currently working on, plus a \"Future Versions\" release that we use for bugs and features that we want to handle but don't think we can do in the current cycle. The \"Assigned to\" field is only set when the bug is scheduled to be fixed in the current iteration or cycle. If it's in \"Future Versions\" it is usually unassigned.  Impact is usually set during triage but a \"Low\" value does not necessarily mean much: this is the default value so it might just mean that it hasn't been touched. It's OK to investigate with the team on the impact of a bug you care about.",
            "title": "Understanding bug status and triage"
        },
        {
            "location": "/Documentation/Developer-FAQ/#developer-troubleshooting",
            "text": "Record Names : Your implementations of the ContentPartRecords shouldn't have properties that are known keywords to NHibernate. Examples include Identity, Version.",
            "title": "Developer Troubleshooting"
        },
        {
            "location": "/Documentation/Setting-up-a-source-enlistment/",
            "text": "Enlisting in the Source Code Using Git and Git Extensions\n\n\nThe Orchard project source code is \nhosted on GitHub\n and can be accessed using a Git client. This page explains how to set-up your development environment. This setup allows you to work on the project as a developer, fix issues, build your own site from it or build modules.\n\n\nWhen using a distributed source control system such as Git, it's important to understand that the latest check-in on the GitHub repository is not necessarily the one you want to download or sync to as it may be a different branch than the master branch. \n\n\nWhen synchronizing your enlistment, you will probably want to sync to the master branch. This is the latest stable release. Branches are \ncovered in more detail here\n.\n\n\nFor more information about Git, please read \nGit Basics\n, \nBasic Branching and Merging\n or \nGit Extensions user manual\n.\n\n\nStep 1: Install Git Extensions\n\n\nGit Extensions\n is one of many Git clients available. You can access the repository using any Git client. This tutorial explains how to clone the repo with Git Extensions.\n\n\nDownload the \nlatest release directly from GitHub\n. You have two main options, the \nSetup.msi\n and the \nSetupComplete.msi\n. You should get the \nSetupComplete.msi\n version which comes with some useful extra utilities bundled with it.\n\n\nOpen the \nmsi\n when it has downloaded. Follow the steps to complete the installation:\n\n\n\n\nInstallation Scope\n Install for all users unless you don't have administrator privileges.\n\n\nRequired Software\n Select \nMsysGit\n and \nKDiff3\n. You must have a a version of \nMsysGit\n installed for Git Extensions to function properly. \nKDiff\n is great for comparing the differences between two files or folders. You can optionally install \nWindows Credential Store for Git\n.\n\n\nDestination Folder\n Accept the default or select your preferred destination.\n\n\nCustom Setup\n The defaults are fine.\n\n\nSelect SSH Client\n Choose PuTTY.\n\n\n\n\nWhen installation has completed you will find that you have extra Git Ext options when you right click in Windows Explorer:\n\n\n\n\nStep 2: Enlist in the Source Code Using Git Extensions\n\n\nIn Windows Explorer, navigate to the local directory where you want your copy of the source code to live, right-click and choose \nGitEx Clone\n.\n\n\n\n\nIn the clone window you have four fields to fill out. \n\n\n\n\nIn the \nRepository to clone\n field type \nhttps://github.com/OrchardCMS/Orchard/\n. \n\n\nThe \nDestination\n field will already be filled out with your current directory. \n\n\nWhen you paste the repository url it will also fill out the \nSubdirectory to create\n field. If you want to change this to a project name you can. \n\n\nSelecting the \nBranch\n dropdown will show you all of the current branches. This is loaded from GitHub so it may take a few seconds to load the list. For the latest stable branch select \nmaster\n. \n\n\n\n\nThe rest of the settings can be left as-is. Click \nClone\n.\n\n\n\n\nYou will not be prompted for your GitHub login and password unless you try to commit changes.\n\n\nStep 3: Building and Running the Orchard Source\n\n\nYou can build and run Orchard either from the Visual Studio, or using a command-line batch file.\n\n\nUsing Visual Studio\n\n\nOpen Orchard.sln from the Git enlistment directory, in \n./src\n. For information on the structure of the Orchard solution, see the \nsource code organization\n page of this website.\n\n\n\n\nHit \nF5\n to build and run the application.\n\n\n\n\nWithout Visual Studio\n\n\nBuild the application from the command-line following the instructions found here: \nBuilding and deploying Orchard from a source code drop\n. You may use IIS or IIS Express to run the application.\n\n\nEveryday Git Extensions Use\n\n\nThe part of Git Extensions you're going to use the most is the Repository Explorer (right-click on the Git enlistment directory from the Windows Explorer to find it, it's called \nGitEx Browse\n). \n\n\nFor example, to get the latest changes from GitHub, just click \nPull\n. \n\n\nThe repository explorer gives you a view of all the branching and merging that has been going on on the server. You can examine each change, read its description and view diffs. You can also right-click a change and update your local repository to it by clicking \nCheckout revision\n.\n\n\n\n\nYou can also filter by branch, which is useful for example if you're only interested in the more stable \nmaster\n branch. Development work is done in both the \n1.9.x\n and \ndev\n branches.\n\n\nViewing the Source Code Without Enlisting\n\n\nIf you don't want to use Git you can still download the source code for the project. You can \ndownload a .zip file of the source code\n but this means you don't get the advantages of being able to easily clone and update.\n\n\nBranches\n\n\nLearn more about the branches on the \ncontributing patches page\n.",
            "title": "Setting Up a Source Enlistment"
        },
        {
            "location": "/Documentation/Setting-up-a-source-enlistment/#enlisting-in-the-source-code-using-git-and-git-extensions",
            "text": "The Orchard project source code is  hosted on GitHub  and can be accessed using a Git client. This page explains how to set-up your development environment. This setup allows you to work on the project as a developer, fix issues, build your own site from it or build modules.  When using a distributed source control system such as Git, it's important to understand that the latest check-in on the GitHub repository is not necessarily the one you want to download or sync to as it may be a different branch than the master branch.   When synchronizing your enlistment, you will probably want to sync to the master branch. This is the latest stable release. Branches are  covered in more detail here .  For more information about Git, please read  Git Basics ,  Basic Branching and Merging  or  Git Extensions user manual .",
            "title": "Enlisting in the Source Code Using Git and Git Extensions"
        },
        {
            "location": "/Documentation/Setting-up-a-source-enlistment/#step-1-install-git-extensions",
            "text": "Git Extensions  is one of many Git clients available. You can access the repository using any Git client. This tutorial explains how to clone the repo with Git Extensions.  Download the  latest release directly from GitHub . You have two main options, the  Setup.msi  and the  SetupComplete.msi . You should get the  SetupComplete.msi  version which comes with some useful extra utilities bundled with it.  Open the  msi  when it has downloaded. Follow the steps to complete the installation:   Installation Scope  Install for all users unless you don't have administrator privileges.  Required Software  Select  MsysGit  and  KDiff3 . You must have a a version of  MsysGit  installed for Git Extensions to function properly.  KDiff  is great for comparing the differences between two files or folders. You can optionally install  Windows Credential Store for Git .  Destination Folder  Accept the default or select your preferred destination.  Custom Setup  The defaults are fine.  Select SSH Client  Choose PuTTY.   When installation has completed you will find that you have extra Git Ext options when you right click in Windows Explorer:",
            "title": "Step 1: Install Git Extensions"
        },
        {
            "location": "/Documentation/Setting-up-a-source-enlistment/#step-2-enlist-in-the-source-code-using-git-extensions",
            "text": "In Windows Explorer, navigate to the local directory where you want your copy of the source code to live, right-click and choose  GitEx Clone .   In the clone window you have four fields to fill out.    In the  Repository to clone  field type  https://github.com/OrchardCMS/Orchard/ .   The  Destination  field will already be filled out with your current directory.   When you paste the repository url it will also fill out the  Subdirectory to create  field. If you want to change this to a project name you can.   Selecting the  Branch  dropdown will show you all of the current branches. This is loaded from GitHub so it may take a few seconds to load the list. For the latest stable branch select  master .    The rest of the settings can be left as-is. Click  Clone .   You will not be prompted for your GitHub login and password unless you try to commit changes.",
            "title": "Step 2: Enlist in the Source Code Using Git Extensions"
        },
        {
            "location": "/Documentation/Setting-up-a-source-enlistment/#step-3-building-and-running-the-orchard-source",
            "text": "You can build and run Orchard either from the Visual Studio, or using a command-line batch file.",
            "title": "Step 3: Building and Running the Orchard Source"
        },
        {
            "location": "/Documentation/Setting-up-a-source-enlistment/#using-visual-studio",
            "text": "Open Orchard.sln from the Git enlistment directory, in  ./src . For information on the structure of the Orchard solution, see the  source code organization  page of this website.   Hit  F5  to build and run the application.",
            "title": "Using Visual Studio"
        },
        {
            "location": "/Documentation/Setting-up-a-source-enlistment/#without-visual-studio",
            "text": "Build the application from the command-line following the instructions found here:  Building and deploying Orchard from a source code drop . You may use IIS or IIS Express to run the application.",
            "title": "Without Visual Studio"
        },
        {
            "location": "/Documentation/Setting-up-a-source-enlistment/#everyday-git-extensions-use",
            "text": "The part of Git Extensions you're going to use the most is the Repository Explorer (right-click on the Git enlistment directory from the Windows Explorer to find it, it's called  GitEx Browse ).   For example, to get the latest changes from GitHub, just click  Pull .   The repository explorer gives you a view of all the branching and merging that has been going on on the server. You can examine each change, read its description and view diffs. You can also right-click a change and update your local repository to it by clicking  Checkout revision .   You can also filter by branch, which is useful for example if you're only interested in the more stable  master  branch. Development work is done in both the  1.9.x  and  dev  branches.",
            "title": "Everyday Git Extensions Use"
        },
        {
            "location": "/Documentation/Setting-up-a-source-enlistment/#viewing-the-source-code-without-enlisting",
            "text": "If you don't want to use Git you can still download the source code for the project. You can  download a .zip file of the source code  but this means you don't get the advantages of being able to easily clone and update.",
            "title": "Viewing the Source Code Without Enlisting"
        },
        {
            "location": "/Documentation/Setting-up-a-source-enlistment/#branches",
            "text": "Learn more about the branches on the  contributing patches page .",
            "title": "Branches"
        },
        {
            "location": "/Documentation/Source-code-organization/",
            "text": "This section describes the project structure of an Orchard solution in Visual Studio.\nThe projects and folders are listed in the order they appear in Visual Studio. \n\n\nWe recommend that you open the Orchard project in Visual Studio and browse through the files as you read this topic.\n\n\nModules\n\n\nModules is a Visual Studio solution folder that contains Orchard module projects.\nIt maps to the /Modules subfolder of the Orchard.Web web site folder.\nEach subfolder of the Modules folder is an Orchard module.\nAll Orchard modules are ASP.NET MVC areas.\n\n\nSpecs\n\n\nThe \nSpecs\n folder contains the following projects:\n\n\n\n\nOrchard.Profile. This provides for creating a profiling image for Orchard.\n\n\nOrchard.Specs. This contains integration tests written using a \nSpecFlow\n style. Feature-specific information is contained in the \n*.feature\n files.\n\n\n\n\nTests\n\n\nThe \nTests\n folder contains the following projects:\n\n\n\n\nOrchard.Core.Tests is the test project for the Orchard.Core project.\n\n\nOrchard.Framework.Tests is the test project for the Orchard.Framework project.\n\n\nOrchard.Tests.Modules is the test project for Orchard modules. It contains subfolders for different modules.\n\n\nOrchard.Web.Tests is the test project for the Orchard.Web project.\n\n\n\n\nTools\n\n\nThe \nTools\n folder contains the source code for tools that are used to build the Orchard solution.\nIt also contains the Orchard project, which builds the Orchard.exe command-line tool that you can use\nto run commands defined in an Orchard website in order to automate administrative tasks.\n\n\nOrchard.Core\n\n\nThe Core project contains a set of core modules and content types for Orchard, such as feeds, theming,\nnavigation or the common, routable and body content parts.\n\n\nOrchard.Framework Project\n\n\nOrchard.Framework is a class library project containing the Orchard CMS framework.\n\n\nOrchard.Web Project\n\n\nOrchard.Web is an MVC web application project. This is the application that you actually run.\nIt is the startup project of the application. It contains the Orchard CMS core platform binaries and\nis therefore the Orchard CMS host application.\n\n\nOther Notes\n\n\n\n\nThe Orchard.Web project is set as the startup project of the solution (for example, when you use Visual Studio debugging). Orchard.Web dynamically loads all Orchard modules and discovers module extensibility points (MVC routes, admin pages, and so on.)\n\n\nThe projects in the \nModules\n folder are physically located under the \nOchard.Web\\Modules\n folder. This allows modules to contain ASP.NET views (\n.aspx\n, \n.ascx\n, and other files) and static content without having to copy files between projects to be able to run the project.\n\n\nThe Orchard.Web project has project references to the modules. This enables automatic copying of the output assemblies into the \nbin\n folder of the Orchard.Web project. Orchard.Web has no dependency on types in the \nModules\n assemblies, because the Orchard.Web project is not supposed to have a compile-time knowledge of which modules are loaded at run time. (This is not entirely true at the current stage of Orchard development.)\n\n\nThe projects in the \nModules\n folder have a project reference to the Orchard project. This allows modules to have access to the base Orchard services.\n\n\n\n\nAbout Core Modules\n\n\nThis section discuss some of the design decisions that went into creating core modules.\nThe first issue is this: why are core modules modules? Because during the design phase for Orchard,\nit was determined that an extensibility point such as modules was needed.\nEverything else would constitute the core framework. \n\n\nFor example, the \nCommon\n module introduces the \nBody\n part, a core concept that is common to many\ntypes of content types, such as blog posts or pages. This could have been implemented as part of the\nOrchard framework DLL and could have had modules depend on it. However, then it would not get\nthe benefit of being a module, such as being able to hook up handlers, drivers, views, routes, and so on.\nThis also relates to MVC and areas, where everything that belongs to an area is under the same directory. \n\n\nIt was determined that the correct approach was to get certain core concepts out of the framework DLL\ninto a separate DLL and have them be modules. This is similar to non-monolithic operating systems where\nparts of the core functionality are implemented as modules outside the kernel, talking to the kernel\nusing the same interfaces as the more high-level modules.\n\n\nA second design issue for core modules was this: why are core modules core modules?\nAfter it was determined that core concepts would be implemented as modules, it might have made sense\nto put them into the modules directory along with the rest of the Orchard modules, such as the comments module. \n\n\nThe problem with that approach was dependencies. In Orchard, modules that are in the modules directory\ncan be disabled, uninstalled, or otherwise updated in a breaking way. Orchard modules should avoid\ndependencies on other modules as much as possible -- that's part of the dynamism behind the content-type\narchitecture. Pages and blog posts, which belong to the \nPages\n and \nBlog\n modules, don't reference\nthe \nComments\n or \nTags\n modules, but it's possible to attach comments or tags to pages and blog posts.\nThis decoupled behavior is ensured by the underlying content-type architecture and not by direct reference\nfrom another module. \n\n\nHowever, core modules are part of the Orchard framework and it's considered acceptable for modules to\ndepend on them. Core modules will be distributed by the Orchard development team, and for all practical\npurposes are integral parts of the Orchard framework. Modules can depend on them and directly access\ntheir public surface.",
            "title": "Source Code Organization"
        },
        {
            "location": "/Documentation/Source-code-organization/#modules",
            "text": "Modules is a Visual Studio solution folder that contains Orchard module projects.\nIt maps to the /Modules subfolder of the Orchard.Web web site folder.\nEach subfolder of the Modules folder is an Orchard module.\nAll Orchard modules are ASP.NET MVC areas.",
            "title": "Modules"
        },
        {
            "location": "/Documentation/Source-code-organization/#specs",
            "text": "The  Specs  folder contains the following projects:   Orchard.Profile. This provides for creating a profiling image for Orchard.  Orchard.Specs. This contains integration tests written using a  SpecFlow  style. Feature-specific information is contained in the  *.feature  files.",
            "title": "Specs"
        },
        {
            "location": "/Documentation/Source-code-organization/#tests",
            "text": "The  Tests  folder contains the following projects:   Orchard.Core.Tests is the test project for the Orchard.Core project.  Orchard.Framework.Tests is the test project for the Orchard.Framework project.  Orchard.Tests.Modules is the test project for Orchard modules. It contains subfolders for different modules.  Orchard.Web.Tests is the test project for the Orchard.Web project.",
            "title": "Tests"
        },
        {
            "location": "/Documentation/Source-code-organization/#tools",
            "text": "The  Tools  folder contains the source code for tools that are used to build the Orchard solution.\nIt also contains the Orchard project, which builds the Orchard.exe command-line tool that you can use\nto run commands defined in an Orchard website in order to automate administrative tasks.",
            "title": "Tools"
        },
        {
            "location": "/Documentation/Source-code-organization/#orchardcore",
            "text": "The Core project contains a set of core modules and content types for Orchard, such as feeds, theming,\nnavigation or the common, routable and body content parts.",
            "title": "Orchard.Core"
        },
        {
            "location": "/Documentation/Source-code-organization/#orchardframework-project",
            "text": "Orchard.Framework is a class library project containing the Orchard CMS framework.",
            "title": "Orchard.Framework Project"
        },
        {
            "location": "/Documentation/Source-code-organization/#orchardweb-project",
            "text": "Orchard.Web is an MVC web application project. This is the application that you actually run.\nIt is the startup project of the application. It contains the Orchard CMS core platform binaries and\nis therefore the Orchard CMS host application.",
            "title": "Orchard.Web Project"
        },
        {
            "location": "/Documentation/Source-code-organization/#other-notes",
            "text": "The Orchard.Web project is set as the startup project of the solution (for example, when you use Visual Studio debugging). Orchard.Web dynamically loads all Orchard modules and discovers module extensibility points (MVC routes, admin pages, and so on.)  The projects in the  Modules  folder are physically located under the  Ochard.Web\\Modules  folder. This allows modules to contain ASP.NET views ( .aspx ,  .ascx , and other files) and static content without having to copy files between projects to be able to run the project.  The Orchard.Web project has project references to the modules. This enables automatic copying of the output assemblies into the  bin  folder of the Orchard.Web project. Orchard.Web has no dependency on types in the  Modules  assemblies, because the Orchard.Web project is not supposed to have a compile-time knowledge of which modules are loaded at run time. (This is not entirely true at the current stage of Orchard development.)  The projects in the  Modules  folder have a project reference to the Orchard project. This allows modules to have access to the base Orchard services.",
            "title": "Other Notes"
        },
        {
            "location": "/Documentation/Source-code-organization/#about-core-modules",
            "text": "This section discuss some of the design decisions that went into creating core modules.\nThe first issue is this: why are core modules modules? Because during the design phase for Orchard,\nit was determined that an extensibility point such as modules was needed.\nEverything else would constitute the core framework.   For example, the  Common  module introduces the  Body  part, a core concept that is common to many\ntypes of content types, such as blog posts or pages. This could have been implemented as part of the\nOrchard framework DLL and could have had modules depend on it. However, then it would not get\nthe benefit of being a module, such as being able to hook up handlers, drivers, views, routes, and so on.\nThis also relates to MVC and areas, where everything that belongs to an area is under the same directory.   It was determined that the correct approach was to get certain core concepts out of the framework DLL\ninto a separate DLL and have them be modules. This is similar to non-monolithic operating systems where\nparts of the core functionality are implemented as modules outside the kernel, talking to the kernel\nusing the same interfaces as the more high-level modules.  A second design issue for core modules was this: why are core modules core modules?\nAfter it was determined that core concepts would be implemented as modules, it might have made sense\nto put them into the modules directory along with the rest of the Orchard modules, such as the comments module.   The problem with that approach was dependencies. In Orchard, modules that are in the modules directory\ncan be disabled, uninstalled, or otherwise updated in a breaking way. Orchard modules should avoid\ndependencies on other modules as much as possible -- that's part of the dynamism behind the content-type\narchitecture. Pages and blog posts, which belong to the  Pages  and  Blog  modules, don't reference\nthe  Comments  or  Tags  modules, but it's possible to attach comments or tags to pages and blog posts.\nThis decoupled behavior is ensured by the underlying content-type architecture and not by direct reference\nfrom another module.   However, core modules are part of the Orchard framework and it's considered acceptable for modules to\ndepend on them. Core modules will be distributed by the Orchard development team, and for all practical\npurposes are integral parts of the Orchard framework. Modules can depend on them and directly access\ntheir public surface.",
            "title": "About Core Modules"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/",
            "text": "This section enumerates the dependencies used in the Orchard project, with a brief description of what Orchard makes use of. A copy of a dependencies is located in the \"lib\" directory of the source repository, along with their respective licenses.  You can also view the attributions for our library dependencies in the CREDITS.txt file at the root of the Orchard source tree.\n\n\nAkismet\n\n\nThis is the default spam protection service in Orchard.\n\n\nANTLR v3\n\n\nThis is a language recognition tool, which provides a framework for constructing recognizers, interpreters, compilers, and translators from grammatical descriptions containing actions in a variety of target languages.\n\n\nASP.NET MVC 4\n\n\nASP.NET MVC is used as the web programming model.\n\n\nAutofac 2 & Autofac contrib\n\n\nDependency Injection is used heavily internally, mainly for publishing and consuming services between the Orchard.Web host and the Orchard packages. \n\n\nCastle Windsor 2.0\n\n\nOrchard uses Castle Winder 2.0 for type proxy generation and logging support.\n\n\nClay\n\n\nThe Clay library offers a flexible implementation of dynamic objects that is used in UI composition.\n\n\nCodeMirror\n\n\nClient-side code colorization.\n\n\nDLR\n\n\nThe DLR can be optionally used to script certain aspects of Orchard (currently, widget layer rules).\n\n\nEric Meyer's Reset CSS\n\n\nThis is used to even the CSS rendering playing field across browsers.\n\n\nFam Fam Fam Silk Icons\n\n\nThe Orchard user interface uses Silk Icons, which is an icon set containing over 700 16-by-16 pixel icons in PNG format. \n\n\nFluent NHibernate\n\n\nOrchard uses Fluent NHibernate, which lets you write object-relational mappings in strongly typed C# code.\n\n\nFluentPath\n\n\nThis library is a fluent wrapper around System.IO that we use in some tests.\n\n\nHtml Agility Pack\n\n\nFlexible HTML parsing and querying.\n\n\nHtml5shim\n\n\nProvides Html 5 helpers.\n\n\njQuery & jQueryUI, jQuery ui.timepickr, jQuery utils, jQuery ScrollTo\n\n\nWe use jQuery to progressively improve the user experience in Orchard.\n\n\nLog4Net\n\n\nLog4Net is a tool used in Orchard to help write log statements to a variety of output targets.\n\n\nLucene.Net\n\n\nFull-text search and indexation engine.\n\n\nMicrosoft SQL Server Compact 4.0, SQL Server, SQL Server Express\n\n\nOrchard uses SQL Compact by default for database access but can also use SQL Server and SQL Server Express.\n\n\nMoq\n\n\nThe moq library is used when object moqs are needed for writing unit tests.\n\n\nNHibernate & dependencies, FluentNHibernate, NHLambdaExtensions, LinqNHibernate\n\n\nOrchard uses NHibernate, Fluent NHibernate and Linq To NHibernate for data access.\n\n\nNuGet\n\n\nNuGet is used as the package manager (modules and themes come in the form of NuGet packages).\n\n\nNUnit\n\n\nNUnit is used for writing unit tests.\n\n\nSharpZipLib\n\n\nSharpZipLib is used for zipping/unzipping files. For example, the Orchard media manager module uses this library to unzip uploaded media files.\n\n\nSpecFlow\n\n\nThis BDD-style library is used in Orchard for integration tests.\n\n\nTESI Collections\n\n\nOrchard uses the Tesi.collections library, which supports a SET collection that contains no duplicates.\n\n\nTinyMCE\n\n\nTinyMCE is currently used for editing CMS pages content.\n\n\nWCat\n\n\nWCat is a lightweight HTTP load generating tool used for performance testing.\n\n\nYUI\n\n\nWe use parts of YUI for easier CSS.",
            "title": "Dependencies and Libraries"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#akismet",
            "text": "This is the default spam protection service in Orchard.",
            "title": "Akismet"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#antlr-v3",
            "text": "This is a language recognition tool, which provides a framework for constructing recognizers, interpreters, compilers, and translators from grammatical descriptions containing actions in a variety of target languages.",
            "title": "ANTLR v3"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#aspnet-mvc-4",
            "text": "ASP.NET MVC is used as the web programming model.",
            "title": "ASP.NET MVC 4"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#autofac-2-autofac-contrib",
            "text": "Dependency Injection is used heavily internally, mainly for publishing and consuming services between the Orchard.Web host and the Orchard packages.",
            "title": "Autofac 2 &amp; Autofac contrib"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#castle-windsor-20",
            "text": "Orchard uses Castle Winder 2.0 for type proxy generation and logging support.",
            "title": "Castle Windsor 2.0"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#clay",
            "text": "The Clay library offers a flexible implementation of dynamic objects that is used in UI composition.",
            "title": "Clay"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#codemirror",
            "text": "Client-side code colorization.",
            "title": "CodeMirror"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#dlr",
            "text": "The DLR can be optionally used to script certain aspects of Orchard (currently, widget layer rules).",
            "title": "DLR"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#eric-meyers-reset-css",
            "text": "This is used to even the CSS rendering playing field across browsers.",
            "title": "Eric Meyer's Reset CSS"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#fam-fam-fam-silk-icons",
            "text": "The Orchard user interface uses Silk Icons, which is an icon set containing over 700 16-by-16 pixel icons in PNG format.",
            "title": "Fam Fam Fam Silk Icons"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#fluent-nhibernate",
            "text": "Orchard uses Fluent NHibernate, which lets you write object-relational mappings in strongly typed C# code.",
            "title": "Fluent NHibernate"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#fluentpath",
            "text": "This library is a fluent wrapper around System.IO that we use in some tests.",
            "title": "FluentPath"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#html-agility-pack",
            "text": "Flexible HTML parsing and querying.",
            "title": "Html Agility Pack"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#html5shim",
            "text": "Provides Html 5 helpers.",
            "title": "Html5shim"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#jquery-jqueryui-jquery-uitimepickr-jquery-utils-jquery-scrollto",
            "text": "We use jQuery to progressively improve the user experience in Orchard.",
            "title": "jQuery &amp; jQueryUI, jQuery ui.timepickr, jQuery utils, jQuery ScrollTo"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#log4net",
            "text": "Log4Net is a tool used in Orchard to help write log statements to a variety of output targets.",
            "title": "Log4Net"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#lucenenet",
            "text": "Full-text search and indexation engine.",
            "title": "Lucene.Net"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#microsoft-sql-server-compact-40-sql-server-sql-server-express",
            "text": "Orchard uses SQL Compact by default for database access but can also use SQL Server and SQL Server Express.",
            "title": "Microsoft SQL Server Compact 4.0, SQL Server, SQL Server Express"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#moq",
            "text": "The moq library is used when object moqs are needed for writing unit tests.",
            "title": "Moq"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#nhibernate-dependencies-fluentnhibernate-nhlambdaextensions-linqnhibernate",
            "text": "Orchard uses NHibernate, Fluent NHibernate and Linq To NHibernate for data access.",
            "title": "NHibernate &amp; dependencies, FluentNHibernate, NHLambdaExtensions, LinqNHibernate"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#nuget",
            "text": "NuGet is used as the package manager (modules and themes come in the form of NuGet packages).",
            "title": "NuGet"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#nunit",
            "text": "NUnit is used for writing unit tests.",
            "title": "NUnit"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#sharpziplib",
            "text": "SharpZipLib is used for zipping/unzipping files. For example, the Orchard media manager module uses this library to unzip uploaded media files.",
            "title": "SharpZipLib"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#specflow",
            "text": "This BDD-style library is used in Orchard for integration tests.",
            "title": "SpecFlow"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#tesi-collections",
            "text": "Orchard uses the Tesi.collections library, which supports a SET collection that contains no duplicates.",
            "title": "TESI Collections"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#tinymce",
            "text": "TinyMCE is currently used for editing CMS pages content.",
            "title": "TinyMCE"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#wcat",
            "text": "WCat is a lightweight HTTP load generating tool used for performance testing.",
            "title": "WCat"
        },
        {
            "location": "/Documentation/Orchard-dependencies-and-libraries/#yui",
            "text": "We use parts of YUI for easier CSS.",
            "title": "YUI"
        },
        {
            "location": "/Documentation/Code-conventions/",
            "text": "Definitions\n\n\n\n\nCamel case\n is a casing convention where the first letter is lower-case, words are not separated by any character but have their first letter capitalized. Example: thisIsCamelCased.\n\n\nPascal case\n is a casing convention where the first letter of each word is capitalized, and no separating character is included between words. Example: ThisIsPascalCased.\n\n\n\n\nC# Coding Conventions\n\n\nWe are using the C# coding conventions described in this document: \nC# Coding Guidelines\n with the following exceptions:\n\n\n\n\nOpening braces are on the same line as the statement that begins the block, with a space before the brace (this is consistent with what we do in JavaScript), a.k.a. K&R convention. If you have the \nRebracer Visual Studio extension\n installed it will automatically configure the editor to use the conventional brace styling.\n\n\nPrivate fields are prefixed with an underscore and camel-cased.\n\n\nUsing directives appear before the namespace, not inside it.\n\n\n\n\nJavaScript Coding Conventions\n\n\n\n\nNamespaces are Pascal-cased.\n\n\nClass names are Pascal-cased.\n\n\nPlugin names are Camel-cased.\n\n\nProperties, fields, local variables are Camel-cased.\n\n\nParameters are Camel-cased.\n\n\nFunction names are Camel-cased unless they really are class constructors or namespaces (in other words, global/local functions and methods are Camel-cased).\n\n\nPrivate/internal/protected members are underscore-prefixed and Camel-cased.\n\n\nConstants are just static fields (apply same rules as for fields).\n\n\nJavaScript coding conventions follow C# conventions except for Pascal vs. Camel.\n\n\n\" and ' are interchangeable (strictly equivalent). XHTML attributes should be in double quotes and if code needs to be in there, it has to use single quotes. ex: \n (note: this kind of DOM-0 event creating is itself discouraged and is only shown here as an example). In pure JS code, use double quotes for string delimiters. When the string is one character and the intent is a character, use single quote for consistency with managed code.\n\n\nThere is no need for String.Empty, just use \"\".\n\n\nLocalizable strings need to be isolated into resource dictionaries until we figure out our client localization story. ex. alert(Foo.badArgument); ... Foo = {badArgument: \"The argument was bad.\"};\n\n\nDon't worry about string concatenation unless you have specific evidence that regular concatenation is significantly harming performance in your specific scenario.\n\n\nUse the \nK&R\n style for opening braces (put the opening brace on the opening line). This is because in JavaScript, the semicolon is optional, which can cause difficult to spot bugs (see \nhttp://msmvps.com/blogs/luisabreu/archive/2009/08/26/the-semicolon-bug.aspx\n for an example).",
            "title": "Code Conventions"
        },
        {
            "location": "/Documentation/Code-conventions/#definitions",
            "text": "Camel case  is a casing convention where the first letter is lower-case, words are not separated by any character but have their first letter capitalized. Example: thisIsCamelCased.  Pascal case  is a casing convention where the first letter of each word is capitalized, and no separating character is included between words. Example: ThisIsPascalCased.",
            "title": "Definitions"
        },
        {
            "location": "/Documentation/Code-conventions/#c-coding-conventions",
            "text": "We are using the C# coding conventions described in this document:  C# Coding Guidelines  with the following exceptions:   Opening braces are on the same line as the statement that begins the block, with a space before the brace (this is consistent with what we do in JavaScript), a.k.a. K&R convention. If you have the  Rebracer Visual Studio extension  installed it will automatically configure the editor to use the conventional brace styling.  Private fields are prefixed with an underscore and camel-cased.  Using directives appear before the namespace, not inside it.",
            "title": "C# Coding Conventions"
        },
        {
            "location": "/Documentation/Code-conventions/#javascript-coding-conventions",
            "text": "Namespaces are Pascal-cased.  Class names are Pascal-cased.  Plugin names are Camel-cased.  Properties, fields, local variables are Camel-cased.  Parameters are Camel-cased.  Function names are Camel-cased unless they really are class constructors or namespaces (in other words, global/local functions and methods are Camel-cased).  Private/internal/protected members are underscore-prefixed and Camel-cased.  Constants are just static fields (apply same rules as for fields).  JavaScript coding conventions follow C# conventions except for Pascal vs. Camel.  \" and ' are interchangeable (strictly equivalent). XHTML attributes should be in double quotes and if code needs to be in there, it has to use single quotes. ex:   (note: this kind of DOM-0 event creating is itself discouraged and is only shown here as an example). In pure JS code, use double quotes for string delimiters. When the string is one character and the intent is a character, use single quote for consistency with managed code.  There is no need for String.Empty, just use \"\".  Localizable strings need to be isolated into resource dictionaries until we figure out our client localization story. ex. alert(Foo.badArgument); ... Foo = {badArgument: \"The argument was bad.\"};  Don't worry about string concatenation unless you have specific evidence that regular concatenation is significantly harming performance in your specific scenario.  Use the  K&R  style for opening braces (put the opening brace on the opening line). This is because in JavaScript, the semicolon is optional, which can cause difficult to spot bugs (see  http://msmvps.com/blogs/luisabreu/archive/2009/08/26/the-semicolon-bug.aspx  for an example).",
            "title": "JavaScript Coding Conventions"
        },
        {
            "location": "/Documentation/Continuous-integration/",
            "text": "There are currently two builds configured: \"Continuous Builder\" that runs on every check-in and \"Full Build\" that runs nightly. They are currently identical but eventually the nightly will also run functional tests.\n\n\nCode Coverage\n\n\nCode coverage data is being generated with each run of both builders. The code coverage data can be viewed by clicking the \"Code Coverage\" tab of the project or by going into the artifacts tab and downloading the source and coverage zips that can then be used from the \nNcoverExplorer\n to explore code coverage to the level of the line of code.",
            "title": "Continuous Integration"
        },
        {
            "location": "/Documentation/Continuous-integration/#code-coverage",
            "text": "Code coverage data is being generated with each run of both builders. The code coverage data can be viewed by clicking the \"Code Coverage\" tab of the project or by going into the artifacts tab and downloading the source and coverage zips that can then be used from the  NcoverExplorer  to explore code coverage to the level of the line of code.",
            "title": "Code Coverage"
        },
        {
            "location": "/Documentation/Merging-Pull-Requests/",
            "text": "Challenges of integrating a Pull Request\n\n\nWhen a Pull Request has been reviewed and is ready to be merged it's usually marked with a \nGG\n comment meaning \nGood to Go\n. \nAt this point any dev with commit rights should be able to merge it in the main repository. \nHowever we might need to rewrite the changes to keep the repository clean:\n- By updating the commit message if it needs to be shortened or improved. For instance if the patch is related to a work item, the commit message should look like this:\n\n\n\\#12345: Short message\n\nA longer message than can span multiple lines and describe the reasoning behind the change.\n\nWork Item: 12345\n\n\n\n\n\n\nBy rebasing the changes on the top of the branch to keep a more readable changelog.\n\n\nBy squashing the changes into a single commit.\n\n\n\n\nDoing so can be tedious depending on your level of knowledge on git. To help with this a specific git alias can be used.\n\n\nGIT Alias to Merge changes from codeplex\n\n\n\n\nIn your user's profile folder (e.g., \nc:\\users\\sebros\n) open the file \n.gitconfig\n.\n\n\nAnywhere in the file (at the end for instance) add a new alias like this:\n\n\n\n\n[alias]\naccept-pr = \"!f(){ git checkout -b PR $1 && git pull $2 $3 && git rebase $1 && author=`git log -n 1 --pretty='format:%an <%ae>'` && git reset $1 && git checkout $1 && git commit -a -m \\\"$4\\\" && git commit --amend --author=\\\"$author\\\" --no-edit && git branch -D PR; };f\"\n\n\n\n\n\n\nIf the \n[alias]\n section already exists, keep it\n\n\n\n\nThis \naccept-pr\n command is now accessible from the git console and will apply all the necessary steps.\n\n\n\n\n$1\n: The branch to apply the PR to, e.g., \n1.8.x\n, \n1.x\n\n\n$2\n: The url of the remote PR, e.g., \nhttps://git01.codeplex.com/forks/jchenga/orchard\n\n\n$3\n: The branch to pull from the remote PR, e.g., \nissues/20311\n\n\n$4\n: The commit message for the squashed commit, e.g., \n$'#1234: Short \\n Long \\n Work Item: 1234'\n\n\n\n\nThe parameters $2 and $3 can be found in the modal dialog which appears when clicking on the \nAccept\n link of the pull request page on codeplex. For instance it will show up a line like this:\n\n\ngit pull https://git01.codeplex.com/forks/jchenga/orchard issues/20797\n, where \n- \n$2\n is \nhttps://git01.codeplex.com/forks/jchenga/orchard\n\n- \n$3\n is \nissues/20797\n\n\nUsage\n\n\ngit accept-pr 1.8.x https://git01.codeplex.com/forks/jchenga/orchard issues/20797 $'#20797: Fixing taxonomy handler exception\\n\\nWork Item: 20797'\n\n\n\n\nIf this command results with an error, it's probably because the PR is too old and there are some merge conflicts. In this case reopen the PR by requesting the user to rebase his changes on the targeted branch or to merge the conflicts, clean you local changes, then try again.\nIf at this point you don't know what you doing or you have a doubt, please contact another committer for help.\n\n\nFinally, push the commits, and mark the PR as accepted.",
            "title": "Merging Pull Requests"
        },
        {
            "location": "/Documentation/Merging-Pull-Requests/#challenges-of-integrating-a-pull-request",
            "text": "When a Pull Request has been reviewed and is ready to be merged it's usually marked with a  GG  comment meaning  Good to Go . \nAt this point any dev with commit rights should be able to merge it in the main repository. \nHowever we might need to rewrite the changes to keep the repository clean:\n- By updating the commit message if it needs to be shortened or improved. For instance if the patch is related to a work item, the commit message should look like this:  \\#12345: Short message\n\nA longer message than can span multiple lines and describe the reasoning behind the change.\n\nWork Item: 12345   By rebasing the changes on the top of the branch to keep a more readable changelog.  By squashing the changes into a single commit.   Doing so can be tedious depending on your level of knowledge on git. To help with this a specific git alias can be used.",
            "title": "Challenges of integrating a Pull Request"
        },
        {
            "location": "/Documentation/Merging-Pull-Requests/#git-alias-to-merge-changes-from-codeplex",
            "text": "In your user's profile folder (e.g.,  c:\\users\\sebros ) open the file  .gitconfig .  Anywhere in the file (at the end for instance) add a new alias like this:   [alias]\naccept-pr = \"!f(){ git checkout -b PR $1 && git pull $2 $3 && git rebase $1 && author=`git log -n 1 --pretty='format:%an <%ae>'` && git reset $1 && git checkout $1 && git commit -a -m \\\"$4\\\" && git commit --amend --author=\\\"$author\\\" --no-edit && git branch -D PR; };f\"   If the  [alias]  section already exists, keep it   This  accept-pr  command is now accessible from the git console and will apply all the necessary steps.   $1 : The branch to apply the PR to, e.g.,  1.8.x ,  1.x  $2 : The url of the remote PR, e.g.,  https://git01.codeplex.com/forks/jchenga/orchard  $3 : The branch to pull from the remote PR, e.g.,  issues/20311  $4 : The commit message for the squashed commit, e.g.,  $'#1234: Short \\n Long \\n Work Item: 1234'   The parameters $2 and $3 can be found in the modal dialog which appears when clicking on the  Accept  link of the pull request page on codeplex. For instance it will show up a line like this:  git pull https://git01.codeplex.com/forks/jchenga/orchard issues/20797 , where \n-  $2  is  https://git01.codeplex.com/forks/jchenga/orchard \n-  $3  is  issues/20797",
            "title": "GIT Alias to Merge changes from codeplex"
        },
        {
            "location": "/Documentation/Merging-Pull-Requests/#usage",
            "text": "git accept-pr 1.8.x https://git01.codeplex.com/forks/jchenga/orchard issues/20797 $'#20797: Fixing taxonomy handler exception\\n\\nWork Item: 20797'  If this command results with an error, it's probably because the PR is too old and there are some merge conflicts. In this case reopen the PR by requesting the user to rebase his changes on the targeted branch or to merge the conflicts, clean you local changes, then try again.\nIf at this point you don't know what you doing or you have a doubt, please contact another committer for help.  Finally, push the commits, and mark the PR as accepted.",
            "title": "Usage"
        },
        {
            "location": "/Documentation/Orchard-module-loader-and-dynamic-compilation/",
            "text": "Introduction\n\n\nAs a composable CMS, Orchard has the ability to load an arbitrary set of modules (also known as \"extensions\") at run-time. One of the goals of the 0.5 release was to make the process of installing and updating modules as easy as possible. \n\n\nOrchard, as any ASP.NET MVC application, supports loading module compiled as assemblies using Visual Studio. Orchard also offers a customized module loading strategy which, for example, allows loading assemblies for modules without having to deploy them in the \"~/bin\" folder.\n\n\nIn addition to that, Orchard supports (this is still somewhat experimental) the ability to dynamically compile modules deployed as source code only.  This is more flexible than deploying binaries, and enables some interesting scenarios such as \"in place\" code customization without having to use Visual Studio. This is somewhat similar to the ASP.NET \"App_Code\" directory, except Orchard supports multiple \"logical folder\" (typically one per module) independently.\n\n\nThe goal of this section is to describe at a technical level how Orchard load modules in the 0.5 release. This feature is often referred to as \"Orchard Dynamic Compilation\", even though technically dynamic compilation is only involved in very specific cases.\n\n\nHigh Level Overview\n\n\nWhen an Orchard application starts, the Orchard Framework (the ExtensionLoaderCoordinator class to be precise) needs to figure out what are the modules installed in the Web Site and activate them (typically by loading their assembly).\n\n\nAt a high level, this process can be divided in 3 distinct phases:\n\n\n\n\nDiscovery: figure out what are the modules present in the web site\n\n\nActivation: figure out what strategy to use to \"activate\" (or load) each module\n\n\nReferences Resolution: figure out what are the assembly references needed to be activated for each module. This phase is technically part of the \"Activation\" phase, but it is easier to think about the problem of reference resolution as a separate concern.\n\n\n\n\nOnce modules are properly activated, they are further examined to detect and enable individual \nfeatures\n, but this is a topic for another section.\n\n\nDiscovery\n\n\nThe list of available extensions in an Orchard installation is built by searching various folders of the file system for \"\nmodule.txt\n\" and \"\ntheme.txt\n\" files. The folders looked at by default are listed in the following sections.\n\n\n\"~/Modules\" Folder\n\n\nThe \"~/Modules\" folder is intended to contain the vast majority of Orchard modules. The convention is that each module is stored in a sub-folder named \"<ModuleName>\" containing a single \"module.txt\" file.  Packaging, distribution and sharing of modules is only supported for modules in the \"~/Modules\" folder.\n\n\n\"~/Core\" Folder\n\n\nThe \"~/Core\" folder contains, by convention, modules defined in the \"Orchard.Core\" assembly. These modules are part of the \"Core\" Orchard system and are not intended to be modified as freely as modules in the \"~/Modules\" folder.\n\n\n\"~/Themes\" Folder\n\n\nThe \"~/Themes\" folder is intended to contain Orchard Themes. Wrt to dynamic compilation, Themes are treated almost exactly the same as Modules, except that Themes don't have to have code (assembly in bin or .csproj file). For the rest of this page, when we refer to \"Module\", it should be understand that the concept applies to \"Theme\" the same way.\n\n\nCustom Folders\n\n\nOrchard 1.10 introduced a new feature that allows the loading of extensions from custom-defined folders outside of the ones listed above by adding the \nExtensionLocations\n service that is utilised by each extension loader (see the Loaders in the Activation section below).\n\n\nAdditional extension folders can be configured by defining an AppSetting (e.g. by adding it to the root web.config file, which contains appropriate examples) with the \nkey\n \"Modules\" and/or \"Themes\" with their respective \nvalue\n being e.g. \"~/Modules.Custom\" and/or \"~/Themes.Custom\".\n\n\nExample\n\n\nHere is an example of an Orchard installation which contains the following extensions: Common and Localization (Core modules), Orchard.Azure and Orchard.Caching (built-in modules), SafeMode and TheAdmin (built-in themes), MyModule1 and MyModule2 (custom modules), MyBaseTheme and MyTheme (custom themes).\n\n\nRoot (Orchard.Web)\n  Core\n    Common\n      module.txt  <= \"Common\" module from \"Core\"\n    Localization\n      module.txt  <= \"Localization\" module from \"Core\"\n  Modules\n    Orchard.Azure\n      module.txt  <= \"Orchard.Azure\" module\n    Orchard.Caching\n      module.txt  <= \"Orchard.Caching\" module\n  Modules.Custom\n    MyModule1\n      module.txt  <= \"MyModule1\" module\n    MyModule2\n      module.txt  <= \"MyModule2\" module\n  Themes\n    SafeMode\n      theme.txt  <= \"SafeMode\" theme\n    TheAdmin\n      theme.txt  <= \"TheAdmin\" theme\n  Themes.Custom\n    MyBaseTheme\n      theme.txt  <= \"MyBaseTheme\" theme\n    MyTheme\n      theme.txt  <= \"MyTheme\" theme\n\n\n\nActivation\n\n\nOnce Orchard has collected all the \"Module.txt\" files from the discovery phase, Orchard uses distinct strategies (or \"Module Loaders\") to load these modules in memory. Internally, the act of \"loading a module\" is an activity that takes a \"module.txt\" file as input and returns a list of \"System.Type\" as output. Note that this is slightly more generic than simply returning a \"System.Assembly\", as it allows Orchard to support multiple modules per assembly. For example, the \"Orchard.Core.dll\" assembly currently contains about 10 modules.\n\n\nThe Orchard framework currently implements the following loaders:\n\n\n\"Referenced Module\" Loader\n\n\nThis loader looks in in \"~/bin\" directory for a assembly name corresponding to the module name specified in \"module.txt\". If the assembly exists, it is loaded and all its types are returned. This loader is useful when someone wants to deploy an Orchard web site where all modules are pre-compiled and stored in \"~/bin\", in a typical \"asp.net web application\" way.\n\n\n\"Core Module\" Loader\n\n\nIf \"module.txt\" indicates a module from the \"~/Core\" folder, the CoreExtensionLoader returns the types from the \"Orchard.Core.<moduleMame>\" namespace of the \"Orchard.Core\" assembly. \"Orchard.Core\" is a special assembly containing modules that are \"core\" to the system, i.e. offering basic functionality on top of the Orchard Framework.\n\n\n\"Precompiled Module\" Loader\n\n\nIf \"module.txt\" indicates a module from the \"~/Modules\" folder, the PrecompiledExtensionLoader looks for an assembly named \"<ModuleName>\" in the \"~/Modules/<ModuleName>/bin\" folder. If the file exists, it's is copied to the \n~/App_Data/Dependencies\n folder, which is a special folder used by ASP.NET to look for additional assemblies outside of the traditional \"~/bin\" folder.\n\n\n\"Dynamic Module\" Loader\n\n\nIf \"module.txt\" indicates a module from the \"~/Modules\" folder, the \"Dynamic Module\" loader looks for a file named \"\n.csproj\" in the \"~/Modules/<ModuleName>\" folder. If the file exists, the loader will use the Orchard build manager for .csproj files to compile the file into an assembly and return all the types from that assembly.\n\n\nNote: This loader is the only one in the system performing what is often referred to as \"dynamic compilation\", and is indeed optional if modules have been pre-compiled.\n\n\nLoader Disambiguation\n\n\nSince there is potentially more than one loader able to load a given module, Orchard has to have a way to resolve the ambiguity, i.e. pick the \"right\" loader.  Each loader has the ability to return a \"date of last modification\" for each module they can load.  For a given module, if there are multiple candidate loaders, Orchard will pick the loader which returns the most \"recent\" date of last modification.\n\n\nFor example, a given module can be distributed with both full source code (including .csproj file) \nand\n compiled into an assembly in its \"bin\" directory.  The first time the module is loaded, Orchard will pick the loader for the assembly in \"bin\" since it's very likely the assembly was compiled after the last source code change was made.  However, if any change was made to the source code afterward, the \"Dynamic Module\" loader will return the date of the most recently modified file (either the source file or csproj), and Orchard will pick that loader for the given module.  \n\n\nNote that the \"Core Module\" loader is never ambiguous, because there is only one way to load these modules. The ambiguity can only arise for modules in the \"~/Modules\" directory.\n\n\nExample\n\n\nRootFolder\n  Bin\n    Orchard.Web.dll\n    Orchard.Core.dll\n    Foo.dll\n  Core           \n    Common        <= \"Core Module\" loader\n      module.txt\n    Localization  <= \"Core Module\" loader\n      module.txt\n  Modules\n    Foo           <= \"Reference Module\" loader (because a \"~/bin/Foo.dll\" file exists)\n      module.txt\n    Bar           <= \"Precompiled Module\" loader (because a \"~/Modules/Bar/bin/Bar.dll\" file exists)\n      bin\n        Bar.dll\n      module.txt\n    Baz           <= \"Dynamic Module\" loader (because a \"~/Modules/Baz/Baz.csproj\" file exists)\n      Controller\n         BazControler.cs\n      Baz.csproj\n      module.txt\n\n\n\nDisabling the \"Dynamic Module\" loader\n\n\nThe dynamic module loader should be useless when deploying a website in production, as a production enviroment it\nshould not be able to install and load module dynamically. But another important reason why it should be disabled\nis that it creates a lot of \nFileSystemWatcher\n instances to detect changes on the modules.\n\n\nTo disable the module, rename the file \n\\Config\\Sample.HostComponents.config\n to \n\\Config\\HostComponents.config\n, \nthen check the content is:\n\n\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<HostComponents>\n  <Components>\n    <Component Type=\"Orchard.Environment.Extensions.ExtensionMonitoringCoordinator\">\n      <Properties>\n        <Property Name=\"Disabled\" Value=\"true\"/>\n      </Properties>\n    </Component>\n  </Components>\n</HostComponents>\n\n\n\nDeploy this file and restart the App Pool.\n\n\nNB: You will have to ensure that the binaries for every modules are available in the \n/bin\n folder of each module, \nsuch that the Precompiled Module loader can use them directly. When using Visual Studio this should be the case. \nOtherwise use the command line tool to build the website, which will have the same effect.\n\n\nReferences Resolution\n\n\n(TODO: Explain how Orchard figures out references by looking at the \"References\" section of the csproj file as well as looking at additional assembly binaries dropped in each module \"bin\" directory)\n\n\nChange of Configuration Detection\n\n\nAs explained above, modules are loaded at application startup. However, once the application is started up, changes can happen: a new module might be installed, the source code of a module might be manually updated, a module might be removed from the site, etc.  To detect these changes, Orchard asks each module loader in the system to \"monitor\" potential changes, and notify when a change happens.\n\n\nWhen a change is detected, the current module configuration is discarded and modules are re-examined, loaded and activated as if the application was starting up again.  In some cases, these changes require an ASP.NET AppDomain restart (e.g. a new version of a module assembly needs to be loaded). Orchard detects these situations and forces an ASP.NET AppDomain restart.\n\n\nRendering Web Forms Views\n\n\n(TODO: Explain that Orchard uses a custom virtual path provider to insert custom \"Assembly Src=xx\" and \"Assembly Name=xxx\" directive when reading .ascx and .aspx files)\n\n\nRendering Razor Views\n\n\n(TODO: Explain that Orchard uses a Razor custom API to add Module dependencies to Views)\n\n\nThe \n~/App_Data/Dependencies/Dependencies.xml\n File\n\n\nThis file contains the list of modules, their loader and their resolved references of the \"last known good\" configuration of module, i.e. the last time Orchard successfully loaded all modules of the application.  Examining the content of this file can be useful for debugging purposes, i.e. if a the latest version of a module doesn't seem to be loaded, for example.",
            "title": "Orchard Dynamic Compilation"
        },
        {
            "location": "/Documentation/Orchard-module-loader-and-dynamic-compilation/#introduction",
            "text": "As a composable CMS, Orchard has the ability to load an arbitrary set of modules (also known as \"extensions\") at run-time. One of the goals of the 0.5 release was to make the process of installing and updating modules as easy as possible.   Orchard, as any ASP.NET MVC application, supports loading module compiled as assemblies using Visual Studio. Orchard also offers a customized module loading strategy which, for example, allows loading assemblies for modules without having to deploy them in the \"~/bin\" folder.  In addition to that, Orchard supports (this is still somewhat experimental) the ability to dynamically compile modules deployed as source code only.  This is more flexible than deploying binaries, and enables some interesting scenarios such as \"in place\" code customization without having to use Visual Studio. This is somewhat similar to the ASP.NET \"App_Code\" directory, except Orchard supports multiple \"logical folder\" (typically one per module) independently.  The goal of this section is to describe at a technical level how Orchard load modules in the 0.5 release. This feature is often referred to as \"Orchard Dynamic Compilation\", even though technically dynamic compilation is only involved in very specific cases.",
            "title": "Introduction"
        },
        {
            "location": "/Documentation/Orchard-module-loader-and-dynamic-compilation/#high-level-overview",
            "text": "When an Orchard application starts, the Orchard Framework (the ExtensionLoaderCoordinator class to be precise) needs to figure out what are the modules installed in the Web Site and activate them (typically by loading their assembly).  At a high level, this process can be divided in 3 distinct phases:   Discovery: figure out what are the modules present in the web site  Activation: figure out what strategy to use to \"activate\" (or load) each module  References Resolution: figure out what are the assembly references needed to be activated for each module. This phase is technically part of the \"Activation\" phase, but it is easier to think about the problem of reference resolution as a separate concern.   Once modules are properly activated, they are further examined to detect and enable individual  features , but this is a topic for another section.",
            "title": "High Level Overview"
        },
        {
            "location": "/Documentation/Orchard-module-loader-and-dynamic-compilation/#discovery",
            "text": "The list of available extensions in an Orchard installation is built by searching various folders of the file system for \" module.txt \" and \" theme.txt \" files. The folders looked at by default are listed in the following sections.",
            "title": "Discovery"
        },
        {
            "location": "/Documentation/Orchard-module-loader-and-dynamic-compilation/#modules-folder",
            "text": "The \"~/Modules\" folder is intended to contain the vast majority of Orchard modules. The convention is that each module is stored in a sub-folder named \"<ModuleName>\" containing a single \"module.txt\" file.  Packaging, distribution and sharing of modules is only supported for modules in the \"~/Modules\" folder.",
            "title": "\"~/Modules\" Folder"
        },
        {
            "location": "/Documentation/Orchard-module-loader-and-dynamic-compilation/#core-folder",
            "text": "The \"~/Core\" folder contains, by convention, modules defined in the \"Orchard.Core\" assembly. These modules are part of the \"Core\" Orchard system and are not intended to be modified as freely as modules in the \"~/Modules\" folder.",
            "title": "\"~/Core\" Folder"
        },
        {
            "location": "/Documentation/Orchard-module-loader-and-dynamic-compilation/#themes-folder",
            "text": "The \"~/Themes\" folder is intended to contain Orchard Themes. Wrt to dynamic compilation, Themes are treated almost exactly the same as Modules, except that Themes don't have to have code (assembly in bin or .csproj file). For the rest of this page, when we refer to \"Module\", it should be understand that the concept applies to \"Theme\" the same way.",
            "title": "\"~/Themes\" Folder"
        },
        {
            "location": "/Documentation/Orchard-module-loader-and-dynamic-compilation/#custom-folders",
            "text": "Orchard 1.10 introduced a new feature that allows the loading of extensions from custom-defined folders outside of the ones listed above by adding the  ExtensionLocations  service that is utilised by each extension loader (see the Loaders in the Activation section below).  Additional extension folders can be configured by defining an AppSetting (e.g. by adding it to the root web.config file, which contains appropriate examples) with the  key  \"Modules\" and/or \"Themes\" with their respective  value  being e.g. \"~/Modules.Custom\" and/or \"~/Themes.Custom\".",
            "title": "Custom Folders"
        },
        {
            "location": "/Documentation/Orchard-module-loader-and-dynamic-compilation/#example",
            "text": "Here is an example of an Orchard installation which contains the following extensions: Common and Localization (Core modules), Orchard.Azure and Orchard.Caching (built-in modules), SafeMode and TheAdmin (built-in themes), MyModule1 and MyModule2 (custom modules), MyBaseTheme and MyTheme (custom themes).  Root (Orchard.Web)\n  Core\n    Common\n      module.txt  <= \"Common\" module from \"Core\"\n    Localization\n      module.txt  <= \"Localization\" module from \"Core\"\n  Modules\n    Orchard.Azure\n      module.txt  <= \"Orchard.Azure\" module\n    Orchard.Caching\n      module.txt  <= \"Orchard.Caching\" module\n  Modules.Custom\n    MyModule1\n      module.txt  <= \"MyModule1\" module\n    MyModule2\n      module.txt  <= \"MyModule2\" module\n  Themes\n    SafeMode\n      theme.txt  <= \"SafeMode\" theme\n    TheAdmin\n      theme.txt  <= \"TheAdmin\" theme\n  Themes.Custom\n    MyBaseTheme\n      theme.txt  <= \"MyBaseTheme\" theme\n    MyTheme\n      theme.txt  <= \"MyTheme\" theme",
            "title": "Example"
        },
        {
            "location": "/Documentation/Orchard-module-loader-and-dynamic-compilation/#activation",
            "text": "Once Orchard has collected all the \"Module.txt\" files from the discovery phase, Orchard uses distinct strategies (or \"Module Loaders\") to load these modules in memory. Internally, the act of \"loading a module\" is an activity that takes a \"module.txt\" file as input and returns a list of \"System.Type\" as output. Note that this is slightly more generic than simply returning a \"System.Assembly\", as it allows Orchard to support multiple modules per assembly. For example, the \"Orchard.Core.dll\" assembly currently contains about 10 modules.  The Orchard framework currently implements the following loaders:",
            "title": "Activation"
        },
        {
            "location": "/Documentation/Orchard-module-loader-and-dynamic-compilation/#referenced-module-loader",
            "text": "This loader looks in in \"~/bin\" directory for a assembly name corresponding to the module name specified in \"module.txt\". If the assembly exists, it is loaded and all its types are returned. This loader is useful when someone wants to deploy an Orchard web site where all modules are pre-compiled and stored in \"~/bin\", in a typical \"asp.net web application\" way.",
            "title": "\"Referenced Module\" Loader"
        },
        {
            "location": "/Documentation/Orchard-module-loader-and-dynamic-compilation/#core-module-loader",
            "text": "If \"module.txt\" indicates a module from the \"~/Core\" folder, the CoreExtensionLoader returns the types from the \"Orchard.Core.<moduleMame>\" namespace of the \"Orchard.Core\" assembly. \"Orchard.Core\" is a special assembly containing modules that are \"core\" to the system, i.e. offering basic functionality on top of the Orchard Framework.",
            "title": "\"Core Module\" Loader"
        },
        {
            "location": "/Documentation/Orchard-module-loader-and-dynamic-compilation/#precompiled-module-loader",
            "text": "If \"module.txt\" indicates a module from the \"~/Modules\" folder, the PrecompiledExtensionLoader looks for an assembly named \"<ModuleName>\" in the \"~/Modules/<ModuleName>/bin\" folder. If the file exists, it's is copied to the  ~/App_Data/Dependencies  folder, which is a special folder used by ASP.NET to look for additional assemblies outside of the traditional \"~/bin\" folder.",
            "title": "\"Precompiled Module\" Loader"
        },
        {
            "location": "/Documentation/Orchard-module-loader-and-dynamic-compilation/#dynamic-module-loader",
            "text": "If \"module.txt\" indicates a module from the \"~/Modules\" folder, the \"Dynamic Module\" loader looks for a file named \" .csproj\" in the \"~/Modules/<ModuleName>\" folder. If the file exists, the loader will use the Orchard build manager for .csproj files to compile the file into an assembly and return all the types from that assembly.  Note: This loader is the only one in the system performing what is often referred to as \"dynamic compilation\", and is indeed optional if modules have been pre-compiled.",
            "title": "\"Dynamic Module\" Loader"
        },
        {
            "location": "/Documentation/Orchard-module-loader-and-dynamic-compilation/#loader-disambiguation",
            "text": "Since there is potentially more than one loader able to load a given module, Orchard has to have a way to resolve the ambiguity, i.e. pick the \"right\" loader.  Each loader has the ability to return a \"date of last modification\" for each module they can load.  For a given module, if there are multiple candidate loaders, Orchard will pick the loader which returns the most \"recent\" date of last modification.  For example, a given module can be distributed with both full source code (including .csproj file)  and  compiled into an assembly in its \"bin\" directory.  The first time the module is loaded, Orchard will pick the loader for the assembly in \"bin\" since it's very likely the assembly was compiled after the last source code change was made.  However, if any change was made to the source code afterward, the \"Dynamic Module\" loader will return the date of the most recently modified file (either the source file or csproj), and Orchard will pick that loader for the given module.    Note that the \"Core Module\" loader is never ambiguous, because there is only one way to load these modules. The ambiguity can only arise for modules in the \"~/Modules\" directory.",
            "title": "Loader Disambiguation"
        },
        {
            "location": "/Documentation/Orchard-module-loader-and-dynamic-compilation/#example_1",
            "text": "RootFolder\n  Bin\n    Orchard.Web.dll\n    Orchard.Core.dll\n    Foo.dll\n  Core           \n    Common        <= \"Core Module\" loader\n      module.txt\n    Localization  <= \"Core Module\" loader\n      module.txt\n  Modules\n    Foo           <= \"Reference Module\" loader (because a \"~/bin/Foo.dll\" file exists)\n      module.txt\n    Bar           <= \"Precompiled Module\" loader (because a \"~/Modules/Bar/bin/Bar.dll\" file exists)\n      bin\n        Bar.dll\n      module.txt\n    Baz           <= \"Dynamic Module\" loader (because a \"~/Modules/Baz/Baz.csproj\" file exists)\n      Controller\n         BazControler.cs\n      Baz.csproj\n      module.txt",
            "title": "Example"
        },
        {
            "location": "/Documentation/Orchard-module-loader-and-dynamic-compilation/#disabling-the-dynamic-module-loader",
            "text": "The dynamic module loader should be useless when deploying a website in production, as a production enviroment it\nshould not be able to install and load module dynamically. But another important reason why it should be disabled\nis that it creates a lot of  FileSystemWatcher  instances to detect changes on the modules.  To disable the module, rename the file  \\Config\\Sample.HostComponents.config  to  \\Config\\HostComponents.config , \nthen check the content is:  <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<HostComponents>\n  <Components>\n    <Component Type=\"Orchard.Environment.Extensions.ExtensionMonitoringCoordinator\">\n      <Properties>\n        <Property Name=\"Disabled\" Value=\"true\"/>\n      </Properties>\n    </Component>\n  </Components>\n</HostComponents>  Deploy this file and restart the App Pool.  NB: You will have to ensure that the binaries for every modules are available in the  /bin  folder of each module, \nsuch that the Precompiled Module loader can use them directly. When using Visual Studio this should be the case. \nOtherwise use the command line tool to build the website, which will have the same effect.",
            "title": "Disabling the \"Dynamic Module\" loader"
        },
        {
            "location": "/Documentation/Orchard-module-loader-and-dynamic-compilation/#references-resolution",
            "text": "(TODO: Explain how Orchard figures out references by looking at the \"References\" section of the csproj file as well as looking at additional assembly binaries dropped in each module \"bin\" directory)",
            "title": "References Resolution"
        },
        {
            "location": "/Documentation/Orchard-module-loader-and-dynamic-compilation/#change-of-configuration-detection",
            "text": "As explained above, modules are loaded at application startup. However, once the application is started up, changes can happen: a new module might be installed, the source code of a module might be manually updated, a module might be removed from the site, etc.  To detect these changes, Orchard asks each module loader in the system to \"monitor\" potential changes, and notify when a change happens.  When a change is detected, the current module configuration is discarded and modules are re-examined, loaded and activated as if the application was starting up again.  In some cases, these changes require an ASP.NET AppDomain restart (e.g. a new version of a module assembly needs to be loaded). Orchard detects these situations and forces an ASP.NET AppDomain restart.",
            "title": "Change of Configuration Detection"
        },
        {
            "location": "/Documentation/Orchard-module-loader-and-dynamic-compilation/#rendering-web-forms-views",
            "text": "(TODO: Explain that Orchard uses a custom virtual path provider to insert custom \"Assembly Src=xx\" and \"Assembly Name=xxx\" directive when reading .ascx and .aspx files)",
            "title": "Rendering Web Forms Views"
        },
        {
            "location": "/Documentation/Orchard-module-loader-and-dynamic-compilation/#rendering-razor-views",
            "text": "(TODO: Explain that Orchard uses a Razor custom API to add Module dependencies to Views)",
            "title": "Rendering Razor Views"
        },
        {
            "location": "/Documentation/Orchard-module-loader-and-dynamic-compilation/#the-app_datadependenciesdependenciesxml-file",
            "text": "This file contains the list of modules, their loader and their resolved references of the \"last known good\" configuration of module, i.e. the last time Orchard successfully loaded all modules of the application.  Examining the content of this file can be useful for debugging purposes, i.e. if a the latest version of a module doesn't seem to be loaded, for example.",
            "title": "The ~/App_Data/Dependencies/Dependencies.xml File"
        },
        {
            "location": "/Documentation/Configuring-email/",
            "text": "Configuring Orchard to send email is done by enabling the \nEmail Messaging\n module and adding the proper email settings. The Email Messaging module adds Email sending functionalities. This document will talk about setting up Orchard to be able to send emails using the localhost.\n\n\nRequired Module\n\n\nIn order for Orchard to be able to send emails; The \nEmail Messaging\n Module needs to be enabled.\n\n\n\n\nClick \nEnable\n\n\n\n\nConfiguring Email SMTP Settings\n\n\nOnce the \nEmail Messaging\n module has been enabled the email settings can be configured.  To configure the email settings in Orchard, select 'Email' under the Settings section of the admin.\n\n\n\n\nEmails can be sent from the local host with the below settings (be sure to replace the from address with an appropriate email address).\n\n\n\n\nAnd that's it!  Well, mostly...  Orchard is capable of sending emails now but how do we tell it to send email?  There's different reasons when it would be desirable for emails to be sent, one such reason would be when a new message is received from a site's \nContact Us\n page.  Read how to create a \ncustom form\n and then use a rule or the new \nWork Flow\n to have Orchard send an email.\n\n\nChange History\n\n\n\n\nUpdates for Orchard 1.8\n\n\n9-8-14: Updated screen shots for email messaging module",
            "title": "Configuring Email"
        },
        {
            "location": "/Documentation/Configuring-email/#required-module",
            "text": "In order for Orchard to be able to send emails; The  Email Messaging  Module needs to be enabled.   Click  Enable",
            "title": "Required Module"
        },
        {
            "location": "/Documentation/Configuring-email/#configuring-email-smtp-settings",
            "text": "Once the  Email Messaging  module has been enabled the email settings can be configured.  To configure the email settings in Orchard, select 'Email' under the Settings section of the admin.   Emails can be sent from the local host with the below settings (be sure to replace the from address with an appropriate email address).   And that's it!  Well, mostly...  Orchard is capable of sending emails now but how do we tell it to send email?  There's different reasons when it would be desirable for emails to be sent, one such reason would be when a new message is received from a site's  Contact Us  page.  Read how to create a  custom form  and then use a rule or the new  Work Flow  to have Orchard send an email.",
            "title": "Configuring Email SMTP Settings"
        },
        {
            "location": "/Documentation/Configuring-email/#change-history",
            "text": "Updates for Orchard 1.8  9-8-14: Updated screen shots for email messaging module",
            "title": "Change History"
        },
        {
            "location": "/Documentation/Contributing-documentation/",
            "text": "At the beginning of your topic, add a statement that clearly identifies the version of Orchard the topic was written for, such as the following.\n\n\n\n\nThis topic targets, and was tested with, the Orchard 0.8 release.\n\n\n\n\nMake sure you test all code and markup with the targeted version of Orchard.",
            "title": "Contributing Documentation"
        },
        {
            "location": "/Documentation/Documentation-Style-Guidelines/",
            "text": "The Orchard documentation is built in \nMarkdown\n.\nWe use a few simple conventions to ensure a homogeneous style throughout the full set of documents.\n\n\nFile Name And Title\n\n\nThe document should not specify its own title as part of the document itself, but its file name should be the document title, with spaces replaced by dashes (-).\nThe title will be added by the site dynamically, from the file name.\n\n\nStructure\n\n\nTopics should begin with a brief summary explaining what audience it targets and their key takeaways.\nThis summary will be displayed in search results, so it should make sense by itself.\nIt should consist of one paragraph of text, without a leading title.\n\n\nIf the topic is not complete enough to fulfill its goals, the top of the document should specify \n> Draft topic\n on the first line.\n\n\nAfter the summary, the actual contents of the document should all be under section headers,\nand the top section headers should be in header 1 style: \n# This Is A Top Header\n.\nHeaders should use capital letters to begin each word (see \ncapitalization\n).\n\n\nSubsections should be one level deeper than their parent section.\n\n\nDo use explicitly named anchors when building links to a specific section of the document.\nAnchors are automatically created for all headers from their title by removing spaces.\nAnchors can be linked to using the following syntax:\n\n\n[How To Build Awesome Documentation][link1]\n[link1]: #HowToBuildAwesomeDocumentation\n\n\n\nIf the anchor is in another document, use the file name and the anchor name like this:\n\n\n[Follow this link to learn how to build awesome documentation][link1]\n[link1]: name-of-the-linked-document#HowToBuildAwesomeDocumentation\n\n\n\nPlease note that anchor names are case-sensitive.\n\n\nThe text within a section should be structured in short paragraphs. Don't forget to include an empty line in wiki markup between paragraphs.\n\n\nMarkup and Styles\n\n\nTopics should use standard \nMarkdown\n and should avoid inline HTML, including styles.\n\n\nBolding And Italics\n\n\nDo not use header styles for emphasis.\n\n\nUse \n*surrounding asterisks*\n for \nemphasis\n, which will be rendered as italics.\n\n\nUse \n**double asterisks**\n for \nstrong emphasis\n, which will be rendered as bold.\n\n\n\n\nUse \n> angle bracket paragraphs\n to highlight a whole paragraph.\n\n\n\n\nCode\n\n\nInline code should be surrounded by \n`ticks`\n, and multi-line code samples should be in paragraphs indented with 4 spaces.\n\n\nThis is a code block\n\n\n\nTry to break code lines so that the code blocks do not have horizontal scroll bars.\n\n\nEscaping Markdown\n\n\nIf you need to use sequences of characters in your text that would normally be parsed as wiki markup, such as `, * or _\nbut that you want to appear as they are without being parsed, add a backlash (\\) in front or surround those sequences with\ncode delimiters (`). You can look at the source of this document (click the edit link in the sidebar) for many examples of this.\n\n\nThe list of characters that can be escaped can be found \nhere\n.\n\n\nImages\n\n\nImages should not be wider than 675 pixels if they are going to be embedded into a topic.\nWider images are acceptable as targets of a link from a page.\nThe link to such a wide image should itself be a 675 pixel-wide thumbnail of the image.\nWhen including a large image, do it as a 675 pixels wide image linking to the high-resolution version.\nImages narrower than 675 pixels should be included with their natural width and should not be enlarged.\n\n\nImages should be checked into \ngithub\n, in \na subdirectory of the Attachments directory that has the same name as the topic's markdown file.\nIf the image exists in small and large versions, the small one should be named the same as the full resolution, but prefixed with \"s_\".\n\n\nThe typical markup to include an image is as follows:\n\n\n![Caption for my image](../Attachments/Name-Of-Topic/NameOfImage.png)\n\n\n\nIf the image is a link to a higher resolution, the link and image syntaxes must be combined:\n\n\n[![Caption](../Attachments/Topic/NameOfImage.png)][img1]\n[img1]: ../Attachments/Topic/NameOfImage.png\n\n\n\nAcceptable image formats are PNG, JPG and GIF. Images should be reasonably compressed.\nAvoid JPG for screenshots, and reserve it for photos.\n\n\nLinks\n\n\nReferences to other topics on this wiki can be made using:\n\n\n[Text for the link](Topic-Name)\n\n\n\nOr:\n\n\n[Text for the link][ref1]\n[ref1]: Topic-Name\n\n\n\nLinks to external content can be added using:\n\n\n[Text for the link](http://somesite/somepage)\n\n\n\nOr:\n\n\n[Text for the link][ref1]\n[ref1]: http://somesite/somepage\n\n\n\nIf you are using the reference syntax, the references may be grouped at the end of the document, separating the link itself from the reference definition.\n\n\nDo use links to specific sections of a document where relevant (see the \nstructure section\n).\n\n\nCapitalization\n\n\nIn topic titles and in section headings, use title-style capitalization (as opposed to sentence style).\nWhen referring to UI elements, follow the capitalization style used in the UI elements themselves. \n\n\nTables\n\n\nTables should be built to fit into the standard width of pages on this site.\nThe markup to create a table is a common extension for Markdown:\n\n\nHeader A | Header B | Header C\n-------- | -------- | --------\nCell A.1 | Cell B.1 | Cell C.1\nCell A.2 | Cell B.2 | Cell C.2\nCell A.3 | Cell B.3 | Cell C.3\n\n\n\nThis markup will create the following table:\n\n\n\n\n\n\n\n\nHeader A\n\n\nHeader B\n\n\nHeader C\n\n\n\n\n\n\n\n\n\n\nCell A.1\n\n\nCell B.1\n\n\nCell C.1\n\n\n\n\n\n\nCell A.2\n\n\nCell B.2\n\n\nCell C.2\n\n\n\n\n\n\nCell A.3\n\n\nCell B.3\n\n\nCell C.3\n\n\n\n\n\n\n\n\nFor details of table syntax see \nMarkdown Extra Tables Reference\n.\n\n\nContributing Documentation\n\n\nThe Orchard documentation is managed as Markdown files in \na Git repository hosted on Github\n.\n\n\nMaking Edits On Existing Topics\n\n\nIn the right sidebar of each topic, you will find a link to the document on Github.\n\n\n\n\nContributing Larger Changes And Topics\n\n\nWe recommend the use of \nGitHub for Windows\n\nto clone the documentation locally. This will give you a local copy of the documentation site,\nthat you can run from WebMatrix or Visual Studio.",
            "title": "Documentation Style Guidelines"
        },
        {
            "location": "/Documentation/Documentation-Style-Guidelines/#file-name-and-title",
            "text": "The document should not specify its own title as part of the document itself, but its file name should be the document title, with spaces replaced by dashes (-).\nThe title will be added by the site dynamically, from the file name.",
            "title": "File Name And Title"
        },
        {
            "location": "/Documentation/Documentation-Style-Guidelines/#structure",
            "text": "Topics should begin with a brief summary explaining what audience it targets and their key takeaways.\nThis summary will be displayed in search results, so it should make sense by itself.\nIt should consist of one paragraph of text, without a leading title.  If the topic is not complete enough to fulfill its goals, the top of the document should specify  > Draft topic  on the first line.  After the summary, the actual contents of the document should all be under section headers,\nand the top section headers should be in header 1 style:  # This Is A Top Header .\nHeaders should use capital letters to begin each word (see  capitalization ).  Subsections should be one level deeper than their parent section.  Do use explicitly named anchors when building links to a specific section of the document.\nAnchors are automatically created for all headers from their title by removing spaces.\nAnchors can be linked to using the following syntax:  [How To Build Awesome Documentation][link1]\n[link1]: #HowToBuildAwesomeDocumentation  If the anchor is in another document, use the file name and the anchor name like this:  [Follow this link to learn how to build awesome documentation][link1]\n[link1]: name-of-the-linked-document#HowToBuildAwesomeDocumentation  Please note that anchor names are case-sensitive.  The text within a section should be structured in short paragraphs. Don't forget to include an empty line in wiki markup between paragraphs.",
            "title": "Structure"
        },
        {
            "location": "/Documentation/Documentation-Style-Guidelines/#markup-and-styles",
            "text": "Topics should use standard  Markdown  and should avoid inline HTML, including styles.",
            "title": "Markup and Styles"
        },
        {
            "location": "/Documentation/Documentation-Style-Guidelines/#bolding-and-italics",
            "text": "Do not use header styles for emphasis.  Use  *surrounding asterisks*  for  emphasis , which will be rendered as italics.  Use  **double asterisks**  for  strong emphasis , which will be rendered as bold.   Use  > angle bracket paragraphs  to highlight a whole paragraph.",
            "title": "Bolding And Italics"
        },
        {
            "location": "/Documentation/Documentation-Style-Guidelines/#code",
            "text": "Inline code should be surrounded by  `ticks` , and multi-line code samples should be in paragraphs indented with 4 spaces.  This is a code block  Try to break code lines so that the code blocks do not have horizontal scroll bars.",
            "title": "Code"
        },
        {
            "location": "/Documentation/Documentation-Style-Guidelines/#escaping-markdown",
            "text": "If you need to use sequences of characters in your text that would normally be parsed as wiki markup, such as `, * or _\nbut that you want to appear as they are without being parsed, add a backlash (\\) in front or surround those sequences with\ncode delimiters (`). You can look at the source of this document (click the edit link in the sidebar) for many examples of this.  The list of characters that can be escaped can be found  here .",
            "title": "Escaping Markdown"
        },
        {
            "location": "/Documentation/Documentation-Style-Guidelines/#images",
            "text": "Images should not be wider than 675 pixels if they are going to be embedded into a topic.\nWider images are acceptable as targets of a link from a page.\nThe link to such a wide image should itself be a 675 pixel-wide thumbnail of the image.\nWhen including a large image, do it as a 675 pixels wide image linking to the high-resolution version.\nImages narrower than 675 pixels should be included with their natural width and should not be enlarged.  Images should be checked into  github , in \na subdirectory of the Attachments directory that has the same name as the topic's markdown file.\nIf the image exists in small and large versions, the small one should be named the same as the full resolution, but prefixed with \"s_\".  The typical markup to include an image is as follows:  ![Caption for my image](../Attachments/Name-Of-Topic/NameOfImage.png)  If the image is a link to a higher resolution, the link and image syntaxes must be combined:  [![Caption](../Attachments/Topic/NameOfImage.png)][img1]\n[img1]: ../Attachments/Topic/NameOfImage.png  Acceptable image formats are PNG, JPG and GIF. Images should be reasonably compressed.\nAvoid JPG for screenshots, and reserve it for photos.",
            "title": "Images"
        },
        {
            "location": "/Documentation/Documentation-Style-Guidelines/#links",
            "text": "References to other topics on this wiki can be made using:  [Text for the link](Topic-Name)  Or:  [Text for the link][ref1]\n[ref1]: Topic-Name  Links to external content can be added using:  [Text for the link](http://somesite/somepage)  Or:  [Text for the link][ref1]\n[ref1]: http://somesite/somepage  If you are using the reference syntax, the references may be grouped at the end of the document, separating the link itself from the reference definition.  Do use links to specific sections of a document where relevant (see the  structure section ).",
            "title": "Links"
        },
        {
            "location": "/Documentation/Documentation-Style-Guidelines/#capitalization",
            "text": "In topic titles and in section headings, use title-style capitalization (as opposed to sentence style).\nWhen referring to UI elements, follow the capitalization style used in the UI elements themselves.",
            "title": "Capitalization"
        },
        {
            "location": "/Documentation/Documentation-Style-Guidelines/#tables",
            "text": "Tables should be built to fit into the standard width of pages on this site.\nThe markup to create a table is a common extension for Markdown:  Header A | Header B | Header C\n-------- | -------- | --------\nCell A.1 | Cell B.1 | Cell C.1\nCell A.2 | Cell B.2 | Cell C.2\nCell A.3 | Cell B.3 | Cell C.3  This markup will create the following table:     Header A  Header B  Header C      Cell A.1  Cell B.1  Cell C.1    Cell A.2  Cell B.2  Cell C.2    Cell A.3  Cell B.3  Cell C.3     For details of table syntax see  Markdown Extra Tables Reference .",
            "title": "Tables"
        },
        {
            "location": "/Documentation/Documentation-Style-Guidelines/#contributing-documentation",
            "text": "The Orchard documentation is managed as Markdown files in  a Git repository hosted on Github .",
            "title": "Contributing Documentation"
        },
        {
            "location": "/Documentation/Documentation-Style-Guidelines/#making-edits-on-existing-topics",
            "text": "In the right sidebar of each topic, you will find a link to the document on Github.",
            "title": "Making Edits On Existing Topics"
        },
        {
            "location": "/Documentation/Documentation-Style-Guidelines/#contributing-larger-changes-and-topics",
            "text": "We recommend the use of  GitHub for Windows \nto clone the documentation locally. This will give you a local copy of the documentation site,\nthat you can run from WebMatrix or Visual Studio.",
            "title": "Contributing Larger Changes And Topics"
        },
        {
            "location": "/Documentation/Contributing-patches/",
            "text": "Orchard CMS uses GitHub for its source code management and issue tracking. You can find the main Orchard CMS repository at:\n\n\n\n\nhttps://github.com/OrchardCMS/Orchard\n\n\n\n\nWe welcome community contributions but please read these guidelines before you start work.\n\n\nFirst step - open an issue or discuss an existing one\n\n\nIf you're new to contributing then you should discuss your plans before you start work. This is especially true if it involves building new features or changing the architecture.\n\n\nDon't know where to start? There are lots of existing bugs which have been reported in the issue tracker.\n\n\nAll of Orchard's planning is done in the GitHub repo's \nissue tracker\n.\n\n\nIf your idea / bug isn't in the issue tracker (don't forget to check the closed issues as well - it might have been fixed in a development branch) then open a new issue to start a discussion with the community.\n\n\nBranches\n\n\nThe repository is split into two main development branches, \n1.9.x\n and \ndev\n. There is also a \nmaster\n branch which represents the latest released stable version of the software. While other features are being worked on you might find some additional branches temporarily created but they are just to test out ideas and they will get merged back into one of the main branches later on.\n\n\nAll the active feature work is being done by the core team in the \n1.9.x\n branch. Whenever a new release is ready, changes get merged from \n1.9.x\n to \nmaster\n. Master is a stable branch and is normally always in a \"green\" state. \n\n\nThe \n1.9.x\n branch is the short-cycle dev branch. This is where features and bug fixes are being worked on for the next point release (for example, the difference between v1.9.1 and v1.9.2).\n\n\nThe \ndev\n branch is the long-cycle dev branch. This is where bigger features are being worked on that won't make it into the next version of Orchard CMS.\n\n\nThere is also a separate repository called \nBrochard\n which is the implementation of Orchard CMS in Asp.Net vNext (also known as DNX).\n\n\nMilestones and labels\n\n\nNew issues are opened all the time. After an issue is submitted the core team members will review it. When it's acccepted as a valid task to complete it will be given a milestone and perhaps some labels. The milestone indicates which branch any pull requests for the issue should be sent to.\n\n\nYou might also see some additional tags like a severity level or further categorization. These labels can help you prioritise which issues you should give your attention first based on their urgency or your speciality as a developer.\n\n\n\n\nIn the screenshot above you can see that the bug has been tagged with the labels \nbug\n, \nhigh\n and \nLayouts\n. This means it has been confirmed as a bug, it is a high priority fix and it is part of the Orchard.Layouts module. Below that you can see the milestone icon with the word \ndev\n next to it. This means that if you do work on it you should work from the \ndev\n branch.\n\n\nHow to fork and work with the repository\n\n\nThe easiest way to get started with GitHub is to use \nGithub Desktop\n. This software has a built-in tutorial which will teach you the basics when you first install it.\n\n\nYou can also create a fork via the GitHub website. GitHub have provided a guide explaining \nhow to fork a repo\n.\n\n\nGitHub is powered by \nGit\n. If you're an advanced user with experience of using Git on the command line then you can interact with GitHub hosted repositories as you normally would. If you're interested in learning then GitHub have their own \ninteractive code school\n and the entire \nPro Git book is available\n has also been made available by it's authors and is endorsed by the official Git website.\n\n\nWorking on an issue\n\n\nBy now you should have agreed with the community which issue you're working on, you should know which branch you're targeting and you should have created your own fork.\n\n\nWhen working on an issue you should create a branch in your local clone per-issue. This branch isolates your changes from the \nmaster\n branch. You can merge this new branch back in to the main codebase later on with a pull request.\n\n\nPlease work on only one issue per branch / pull request.\n\n\nPlease follow the \ncode conventions document\n when writing new code for Orchard.\n\n\nOnce you've made your changes you need to publish your local commits back to the remote fork in your GitHub account. The basic Git concept behind this process is to \ncommit\n your local changes and then \npush\n the branch to your remote copy on GitHub.\n\n\nThis can be done in many ways:\n\n\n\n\nUsing GitHub Desktop\n\n\nFrom within Microsoft WebMatrix 3\n\n\nFrom within Microsoft Visual Studio\n\n\nUsing Git Extensions\n\n\nUsing Git on the command line\n\n\n\n\nIf you're just starting out with Git then you should use GitHub Desktop to make this process simple for yourself.\n\n\nOnce this is done, your changes are on GitHub, but not yet in the project's official repository. To get it there, you'll need to ask us to pull the changes in. In order to do that, send us a pull request.\n\n\nSubmitting a pull request\n\n\nWhen you have finished your work on the issue you can create a pull request. A pull request opens a dialog with the community to review your work and provide feedback.\n\n\nCreating a pull request is best done from within the GitHub.com website. You can create pull requests using other techniques but using the GitHub.com has a clear interface so that you can make sure you are creating a pull request with the correct branch and you can have one final check of the files before you initiate it.\n\n\nNavigate to your forked copy of the OrchardDocs repo. Its url will be \nhttps://github.com/{YourUserName}/OrchardDoc\n\n\nYou should see a create pull request bar along the top of your repos page:\n\n\n\n\nThis is a shortcut that GitHub have implemented to help you quickly create a pull request from your most recent \npush\n. If this isn't the branch you want to create the pull request you want by following these steps:\n\n\n\n\n\n\nVisit your fork of OrchardDocs in your GitHub account (don't forget, it can be found at \nhttps://github.com/{YourUserName}/OrchardDoc\n)\n\n\n\n\n\n\nClick \nPull Requests\n from down the right hand side of the site\n\n\n\n\n\n\n\n\nClick the \nNew pull request\n button in the top right:\n\n\n\n\n\n\n\n\nYou will be taken to the Comparing changes screen. In the main box it will probably say there isn't anything to compare:\n\n\n\n\nThe \nbase fork\n is the place you are sending the changes to (the official Orchard repository). The \nhead fork\n is your fork with the new files.\n\n\n\n\n\n\nNext to the \nhead fork\n select the drop down box that starts with the label \ncompare:\n\n\n\n\n\n\n\n\nSelect the branch you want to merge:\n\n\n\n\nIn this screenshot the \nupgrade-contributing-patches\n branch is being selected.\n\n\n\n\n\n\nThe page will refresh and you will see all the files that are going to be updated by your pull request:\n\n\n\n\nReview the files that are going to be changed. This is your last chance to double check everything is correct. Check that you haven't included any passwords or other sensitive data (If you have you will need to change the passwords as they are already public on your GitHub account).\n\n\nWhen you're happy with the pull request click the green \nCreate pull request\n button near the top of the Comparing changes page.\n\n\n\n\n\n\nOn this final screen you can give your pull request a title and a description:\n\n\n\n\nYou should make your description as detailed as possible. You can use markdown to add headings and other formatting. You can also copy/paste screenshots into the description and it will automatically upload and insert them for you.\n\n\nIMPORTANT\n GitHub supports automatically closing issues via pull requests. If you are working on issue #1234 then be sure to add the phrase \nfixes #1234\n somewhere in your description. When the pull request is accepted it will automatically close the corresponding issue. You can actually use \nseveral different keywords\n depending on whichever you prefer to achieve this same effect. \n\n\n\n\n\n\nThe final step is to click the \nCreate pull request\n below your description.\n\n\n\n\n\n\nYour pull request has now been created and will be reviewed by the community and the core team.\n\n\n\n\nDon't forget!\n Your pull request is a living thing. If you make more commits to your branch and push them to your GitHub account they will be automatically included in the pull request.\n\n\nThis is useful if somebody gives you feedback suggesting changes but it also means that you shouldn't delete the branch until after the pull request has been accepted or declined.\n\n\n\n\nYou will get a notification when there is any activity on your pull request. When you are on GitHub.com you will see your notification icon light up with a little blue dot:\n\n\n\n\nUnless you have turned email notifications off, you will also receive an email from GitHub.\n\n\nYou can check on your pull request at any time by navigating to it through one of several ways in GitHub:\n\n\n\n\n\n\nClick the Pull requests menu option in the top of the GitHub.com website:\n\n\n\n\n\n\n\n\nNavigate to the \nOrchardDocs\n repo and click Pull requests down the side menu:\n\n\n\n\n\n\n\n\nPull request review process\n\n\nThe Orchard development team meets every week to review pull request and triage issues. During this meeting the team will decide if the pull request fulfills the prerequisites or comment if any improvements should be applied.\n\n\nIf an agreement is reached to accept the pull request then it will be marked as so and someone with commit rights on the main repository will accept the pull request and merge your work into the Orchard CMS repository. This process might involve altering the history to remove any feedback loop changes which don't add anything to the work done.\n\n\nIf more work is requested you make the changes on your local branch, \ncommit\n them, \npush\n the branch to your GitHub account they will be automatically included in the pull request for further review.\n\n\nWhat to do once your pull request has been reviewed\n\n\nOnce your contribution has been accepted and integrated into the official Orchard CMS repository you can now delete the branch. GitHub will let you know when this is safe to do. You will see a \nDelete branch\n button at the bottom of the pull request page:\n\n\n\n\nIf your feature was accepted please consider contributing some documentation to the \nOrchardDoc\n repo. Just as this article has helped you out today, by documenting your new feature you can help other Orchard users to get the most out of Orchard CMS. You can read more about \nthe documentation process here\n.\n\n\nThe fork that you made can be re-used for as many contributions as you like. Just remember to keep making a new branch each time you start work on a new issue. There is one thing to consider though: While you've been working on this there has probably been other commits and pull requests on whichever branch you're working on. You can bring your branch back in line with the main repo by \nsyncing your fork\n.\n\n\nWhat to do if your pull request is not accepted\n\n\nSometimes pull requests don't get accepted. Maybe the feature isn't classed as complete enough, maybe you have a different vision for the feature compared to the core team. Whatever the reason, if you find yourself in this position then don't worry. \n\n\nConsider implementing your new idea as an Orchard Module instead. There are plenty of tutorials on this website and around the web which will teach you how to do this. With the way Orchard has been built you can extend and replace almost every part of it. \n\n\nWhen you have extracted your code into a module you can submit it to the \nOrchard Gallery\n for other users to download and use in their sites.",
            "title": "Contributing Patches"
        },
        {
            "location": "/Documentation/Contributing-patches/#first-step-open-an-issue-or-discuss-an-existing-one",
            "text": "If you're new to contributing then you should discuss your plans before you start work. This is especially true if it involves building new features or changing the architecture.  Don't know where to start? There are lots of existing bugs which have been reported in the issue tracker.  All of Orchard's planning is done in the GitHub repo's  issue tracker .  If your idea / bug isn't in the issue tracker (don't forget to check the closed issues as well - it might have been fixed in a development branch) then open a new issue to start a discussion with the community.",
            "title": "First step - open an issue or discuss an existing one"
        },
        {
            "location": "/Documentation/Contributing-patches/#branches",
            "text": "The repository is split into two main development branches,  1.9.x  and  dev . There is also a  master  branch which represents the latest released stable version of the software. While other features are being worked on you might find some additional branches temporarily created but they are just to test out ideas and they will get merged back into one of the main branches later on.  All the active feature work is being done by the core team in the  1.9.x  branch. Whenever a new release is ready, changes get merged from  1.9.x  to  master . Master is a stable branch and is normally always in a \"green\" state.   The  1.9.x  branch is the short-cycle dev branch. This is where features and bug fixes are being worked on for the next point release (for example, the difference between v1.9.1 and v1.9.2).  The  dev  branch is the long-cycle dev branch. This is where bigger features are being worked on that won't make it into the next version of Orchard CMS.  There is also a separate repository called  Brochard  which is the implementation of Orchard CMS in Asp.Net vNext (also known as DNX).",
            "title": "Branches"
        },
        {
            "location": "/Documentation/Contributing-patches/#milestones-and-labels",
            "text": "New issues are opened all the time. After an issue is submitted the core team members will review it. When it's acccepted as a valid task to complete it will be given a milestone and perhaps some labels. The milestone indicates which branch any pull requests for the issue should be sent to.  You might also see some additional tags like a severity level or further categorization. These labels can help you prioritise which issues you should give your attention first based on their urgency or your speciality as a developer.   In the screenshot above you can see that the bug has been tagged with the labels  bug ,  high  and  Layouts . This means it has been confirmed as a bug, it is a high priority fix and it is part of the Orchard.Layouts module. Below that you can see the milestone icon with the word  dev  next to it. This means that if you do work on it you should work from the  dev  branch.",
            "title": "Milestones and labels"
        },
        {
            "location": "/Documentation/Contributing-patches/#how-to-fork-and-work-with-the-repository",
            "text": "The easiest way to get started with GitHub is to use  Github Desktop . This software has a built-in tutorial which will teach you the basics when you first install it.  You can also create a fork via the GitHub website. GitHub have provided a guide explaining  how to fork a repo .  GitHub is powered by  Git . If you're an advanced user with experience of using Git on the command line then you can interact with GitHub hosted repositories as you normally would. If you're interested in learning then GitHub have their own  interactive code school  and the entire  Pro Git book is available  has also been made available by it's authors and is endorsed by the official Git website.",
            "title": "How to fork and work with the repository"
        },
        {
            "location": "/Documentation/Contributing-patches/#working-on-an-issue",
            "text": "By now you should have agreed with the community which issue you're working on, you should know which branch you're targeting and you should have created your own fork.  When working on an issue you should create a branch in your local clone per-issue. This branch isolates your changes from the  master  branch. You can merge this new branch back in to the main codebase later on with a pull request.  Please work on only one issue per branch / pull request.  Please follow the  code conventions document  when writing new code for Orchard.  Once you've made your changes you need to publish your local commits back to the remote fork in your GitHub account. The basic Git concept behind this process is to  commit  your local changes and then  push  the branch to your remote copy on GitHub.  This can be done in many ways:   Using GitHub Desktop  From within Microsoft WebMatrix 3  From within Microsoft Visual Studio  Using Git Extensions  Using Git on the command line   If you're just starting out with Git then you should use GitHub Desktop to make this process simple for yourself.  Once this is done, your changes are on GitHub, but not yet in the project's official repository. To get it there, you'll need to ask us to pull the changes in. In order to do that, send us a pull request.",
            "title": "Working on an issue"
        },
        {
            "location": "/Documentation/Contributing-patches/#submitting-a-pull-request",
            "text": "When you have finished your work on the issue you can create a pull request. A pull request opens a dialog with the community to review your work and provide feedback.  Creating a pull request is best done from within the GitHub.com website. You can create pull requests using other techniques but using the GitHub.com has a clear interface so that you can make sure you are creating a pull request with the correct branch and you can have one final check of the files before you initiate it.  Navigate to your forked copy of the OrchardDocs repo. Its url will be  https://github.com/{YourUserName}/OrchardDoc  You should see a create pull request bar along the top of your repos page:   This is a shortcut that GitHub have implemented to help you quickly create a pull request from your most recent  push . If this isn't the branch you want to create the pull request you want by following these steps:    Visit your fork of OrchardDocs in your GitHub account (don't forget, it can be found at  https://github.com/{YourUserName}/OrchardDoc )    Click  Pull Requests  from down the right hand side of the site     Click the  New pull request  button in the top right:     You will be taken to the Comparing changes screen. In the main box it will probably say there isn't anything to compare:   The  base fork  is the place you are sending the changes to (the official Orchard repository). The  head fork  is your fork with the new files.    Next to the  head fork  select the drop down box that starts with the label  compare:     Select the branch you want to merge:   In this screenshot the  upgrade-contributing-patches  branch is being selected.    The page will refresh and you will see all the files that are going to be updated by your pull request:   Review the files that are going to be changed. This is your last chance to double check everything is correct. Check that you haven't included any passwords or other sensitive data (If you have you will need to change the passwords as they are already public on your GitHub account).  When you're happy with the pull request click the green  Create pull request  button near the top of the Comparing changes page.    On this final screen you can give your pull request a title and a description:   You should make your description as detailed as possible. You can use markdown to add headings and other formatting. You can also copy/paste screenshots into the description and it will automatically upload and insert them for you.  IMPORTANT  GitHub supports automatically closing issues via pull requests. If you are working on issue #1234 then be sure to add the phrase  fixes #1234  somewhere in your description. When the pull request is accepted it will automatically close the corresponding issue. You can actually use  several different keywords  depending on whichever you prefer to achieve this same effect.     The final step is to click the  Create pull request  below your description.    Your pull request has now been created and will be reviewed by the community and the core team.   Don't forget!  Your pull request is a living thing. If you make more commits to your branch and push them to your GitHub account they will be automatically included in the pull request.  This is useful if somebody gives you feedback suggesting changes but it also means that you shouldn't delete the branch until after the pull request has been accepted or declined.   You will get a notification when there is any activity on your pull request. When you are on GitHub.com you will see your notification icon light up with a little blue dot:   Unless you have turned email notifications off, you will also receive an email from GitHub.  You can check on your pull request at any time by navigating to it through one of several ways in GitHub:    Click the Pull requests menu option in the top of the GitHub.com website:     Navigate to the  OrchardDocs  repo and click Pull requests down the side menu:",
            "title": "Submitting a pull request"
        },
        {
            "location": "/Documentation/Contributing-patches/#pull-request-review-process",
            "text": "The Orchard development team meets every week to review pull request and triage issues. During this meeting the team will decide if the pull request fulfills the prerequisites or comment if any improvements should be applied.  If an agreement is reached to accept the pull request then it will be marked as so and someone with commit rights on the main repository will accept the pull request and merge your work into the Orchard CMS repository. This process might involve altering the history to remove any feedback loop changes which don't add anything to the work done.  If more work is requested you make the changes on your local branch,  commit  them,  push  the branch to your GitHub account they will be automatically included in the pull request for further review.",
            "title": "Pull request review process"
        },
        {
            "location": "/Documentation/Contributing-patches/#what-to-do-once-your-pull-request-has-been-reviewed",
            "text": "Once your contribution has been accepted and integrated into the official Orchard CMS repository you can now delete the branch. GitHub will let you know when this is safe to do. You will see a  Delete branch  button at the bottom of the pull request page:   If your feature was accepted please consider contributing some documentation to the  OrchardDoc  repo. Just as this article has helped you out today, by documenting your new feature you can help other Orchard users to get the most out of Orchard CMS. You can read more about  the documentation process here .  The fork that you made can be re-used for as many contributions as you like. Just remember to keep making a new branch each time you start work on a new issue. There is one thing to consider though: While you've been working on this there has probably been other commits and pull requests on whichever branch you're working on. You can bring your branch back in line with the main repo by  syncing your fork .",
            "title": "What to do once your pull request has been reviewed"
        },
        {
            "location": "/Documentation/Contributing-patches/#what-to-do-if-your-pull-request-is-not-accepted",
            "text": "Sometimes pull requests don't get accepted. Maybe the feature isn't classed as complete enough, maybe you have a different vision for the feature compared to the core team. Whatever the reason, if you find yourself in this position then don't worry.   Consider implementing your new idea as an Orchard Module instead. There are plenty of tutorials on this website and around the web which will teach you how to do this. With the way Orchard has been built you can extend and replace almost every part of it.   When you have extracted your code into a module you can submit it to the  Orchard Gallery  for other users to download and use in their sites.",
            "title": "What to do if your pull request is not accepted"
        },
        {
            "location": "/Documentation/Orchard-1-10-1.Release-Notes/",
            "text": "DRAFT\n\n\nBuild: 1.10.1\n\n\nPublished: 4/26/2016\n\n\nThis release contains bug fixes and new features.\n\n\nHow to Install Orchard\n\n\nTo install Orchard using WebPI, follow these instructions:\n\nhttp://docs.orchardproject.net/Documentation/Installing-Orchard\n.\nWeb PI will detect your hardware environment and install the application.\n\n\nAlternatively, to install the release manually, look for the release files on \nhttps://github.com/OrchardCMS/Orchard/releases\n\n\nhttp://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file\n\n\nThe zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-machine-key\n\nor you may experience frequent disconnections.\n\n\nWhat file to download?\n\n\nIf you just want to use Orchard and don't care about the source code, Orchard.Web.1.10.1.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.\n\n\nIf you want to take a look at the source code or want to be able to build the application in Visual Studio,\nhttps://github.com/OrchardCMS/Orchard/archive/1.10.1.zip is fine.\n\n\nIf you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here:\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment\n\n\nBranches are described here: \nhttp://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?\n\n\nWho should use this software?\n\n\nThis software is in version 1.10.1. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.\n\n\nYou are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.\n\n\nBreaking Changes\n\n\nThere are no known breaking changes as part of this release \ncompared to 1.10\n.\n\n\nWhat's new?\n\n\nOrchard 1.10.1 fixes bugs and introduces the following notable changes and features:\n\n\n\n\n[Feature] Loading tenants retries configuration\n\n\n[Feature] Double clicking submit buttons is prevented by JavaScript\n\n\n[Feature] Configurable Snippets\n\n\n[Improvement] Using MarkdownSharp Nuget package\n\n\n[Improvement] AliasUpdater was refreshed twice\n\n\n[Improvement] AssemblyInfo files are correctly built now\n\n\n[Bug] Unable to generate routes for Web APIs\n\n\n[Bug] jQuery and other resources were incorrect\n\n\n[Bug] Azure App Service crash when an exception is thrown from a [Shape] method\n\n\n[Bug] Layout editing not working in Edge\n\n\n[Bug] Azure Media Storage would not recognize its own urls\n\n\n\n\nThe full list of fixed bugs for this release can be found here:\n\n\n\n\nBugs fixed in 1.10.1\n.\n\n\n\n\nHow to upgrade from a previous version\n\n\nYou can find migration instructions here: \nhttp://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard\n.",
            "title": "Orchard 1.10.1"
        },
        {
            "location": "/Documentation/Orchard-1-10-1.Release-Notes/#draft",
            "text": "Build: 1.10.1  Published: 4/26/2016  This release contains bug fixes and new features.",
            "title": "DRAFT"
        },
        {
            "location": "/Documentation/Orchard-1-10-1.Release-Notes/#how-to-install-orchard",
            "text": "To install Orchard using WebPI, follow these instructions: http://docs.orchardproject.net/Documentation/Installing-Orchard .\nWeb PI will detect your hardware environment and install the application.  Alternatively, to install the release manually, look for the release files on \nhttps://github.com/OrchardCMS/Orchard/releases  http://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file  The zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key http://docs.orchardproject.net/Documentation/Setting-up-a-machine-key \nor you may experience frequent disconnections.",
            "title": "How to Install Orchard"
        },
        {
            "location": "/Documentation/Orchard-1-10-1.Release-Notes/#what-file-to-download",
            "text": "If you just want to use Orchard and don't care about the source code, Orchard.Web.1.10.1.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.  If you want to take a look at the source code or want to be able to build the application in Visual Studio,\nhttps://github.com/OrchardCMS/Orchard/archive/1.10.1.zip is fine.  If you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here: http://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment  Branches are described here:  http://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?",
            "title": "What file to download?"
        },
        {
            "location": "/Documentation/Orchard-1-10-1.Release-Notes/#who-should-use-this-software",
            "text": "This software is in version 1.10.1. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.  You are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.",
            "title": "Who should use this software?"
        },
        {
            "location": "/Documentation/Orchard-1-10-1.Release-Notes/#breaking-changes",
            "text": "There are no known breaking changes as part of this release  compared to 1.10 .",
            "title": "Breaking Changes"
        },
        {
            "location": "/Documentation/Orchard-1-10-1.Release-Notes/#whats-new",
            "text": "Orchard 1.10.1 fixes bugs and introduces the following notable changes and features:   [Feature] Loading tenants retries configuration  [Feature] Double clicking submit buttons is prevented by JavaScript  [Feature] Configurable Snippets  [Improvement] Using MarkdownSharp Nuget package  [Improvement] AliasUpdater was refreshed twice  [Improvement] AssemblyInfo files are correctly built now  [Bug] Unable to generate routes for Web APIs  [Bug] jQuery and other resources were incorrect  [Bug] Azure App Service crash when an exception is thrown from a [Shape] method  [Bug] Layout editing not working in Edge  [Bug] Azure Media Storage would not recognize its own urls   The full list of fixed bugs for this release can be found here:   Bugs fixed in 1.10.1 .",
            "title": "What's new?"
        },
        {
            "location": "/Documentation/Orchard-1-10-1.Release-Notes/#how-to-upgrade-from-a-previous-version",
            "text": "You can find migration instructions here:  http://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard .",
            "title": "How to upgrade from a previous version"
        },
        {
            "location": "/Documentation/Orchard-1-10.Release-Notes/",
            "text": "Published: 3/18/2016\n\n\nHow to Install Orchard\n\n\nTo install Orchard using Web PI, follow these instructions:\n\nhttp://docs.orchardproject.net/Documentation/Installing-Orchard\n.\nWeb PI will detect your hardware environment and install the application.\n\n\nAlternatively, to install the release manually, download the Orchard.Web.1.10.zip file.\n\n\nhttp://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file\n\n\nThe zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-machine-key\n\nor you may experience frequent disconnections.\n\n\nWhat file to download?\n\n\nIf you just want to use Orchard and don't care about the source code, Orchard.Web.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.\n\n\nIf you want to take a look at the source code or want to be able to build the application in Visual Studio,\nOrchard.Sources.1.10.zip is fine.\n\n\nIf you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here:\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment\n\n\nBranches are described here: \nhttp://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?\n\n\nWho should use this software?\n\n\nThis software is in version 1.10. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.\n\n\nYou are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.\n\n\nWhat's new?\n\n\nOrchard 1.10 includes all the changes from version 1.9.3 \nhttp://docs.orchardproject.net/Documentation/Orchard-1-9-3.Release-Notes\n and introduces the following changes and features:\n\n\nFeatures\n\n\n\n\nDefault values for content fields\n\n\nConfigurable locations for Modules and Themes (\nsee this documentation page on how to configure them\n)\n\n\nParameterized snippets\n\n\nOrchard.Resources now contains common assets to be reused across core modules\n\n\nLayer rules have been moved to Orchard.Conditions for reusability\n\n\nOrchard.TaskLease has been deprecated in favor of distributed locks\n\n\nOrchard.jQuery has been deprecated in favor of Orchard.Resources\n\n\nEditor tabs support\n\n\n\n\nImprovements\n\n\n\n\nUse of Nuget packages instead of the /lib folder\n\n\nNew extension methods for migrations\n\n\nUpgraded to .NET 4.5.2\n\n\nRecipes and Import/Export improvements\n\n\nOrchard.exe help command enhancement\n\n\n\n\nBugs\n\n\nBug fixes are listed in the \n1.9.3 release notes\n.\nThe full list of fixed bugs for this release can be found here:\n\n\n\n\nBugs fixed in 1.10\n.\n\n\n\n\nHow to upgrade from a previous version\n\n\nYou can find migration instructions here: \nhttp://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard\n.\n\n\nNo matter what migration path you take, please take the precaution of making a backup of your site and database first.\n\n\nUpgrading from Orchard 1.9 and earlier\n\n\nPlease follow the upgrade instruction from this document: \nhttp://docs.orchardproject.net/Documentation/orchard-1-9.Release-Notes\n\n\nDisabled modules\n\n\nSome modules are not loaded automatically and need to be enabled manually if you are using them:\n- Orchard.Workflows.Timer\n- Orchard.Email.Workflow\n- Orchard.Users.Workflows\n- Orchard.Roles.Workflows\n\n\nThemes & Layouts\n\n\nIf you are using the Orchard.Layouts module you might need to integrate a custom css file to support the grid system.\nLayouts is using some default classes like \nspan-4\n, which was added automatically by the module but could conflict with the ones in other grid frameworks.\nIt's no more added by default. TheThemeMachine is importing it by itself. Most Bootstrap theme should already override the Layout's tagging to incorporate its custom classes.\nIf this file is necessary for your theme you will need to add it back to it:\n\nhttps://github.com/OrchardCMS/Orchard/blob/dev/src/Orchard.Web/Modules/Orchard.Layouts/Styles/default-grid.css\n\n\nDeprected modules\n\n\nIf your modules were using files or resources from Orchard.jQuery you will need to point to the ones defined in Orchard.Resources.\n\n\nIf your modules were using services from Orchard.TaskLease you will need to use \nIDistributedLock\n instead.\n\n\nJetBrains annotations has been removed\n\n\nIf your modules were using some of these attributes you will need to remove them or to \ninclude them\n back into your projects.\n\n\nNuget packages\n\n\nBecause we have moved to using Nuget packages instead of the /lib folder, you will need to point to the same Nuget packages if you were using the /lib folder.\n\n\n@qt1 has created a script to help with the migration to Nuget here: https://github.com/OrchardCMS/Orchard/issues/6529\n\n\nDatabase constraints\n\n\nOrchard 1.10 contains new database contraints to prevent corrupted data. One of them might fail if you already have duplicated content item versions.\n\n\nTo check if you have some you can run this query and delete the duplicated entries.\n\n\nSELECT [Number], [ContentItemRecord_id], COUNT(*) \nFROM [Orchard_Framework_ContentItemVersionRecord]\nGROUP BY [Number], [ContentItemRecord_id]\nHAVING ( COUNT(*) > 1 )\n\n\n\n\nWarning on Workflows localization fixes\n\n\nDue to a fix on how Workflows activity outcomes (e.g. \"Done\") are localized, after upgrading to Orchard 1.10 part of the connections between Workflows activities will get lost on a site that uses a localized (non-English) admin area and you'll have to re-connect activities. How many connections get lost depends on the completeness of the localization package for the Workflows module.\n\n\nThus make sure to take notes of the structure of your workflows \nbefore\n upgrading if your site's admin area is using a culture other than an English one and has a localization package installed. If your site doesn't make use of Workflows, uses and English-speaking culture or doesn't have a localization package installed then it's not affected.\n\n\nWarning on Email Workflows Activities\n\n\nIf you use the Send Email activity in Workflows to send emails you may want to check whether you have the Email Workflows Activities feature enabled. Due to a bug you could use the Send Email activity even if you had the feature disabled, but this was fixed and now you have to enable Email Workflows Activities to be able to send emails.\n\n\nWarning on Dynamic Forms feature relocation\n\n\nThere are two new features in the Dynamic Forms module, Dynamic Forms Validation Activities and Dynamic Forms User Bindings. These contain the C# form submission validator and bindings for \nUserPart\n, respectively. Since these were moved to their own features from the root feature (to avoid the root feature depend on the Orchard.Scripting.CSharp and Orchard.Users modules) if you make use of these services you have to enable the new features.\n\n\n.NET 4.5.2 breaks module compilation\n\n\nBecause the Orchard.Framework project now targets .NET 4.5.2, all modules that are downloaded from the gallery during development will need to be retargetd to .NET 4.5.2 too.\nNot doing this will prevent the module from compiling and appearing in the modules list.\n\n\nContributors\n\n\nThis software would not exist without the community. In particular, for this release,\nwe should all be grateful to the following people who contributed patches and features:\n\n\n\n\nAlex Petryakov (\nneTp9c\n)\n\n\nAlexey Ryazhskikh (\nmusukvl\n)\n\n\nArman Forghani (\narmanforghani\n)\n\n\nBaruch Nissenbaum (\nqt1\n)\n\n\nBenedek Farkas (\nLombiq\n)\n\n\nBertrand Le Roy   (\nbleroy\n)\n\n\nChris Payne (\npaynecrl97\n)\n\n\nConnor Smallman (\nconnorsmallman\n)\n\n\nDaniel Lackenby (\nDanielLackenbyBede\n)\n\n\nDaniel Stolt (\nDanielStolt\n)\n\n\nGustavo Tandeciarz (\ndcinzona\n)\n\n\nHannan Azam (\nhannan-azam\n)\n\n\nJamie Philips (\nphillipsjs\n)\n\n\nJean-Thierry K\u00e9chichian (\njtkech\n)\n\n\nJerome van den Heuvel (\nJwheuvel\n)\n\n\nKatsuyuki Ohmuro (\nharmony7\n)\n\n\nKexy Biscuit (\nKexyBiscuit\n)\n\n\nLevent Esen (\nleventesen\n)\n\n\nMarek Dzikiewicz (\nMpDzik\n)\n\n\nMatthew Harris (\nrtpHarry\n)\n\n\nMatt Varblow (\nmvarblow\n)\n\n\nMohammed Kinawy (\nmkinawy\n)\n\n\nNicholas Mayne (\nJetski5822\n)\n\n\nPaul Devenney (\nPaulDevenney\n)\n\n\nPiotr Szmyd (\npszmyd\n)\n\n\nRob King (\ngcsuk\n)\n\n\nRyan Drew Burnett (\nryandrewburnett\n)\n\n\nSebastien Ros (\nsebastienros\n)\n\n\nSipke Schoorstra (\nsfmskywalker\n)\n\n\nSzymon Seliga (\nSzymonSel\n)\n\n\nThierry Fleury (\nTFleury\n)\n\n\nTitus Anderson (\nflew2bits\n)\n\n\nWestley Harris (\nwharri220\n)\n\n\nZhi Sun (\nsunz7\n)\n\n\nZolt\u00e1n Leh\u00f3czky (\nLombiq\n)",
            "title": "Orchard 1.10"
        },
        {
            "location": "/Documentation/Orchard-1-10.Release-Notes/#how-to-install-orchard",
            "text": "To install Orchard using Web PI, follow these instructions: http://docs.orchardproject.net/Documentation/Installing-Orchard .\nWeb PI will detect your hardware environment and install the application.  Alternatively, to install the release manually, download the Orchard.Web.1.10.zip file.  http://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file  The zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key http://docs.orchardproject.net/Documentation/Setting-up-a-machine-key \nor you may experience frequent disconnections.",
            "title": "How to Install Orchard"
        },
        {
            "location": "/Documentation/Orchard-1-10.Release-Notes/#what-file-to-download",
            "text": "If you just want to use Orchard and don't care about the source code, Orchard.Web.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.  If you want to take a look at the source code or want to be able to build the application in Visual Studio,\nOrchard.Sources.1.10.zip is fine.  If you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here: http://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment  Branches are described here:  http://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?",
            "title": "What file to download?"
        },
        {
            "location": "/Documentation/Orchard-1-10.Release-Notes/#who-should-use-this-software",
            "text": "This software is in version 1.10. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.  You are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.",
            "title": "Who should use this software?"
        },
        {
            "location": "/Documentation/Orchard-1-10.Release-Notes/#whats-new",
            "text": "Orchard 1.10 includes all the changes from version 1.9.3  http://docs.orchardproject.net/Documentation/Orchard-1-9-3.Release-Notes  and introduces the following changes and features:",
            "title": "What's new?"
        },
        {
            "location": "/Documentation/Orchard-1-10.Release-Notes/#features",
            "text": "Default values for content fields  Configurable locations for Modules and Themes ( see this documentation page on how to configure them )  Parameterized snippets  Orchard.Resources now contains common assets to be reused across core modules  Layer rules have been moved to Orchard.Conditions for reusability  Orchard.TaskLease has been deprecated in favor of distributed locks  Orchard.jQuery has been deprecated in favor of Orchard.Resources  Editor tabs support",
            "title": "Features"
        },
        {
            "location": "/Documentation/Orchard-1-10.Release-Notes/#improvements",
            "text": "Use of Nuget packages instead of the /lib folder  New extension methods for migrations  Upgraded to .NET 4.5.2  Recipes and Import/Export improvements  Orchard.exe help command enhancement",
            "title": "Improvements"
        },
        {
            "location": "/Documentation/Orchard-1-10.Release-Notes/#bugs",
            "text": "Bug fixes are listed in the  1.9.3 release notes .\nThe full list of fixed bugs for this release can be found here:   Bugs fixed in 1.10 .",
            "title": "Bugs"
        },
        {
            "location": "/Documentation/Orchard-1-10.Release-Notes/#how-to-upgrade-from-a-previous-version",
            "text": "You can find migration instructions here:  http://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard .  No matter what migration path you take, please take the precaution of making a backup of your site and database first.",
            "title": "How to upgrade from a previous version"
        },
        {
            "location": "/Documentation/Orchard-1-10.Release-Notes/#upgrading-from-orchard-19-and-earlier",
            "text": "Please follow the upgrade instruction from this document:  http://docs.orchardproject.net/Documentation/orchard-1-9.Release-Notes",
            "title": "Upgrading from Orchard 1.9 and earlier"
        },
        {
            "location": "/Documentation/Orchard-1-10.Release-Notes/#disabled-modules",
            "text": "Some modules are not loaded automatically and need to be enabled manually if you are using them:\n- Orchard.Workflows.Timer\n- Orchard.Email.Workflow\n- Orchard.Users.Workflows\n- Orchard.Roles.Workflows",
            "title": "Disabled modules"
        },
        {
            "location": "/Documentation/Orchard-1-10.Release-Notes/#themes-layouts",
            "text": "If you are using the Orchard.Layouts module you might need to integrate a custom css file to support the grid system.\nLayouts is using some default classes like  span-4 , which was added automatically by the module but could conflict with the ones in other grid frameworks.\nIt's no more added by default. TheThemeMachine is importing it by itself. Most Bootstrap theme should already override the Layout's tagging to incorporate its custom classes.\nIf this file is necessary for your theme you will need to add it back to it: https://github.com/OrchardCMS/Orchard/blob/dev/src/Orchard.Web/Modules/Orchard.Layouts/Styles/default-grid.css",
            "title": "Themes &amp; Layouts"
        },
        {
            "location": "/Documentation/Orchard-1-10.Release-Notes/#deprected-modules",
            "text": "If your modules were using files or resources from Orchard.jQuery you will need to point to the ones defined in Orchard.Resources.  If your modules were using services from Orchard.TaskLease you will need to use  IDistributedLock  instead.",
            "title": "Deprected modules"
        },
        {
            "location": "/Documentation/Orchard-1-10.Release-Notes/#jetbrains-annotations-has-been-removed",
            "text": "If your modules were using some of these attributes you will need to remove them or to  include them  back into your projects.",
            "title": "JetBrains annotations has been removed"
        },
        {
            "location": "/Documentation/Orchard-1-10.Release-Notes/#nuget-packages",
            "text": "Because we have moved to using Nuget packages instead of the /lib folder, you will need to point to the same Nuget packages if you were using the /lib folder.  @qt1 has created a script to help with the migration to Nuget here: https://github.com/OrchardCMS/Orchard/issues/6529",
            "title": "Nuget packages"
        },
        {
            "location": "/Documentation/Orchard-1-10.Release-Notes/#database-constraints",
            "text": "Orchard 1.10 contains new database contraints to prevent corrupted data. One of them might fail if you already have duplicated content item versions.  To check if you have some you can run this query and delete the duplicated entries.  SELECT [Number], [ContentItemRecord_id], COUNT(*) \nFROM [Orchard_Framework_ContentItemVersionRecord]\nGROUP BY [Number], [ContentItemRecord_id]\nHAVING ( COUNT(*) > 1 )",
            "title": "Database constraints"
        },
        {
            "location": "/Documentation/Orchard-1-10.Release-Notes/#warning-on-workflows-localization-fixes",
            "text": "Due to a fix on how Workflows activity outcomes (e.g. \"Done\") are localized, after upgrading to Orchard 1.10 part of the connections between Workflows activities will get lost on a site that uses a localized (non-English) admin area and you'll have to re-connect activities. How many connections get lost depends on the completeness of the localization package for the Workflows module.  Thus make sure to take notes of the structure of your workflows  before  upgrading if your site's admin area is using a culture other than an English one and has a localization package installed. If your site doesn't make use of Workflows, uses and English-speaking culture or doesn't have a localization package installed then it's not affected.",
            "title": "Warning on Workflows localization fixes"
        },
        {
            "location": "/Documentation/Orchard-1-10.Release-Notes/#warning-on-email-workflows-activities",
            "text": "If you use the Send Email activity in Workflows to send emails you may want to check whether you have the Email Workflows Activities feature enabled. Due to a bug you could use the Send Email activity even if you had the feature disabled, but this was fixed and now you have to enable Email Workflows Activities to be able to send emails.",
            "title": "Warning on Email Workflows Activities"
        },
        {
            "location": "/Documentation/Orchard-1-10.Release-Notes/#warning-on-dynamic-forms-feature-relocation",
            "text": "There are two new features in the Dynamic Forms module, Dynamic Forms Validation Activities and Dynamic Forms User Bindings. These contain the C# form submission validator and bindings for  UserPart , respectively. Since these were moved to their own features from the root feature (to avoid the root feature depend on the Orchard.Scripting.CSharp and Orchard.Users modules) if you make use of these services you have to enable the new features.",
            "title": "Warning on Dynamic Forms feature relocation"
        },
        {
            "location": "/Documentation/Orchard-1-10.Release-Notes/#net-452-breaks-module-compilation",
            "text": "Because the Orchard.Framework project now targets .NET 4.5.2, all modules that are downloaded from the gallery during development will need to be retargetd to .NET 4.5.2 too.\nNot doing this will prevent the module from compiling and appearing in the modules list.",
            "title": ".NET 4.5.2 breaks module compilation"
        },
        {
            "location": "/Documentation/Orchard-1-10.Release-Notes/#contributors",
            "text": "This software would not exist without the community. In particular, for this release,\nwe should all be grateful to the following people who contributed patches and features:   Alex Petryakov ( neTp9c )  Alexey Ryazhskikh ( musukvl )  Arman Forghani ( armanforghani )  Baruch Nissenbaum ( qt1 )  Benedek Farkas ( Lombiq )  Bertrand Le Roy   ( bleroy )  Chris Payne ( paynecrl97 )  Connor Smallman ( connorsmallman )  Daniel Lackenby ( DanielLackenbyBede )  Daniel Stolt ( DanielStolt )  Gustavo Tandeciarz ( dcinzona )  Hannan Azam ( hannan-azam )  Jamie Philips ( phillipsjs )  Jean-Thierry K\u00e9chichian ( jtkech )  Jerome van den Heuvel ( Jwheuvel )  Katsuyuki Ohmuro ( harmony7 )  Kexy Biscuit ( KexyBiscuit )  Levent Esen ( leventesen )  Marek Dzikiewicz ( MpDzik )  Matthew Harris ( rtpHarry )  Matt Varblow ( mvarblow )  Mohammed Kinawy ( mkinawy )  Nicholas Mayne ( Jetski5822 )  Paul Devenney ( PaulDevenney )  Piotr Szmyd ( pszmyd )  Rob King ( gcsuk )  Ryan Drew Burnett ( ryandrewburnett )  Sebastien Ros ( sebastienros )  Sipke Schoorstra ( sfmskywalker )  Szymon Seliga ( SzymonSel )  Thierry Fleury ( TFleury )  Titus Anderson ( flew2bits )  Westley Harris ( wharri220 )  Zhi Sun ( sunz7 )  Zolt\u00e1n Leh\u00f3czky ( Lombiq )",
            "title": "Contributors"
        },
        {
            "location": "/Documentation/Orchard-1-9-3.Release-Notes/",
            "text": "Published: 2/1/2016\n\n\nThis release contains bug fixes and new features.\n\n\nHow to Install Orchard\n\n\nTo install Orchard using WebPI, follow these instructions:\n\nhttp://docs.orchardproject.net/Documentation/Installing-Orchard\n.\nWeb PI will detect your hardware environment and install the application.\n\n\nAlternatively, to install the release manually, look for the release files on \nhttps://github.com/OrchardCMS/Orchard/releases\n\n\nhttp://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file\n\n\nThe zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-machine-key\n\nor you may experience frequent disconnections.\n\n\nWhat file to download?\n\n\nIf you just want to use Orchard and don't care about the source code, Orchard.Web.1.9.3.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.\n\n\nIf you want to take a look at the source code or want to be able to build the application in Visual Studio,\nhttps://github.com/OrchardCMS/Orchard/archive/1.9.3.zip is fine.\n\n\nIf you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here:\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment\n\n\nBranches are described here: \nhttp://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?\n\n\nWho should use this software?\n\n\nThis software is in version 1.9.3. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.\n\n\nYou are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.\n\n\nBreaking Change\n\n\nThere was no known breaking changes in this release. \n\n\nWhat's new?\n\n\nOrchard 1.9.3 fixes bugs and introduces the following changes and features:\n\n\nFeatures\n\n\n\n\nNew Url Field dynamic form element\n\n\nContent property on a Content Item to return a dynamic object\n\n\nDefault gallery feed points to the new Gallery\n\n\n\n\nImprovements\n\n\n\n\nMoved the select button up in the Media Picker dialog \n\n\nAdded UserLogInFailedActivity \n\n\nSupport of long running commands\n\n\n\n\nBugs\n\n\n\n\nRemoved size limit from cached items in Database Output Caching \n\n\nEllipsize can split an HTML entity\n\n\nWidgets with dashes (-) can't have alternates\n\n\nNavigationQueryMenuItem and BlogArchives widgets can't be exported\n\n\n\n\nThe full list of fixed bugs for this release can be found here:\n\n\n\n\nBugs fixed in 1.9.3\n.\n\n\n\n\nHow to upgrade from a previous version\n\n\nYou can find migration instructions here: \nhttp://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard\n.",
            "title": "Orchard 1.9.3"
        },
        {
            "location": "/Documentation/Orchard-1-9-3.Release-Notes/#how-to-install-orchard",
            "text": "To install Orchard using WebPI, follow these instructions: http://docs.orchardproject.net/Documentation/Installing-Orchard .\nWeb PI will detect your hardware environment and install the application.  Alternatively, to install the release manually, look for the release files on \nhttps://github.com/OrchardCMS/Orchard/releases  http://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file  The zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key http://docs.orchardproject.net/Documentation/Setting-up-a-machine-key \nor you may experience frequent disconnections.",
            "title": "How to Install Orchard"
        },
        {
            "location": "/Documentation/Orchard-1-9-3.Release-Notes/#what-file-to-download",
            "text": "If you just want to use Orchard and don't care about the source code, Orchard.Web.1.9.3.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.  If you want to take a look at the source code or want to be able to build the application in Visual Studio,\nhttps://github.com/OrchardCMS/Orchard/archive/1.9.3.zip is fine.  If you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here: http://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment  Branches are described here:  http://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?",
            "title": "What file to download?"
        },
        {
            "location": "/Documentation/Orchard-1-9-3.Release-Notes/#who-should-use-this-software",
            "text": "This software is in version 1.9.3. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.  You are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.",
            "title": "Who should use this software?"
        },
        {
            "location": "/Documentation/Orchard-1-9-3.Release-Notes/#breaking-change",
            "text": "There was no known breaking changes in this release.",
            "title": "Breaking Change"
        },
        {
            "location": "/Documentation/Orchard-1-9-3.Release-Notes/#whats-new",
            "text": "Orchard 1.9.3 fixes bugs and introduces the following changes and features:",
            "title": "What's new?"
        },
        {
            "location": "/Documentation/Orchard-1-9-3.Release-Notes/#features",
            "text": "New Url Field dynamic form element  Content property on a Content Item to return a dynamic object  Default gallery feed points to the new Gallery",
            "title": "Features"
        },
        {
            "location": "/Documentation/Orchard-1-9-3.Release-Notes/#improvements",
            "text": "Moved the select button up in the Media Picker dialog   Added UserLogInFailedActivity   Support of long running commands",
            "title": "Improvements"
        },
        {
            "location": "/Documentation/Orchard-1-9-3.Release-Notes/#bugs",
            "text": "Removed size limit from cached items in Database Output Caching   Ellipsize can split an HTML entity  Widgets with dashes (-) can't have alternates  NavigationQueryMenuItem and BlogArchives widgets can't be exported   The full list of fixed bugs for this release can be found here:   Bugs fixed in 1.9.3 .",
            "title": "Bugs"
        },
        {
            "location": "/Documentation/Orchard-1-9-3.Release-Notes/#how-to-upgrade-from-a-previous-version",
            "text": "You can find migration instructions here:  http://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard .",
            "title": "How to upgrade from a previous version"
        },
        {
            "location": "/Documentation/Orchard-1-9-2.Release-Notes/",
            "text": "Published: 10/15/2015\n\n\nThis release contains bug fixes and new features.\n\n\nHow to Install Orchard\n\n\nTo install Orchard using WebPI, follow these instructions:\n\nhttp://docs.orchardproject.net/Documentation/Installing-Orchard\n.\nWeb PI will detect your hardware environment and install the application.\n\n\nAlternatively, to install the release manually, look for the release files on \nhttps://github.com/OrchardCMS/Orchard/releases\n\n\nhttp://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file\n\n\nThe zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-machine-key\n\nor you may experience frequent disconnections.\n\n\nWhat file to download?\n\n\nIf you just want to use Orchard and don't care about the source code, Orchard.Web.1.9.2.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.\n\n\nIf you want to take a look at the source code or want to be able to build the application in Visual Studio,\nhttps://github.com/OrchardCMS/Orchard/archive/1.9.2.zip is fine.\n\n\nIf you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here:\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment\n\n\nBranches are described here: \nhttp://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?\n\n\nWho should use this software?\n\n\nThis software is in version 1.9.2. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.\n\n\nYou are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.\n\n\nBreaking Change\n\n\nWe unintentionally introduced a breaking change with this release. It has to do with the Content Part's \nPlaceable\n property which was originally named \nPlacable\n (which was a typo).\n\n\nIf your site uses Content Part Elements, you will need to perform the following actions \nafter\n updating to 1.9.2:\n\n\n\n\nGo to each Content Part definition that you placed on the layout canvas and enable \nPlaceable\n again.\n\n\n\n\nClick here\n for more information.\n\n\nWhat's new?\n\n\nOrchard 1.9.2 fixes bugs and introduces the following changes and features:\n\n\n\n\n[Feature] New ManageOwnMedia permission to prevent users from modifying media they don't own\n\n\n[Feature] Ability to debug the Cloud Service locally\n\n\n[Feature] Kudu deployment scripts\n\n\n[Feature] Layout management permission\n\n\n[Feature] \"Owned by me\" content filter\n\n\n[Improvement] Support htmlAttributes in \nItemEditLink\n\n\n[Improvement] Layouts doesn't require TinyMCE anymore\n\n\n[Improvement] Assets.json is global, and supports watch\n\n\n[Regression] Removed \"edit inline\" which was not functional\n\n\n[Bug] Too many sql connection opened\n\n\n[Bug] Widget localization throwing exception\n\n\n[Bug] Part settings are resetted when general settings are updated\n\n\n[Bug] Cannot delete spam comment\n\n\n[Bug] Default layout template is not populated automatically\n\n\n[Bug] Double encoding issues across the admin\n\n\n[Bug] Unable to translate content\n\n\n[Bug] Editing workflow recreates activity records\n\n\n[Bug] Processed images are regenerated after every restart\n\n\n\n\nThe full list of fixed bugs for this release can be found here:\n\n\n\n\nBugs fixed in 1.9.2\n.\n\n\n\n\nHow to upgrade from a previous version\n\n\nYou can find migration instructions here: \nhttp://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard\n.",
            "title": "Orchard 1.9.2"
        },
        {
            "location": "/Documentation/Orchard-1-9-2.Release-Notes/#how-to-install-orchard",
            "text": "To install Orchard using WebPI, follow these instructions: http://docs.orchardproject.net/Documentation/Installing-Orchard .\nWeb PI will detect your hardware environment and install the application.  Alternatively, to install the release manually, look for the release files on \nhttps://github.com/OrchardCMS/Orchard/releases  http://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file  The zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key http://docs.orchardproject.net/Documentation/Setting-up-a-machine-key \nor you may experience frequent disconnections.",
            "title": "How to Install Orchard"
        },
        {
            "location": "/Documentation/Orchard-1-9-2.Release-Notes/#what-file-to-download",
            "text": "If you just want to use Orchard and don't care about the source code, Orchard.Web.1.9.2.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.  If you want to take a look at the source code or want to be able to build the application in Visual Studio,\nhttps://github.com/OrchardCMS/Orchard/archive/1.9.2.zip is fine.  If you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here: http://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment  Branches are described here:  http://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?",
            "title": "What file to download?"
        },
        {
            "location": "/Documentation/Orchard-1-9-2.Release-Notes/#who-should-use-this-software",
            "text": "This software is in version 1.9.2. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.  You are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.",
            "title": "Who should use this software?"
        },
        {
            "location": "/Documentation/Orchard-1-9-2.Release-Notes/#breaking-change",
            "text": "We unintentionally introduced a breaking change with this release. It has to do with the Content Part's  Placeable  property which was originally named  Placable  (which was a typo).  If your site uses Content Part Elements, you will need to perform the following actions  after  updating to 1.9.2:   Go to each Content Part definition that you placed on the layout canvas and enable  Placeable  again.   Click here  for more information.",
            "title": "Breaking Change"
        },
        {
            "location": "/Documentation/Orchard-1-9-2.Release-Notes/#whats-new",
            "text": "Orchard 1.9.2 fixes bugs and introduces the following changes and features:   [Feature] New ManageOwnMedia permission to prevent users from modifying media they don't own  [Feature] Ability to debug the Cloud Service locally  [Feature] Kudu deployment scripts  [Feature] Layout management permission  [Feature] \"Owned by me\" content filter  [Improvement] Support htmlAttributes in  ItemEditLink  [Improvement] Layouts doesn't require TinyMCE anymore  [Improvement] Assets.json is global, and supports watch  [Regression] Removed \"edit inline\" which was not functional  [Bug] Too many sql connection opened  [Bug] Widget localization throwing exception  [Bug] Part settings are resetted when general settings are updated  [Bug] Cannot delete spam comment  [Bug] Default layout template is not populated automatically  [Bug] Double encoding issues across the admin  [Bug] Unable to translate content  [Bug] Editing workflow recreates activity records  [Bug] Processed images are regenerated after every restart   The full list of fixed bugs for this release can be found here:   Bugs fixed in 1.9.2 .",
            "title": "What's new?"
        },
        {
            "location": "/Documentation/Orchard-1-9-2.Release-Notes/#how-to-upgrade-from-a-previous-version",
            "text": "You can find migration instructions here:  http://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard .",
            "title": "How to upgrade from a previous version"
        },
        {
            "location": "/Documentation/Orchard-1-9-1.Release-Notes/",
            "text": "Published: 06/30/2015\n\n\nThis release contains bug and security fixes. It is highly recommended to update to this version.\n\n\nWe are also releasing patches for versions of Orchard which contain the security vulnerability described at http://docs.orchardproject.net/Documentation/Patch-20150630. It contains patch files for the following Orchard versions:\n\n\n1.7.3\n1.8.2\n\n\nHow to Install Orchard\n\n\nTo install Orchard using Web PI, follow these instructions:\n\nhttp://docs.orchardproject.net/Documentation/Installing-Orchard\n.\nWeb PI will detect your hardware environment and install the application.\n\n\nAlternatively, to install the release manually, look for the release files on \nhttps://github.com/OrchardCMS/Orchard/releases\n\n\nhttp://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file\n\n\nThe zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-machine-key\n\nor you may experience frequent disconnections.\n\n\nWhat file to download?\n\n\nIf you just want to use Orchard and don't care about the source code, Orchard.Web.1.9.1.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.\n\n\nIf you want to take a look at the source code or want to be able to build the application in Visual Studio,\nhttps://github.com/OrchardCMS/Orchard/archive/1.9.1.zip is fine.\n\n\nIf you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here:\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment\n\n\nBranches are described here: \nhttp://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?\n\n\nWho should use this software?\n\n\nThis software is in version 1.9.1. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.\n\n\nYou are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.\n\n\nWhat's new?\n\n\nOrchard 1.9.1 fixes bugs and introduces the following changes and features:\n\n\n\n\nTokens are evaluated by layout elements\n\n\nFixed performance regression for widgets\n\n\nFixed localization string encoding\n\n\nImproved native clipboard support in layout editor\n\n\nNew heading, fieldset and break elements for the layout editor\n\n\nUpgraded to ASP.NET MVC 5.2.3 and Razor 3.2.3\n\n\nImproved performance of output cache key generation\n\n\nAdded the ability to set the SSL setting for cookies in the SSL module\n\n\nAdded support for Visual Studio 2015\n\n\nNew sticky toolbox in the layout editor\n\n\nImproved logging for recipe execution\n\n\nJobs queue is now used to trigger indexing\n\n\nAdded import/export for projections\n\n\nNew ItemDisplayText extension to manage encoding options\n\n\n\n\nThe full list of fixed bugs for this release can be found here:\n\n\n\n\nBugs fixed in 1.9.1\n.\n\n\n\n\nHow to upgrade from a previous version\n\n\nYou can find migration instructions here: \nhttp://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard\n.",
            "title": "Orchard 1.9.1"
        },
        {
            "location": "/Documentation/Orchard-1-9-1.Release-Notes/#how-to-install-orchard",
            "text": "To install Orchard using Web PI, follow these instructions: http://docs.orchardproject.net/Documentation/Installing-Orchard .\nWeb PI will detect your hardware environment and install the application.  Alternatively, to install the release manually, look for the release files on \nhttps://github.com/OrchardCMS/Orchard/releases  http://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file  The zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key http://docs.orchardproject.net/Documentation/Setting-up-a-machine-key \nor you may experience frequent disconnections.",
            "title": "How to Install Orchard"
        },
        {
            "location": "/Documentation/Orchard-1-9-1.Release-Notes/#what-file-to-download",
            "text": "If you just want to use Orchard and don't care about the source code, Orchard.Web.1.9.1.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.  If you want to take a look at the source code or want to be able to build the application in Visual Studio,\nhttps://github.com/OrchardCMS/Orchard/archive/1.9.1.zip is fine.  If you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here: http://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment  Branches are described here:  http://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?",
            "title": "What file to download?"
        },
        {
            "location": "/Documentation/Orchard-1-9-1.Release-Notes/#who-should-use-this-software",
            "text": "This software is in version 1.9.1. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.  You are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.",
            "title": "Who should use this software?"
        },
        {
            "location": "/Documentation/Orchard-1-9-1.Release-Notes/#whats-new",
            "text": "Orchard 1.9.1 fixes bugs and introduces the following changes and features:   Tokens are evaluated by layout elements  Fixed performance regression for widgets  Fixed localization string encoding  Improved native clipboard support in layout editor  New heading, fieldset and break elements for the layout editor  Upgraded to ASP.NET MVC 5.2.3 and Razor 3.2.3  Improved performance of output cache key generation  Added the ability to set the SSL setting for cookies in the SSL module  Added support for Visual Studio 2015  New sticky toolbox in the layout editor  Improved logging for recipe execution  Jobs queue is now used to trigger indexing  Added import/export for projections  New ItemDisplayText extension to manage encoding options   The full list of fixed bugs for this release can be found here:   Bugs fixed in 1.9.1 .",
            "title": "What's new?"
        },
        {
            "location": "/Documentation/Orchard-1-9-1.Release-Notes/#how-to-upgrade-from-a-previous-version",
            "text": "You can find migration instructions here:  http://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard .",
            "title": "How to upgrade from a previous version"
        },
        {
            "location": "/Documentation/Orchard-1-9.Release-Notes/",
            "text": "Published: 05/05/2015\n\n\nHow to Install Orchard\n\n\nTo install Orchard using Web PI, follow these instructions:\n\nhttp://docs.orchardproject.net/Documentation/Installing-Orchard\n.\nWeb PI will detect your hardware environment and install the application.\n\n\nAlternatively, to install the release manually, download the Orchard.Web.1.9.zip file.\n\n\nhttp://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file\n\n\nThe zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-machine-key\n\nor you may experience frequent disconnections.\n\n\nWhat file to download?\n\n\nIf you just want to use Orchard and don't care about the source code, Orchard.Web.1.9.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.\n\n\nIf you want to take a look at the source code or want to be able to build the application in Visual Studio,\nOrchard.Sources.1.9.zip is fine.\n\n\nIf you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here:\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment\n\n\nBranches are described here: \nhttp://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?\n\n\nWho should use this software?\n\n\nThis software is in version 1.9. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.\n\n\nYou are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.\n\n\nWhat's new?\n\n\nOrchard 1.9 fixes bugs and introduces the following changes and features:\n\n\n\n\nMigration to Microsoft .NET 4.5.1\n\n\nAudit Trail module\n\n\nDaniel Stolt (\nDanielStolt\n) and Sipke Schoorstra (\nsfmskywalker\n) own this contribution\n\n\nDraftable widgets\n\n\nIndexable drafts\n\n\nDate localization and calendar support improvements and fixes\n\n\nDaniel Stolt (\nDanielStolt\n) owns this contribution\n\n\nMore information here: https://orchard.codeplex.com/discussions/560347\n\n\nDynamic Layout module\n\n\nSipke Schoorstra (\nsfmskywalker\n) and Daniel Stolt (\nDanielStolt\n) own this contribution\n\n\nDynamic Forms module\n\n\nSipke Schoorstra (\nsfmskywalker\n) owns this contribution\n\n\nOutput cache improvements\n\n\nDaniel Stolt (\nDanielStolt\n) owns this contribution\n\n\nMore information here: http://www.ideliverable.com/blog/output-cache-improvements-in-orchard-1-9\n\n\nIntegrate OWIN middlewares support\n\n\nNick (\nJetski5822\n) is responsible for this feature\n\n\nUpgrading to ASP.NET MVC 5.2\n\n\nUpgrading to .NET Framework 4.5.1\n\n\nUpgrading to Microsoft Azure SDK 2.5\n\n\nAdding Azure Redis Cache support\n\n\nAdd business cache implementation\n\n\nUpgrading to TinyMCe 4\n\n\nLocalization improvements\n\n\nNick (\nJetski5822\n) is responsible for this feature\n\n\nRTL support in Admin\n\n\nCulture selector (admin and front end)\n\n\nMessage Bus\n\n\nSearch widgets\n\n\nPBKDF2 is now the default password hashing algorithm\n\n\n\n\nThe full list of fixed bugs for this release can be found here:\n\n\n\n\nBugs fixed in 1.9\n.\n\n\n\n\nHow to upgrade from a previous version\n\n\nYou can find migration instructions here: \nhttp://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard\n.\n\n\nNo matter what migration path you take, please take the precaution of making a backup of your site and database first.\n\n\nUpgrading from Orchard 1.8.2 and earlier\n\n\nPlease follow the upgrade instruction from this document: \nhttp://docs.orchardproject.net/Documentation/orchard-1-8-2.release-Notes\n\n\nUpgrading modules\n\n\nOrchard 1.9 bumps up the .NET Framework version it depends on from 4.5 to 4.5.1. You may need to perform the same upgrade in your module's project properties before it successfully compiles.\n\n\nAs part of upgrading to Azure SDK 2.5 most of the Azure-related binaries have been updated. Some of these may contain some breaking changes, so if you use them, you should test your sites/modules for compatibility.\n\n\nNote on the change of the default password hash algorithm\n\n\nAs per the \nwork item #21036\n the hash algorithm used by default to hash user passwords for storage was changed from SHA1 to PBKDF2 (more precisely the \nSystem.Web.Helpers.Crypto.HashPassword()\n implementation).\n\n\nBy default all existing user passwords will be migrated to the new hash when the user successfully logs in next time. If you want to prevent this migration and force every existing password hashes to stay SHA1 then add an appSettings or connectionString configuration to the Web.config (or equivalent) with the name \n\"Orchard.Users.KeepOldPasswordHash\"\n and value \n\"true\"\n.\n\n\nNote on improved handling of setup recipes\n\n\nSetup recipes are now \nautomatically harvested\n from all modules for the setup screen. This means that you don't have to add your setup recipes to the Orchard.Setup module any more, you can keep them in your own modules.\n\n\nKeep in mind however that recipes intended for setup now should possess the IsSetupRecipe metadata (see the recipes in Orchard.Setup), otherwise they won't show up on the setup screen.\n\n\nContributors\n\n\nThis software would not exist without the community. In particular, for this release,\nwe should all be grateful to the following people who contributed patches and features:\n\n\n\n\nAbhishek Luv  (\nabhishekluv\n)\n\n\nArjan Noordende   (\nanoordende\n)\n\n\nAntoine Griffard  (\nagriffard\n)\n\n\nBenedek Farkas    (\nnightwolf226\n)\n\n\nBenjamin Grabkowitz   (\nbgrabkowitz\n)\n\n\nBertrand Le Roy   (\nbertrandleroy\n)\n\n\nBill Cooper   (\nbill_cooper\n)\n\n\nBrett Morrison    (\nmorrisonbrett\n)\n\n\nBryan Porter  (\nbrporter\n)\n\n\nChristian Surieux (\ncsadnt\n)\n\n\nClaire Botman (\nplanetClaire\n)\n\n\nDain Kaplan   \n\n\nDaniel Dabrowski  (\nrodpl\n)\n\n\nDaniel Stolt  (\nDecorum\n)\n\n\nDenis Besic   (\nbesicdenis\n)\n\n\nEric Perez    (\ncodereached\n)\n\n\nGilian Keulens    (\nWalance\n)\n\n\nJack Cheng    (\njchenga\n)\n\n\nJay Harris    (\njayharris\n)\n\n\nJason Burgard (\njburgard\n)\n\n\nJasper Dunker (\njasperd\n)\n\n\nJorge Castillo Pino (\njcastillopino\n)\n\n\nJean-Thierry K\u00e9chichian   (\njtkech\n)\n\n\nJeff Bullock  (\nj3ffb\n)\n\n\nJosh Berry    (\njoshby\n)\n\n\nKatsuyuki Ohmuro  (\nkohmuro\n)\n\n\nKegan Maher   (\nthekaveman\n)\n\n\nMark Loveland-Armour  (\nforsvarir\n)\n\n\nMatt Varblow  (\nmvarblow\n)\n\n\nMichael Yates (\nmjy78\n)\n\n\nNicholas Mayne    (\nJetski5822\n)\n\n\nPaul Devenney \n\n\nPiotr Szmyd   (\npszmyd\n)\n\n\nSebastien Ros (\nsebastienros\n)\n\n\nSotirios Roussos  (\nurbanit\n\n\nSipke Schoorstra  (\nsfmskywalker\n)\n\n\nStanley Goldman   (\nStanleyGoldman\n)\n\n\nThierry Fleury    (\nCodinlab\n)\n\n\nWojciech Gadzinski    (\nErmesx\n)\n\n\n(\nXeevis\n)\n\n\nZolt\u00e1n Leh\u00f3czky   (\nPiedone\n)\n\n\nBaruch Nissenbaum (\nqt1\n)",
            "title": "Orchard 1.9"
        },
        {
            "location": "/Documentation/Orchard-1-9.Release-Notes/#how-to-install-orchard",
            "text": "To install Orchard using Web PI, follow these instructions: http://docs.orchardproject.net/Documentation/Installing-Orchard .\nWeb PI will detect your hardware environment and install the application.  Alternatively, to install the release manually, download the Orchard.Web.1.9.zip file.  http://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file  The zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key http://docs.orchardproject.net/Documentation/Setting-up-a-machine-key \nor you may experience frequent disconnections.",
            "title": "How to Install Orchard"
        },
        {
            "location": "/Documentation/Orchard-1-9.Release-Notes/#what-file-to-download",
            "text": "If you just want to use Orchard and don't care about the source code, Orchard.Web.1.9.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.  If you want to take a look at the source code or want to be able to build the application in Visual Studio,\nOrchard.Sources.1.9.zip is fine.  If you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here: http://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment  Branches are described here:  http://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?",
            "title": "What file to download?"
        },
        {
            "location": "/Documentation/Orchard-1-9.Release-Notes/#who-should-use-this-software",
            "text": "This software is in version 1.9. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.  You are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.",
            "title": "Who should use this software?"
        },
        {
            "location": "/Documentation/Orchard-1-9.Release-Notes/#whats-new",
            "text": "Orchard 1.9 fixes bugs and introduces the following changes and features:   Migration to Microsoft .NET 4.5.1  Audit Trail module  Daniel Stolt ( DanielStolt ) and Sipke Schoorstra ( sfmskywalker ) own this contribution  Draftable widgets  Indexable drafts  Date localization and calendar support improvements and fixes  Daniel Stolt ( DanielStolt ) owns this contribution  More information here: https://orchard.codeplex.com/discussions/560347  Dynamic Layout module  Sipke Schoorstra ( sfmskywalker ) and Daniel Stolt ( DanielStolt ) own this contribution  Dynamic Forms module  Sipke Schoorstra ( sfmskywalker ) owns this contribution  Output cache improvements  Daniel Stolt ( DanielStolt ) owns this contribution  More information here: http://www.ideliverable.com/blog/output-cache-improvements-in-orchard-1-9  Integrate OWIN middlewares support  Nick ( Jetski5822 ) is responsible for this feature  Upgrading to ASP.NET MVC 5.2  Upgrading to .NET Framework 4.5.1  Upgrading to Microsoft Azure SDK 2.5  Adding Azure Redis Cache support  Add business cache implementation  Upgrading to TinyMCe 4  Localization improvements  Nick ( Jetski5822 ) is responsible for this feature  RTL support in Admin  Culture selector (admin and front end)  Message Bus  Search widgets  PBKDF2 is now the default password hashing algorithm   The full list of fixed bugs for this release can be found here:   Bugs fixed in 1.9 .",
            "title": "What's new?"
        },
        {
            "location": "/Documentation/Orchard-1-9.Release-Notes/#how-to-upgrade-from-a-previous-version",
            "text": "You can find migration instructions here:  http://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard .  No matter what migration path you take, please take the precaution of making a backup of your site and database first.",
            "title": "How to upgrade from a previous version"
        },
        {
            "location": "/Documentation/Orchard-1-9.Release-Notes/#upgrading-from-orchard-182-and-earlier",
            "text": "Please follow the upgrade instruction from this document:  http://docs.orchardproject.net/Documentation/orchard-1-8-2.release-Notes",
            "title": "Upgrading from Orchard 1.8.2 and earlier"
        },
        {
            "location": "/Documentation/Orchard-1-9.Release-Notes/#upgrading-modules",
            "text": "Orchard 1.9 bumps up the .NET Framework version it depends on from 4.5 to 4.5.1. You may need to perform the same upgrade in your module's project properties before it successfully compiles.  As part of upgrading to Azure SDK 2.5 most of the Azure-related binaries have been updated. Some of these may contain some breaking changes, so if you use them, you should test your sites/modules for compatibility.",
            "title": "Upgrading modules"
        },
        {
            "location": "/Documentation/Orchard-1-9.Release-Notes/#note-on-the-change-of-the-default-password-hash-algorithm",
            "text": "As per the  work item #21036  the hash algorithm used by default to hash user passwords for storage was changed from SHA1 to PBKDF2 (more precisely the  System.Web.Helpers.Crypto.HashPassword()  implementation).  By default all existing user passwords will be migrated to the new hash when the user successfully logs in next time. If you want to prevent this migration and force every existing password hashes to stay SHA1 then add an appSettings or connectionString configuration to the Web.config (or equivalent) with the name  \"Orchard.Users.KeepOldPasswordHash\"  and value  \"true\" .",
            "title": "Note on the change of the default password hash algorithm"
        },
        {
            "location": "/Documentation/Orchard-1-9.Release-Notes/#note-on-improved-handling-of-setup-recipes",
            "text": "Setup recipes are now  automatically harvested  from all modules for the setup screen. This means that you don't have to add your setup recipes to the Orchard.Setup module any more, you can keep them in your own modules.  Keep in mind however that recipes intended for setup now should possess the IsSetupRecipe metadata (see the recipes in Orchard.Setup), otherwise they won't show up on the setup screen.",
            "title": "Note on improved handling of setup recipes"
        },
        {
            "location": "/Documentation/Orchard-1-9.Release-Notes/#contributors",
            "text": "This software would not exist without the community. In particular, for this release,\nwe should all be grateful to the following people who contributed patches and features:   Abhishek Luv  ( abhishekluv )  Arjan Noordende   ( anoordende )  Antoine Griffard  ( agriffard )  Benedek Farkas    ( nightwolf226 )  Benjamin Grabkowitz   ( bgrabkowitz )  Bertrand Le Roy   ( bertrandleroy )  Bill Cooper   ( bill_cooper )  Brett Morrison    ( morrisonbrett )  Bryan Porter  ( brporter )  Christian Surieux ( csadnt )  Claire Botman ( planetClaire )  Dain Kaplan     Daniel Dabrowski  ( rodpl )  Daniel Stolt  ( Decorum )  Denis Besic   ( besicdenis )  Eric Perez    ( codereached )  Gilian Keulens    ( Walance )  Jack Cheng    ( jchenga )  Jay Harris    ( jayharris )  Jason Burgard ( jburgard )  Jasper Dunker ( jasperd )  Jorge Castillo Pino ( jcastillopino )  Jean-Thierry K\u00e9chichian   ( jtkech )  Jeff Bullock  ( j3ffb )  Josh Berry    ( joshby )  Katsuyuki Ohmuro  ( kohmuro )  Kegan Maher   ( thekaveman )  Mark Loveland-Armour  ( forsvarir )  Matt Varblow  ( mvarblow )  Michael Yates ( mjy78 )  Nicholas Mayne    ( Jetski5822 )  Paul Devenney   Piotr Szmyd   ( pszmyd )  Sebastien Ros ( sebastienros )  Sotirios Roussos  ( urbanit  Sipke Schoorstra  ( sfmskywalker )  Stanley Goldman   ( StanleyGoldman )  Thierry Fleury    ( Codinlab )  Wojciech Gadzinski    ( Ermesx )  ( Xeevis )  Zolt\u00e1n Leh\u00f3czky   ( Piedone )  Baruch Nissenbaum ( qt1 )",
            "title": "Contributors"
        },
        {
            "location": "/Documentation/Orchard-1-8-2.release-notes/",
            "text": "Published: 05/05/2015\n\n\nHow to Install Orchard\n\n\nTo install Orchard using Web PI, follow these instructions:\n\nhttp://docs.orchardproject.net/Documentation/Installing-Orchard\n.\nWeb PI will detect your hardware environment and install the application.\n\n\nAlternatively, to install the release manually, download the Orchard.Web.1.8.2.zip file.\n\n\nhttp://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file\n\n\nThe zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-machine-key\n\nor you may experience frequent disconnections.\n\n\nWhat file to download?\n\n\nIf you just want to use Orchard and don't care about the source code, Orchard.Web.1.8.2.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.\n\n\nIf you want to take a look at the source code or want to be able to build the application in Visual Studio,\nOrchard.Sources.1.8.2.zip is fine.\n\n\nIf you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here:\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment\n\n\nBranches are described here: \nhttp://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?\n\n\nWho should use this software?\n\n\nThis software is in version 1.8.2. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.\n\n\nYou are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.\n\n\nWhat's new?\n\n\nOrchard 1.8.2 fixes bugs and introduces more than 130 changes and features.\n\n\nThe full list of fixed bugs for this release can be found here:\n\n\n\n\nBugs fixed in 1.8.2\n\n\n\n\nHow to upgrade from a previous version\n\n\nYou can find migration instructions here: \nhttp://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard\n.\n\n\nNo matter what migration path you take, please take the precaution of making a backup of your\nsite and database first.\n\n\nUpgrading from Orchard 1.7.1 and earlier\n\n\nPlease follow the upgrade instruction from this document: \nhttp://docs.orchardproject.net/Documentation/Orchard-1-7-2-Release-Notes\n\n\nThen proceed with the upgrade steps from 1.7.2.\n\n\nUpgrading from Orchard 1.7.2\n\n\nBEFORE DOING ANYTHING PLEASE FOLLOW THIS STEPS:\n\n\n\n\nBackup your database and your website content\n\n\nAssign the \nAdministrator\n role to your current Super User account\n. \n\n\n\n\nYou will need an account with the \nSite Owner\n permission before you update your website with the new release. Without this step you won't be able to access the dashboard.\n\n\nIn case you are discovering this notice too late, here is the manual operation to apply. In your database table \nOrchard_Framework_ContentItemRecord\n, on the record with \nid=1\n (the site content item), update the value with this content \n<Data><SiteSettingsPart SuperUser=\"admin\"/></Data>\n\n\n\n\nEnable the Upgrade module\n\n\n\n\nMigrating Email activities\n\n\nIn Orchard 1.8 the Send Email workflow activity has been replaced by a new one which is able to send emails asynchronously using the Jobs Queue.\n\n\n\n\nClick on Upgrade To 1.8 from the menu\n\n\nSelect the Messaging tab and click \nMigrate\n\n\n\n\nMigrating Infoset\n\n\nIn Orchard 1.8 a new data storage technique is introduced saving some of the content in the infoset document of content items instead of records. This way some records are obsolete and can be deleted. The data it contained needs to be migrated though.\n\n\n\n\nClick on Upgrade To 1.8 from the menu\n\n\nSelect the Infoset tab and click on all the \nMigrate\n buttons one at a time\n\n\n\n\nIf you are not sure if one button was clicked you can try again and it will just be ignored if it was already processed.\n\n\nContributors\n\n\nThis software would not exist without the community. In particular, for this release,\nwe should all be grateful to the following people who contributed patches and features:\n\n\n\n\nAntoine Griffard  (\nagriffard\n)\n\n\nBenedek Farkas    (\nnightwolf226\n)\n\n\nBryan Porter  (\nbrporter\n)\n\n\nDale Newman   \n\n\nDaniel Dabrowski  (\nrodpl\n)\n\n\nDaniel Stolt  (\nDecorum\n)\n\n\nDenis Besic   (\nbesicdenis\n)\n\n\nEric Perez    (\ncodereached\n)\n\n\nJack Cheng    (\njchenga\n)\n\n\nJay Harris    (\njayharris\n)\n\n\nJason Burgard (\njburgard\n)\n\n\nJasper Dunker (\njasperd\n)\n\n\nJorge Castillo Pino (\njcastillopino\n)\n\n\nJeff Bullock  (\nj3ffb\n)\n\n\nJosh Berry    (\njoshby\n)\n\n\nKatsuyuki Ohmuro  (\nkohmuro\n)\n\n\nMatt Varblow  (\nmvarblow\n)\n\n\nPiotr Szmyd   (\npszmyd\n)\n\n\nSebastien Ros (\nsebastienros\n)\n\n\nSotirios Roussos  (\nurbanit \n)\n\n\nStanley Goldman   (\nStanleyGoldman\n)\n\n\nThierry Fleury    (\nCodinlab\n)\n\n\nZolt\u00e1n Leh\u00f3czky   (\nPiedone\n)\n\n\nBaruch Nissenbaum (\nqt1\n)",
            "title": "Orchard 1.8.2"
        },
        {
            "location": "/Documentation/Orchard-1-8-2.release-notes/#how-to-install-orchard",
            "text": "To install Orchard using Web PI, follow these instructions: http://docs.orchardproject.net/Documentation/Installing-Orchard .\nWeb PI will detect your hardware environment and install the application.  Alternatively, to install the release manually, download the Orchard.Web.1.8.2.zip file.  http://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file  The zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key http://docs.orchardproject.net/Documentation/Setting-up-a-machine-key \nor you may experience frequent disconnections.",
            "title": "How to Install Orchard"
        },
        {
            "location": "/Documentation/Orchard-1-8-2.release-notes/#what-file-to-download",
            "text": "If you just want to use Orchard and don't care about the source code, Orchard.Web.1.8.2.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.  If you want to take a look at the source code or want to be able to build the application in Visual Studio,\nOrchard.Sources.1.8.2.zip is fine.  If you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here: http://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment  Branches are described here:  http://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?",
            "title": "What file to download?"
        },
        {
            "location": "/Documentation/Orchard-1-8-2.release-notes/#who-should-use-this-software",
            "text": "This software is in version 1.8.2. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.  You are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.",
            "title": "Who should use this software?"
        },
        {
            "location": "/Documentation/Orchard-1-8-2.release-notes/#whats-new",
            "text": "Orchard 1.8.2 fixes bugs and introduces more than 130 changes and features.  The full list of fixed bugs for this release can be found here:   Bugs fixed in 1.8.2",
            "title": "What's new?"
        },
        {
            "location": "/Documentation/Orchard-1-8-2.release-notes/#how-to-upgrade-from-a-previous-version",
            "text": "You can find migration instructions here:  http://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard .  No matter what migration path you take, please take the precaution of making a backup of your\nsite and database first.",
            "title": "How to upgrade from a previous version"
        },
        {
            "location": "/Documentation/Orchard-1-8-2.release-notes/#upgrading-from-orchard-171-and-earlier",
            "text": "Please follow the upgrade instruction from this document:  http://docs.orchardproject.net/Documentation/Orchard-1-7-2-Release-Notes  Then proceed with the upgrade steps from 1.7.2.",
            "title": "Upgrading from Orchard 1.7.1 and earlier"
        },
        {
            "location": "/Documentation/Orchard-1-8-2.release-notes/#upgrading-from-orchard-172",
            "text": "BEFORE DOING ANYTHING PLEASE FOLLOW THIS STEPS:   Backup your database and your website content  Assign the  Administrator  role to your current Super User account .    You will need an account with the  Site Owner  permission before you update your website with the new release. Without this step you won't be able to access the dashboard.  In case you are discovering this notice too late, here is the manual operation to apply. In your database table  Orchard_Framework_ContentItemRecord , on the record with  id=1  (the site content item), update the value with this content  <Data><SiteSettingsPart SuperUser=\"admin\"/></Data>   Enable the Upgrade module",
            "title": "Upgrading from Orchard 1.7.2"
        },
        {
            "location": "/Documentation/Orchard-1-8-2.release-notes/#migrating-email-activities",
            "text": "In Orchard 1.8 the Send Email workflow activity has been replaced by a new one which is able to send emails asynchronously using the Jobs Queue.   Click on Upgrade To 1.8 from the menu  Select the Messaging tab and click  Migrate",
            "title": "Migrating Email activities"
        },
        {
            "location": "/Documentation/Orchard-1-8-2.release-notes/#migrating-infoset",
            "text": "In Orchard 1.8 a new data storage technique is introduced saving some of the content in the infoset document of content items instead of records. This way some records are obsolete and can be deleted. The data it contained needs to be migrated though.   Click on Upgrade To 1.8 from the menu  Select the Infoset tab and click on all the  Migrate  buttons one at a time   If you are not sure if one button was clicked you can try again and it will just be ignored if it was already processed.",
            "title": "Migrating Infoset"
        },
        {
            "location": "/Documentation/Orchard-1-8-2.release-notes/#contributors",
            "text": "This software would not exist without the community. In particular, for this release,\nwe should all be grateful to the following people who contributed patches and features:   Antoine Griffard  ( agriffard )  Benedek Farkas    ( nightwolf226 )  Bryan Porter  ( brporter )  Dale Newman     Daniel Dabrowski  ( rodpl )  Daniel Stolt  ( Decorum )  Denis Besic   ( besicdenis )  Eric Perez    ( codereached )  Jack Cheng    ( jchenga )  Jay Harris    ( jayharris )  Jason Burgard ( jburgard )  Jasper Dunker ( jasperd )  Jorge Castillo Pino ( jcastillopino )  Jeff Bullock  ( j3ffb )  Josh Berry    ( joshby )  Katsuyuki Ohmuro  ( kohmuro )  Matt Varblow  ( mvarblow )  Piotr Szmyd   ( pszmyd )  Sebastien Ros ( sebastienros )  Sotirios Roussos  ( urbanit  )  Stanley Goldman   ( StanleyGoldman )  Thierry Fleury    ( Codinlab )  Zolt\u00e1n Leh\u00f3czky   ( Piedone )  Baruch Nissenbaum ( qt1 )",
            "title": "Contributors"
        },
        {
            "location": "/Documentation/Orchard-1-8-1.Release-Notes/",
            "text": "Published: 06/19/2014\n\n\nHow to Install Orchard\n\n\nTo install Orchard using Web PI, follow these instructions:\n\nhttp://docs.orchardproject.net/Documentation/Installing-Orchard\n.\nWeb PI will detect your hardware environment and install the application.\n\n\nAlternatively, to install the release manually, download the Orchard.Web.1.8.1.zip file.\n\n\nhttp://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file\n\n\nThe zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-machine-key\n\nor you may experience frequent disconnections.\n\n\nWhat file to download?\n\n\nIf you just want to use Orchard and don't care about the source code, Orchard.Web.1.8.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.\n\n\nIf you want to take a look at the source code or want to be able to build the application in Visual Studio,\nOrchard.Source.1.8.1.zip is fine.\n\n\nIf you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here:\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment\n\n\nBranches are described here: \nhttp://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?\n\n\nWho should use this software?\n\n\nThis software is in version 1.8.1. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.\n\n\nYou are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.\n\n\nWhat's new?\n\n\nOrchard 1.8.1 fixes bugs and introduces the following changes and features:\n\n\n\n\nUrl tokens not working in background tasks\n\n\nDecision Activity doesn't work\n\n\nJobs queue don't use the correct priority when created\n\n\nUnable to use HasTerms multiple times on the same query\n\n\nMedia library does not display thumbnail if the urls contains special chars\n\n\nUpgraded JSON.NET\n\n\nRazor Template Processor is now a separate feature\n\n\nMissing Microsoft.Data.Edm dependency\n\n\nPublishOwnBlogPost and PublishBlogPost permissions are ignored    \n\n\nOutput cache improvements\n\n\nChanging Site owner doesn't work\n\n\n\n\nThe full list of fixed bugs for this release can be found here:\n\n\n\n\nBugs fixed in 1.8.1\n.\n\n\n\n\nHow to upgrade from a previous version\n\n\nYou can find migration instructions here: \nhttp://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard\n.\n\n\nNo matter what migration path you take, please take the precaution of making a backup of your\nsite and database first.\n\n\nUpgrading from Orchard 1.7.1 and earlier\n\n\nPlease follow the upgrade instruction from this document: \nhttp://docs.orchardproject.net/Documentation/Orchard-1-7-2-Release-Notes\n\n\nThen proceed with the upgrade steps from 1.7.2.\n\n\nUpgrading from Orchard 1.7.2\n\n\nBEFORE DOING ANYTHING PLEASE FOLLOW THIS STEPS:\n\n\n\n\nBackup your database and your website content\n\n\nAssign the \nAdministrator\n role to your current Super User account\n. \n\n\n\n\nYou will need an account with the \nSite Owner\n permission before you update your website with the new release. Without this step you won't be able to access the dashboard.\n\n\nIn case you are discovering this notice too late, here is the manual operation to apply. In your database table \nOrchard_Framework_ContentItemRecord\n, on the record with \nid=1\n (the site content item), update the value with this content \n<Data><SiteSettingsPart SuperUser=\"admin\"/></Data>\n\n\n\n\nEnable the Upgrade module\n\n\n\n\nMigrating Email activities\n\n\nIn Orchard 1.8 the Send Email workflow activity has been replaced by a new one which is able to send emails asynchronously using the Jobs Queue.\n\n\n\n\nClick on Upgrade To 1.8 from the menu\n\n\nSelect the Messaging tab and click \nMigrate\n\n\n\n\nMigrating Infoset\n\n\nIn Orchard 1.8 a new data storage technique is introduced saving some of the content in the infoset document of content items instead of records. This way some records are obsolete and can be deleted. The data it contained needs to be migrated though.\n\n\n\n\nClick on Upgrade To 1.8 from the menu\n\n\nSelect the Infoset tab and click on all the \nMigrate\n buttons one at a time\n\n\n\n\nIf you are not sure if one button was clicked you can try again and it will just be ignored if it was already processed.\n\n\nContributors\n\n\nThis software would not exist without the community. In particular, for this release,\nwe should all be grateful to the following people who contributed patches and features:\n\n\n\n\nAntoine Griffard (\nagriffard\n)\n\n\nBenedek Farkas (\nnightwolf226\n)\n\n\nBertrand Le Roy (\nbertrandleroy\n)\n\n\nClaire Botman (\nplanetClaire\n)\n\n\nDaniel Stolt (\nDecorum\n)\n\n\nJeff Bullock (\nj3ffb\n)\n\n\nNicholas Mayne (\nJetski5822\n)\n\n\nSebastien Ros (\nsebastienros\n)\n\n\nSipke Schoorstra (\nsfmskywalker\n)\n\n\nStanley Goldman (\nStanleyGoldman\n)\n\n\nWojciech Gadzi\u0144ski (\nErmesx\n)\n\n\nZolt\u00e1n Leh\u00f3czky (\nPiedone\n)",
            "title": "Orchard 1.8.1"
        },
        {
            "location": "/Documentation/Orchard-1-8-1.Release-Notes/#how-to-install-orchard",
            "text": "To install Orchard using Web PI, follow these instructions: http://docs.orchardproject.net/Documentation/Installing-Orchard .\nWeb PI will detect your hardware environment and install the application.  Alternatively, to install the release manually, download the Orchard.Web.1.8.1.zip file.  http://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file  The zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key http://docs.orchardproject.net/Documentation/Setting-up-a-machine-key \nor you may experience frequent disconnections.",
            "title": "How to Install Orchard"
        },
        {
            "location": "/Documentation/Orchard-1-8-1.Release-Notes/#what-file-to-download",
            "text": "If you just want to use Orchard and don't care about the source code, Orchard.Web.1.8.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.  If you want to take a look at the source code or want to be able to build the application in Visual Studio,\nOrchard.Source.1.8.1.zip is fine.  If you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here: http://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment  Branches are described here:  http://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?",
            "title": "What file to download?"
        },
        {
            "location": "/Documentation/Orchard-1-8-1.Release-Notes/#who-should-use-this-software",
            "text": "This software is in version 1.8.1. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.  You are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.",
            "title": "Who should use this software?"
        },
        {
            "location": "/Documentation/Orchard-1-8-1.Release-Notes/#whats-new",
            "text": "Orchard 1.8.1 fixes bugs and introduces the following changes and features:   Url tokens not working in background tasks  Decision Activity doesn't work  Jobs queue don't use the correct priority when created  Unable to use HasTerms multiple times on the same query  Media library does not display thumbnail if the urls contains special chars  Upgraded JSON.NET  Razor Template Processor is now a separate feature  Missing Microsoft.Data.Edm dependency  PublishOwnBlogPost and PublishBlogPost permissions are ignored      Output cache improvements  Changing Site owner doesn't work   The full list of fixed bugs for this release can be found here:   Bugs fixed in 1.8.1 .",
            "title": "What's new?"
        },
        {
            "location": "/Documentation/Orchard-1-8-1.Release-Notes/#how-to-upgrade-from-a-previous-version",
            "text": "You can find migration instructions here:  http://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard .  No matter what migration path you take, please take the precaution of making a backup of your\nsite and database first.",
            "title": "How to upgrade from a previous version"
        },
        {
            "location": "/Documentation/Orchard-1-8-1.Release-Notes/#upgrading-from-orchard-171-and-earlier",
            "text": "Please follow the upgrade instruction from this document:  http://docs.orchardproject.net/Documentation/Orchard-1-7-2-Release-Notes  Then proceed with the upgrade steps from 1.7.2.",
            "title": "Upgrading from Orchard 1.7.1 and earlier"
        },
        {
            "location": "/Documentation/Orchard-1-8-1.Release-Notes/#upgrading-from-orchard-172",
            "text": "BEFORE DOING ANYTHING PLEASE FOLLOW THIS STEPS:   Backup your database and your website content  Assign the  Administrator  role to your current Super User account .    You will need an account with the  Site Owner  permission before you update your website with the new release. Without this step you won't be able to access the dashboard.  In case you are discovering this notice too late, here is the manual operation to apply. In your database table  Orchard_Framework_ContentItemRecord , on the record with  id=1  (the site content item), update the value with this content  <Data><SiteSettingsPart SuperUser=\"admin\"/></Data>   Enable the Upgrade module",
            "title": "Upgrading from Orchard 1.7.2"
        },
        {
            "location": "/Documentation/Orchard-1-8-1.Release-Notes/#migrating-email-activities",
            "text": "In Orchard 1.8 the Send Email workflow activity has been replaced by a new one which is able to send emails asynchronously using the Jobs Queue.   Click on Upgrade To 1.8 from the menu  Select the Messaging tab and click  Migrate",
            "title": "Migrating Email activities"
        },
        {
            "location": "/Documentation/Orchard-1-8-1.Release-Notes/#migrating-infoset",
            "text": "In Orchard 1.8 a new data storage technique is introduced saving some of the content in the infoset document of content items instead of records. This way some records are obsolete and can be deleted. The data it contained needs to be migrated though.   Click on Upgrade To 1.8 from the menu  Select the Infoset tab and click on all the  Migrate  buttons one at a time   If you are not sure if one button was clicked you can try again and it will just be ignored if it was already processed.",
            "title": "Migrating Infoset"
        },
        {
            "location": "/Documentation/Orchard-1-8-1.Release-Notes/#contributors",
            "text": "This software would not exist without the community. In particular, for this release,\nwe should all be grateful to the following people who contributed patches and features:   Antoine Griffard ( agriffard )  Benedek Farkas ( nightwolf226 )  Bertrand Le Roy ( bertrandleroy )  Claire Botman ( planetClaire )  Daniel Stolt ( Decorum )  Jeff Bullock ( j3ffb )  Nicholas Mayne ( Jetski5822 )  Sebastien Ros ( sebastienros )  Sipke Schoorstra ( sfmskywalker )  Stanley Goldman ( StanleyGoldman )  Wojciech Gadzi\u0144ski ( Ermesx )  Zolt\u00e1n Leh\u00f3czky ( Piedone )",
            "title": "Contributors"
        },
        {
            "location": "/Documentation/Orchard-1-8-Release-Notes/",
            "text": "Published: 03/28/2014\n\n\nHow to Install Orchard\n\n\nTo install Orchard using Web PI, follow these instructions:\n\nhttp://docs.orchardproject.net/Documentation/Installing-Orchard\n.\nWeb PI will detect your hardware environment and install the application.\n\n\nAlternatively, to install the release manually, download the Orchard.Web.1.8.zip file.\n\n\nhttp://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file\n\n\nThe zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-machine-key\n\nor you may experience frequent disconnections.\n\n\nWhat file to download?\n\n\nIf you just want to use Orchard and don't care about the source code, Orchard.Web.1.8.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.\n\n\nIf you want to take a look at the source code or want to be able to build the application in Visual Studio,\nOrchard.Source.1.8.zip is fine.\n\n\nIf you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here:\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment\n\n\nBranches are described here: \nhttp://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?\n\n\nWho should use this software?\n\n\nThis software is in version 1.8. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.\n\n\nYou are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.\n\n\nWhat's new?\n\n\nOrchard 1.8 fixes bugs and introduces the following changes and features:\n\n\n\n\nMigration to Microsoft .NET 4.5\n\n\nUpgrade project targets\n\n\nRemove unnecessary Medium Trust support code\n\n\nDefine 4.5 framework in web.config files\n\n\nErik (\nerik_oppedijk\n) owns this contribution\n\n\nUpgrade ASP.NET Web Stack to newest versions\n\n\nASP.NET MVC 5.1\n\n\nWebAPI 2.1\n\n\nRazor 3.1\n\n\nPut back the List module with improved functionalities\n\n\nThe goal is to be able to use it to mimick the Blogs module\n\n\nSipke (\nsfmskywalker\n) owns this contribution\n\n\nPerformance improvements by unleashing the power of the document db architecture built in Orchard\n\n\nSebastien (\nsebastienros\n) owns this contribution\n\n\nMulti-tenancy improvements\n\n\nCalendar support\n\n\nDaniel Stolt (\nDecorum\n) owns this contribution\n\n\nJobs Queue module (done)\n\n\nOrchard.JobsQueueing\n\n\nTemplates module (done)\n\n\nOrchard.Templates\n\n\nBusiness Caching modules\n\n\nOrchard.Caching\n\n\nOrchard.Email\n\n\nThe messaging infrastructure has been deprecated and replaced by a simpler one. As part of this change you can now define the email templates directly in shapes. \n\n\nThe SMTP settings are read from the web.config file by default if available.\n\n\nAzure Media Services has been contributed by Microsoft Open Technologies and provides a seamless integration with the Media module\n\n\nOrchard.Azure.MediaServices\n\n\nOrchard.Azure:\n\n\nPlatformConfiguration\n (static class to read settings from \nCloudConfigurationManager\n) is gone. Its place is taken by an injectable dependency called \nIPlatformConfigurationAccessor\n and the old implementation's logic is moved to the \nDefaultPlatformConfigurationAccessor\n class, which was then extended to look for settings among the \nConnectionStrings\n too.\n\n\nThese changes are reflected throughout the \nOrchard.Azure\n module, though the Azure database cache's behavior (\nAzureCache*\n classes) is not affected by \nIPlatformConfigurationAccessor\n implementations other than \nDefaultPlatformConfigurationAccessor\n due to certain NHibernate limitations.\n\n\nAdded a new setting called \nOrchard.Azure.Media.StoragePublicHostName\n which makes it possible to override the public host name when using Azure storage.\n\n\nOrchard.Azure.Media\n and \nOrchard.Azure.DatabaseCache\n now depend on \nOrchard.Azure\n.\n\n\n\n\n\n\n\n\nThe full list of fixed bugs for this release can be found here:\n\n\n\n\nBugs fixed in 1.8\n.\n\n\n\n\nHow to upgrade from a previous version\n\n\nYou can find migration instructions here: \nhttp://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard\n.\n\n\nNo matter what migration path you take, please take the precaution of making a backup of your\nsite and database first.\n\n\nUpgrading from Orchard 1.7.1 and earlier\n\n\nPlease follow the upgrade instruction from this document: \nhttps://github.com/OrchardCMS/OrchardDoc/blob/1.8/Documentation/Orchard-1-7-2-Release-Notes.markdown\n\n\nThen proceed with the upgrade steps from 1.7.2.\n\n\nUpgrading from Orchard 1.7.2\n\n\nBEFORE DOING ANYTHING PLEASE FOLLOW THIS STEPS:\n\n\n\n\nBackup your database and your website content\n\n\nAssign the \nAdministrator\n role to your current Super User account\n. \n\n\n\n\nYou will need an account with the \nSite Owner\n permission before you update your website with the new release. Without this step you won't be able to access the dashboard.\n\n\nIn case you are discovering this notice too late, here is the manual operation to apply. In your database table \nOrchard_Framework_ContentItemRecord\n, on the record with \nid=1\n (the site content item), update the value with this content \n<Data><SiteSettingsPart SuperUser=\"admin\"/></Data>\n\n\n\n\nEnable the Upgrade module\n\n\n\n\nMigrating Email activities\n\n\nIn Orchard 1.8 the Send Email workflow activity has been replaced by a new one which is able to send emails asynchronously using the Jobs Queue.\n\n\n\n\nClick on Upgrade To 1.8 from the menu\n\n\nSelect the Messaging tab and click \nMigrate\n\n\n\n\nMigrating Infoset\n\n\nIn Orchard 1.8 a new data storage technique is introduced saving some of the content in the infoset document of content items instead of records. This way some records are obsolete and can be deleted. The data it contained needs to be migrated though.\n\n\n\n\nClick on Upgrade To 1.8 from the menu\n\n\nSelect the Infoset tab and click on all the \nMigrate\n buttons one at a time\n\n\n\n\nIf you are not sure if one button was clicked you can try again and it will just be ignored if it was already processed.\n\n\nContributors\n\n\nThis software would not exist without the community. In particular, for this release,\nwe should all be grateful to the following people who contributed patches and features:\n\n\n\n\nAntoine Griffard (\nagriffard\n)\n\n\nAnthony R. Fassett (\nfassetar\n)\n\n\nBenedek Farkas (\nnightwolf226\n)\n\n\nBenjamin Grabkowitz (\nbgrabkowitz\n)\n\n\nBertrand Le Roy (\nbertrandleroy\n)\n\n\nBrett Morrison (\nmorrisonbrett\n)\n\n\nClaire Botman (\nplanetClaire\n)\n\n\nDaniel Dabrowski (\nrodpl\n) \n\n\nDaniel Stolt (\nDecorum\n)\n\n\nErik Oppedijk (\nerik_oppedijk\n)\n\n\nEric Schultz (\nwwahammy\n)\n\n\nGilian Keulens (\nWalance\n)\n\n\nHenry Kuijpers (\nhkui\n)\n\n\nJay Harris (\njayharris\n)\n\n\nJasper Dunker (\njasperd\n)\n\n\nJean-Thierry K\u00e9chichian (\njtkech\n)\n\n\nJeff Olmstead (\njao28\n)\n\n\nJim Macdonald (\nJimasp\n)\n\n\nJosh Berry (\njoshby\n)\n\n\nkassobasi (\nkassobasi\n)\n\n\nMichael Yates (\nmjy78\n)\n\n\nPiotr Szmyd (\npszmyd\n)\n\n\nSebastien Ros (\nsebastienros\n)\n\n\nSipke Schoorstra (\nsfmskywalker\n)\n\n\nStanley Goldman (\nStanleyGoldman\n)\n\n\nThierry Fleury (\nCodinlab\n)\n\n\nTony Mackay (\ntoneuk\n)\n\n\nYury Arzhevikin (\nGorizon47\n)\n\n\nZolt\u00e1n Leh\u00f3czky (\nPiedone\n)\n\n\n\n\nSpecial Thanks to Christian Surieux (\ncsadnt\n) for his active participation on the forums.",
            "title": "Orchard 1.8"
        },
        {
            "location": "/Documentation/Orchard-1-8-Release-Notes/#how-to-install-orchard",
            "text": "To install Orchard using Web PI, follow these instructions: http://docs.orchardproject.net/Documentation/Installing-Orchard .\nWeb PI will detect your hardware environment and install the application.  Alternatively, to install the release manually, download the Orchard.Web.1.8.zip file.  http://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file  The zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key http://docs.orchardproject.net/Documentation/Setting-up-a-machine-key \nor you may experience frequent disconnections.",
            "title": "How to Install Orchard"
        },
        {
            "location": "/Documentation/Orchard-1-8-Release-Notes/#what-file-to-download",
            "text": "If you just want to use Orchard and don't care about the source code, Orchard.Web.1.8.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.  If you want to take a look at the source code or want to be able to build the application in Visual Studio,\nOrchard.Source.1.8.zip is fine.  If you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here: http://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment  Branches are described here:  http://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?",
            "title": "What file to download?"
        },
        {
            "location": "/Documentation/Orchard-1-8-Release-Notes/#who-should-use-this-software",
            "text": "This software is in version 1.8. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.  You are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.",
            "title": "Who should use this software?"
        },
        {
            "location": "/Documentation/Orchard-1-8-Release-Notes/#whats-new",
            "text": "Orchard 1.8 fixes bugs and introduces the following changes and features:   Migration to Microsoft .NET 4.5  Upgrade project targets  Remove unnecessary Medium Trust support code  Define 4.5 framework in web.config files  Erik ( erik_oppedijk ) owns this contribution  Upgrade ASP.NET Web Stack to newest versions  ASP.NET MVC 5.1  WebAPI 2.1  Razor 3.1  Put back the List module with improved functionalities  The goal is to be able to use it to mimick the Blogs module  Sipke ( sfmskywalker ) owns this contribution  Performance improvements by unleashing the power of the document db architecture built in Orchard  Sebastien ( sebastienros ) owns this contribution  Multi-tenancy improvements  Calendar support  Daniel Stolt ( Decorum ) owns this contribution  Jobs Queue module (done)  Orchard.JobsQueueing  Templates module (done)  Orchard.Templates  Business Caching modules  Orchard.Caching  Orchard.Email  The messaging infrastructure has been deprecated and replaced by a simpler one. As part of this change you can now define the email templates directly in shapes.   The SMTP settings are read from the web.config file by default if available.  Azure Media Services has been contributed by Microsoft Open Technologies and provides a seamless integration with the Media module  Orchard.Azure.MediaServices  Orchard.Azure:  PlatformConfiguration  (static class to read settings from  CloudConfigurationManager ) is gone. Its place is taken by an injectable dependency called  IPlatformConfigurationAccessor  and the old implementation's logic is moved to the  DefaultPlatformConfigurationAccessor  class, which was then extended to look for settings among the  ConnectionStrings  too.  These changes are reflected throughout the  Orchard.Azure  module, though the Azure database cache's behavior ( AzureCache*  classes) is not affected by  IPlatformConfigurationAccessor  implementations other than  DefaultPlatformConfigurationAccessor  due to certain NHibernate limitations.  Added a new setting called  Orchard.Azure.Media.StoragePublicHostName  which makes it possible to override the public host name when using Azure storage.  Orchard.Azure.Media  and  Orchard.Azure.DatabaseCache  now depend on  Orchard.Azure .     The full list of fixed bugs for this release can be found here:   Bugs fixed in 1.8 .",
            "title": "What's new?"
        },
        {
            "location": "/Documentation/Orchard-1-8-Release-Notes/#how-to-upgrade-from-a-previous-version",
            "text": "You can find migration instructions here:  http://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard .  No matter what migration path you take, please take the precaution of making a backup of your\nsite and database first.",
            "title": "How to upgrade from a previous version"
        },
        {
            "location": "/Documentation/Orchard-1-8-Release-Notes/#upgrading-from-orchard-171-and-earlier",
            "text": "Please follow the upgrade instruction from this document:  https://github.com/OrchardCMS/OrchardDoc/blob/1.8/Documentation/Orchard-1-7-2-Release-Notes.markdown  Then proceed with the upgrade steps from 1.7.2.",
            "title": "Upgrading from Orchard 1.7.1 and earlier"
        },
        {
            "location": "/Documentation/Orchard-1-8-Release-Notes/#upgrading-from-orchard-172",
            "text": "BEFORE DOING ANYTHING PLEASE FOLLOW THIS STEPS:   Backup your database and your website content  Assign the  Administrator  role to your current Super User account .    You will need an account with the  Site Owner  permission before you update your website with the new release. Without this step you won't be able to access the dashboard.  In case you are discovering this notice too late, here is the manual operation to apply. In your database table  Orchard_Framework_ContentItemRecord , on the record with  id=1  (the site content item), update the value with this content  <Data><SiteSettingsPart SuperUser=\"admin\"/></Data>   Enable the Upgrade module",
            "title": "Upgrading from Orchard 1.7.2"
        },
        {
            "location": "/Documentation/Orchard-1-8-Release-Notes/#migrating-email-activities",
            "text": "In Orchard 1.8 the Send Email workflow activity has been replaced by a new one which is able to send emails asynchronously using the Jobs Queue.   Click on Upgrade To 1.8 from the menu  Select the Messaging tab and click  Migrate",
            "title": "Migrating Email activities"
        },
        {
            "location": "/Documentation/Orchard-1-8-Release-Notes/#migrating-infoset",
            "text": "In Orchard 1.8 a new data storage technique is introduced saving some of the content in the infoset document of content items instead of records. This way some records are obsolete and can be deleted. The data it contained needs to be migrated though.   Click on Upgrade To 1.8 from the menu  Select the Infoset tab and click on all the  Migrate  buttons one at a time   If you are not sure if one button was clicked you can try again and it will just be ignored if it was already processed.",
            "title": "Migrating Infoset"
        },
        {
            "location": "/Documentation/Orchard-1-8-Release-Notes/#contributors",
            "text": "This software would not exist without the community. In particular, for this release,\nwe should all be grateful to the following people who contributed patches and features:   Antoine Griffard ( agriffard )  Anthony R. Fassett ( fassetar )  Benedek Farkas ( nightwolf226 )  Benjamin Grabkowitz ( bgrabkowitz )  Bertrand Le Roy ( bertrandleroy )  Brett Morrison ( morrisonbrett )  Claire Botman ( planetClaire )  Daniel Dabrowski ( rodpl )   Daniel Stolt ( Decorum )  Erik Oppedijk ( erik_oppedijk )  Eric Schultz ( wwahammy )  Gilian Keulens ( Walance )  Henry Kuijpers ( hkui )  Jay Harris ( jayharris )  Jasper Dunker ( jasperd )  Jean-Thierry K\u00e9chichian ( jtkech )  Jeff Olmstead ( jao28 )  Jim Macdonald ( Jimasp )  Josh Berry ( joshby )  kassobasi ( kassobasi )  Michael Yates ( mjy78 )  Piotr Szmyd ( pszmyd )  Sebastien Ros ( sebastienros )  Sipke Schoorstra ( sfmskywalker )  Stanley Goldman ( StanleyGoldman )  Thierry Fleury ( Codinlab )  Tony Mackay ( toneuk )  Yury Arzhevikin ( Gorizon47 )  Zolt\u00e1n Leh\u00f3czky ( Piedone )   Special Thanks to Christian Surieux ( csadnt ) for his active participation on the forums.",
            "title": "Contributors"
        },
        {
            "location": "/Documentation/Orchard-1-7-2-Release-Notes/",
            "text": "Published: 11/19/2013\n\n\nHow to Install Orchard\n\n\nTo install Orchard using Web PI, follow these instructions:\n\nhttp://docs.orchardproject.net/Documentation/Installing-Orchard\n.\nWeb PI will detect your hardware environment and install the application.\n\n\nAlternatively, to install the release manually, download the Orchard.Web.1.7.2.zip file.\n\n\nhttp://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file\n\n\nThe zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-machine-key\n\nor you may experience frequent disconnections.\n\n\nWhat file to download?\n\n\nIf you just want to use Orchard and don't care about the source code, Orchard.Web.1.7.2.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.\n\n\nIf you want to take a look at the source code or want to be able to build the application in Visual Studio,\nOrchard.Source.1.7.2.zip is fine.\n\n\nIf you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here:\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment\n\n\nBranches are described here: \nhttp://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?\n\n\nWho should use this software?\n\n\nThis software is in version 1.7.2. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.\n\n\nYou are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.\n\n\nWhat's new?\n\n\nOrchard 1.7.2 fixes bugs and introduces the following features:\n\n\n\n\nOrchard.SSL\n: New SSL module replacing Contrib.SSL, providing convention enhanced security, convention based\n\n\nAzure SDK 2.2 support\n\n\nOrchard.MediaLibrary\n: \n\n\nSearch engine integration feature\n\n\nCreation of custom media types\n\n\nConsistent css class names for text boxes  \n\n\nPerformance\n\n\nRemoved BlogConstraintPathUpdator background task\n\n\nOptimized AliasUpdator\n\n\nRemoved deep recursive data migration calls\n\n\nCreated default indexes on content item tables\n\n\nAdded Eager Fetching filter for projection\n\n\nOrchard.Search\n: \n\n\nImproved API to define range queries\n\n\n\n\nThe full list of fixed bugs for this release can be found here:\n\n\n\n\nBugs fixed in 1.7.2\n.\n\n\n\n\nHow to upgrade from a previous version\n\n\nYou can find migration instructions here: \nhttp://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard\n.\n\n\nNo matter what migration path you take, please take the precaution of making a backup of your\nsite and database first.\n\n\nUpgrading from Orchard 1.3 and earlier\n\n\nOrchard 1.4 introduced breaking changes in the way content URLs are managed. Because of that,\nand if you're migrating from version 1.3 or earlier, the Upgrade module can be used to migrate\ndata. If you upgrade a site to 1.7 from 1.3 or earlier and can't\nsee your contents, you probably need to run this module. In order to do that, go to the admin\nsection of the site (by appending /admin to the URL where the home page should be), then go\nto Modules and enable the feature.\n\n\nThe feature, once enabled, adds a new entry to the admin menu: \"Upgrade to 1.7\", that can\nmigrate the Route data of your content items as well as field data from older field modules, and menu items.\n\n\nUpgrading from Orchard 1.6 and earlier\n\n\n\n\nEnable the Upgrade module\n\n\n\n\nMigrating Content Item Picker Field contents\n\n\nIn Orchard 1.7 this field has been moved to a more appropriate module, and thus needs it definitions to be migrated\nin order to reflect this change.\n\n\n\n\nClick on Upgrade To 1.7 from the menu\n\n\nSelect the Content Picker tab and click \nMigrate\n\n\n\n\nMigrating Contrib.Taxonomies module\n\n\nIn Orchard 1.7 the Contrib.Taxonomies module has been integrated into the core modules as the Orchard.Taxonomies module.\nIf you want to use the new module then you need to follow these steps. It will convert all your content and metadata\nwhich were associated with Contrib.Taxonomies.\n\n\n\n\nDisable the module Contrib.Taxonomies\n\n\nEnable the module Orchard.Taxonomies\n\n\nClick on Upgrade To 1.7 from the menu\n\n\nSelect the Taxonomies tab and click \nMigrate\n\n\nFinally, update any template which was previously using the Contrib.Taxonomies templates\n\n\n\n\nImporting Media files into the Media Library\n\n\nIn Orchard 1.7 a new media management module is provided. In order to use it you will have to import all your media files\nto this new module. It will create a dedicated content item for each of your files. Ultimately it will also convert\nall the current usage of Media Picker Fields to the new Media Library Picker Field.\n\n\n\n\nDisable the module Media\n\n\nEnable the module Media Library\n\n\nClick on Upgrade To 1.7 from the menu\n\n\nSelect the Media Library tab and click \nMigrate\n\n\nIn the Media Picker Field section click \nMigrate\n\n\nFinally, update any template which was previously using the Media Picker Field directly\n\n\n\n\nUpgrading from Orchard 1.7.1\n\n\nIf you were using the Roles or Comments Workflow Activities you will need to enable the corresponding features:\n\n\n\n\nComments Workflows Activities\n\n\nRoles Workflows Activities\n\n\n\n\nIf you were using Multi-Tenancy then you might need to change the settings of the tenants. Multi-tenant host name are\nnot more matching sub-domains automatically. You will need to replace \nfoo.com\n by \n*.foo.com\n if you want the tenant \nto match any sub-domain. You can also specifically set which sub-domains to accept like this: \nfoo.com, www.foo.com\n\n\nContributors\n\n\nThis software would not exist without the community. In particular, for this release,\nwe should all be grateful to the following people who contributed patches and features:\n\n\n\n\nAntoine Griffard (\nagriffard\n)\n\n\nBenedek Farkas (\nnightwolf226\n)\n\n\nBertrand Le Roy (\nbertrandleroy\n)\n\n\nChristian Surieux (\ncsadnt\n)\n\n\nDaniel Stolt (\nDecorum\n)\n\n\nEric McGrath (\nEricMcGrath\n)\n\n\nJay Harris (\njayharris\n)\n\n\nJeff Bullock (\nj3ffb\n)\n\n\nJeff Olmstead (\njao28\n)\n\n\nJim Macdonald (\nJimasp\n)\n\n\nPiotr Szmyd (\npszmyd\n)\n\n\nSebastien Ros (\nsebastienros\n)\n\n\nSipke Schoorstra (\nsfmskywalker\n)\n\n\nStanley Goldman (\nStanleyGoldman\n)\n\n\nVladimir Makaev (\nVMakaev\n)\n\n\nVolodymyr Usarskyy (\nusarskyy\n)\n\n\nZolt\u00e1n Leh\u00f3czky (\nPiedone\n)",
            "title": "Orchard 1.7.2"
        },
        {
            "location": "/Documentation/Orchard-1-7-2-Release-Notes/#how-to-install-orchard",
            "text": "To install Orchard using Web PI, follow these instructions: http://docs.orchardproject.net/Documentation/Installing-Orchard .\nWeb PI will detect your hardware environment and install the application.  Alternatively, to install the release manually, download the Orchard.Web.1.7.2.zip file.  http://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file  The zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key http://docs.orchardproject.net/Documentation/Setting-up-a-machine-key \nor you may experience frequent disconnections.",
            "title": "How to Install Orchard"
        },
        {
            "location": "/Documentation/Orchard-1-7-2-Release-Notes/#what-file-to-download",
            "text": "If you just want to use Orchard and don't care about the source code, Orchard.Web.1.7.2.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.  If you want to take a look at the source code or want to be able to build the application in Visual Studio,\nOrchard.Source.1.7.2.zip is fine.  If you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here: http://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment  Branches are described here:  http://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?",
            "title": "What file to download?"
        },
        {
            "location": "/Documentation/Orchard-1-7-2-Release-Notes/#who-should-use-this-software",
            "text": "This software is in version 1.7.2. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.  You are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.",
            "title": "Who should use this software?"
        },
        {
            "location": "/Documentation/Orchard-1-7-2-Release-Notes/#whats-new",
            "text": "Orchard 1.7.2 fixes bugs and introduces the following features:   Orchard.SSL : New SSL module replacing Contrib.SSL, providing convention enhanced security, convention based  Azure SDK 2.2 support  Orchard.MediaLibrary :   Search engine integration feature  Creation of custom media types  Consistent css class names for text boxes    Performance  Removed BlogConstraintPathUpdator background task  Optimized AliasUpdator  Removed deep recursive data migration calls  Created default indexes on content item tables  Added Eager Fetching filter for projection  Orchard.Search :   Improved API to define range queries   The full list of fixed bugs for this release can be found here:   Bugs fixed in 1.7.2 .",
            "title": "What's new?"
        },
        {
            "location": "/Documentation/Orchard-1-7-2-Release-Notes/#how-to-upgrade-from-a-previous-version",
            "text": "You can find migration instructions here:  http://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard .  No matter what migration path you take, please take the precaution of making a backup of your\nsite and database first.",
            "title": "How to upgrade from a previous version"
        },
        {
            "location": "/Documentation/Orchard-1-7-2-Release-Notes/#upgrading-from-orchard-13-and-earlier",
            "text": "Orchard 1.4 introduced breaking changes in the way content URLs are managed. Because of that,\nand if you're migrating from version 1.3 or earlier, the Upgrade module can be used to migrate\ndata. If you upgrade a site to 1.7 from 1.3 or earlier and can't\nsee your contents, you probably need to run this module. In order to do that, go to the admin\nsection of the site (by appending /admin to the URL where the home page should be), then go\nto Modules and enable the feature.  The feature, once enabled, adds a new entry to the admin menu: \"Upgrade to 1.7\", that can\nmigrate the Route data of your content items as well as field data from older field modules, and menu items.",
            "title": "Upgrading from Orchard 1.3 and earlier"
        },
        {
            "location": "/Documentation/Orchard-1-7-2-Release-Notes/#upgrading-from-orchard-16-and-earlier",
            "text": "Enable the Upgrade module",
            "title": "Upgrading from Orchard 1.6 and earlier"
        },
        {
            "location": "/Documentation/Orchard-1-7-2-Release-Notes/#migrating-content-item-picker-field-contents",
            "text": "In Orchard 1.7 this field has been moved to a more appropriate module, and thus needs it definitions to be migrated\nin order to reflect this change.   Click on Upgrade To 1.7 from the menu  Select the Content Picker tab and click  Migrate",
            "title": "Migrating Content Item Picker Field contents"
        },
        {
            "location": "/Documentation/Orchard-1-7-2-Release-Notes/#migrating-contribtaxonomies-module",
            "text": "In Orchard 1.7 the Contrib.Taxonomies module has been integrated into the core modules as the Orchard.Taxonomies module.\nIf you want to use the new module then you need to follow these steps. It will convert all your content and metadata\nwhich were associated with Contrib.Taxonomies.   Disable the module Contrib.Taxonomies  Enable the module Orchard.Taxonomies  Click on Upgrade To 1.7 from the menu  Select the Taxonomies tab and click  Migrate  Finally, update any template which was previously using the Contrib.Taxonomies templates",
            "title": "Migrating Contrib.Taxonomies module"
        },
        {
            "location": "/Documentation/Orchard-1-7-2-Release-Notes/#importing-media-files-into-the-media-library",
            "text": "In Orchard 1.7 a new media management module is provided. In order to use it you will have to import all your media files\nto this new module. It will create a dedicated content item for each of your files. Ultimately it will also convert\nall the current usage of Media Picker Fields to the new Media Library Picker Field.   Disable the module Media  Enable the module Media Library  Click on Upgrade To 1.7 from the menu  Select the Media Library tab and click  Migrate  In the Media Picker Field section click  Migrate  Finally, update any template which was previously using the Media Picker Field directly",
            "title": "Importing Media files into the Media Library"
        },
        {
            "location": "/Documentation/Orchard-1-7-2-Release-Notes/#upgrading-from-orchard-171",
            "text": "If you were using the Roles or Comments Workflow Activities you will need to enable the corresponding features:   Comments Workflows Activities  Roles Workflows Activities   If you were using Multi-Tenancy then you might need to change the settings of the tenants. Multi-tenant host name are\nnot more matching sub-domains automatically. You will need to replace  foo.com  by  *.foo.com  if you want the tenant \nto match any sub-domain. You can also specifically set which sub-domains to accept like this:  foo.com, www.foo.com",
            "title": "Upgrading from Orchard 1.7.1"
        },
        {
            "location": "/Documentation/Orchard-1-7-2-Release-Notes/#contributors",
            "text": "This software would not exist without the community. In particular, for this release,\nwe should all be grateful to the following people who contributed patches and features:   Antoine Griffard ( agriffard )  Benedek Farkas ( nightwolf226 )  Bertrand Le Roy ( bertrandleroy )  Christian Surieux ( csadnt )  Daniel Stolt ( Decorum )  Eric McGrath ( EricMcGrath )  Jay Harris ( jayharris )  Jeff Bullock ( j3ffb )  Jeff Olmstead ( jao28 )  Jim Macdonald ( Jimasp )  Piotr Szmyd ( pszmyd )  Sebastien Ros ( sebastienros )  Sipke Schoorstra ( sfmskywalker )  Stanley Goldman ( StanleyGoldman )  Vladimir Makaev ( VMakaev )  Volodymyr Usarskyy ( usarskyy )  Zolt\u00e1n Leh\u00f3czky ( Piedone )",
            "title": "Contributors"
        },
        {
            "location": "/Documentation/Orchard-1-7-1-Release-Notes/",
            "text": "Published: 9/16/2013\n\n\nHow to Install Orchard\n\n\nTo install Orchard using Web PI, follow these instructions:\n\nhttp://docs.orchardproject.net/Documentation/Installing-Orchard\n.\nWeb PI will detect your hardware environment and install the application.\n\n\nAlternatively, to install the release manually, download the Orchard.Web.1.7.1.zip file.\n\n\nhttp://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file\n\n\nThe zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-machine-key\n\nor you may experience frequent disconnections.\n\n\nWhat file to download?\n\n\nIf you just want to use Orchard and don't care about the source code, Orchard.Web.1.7.1.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.\n\n\nIf you want to take a look at the source code or want to be able to build the application in Visual Studio,\nOrchard.Source.1.7.1.zip is fine.\n\n\nIf you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here:\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment\n\n\nBranches are described here: \nhttp://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?\n\n\nWho should use this software?\n\n\nThis software is in version 1.7.1. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.\n\n\nYou are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.\n\n\nWhat's new?\n\n\nOrchard 1.7.1 fixes bugs and introduces the following features:\n\n\n\n\nAzure\n: (Daniel Stolt)\n\n\nNew Orchard.Azure \n\n\nMedia Library Storage in Windows Azure Blob Storage\n\n\nOutput Cache using Windows Azure Cache Services\n\n\nDatabase Cache using Windows Azure Cache Services\n\n\n\n\n\n\nUpgrade to Windows Azure SDK 2.1\n\n\nFor more information see \nWhat's new for Windows Azure in Orchard 1.7.1\n\n\n\n\n\n\nVisual Studio\n\n\nDeploy Cloud Service directly from Visual Studio\n\n\nBetter MsDeploy and Publish support\n\n\nUse of XML transform files (Web.Release.config) for Web.config, log4net.config and HostComponents.config\n\n\n\n\n\n\nNew \"check all\" options in the admin (Richard Garside)\n\n\nOrchard.OutputCache\n: Fixed several bugs related to custom content returning blank pages\n\n\nOrchard.Tokens\n: New {Content.Body}, {Text.TrimEnd} and also Media Library Picker Field tokens\n\n\nOrchard.ImportExport\n: \n\n\nPermissions\n\n\nMedia parts\n\n\n\n\n\n\nOrchard.Workflows\n: \n\n\nNew Custom Forms event activity\n\n\nDecoupled specialized activities from the Workflows module and moved some activities to specific modules\n\n\n\n\n\n\nOrchard.MediaLibrary\n: Fixed XmlRpcHandler allowing blogging clients to work with Media Library\n\n\nOrchard.Indexing\n: Added the container id to the search index\n\n\nOrchard.Antispam\n: New JavaScriptAntiSpamPart (Lombiq)\n\n\n\n\nThe full list of fixed bugs for this release can be found here:\n\n\n\n\nBugs fixed in 1.7.1\n.\n\n\n\n\nHow to upgrade from a previous version\n\n\nYou can find migration instructions here: \nhttp://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard\n.\n\n\nNo matter what migration path you take, please take the precaution of making a backup of your\nsite and database first.\n\n\nUpgrading from Orchard 1.3 and earlier\n\n\nOrchard 1.4 introduced breaking changes in the way content URLs are managed. Because of that,\nand if you're migrating from version 1.3 or earlier, the Upgrade module can be used to migrate\ndata. If you upgrade a site to 1.7 from 1.3 or earlier and can't\nsee your contents, you probably need to run this module. In order to do that, go to the admin\nsection of the site (by appending /admin to the URL where the home page should be), then go\nto Modules and enable the feature.\n\n\nThe feature, once enabled, adds a new entry to the admin menu: \"Upgrade to 1.7\", that can\nmigrate the Route data of your content items as well as field data from older field modules, and menu items.\n\n\nUpgrading from Orchard 1.6 and earlier\n\n\n\n\nEnable the Upgrade module\n\n\n\n\nMigrating Content Item Picker Field contents\n\n\nIn Orchard 1.7 this field has been moved to a more appropriate module, and thus needs it definitions to be migrated\nin order to reflect this change.\n\n\n\n\nClick on Upgrade To 1.7 from the menu\n\n\nSelect the Content Picker tab and click \nMigrate\n\n\n\n\nMigrating Contrib.Taxonomies module\n\n\nIn Orchard 1.7 the Contrib.Taxonomies module has been integrated into the core modules as the Orchard.Taxonomies module.\nIf you want to use the new module then you need to follow these steps. It will convert all your content and metadata\nwhich were associated with Contrib.Taxonomies.\n\n\n\n\nDisable the module Contrib.Taxonomies\n\n\nEnable the module Orchard.Taxonomies\n\n\nClick on Upgrade To 1.7 from the menu\n\n\nSelect the Taxonomies tab and click \nMigrate\n\n\nFinally, update any template which was previously using the Contrib.Taxonomies templates\n\n\n\n\nImporting Media files into the Media Library\n\n\nIn Orchard 1.7 a new media management module is provided. In order to use it you will have to import all your media files\nto this new module. It will create a dedicated content item for each of your files. Ultimately it will also convert\nall the current usage of Media Picker Fields to the new Media Library Picker Field.\n\n\n\n\nDisable the module Media\n\n\nEnable the module Media Library\n\n\nClick on Upgrade To 1.7 from the menu\n\n\nSelect the Media Library tab and click \nMigrate\n\n\nIn the Media Picker Field section click \nMigrate\n\n\nFinally, update any template which was previously using the Media Picker Field directly\n\n\n\n\nContributors\n\n\nThis software would not exist without the community. In particular, for this release,\nwe should all be grateful to the following people who contributed patches and features:\n\n\n\n\nAntoine Griffard (\nagriffard\n)\n\n\nBertrand Le Roy (\nbertrandleroy\n)\n\n\n(\nbsdr\n)\n\n\nBenjamin Grabkowitz (\nbgrabkowitz\n)\n\n\nCaoxiang Kun (\ncaoxiangkun\n)\n\n\nDaniel Dabrowski (\nrodpl\n) \n\n\nDaniel Stolt (\nDecorum\n)\n\n\nDavid Cornish (\nDavidCornish\n)\n\n\nErik Oppedijk ( \nerik_oppedijk\n)\n\n\nGilian Keulens (\nWalance\n)\n\n\nThierry Fleury (\nKirix\n)\n\n\nJasper Dunker (\njasperd\n)\n\n\nJeff Bullock (\nj3ffb\n)\n\n\nJim Macdonald (\nJimasp\n)\n\n\nJohn Murdoch (\njrmurdoch\n)\n\n\nKamil Serwus (\nbeny\n)\n\n\nKevin Mulder (\nkmulder\n)\n\n\nMichael Petrinolis (\nRedbyron\n)\n\n\nNuno Duarte (\nnduarte\n)\n\n\nNicholas Mayne (\nJetski5822\n)\n\n\nPiotr Szmyd (\npszmyd\n)\n\n\nRichard Garside (\nRichardGarside\n)\n\n\nSebastien Ros (\nsebastienros\n)\n\n\nSipke Schoorstra (\nsfmskywalker\n)\n\n\n(\nTimbioz\n)\n\n\nZolt\u00e1n Leh\u00f3czky (\nPiedone\n)",
            "title": "Orchard 1.7.1"
        },
        {
            "location": "/Documentation/Orchard-1-7-1-Release-Notes/#how-to-install-orchard",
            "text": "To install Orchard using Web PI, follow these instructions: http://docs.orchardproject.net/Documentation/Installing-Orchard .\nWeb PI will detect your hardware environment and install the application.  Alternatively, to install the release manually, download the Orchard.Web.1.7.1.zip file.  http://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file  The zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key http://docs.orchardproject.net/Documentation/Setting-up-a-machine-key \nor you may experience frequent disconnections.",
            "title": "How to Install Orchard"
        },
        {
            "location": "/Documentation/Orchard-1-7-1-Release-Notes/#what-file-to-download",
            "text": "If you just want to use Orchard and don't care about the source code, Orchard.Web.1.7.1.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.  If you want to take a look at the source code or want to be able to build the application in Visual Studio,\nOrchard.Source.1.7.1.zip is fine.  If you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here: http://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment  Branches are described here:  http://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?",
            "title": "What file to download?"
        },
        {
            "location": "/Documentation/Orchard-1-7-1-Release-Notes/#who-should-use-this-software",
            "text": "This software is in version 1.7.1. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.  You are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.",
            "title": "Who should use this software?"
        },
        {
            "location": "/Documentation/Orchard-1-7-1-Release-Notes/#whats-new",
            "text": "Orchard 1.7.1 fixes bugs and introduces the following features:   Azure : (Daniel Stolt)  New Orchard.Azure   Media Library Storage in Windows Azure Blob Storage  Output Cache using Windows Azure Cache Services  Database Cache using Windows Azure Cache Services    Upgrade to Windows Azure SDK 2.1  For more information see  What's new for Windows Azure in Orchard 1.7.1    Visual Studio  Deploy Cloud Service directly from Visual Studio  Better MsDeploy and Publish support  Use of XML transform files (Web.Release.config) for Web.config, log4net.config and HostComponents.config    New \"check all\" options in the admin (Richard Garside)  Orchard.OutputCache : Fixed several bugs related to custom content returning blank pages  Orchard.Tokens : New {Content.Body}, {Text.TrimEnd} and also Media Library Picker Field tokens  Orchard.ImportExport :   Permissions  Media parts    Orchard.Workflows :   New Custom Forms event activity  Decoupled specialized activities from the Workflows module and moved some activities to specific modules    Orchard.MediaLibrary : Fixed XmlRpcHandler allowing blogging clients to work with Media Library  Orchard.Indexing : Added the container id to the search index  Orchard.Antispam : New JavaScriptAntiSpamPart (Lombiq)   The full list of fixed bugs for this release can be found here:   Bugs fixed in 1.7.1 .",
            "title": "What's new?"
        },
        {
            "location": "/Documentation/Orchard-1-7-1-Release-Notes/#how-to-upgrade-from-a-previous-version",
            "text": "You can find migration instructions here:  http://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard .  No matter what migration path you take, please take the precaution of making a backup of your\nsite and database first.",
            "title": "How to upgrade from a previous version"
        },
        {
            "location": "/Documentation/Orchard-1-7-1-Release-Notes/#upgrading-from-orchard-13-and-earlier",
            "text": "Orchard 1.4 introduced breaking changes in the way content URLs are managed. Because of that,\nand if you're migrating from version 1.3 or earlier, the Upgrade module can be used to migrate\ndata. If you upgrade a site to 1.7 from 1.3 or earlier and can't\nsee your contents, you probably need to run this module. In order to do that, go to the admin\nsection of the site (by appending /admin to the URL where the home page should be), then go\nto Modules and enable the feature.  The feature, once enabled, adds a new entry to the admin menu: \"Upgrade to 1.7\", that can\nmigrate the Route data of your content items as well as field data from older field modules, and menu items.",
            "title": "Upgrading from Orchard 1.3 and earlier"
        },
        {
            "location": "/Documentation/Orchard-1-7-1-Release-Notes/#upgrading-from-orchard-16-and-earlier",
            "text": "Enable the Upgrade module",
            "title": "Upgrading from Orchard 1.6 and earlier"
        },
        {
            "location": "/Documentation/Orchard-1-7-1-Release-Notes/#migrating-content-item-picker-field-contents",
            "text": "In Orchard 1.7 this field has been moved to a more appropriate module, and thus needs it definitions to be migrated\nin order to reflect this change.   Click on Upgrade To 1.7 from the menu  Select the Content Picker tab and click  Migrate",
            "title": "Migrating Content Item Picker Field contents"
        },
        {
            "location": "/Documentation/Orchard-1-7-1-Release-Notes/#migrating-contribtaxonomies-module",
            "text": "In Orchard 1.7 the Contrib.Taxonomies module has been integrated into the core modules as the Orchard.Taxonomies module.\nIf you want to use the new module then you need to follow these steps. It will convert all your content and metadata\nwhich were associated with Contrib.Taxonomies.   Disable the module Contrib.Taxonomies  Enable the module Orchard.Taxonomies  Click on Upgrade To 1.7 from the menu  Select the Taxonomies tab and click  Migrate  Finally, update any template which was previously using the Contrib.Taxonomies templates",
            "title": "Migrating Contrib.Taxonomies module"
        },
        {
            "location": "/Documentation/Orchard-1-7-1-Release-Notes/#importing-media-files-into-the-media-library",
            "text": "In Orchard 1.7 a new media management module is provided. In order to use it you will have to import all your media files\nto this new module. It will create a dedicated content item for each of your files. Ultimately it will also convert\nall the current usage of Media Picker Fields to the new Media Library Picker Field.   Disable the module Media  Enable the module Media Library  Click on Upgrade To 1.7 from the menu  Select the Media Library tab and click  Migrate  In the Media Picker Field section click  Migrate  Finally, update any template which was previously using the Media Picker Field directly",
            "title": "Importing Media files into the Media Library"
        },
        {
            "location": "/Documentation/Orchard-1-7-1-Release-Notes/#contributors",
            "text": "This software would not exist without the community. In particular, for this release,\nwe should all be grateful to the following people who contributed patches and features:   Antoine Griffard ( agriffard )  Bertrand Le Roy ( bertrandleroy )  ( bsdr )  Benjamin Grabkowitz ( bgrabkowitz )  Caoxiang Kun ( caoxiangkun )  Daniel Dabrowski ( rodpl )   Daniel Stolt ( Decorum )  David Cornish ( DavidCornish )  Erik Oppedijk (  erik_oppedijk )  Gilian Keulens ( Walance )  Thierry Fleury ( Kirix )  Jasper Dunker ( jasperd )  Jeff Bullock ( j3ffb )  Jim Macdonald ( Jimasp )  John Murdoch ( jrmurdoch )  Kamil Serwus ( beny )  Kevin Mulder ( kmulder )  Michael Petrinolis ( Redbyron )  Nuno Duarte ( nduarte )  Nicholas Mayne ( Jetski5822 )  Piotr Szmyd ( pszmyd )  Richard Garside ( RichardGarside )  Sebastien Ros ( sebastienros )  Sipke Schoorstra ( sfmskywalker )  ( Timbioz )  Zolt\u00e1n Leh\u00f3czky ( Piedone )",
            "title": "Contributors"
        },
        {
            "location": "/Documentation/Orchard-1-7-Release-Notes/",
            "text": "Published: 7/17/2013\n\n\nHow to Install Orchard\n\n\nTo install Orchard using Web PI, follow these instructions:\n\nhttp://docs.orchardproject.net/Documentation/Installing-Orchard\n.\nWeb PI will detect your hardware environment and install the application.\n\n\nAlternatively, to install the release manually, download the Orchard.Web.1.7.zip file.\n\n\nhttp://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file\n\n\nThe zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-machine-key\n\nor you may experience frequent disconnections.\n\n\nWhat file to download?\n\n\nIf you just want to use Orchard and don't care about the source code, Orchard.Web.1.7.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.\n\n\nIf you want to take a look at the source code or want to be able to build the application in Visual Studio,\nOrchard.Source.1.7.zip is fine.\n\n\nIf you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here:\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment\n\n\nBranches are described here: \nhttp://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?\n\n\nWho should use this software?\n\n\nThis software is in version 1.7. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.\n\n\nYou are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.\n\n\nWhat's new?\n\n\nOrchard 1.7 fixes bugs and introduces the following features:\n\n\n\n\nClay\n: This version doesn't use Clay anymore and improves memory and raw performance.\n\n\nBetter performance for the event bus.\n\n\nBetter performance for the Import/Export module.\n\n\nSearch\n: Possibility to create multiple search indexes.\n\n\nModule recipes\n: In the Modules page, a new Recipes tab lets you run custom recipes to automate tedious tasks.\n\n\nTokens\n: A new tokens syntax is added on top of the current one. The preferred syntax is now \n#{token}\n.\n\n\nShape Menu Items\n: You can create menu items which will be rendered using shapes.\n\n\nComments\n: The whole comments module has been rewritten to provide a more Orchard friendly implementation, and also\nprovides an option for threaded comments.\n\n\nAnti Spam\n: The anti spam module has been updated to be reusable by any module, and also provides custom Content Parts \nfor reCaptcha, spam filters and submission limits.\n\n\nMedia Library\n: This new module lets you manage Media as content items and also import any media from external services.\n\n\nImage Editor\n: Provides a web based image editor for cropping, resizing and applying filters to raw images.\n\n\nMedia Processing\n: Can create custom image filters and resize image automatically.\n\n\nWorkflows\n: This new module lets you create content workflows and long running workflows.\n\n\nC# Scripting\n: Provides an execution environment for custom C# code in content item validation and in Workflows.\n\n\nOrchard.Taxonomies\n: This is the Contrib.Taxonomies module integrated into Core.\n\n\nOrchard.OutputCache\n: This is the Contrib.Cache module integrated into Core.\n\n\n\n\nThe full list of more than 280 fixed bugs for this release can be found here:\n\n\n\n\nBugs fixed in 1.7\n.\n\n\n\n\nHow to upgrade from a previous version\n\n\nYou can find migration instructions here: \nhttp://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard\n.\n\n\nNo matter what migration path you take, please take the precaution of making a backup of your\nsite and database first.\n\n\nUpgrading from Orchard 1.3 and earlier\n\n\nOrchard 1.4 introduced breaking changes in the way content URLs are managed. Because of that,\nand if you're migrating from version 1.3 or earlier, the Upgrade module can be used to migrate\ndata. If you upgrade a site to 1.7 from 1.3 or earlier and can't\nsee your contents, you probably need to run this module. In order to do that, go to the admin\nsection of the site (by appending /admin to the URL where the home page should be), then go\nto Modules and enable the feature.\n\n\nThe feature, once enabled, adds a new entry to the admin menu: \"Upgrade to 1.7\", that can\nmigrate the Route data of your content items as well as field data from older field modules, and menu items.\n\n\nUpgrading from Orchard 1.6 and earlier\n\n\n\n\nEnable the Upgrade module\n\n\n\n\nMigrating Content Item Picker Field contents\n\n\nIn Orchard 1.7 this field has been moved to a more appropriate module, and thus needs it definitions to be migrated\nin order to reflect this change.\n\n\n\n\nClick on Upgrade To 1.7 from the menu\n\n\nSelect the Content Picker tab and click \nMigrate\n\n\n\n\nMigrating Contrib.Taxonomies module\n\n\nIn Orchard 1.7 the Contrib.Taxonomies module has been integrated into the core modules as the Orchard.Taxonomies module.\nIf you want to use the new module then you need to follow these steps. It will convert all your content and metadata\nwhich were associated with Contrib.Taxonomies.\n\n\n\n\nDisable the module Contrib.Taxonomies\n\n\nEnable the module Orchard.Taxonomies\n\n\nClick on Upgrade To 1.7 from the menu\n\n\nSelect the Taxonomies tab and click \nMigrate\n\n\nFinally, update any template which was previously using the Contrib.Taxonomies templates\n\n\n\n\nImporting Media files into the Media Library\n\n\nIn Orchard 1.7 a new media management module is provided. In order to use it you will have to import all your media files\nto this new module. It will create a dedicated content item for each of your files. Ultimately it will also convert\nall the current usage of Media Picker Fields to the new Media Library Picker Field.\n\n\n\n\nDisable the module Media\n\n\nEnable the module Media Library\n\n\nClick on Upgrade To 1.7 from the menu\n\n\nSelect the Media Library tab and click \nMigrate\n\n\nIn the Media Picker Field section click \nMigrate\n\n\nFinally, update any template which was previously using the Media Picker Field directly\n\n\n\n\nContributors\n\n\nThis software would not exist without the community. In particular, for this release,\nwe should all be grateful to the following people who contributed patches and features:\n\n\n\n\nAndrew Connell (\nandrewconnell\n)\n\n\nAntoine Griffard (\nagriffard\n)\n\n\nBenedek Farkas (\nnightwolf226\n)\n\n\nBertrand Le Roy (\nbertrandleroy\n)\n\n\nDamien Clarke (\ndamoclarke\n)\n\n\nJacky Hsu (\ntwomeetings\n)\n\n\nJasper Dunker (\njasperd\n)\n\n\nJeff Bullock (\nj3ffb\n)\n\n\nJorge Gamba (\njorgegamba\n)\n\n\n(\nJimasp\n)\n\n\nKees Schouten (\nZnowman\n)\n\n\nKen Wilkinson (\nwilk\n)\n\n\nMatt Melling (\nkobowi\n)\n\n\nMichael Petrinolis (\nRedbyron\n)\n\n\nMirza Dervi\u0161evi\u0107 (\nMirza\n)\n\n\nNicholas Mayne (\nJetski5822\n)\n\n\nPiotr Szmyd (\npszmyd\n)\n\n\nRafael Medeiros (\nrafaelmedeiros\n)\n\n\nSebastien Ros (\nsebastienros\n)\n\n\nSergey Romanchuk (\nRezet\n)\n\n\nSipke Schoorstra (\nsfmskywalker\n)\n\n\nStanley Goldman (\nStanleyGoldman\n)\n\n\nTravis James (\nGQAdonis\n)\n\n\nZolt\u00e1n Leh\u00f3czky (\nPiedone\n)",
            "title": "Orchard 1.7"
        },
        {
            "location": "/Documentation/Orchard-1-7-Release-Notes/#how-to-install-orchard",
            "text": "To install Orchard using Web PI, follow these instructions: http://docs.orchardproject.net/Documentation/Installing-Orchard .\nWeb PI will detect your hardware environment and install the application.  Alternatively, to install the release manually, download the Orchard.Web.1.7.zip file.  http://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file  The zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site (but not as a web application).\nPlease make sure you have a machine key http://docs.orchardproject.net/Documentation/Setting-up-a-machine-key \nor you may experience frequent disconnections.",
            "title": "How to Install Orchard"
        },
        {
            "location": "/Documentation/Orchard-1-7-Release-Notes/#what-file-to-download",
            "text": "If you just want to use Orchard and don't care about the source code, Orchard.Web.1.7.zip\nis what you want to use, preferably through the WebPI instructions.\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.  If you want to take a look at the source code or want to be able to build the application in Visual Studio,\nOrchard.Source.1.7.zip is fine.  If you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here: http://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment  Branches are described here:  http://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?",
            "title": "What file to download?"
        },
        {
            "location": "/Documentation/Orchard-1-7-Release-Notes/#who-should-use-this-software",
            "text": "This software is in version 1.7. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.  You are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.",
            "title": "Who should use this software?"
        },
        {
            "location": "/Documentation/Orchard-1-7-Release-Notes/#whats-new",
            "text": "Orchard 1.7 fixes bugs and introduces the following features:   Clay : This version doesn't use Clay anymore and improves memory and raw performance.  Better performance for the event bus.  Better performance for the Import/Export module.  Search : Possibility to create multiple search indexes.  Module recipes : In the Modules page, a new Recipes tab lets you run custom recipes to automate tedious tasks.  Tokens : A new tokens syntax is added on top of the current one. The preferred syntax is now  #{token} .  Shape Menu Items : You can create menu items which will be rendered using shapes.  Comments : The whole comments module has been rewritten to provide a more Orchard friendly implementation, and also\nprovides an option for threaded comments.  Anti Spam : The anti spam module has been updated to be reusable by any module, and also provides custom Content Parts \nfor reCaptcha, spam filters and submission limits.  Media Library : This new module lets you manage Media as content items and also import any media from external services.  Image Editor : Provides a web based image editor for cropping, resizing and applying filters to raw images.  Media Processing : Can create custom image filters and resize image automatically.  Workflows : This new module lets you create content workflows and long running workflows.  C# Scripting : Provides an execution environment for custom C# code in content item validation and in Workflows.  Orchard.Taxonomies : This is the Contrib.Taxonomies module integrated into Core.  Orchard.OutputCache : This is the Contrib.Cache module integrated into Core.   The full list of more than 280 fixed bugs for this release can be found here:   Bugs fixed in 1.7 .",
            "title": "What's new?"
        },
        {
            "location": "/Documentation/Orchard-1-7-Release-Notes/#how-to-upgrade-from-a-previous-version",
            "text": "You can find migration instructions here:  http://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard .  No matter what migration path you take, please take the precaution of making a backup of your\nsite and database first.",
            "title": "How to upgrade from a previous version"
        },
        {
            "location": "/Documentation/Orchard-1-7-Release-Notes/#upgrading-from-orchard-13-and-earlier",
            "text": "Orchard 1.4 introduced breaking changes in the way content URLs are managed. Because of that,\nand if you're migrating from version 1.3 or earlier, the Upgrade module can be used to migrate\ndata. If you upgrade a site to 1.7 from 1.3 or earlier and can't\nsee your contents, you probably need to run this module. In order to do that, go to the admin\nsection of the site (by appending /admin to the URL where the home page should be), then go\nto Modules and enable the feature.  The feature, once enabled, adds a new entry to the admin menu: \"Upgrade to 1.7\", that can\nmigrate the Route data of your content items as well as field data from older field modules, and menu items.",
            "title": "Upgrading from Orchard 1.3 and earlier"
        },
        {
            "location": "/Documentation/Orchard-1-7-Release-Notes/#upgrading-from-orchard-16-and-earlier",
            "text": "Enable the Upgrade module",
            "title": "Upgrading from Orchard 1.6 and earlier"
        },
        {
            "location": "/Documentation/Orchard-1-7-Release-Notes/#migrating-content-item-picker-field-contents",
            "text": "In Orchard 1.7 this field has been moved to a more appropriate module, and thus needs it definitions to be migrated\nin order to reflect this change.   Click on Upgrade To 1.7 from the menu  Select the Content Picker tab and click  Migrate",
            "title": "Migrating Content Item Picker Field contents"
        },
        {
            "location": "/Documentation/Orchard-1-7-Release-Notes/#migrating-contribtaxonomies-module",
            "text": "In Orchard 1.7 the Contrib.Taxonomies module has been integrated into the core modules as the Orchard.Taxonomies module.\nIf you want to use the new module then you need to follow these steps. It will convert all your content and metadata\nwhich were associated with Contrib.Taxonomies.   Disable the module Contrib.Taxonomies  Enable the module Orchard.Taxonomies  Click on Upgrade To 1.7 from the menu  Select the Taxonomies tab and click  Migrate  Finally, update any template which was previously using the Contrib.Taxonomies templates",
            "title": "Migrating Contrib.Taxonomies module"
        },
        {
            "location": "/Documentation/Orchard-1-7-Release-Notes/#importing-media-files-into-the-media-library",
            "text": "In Orchard 1.7 a new media management module is provided. In order to use it you will have to import all your media files\nto this new module. It will create a dedicated content item for each of your files. Ultimately it will also convert\nall the current usage of Media Picker Fields to the new Media Library Picker Field.   Disable the module Media  Enable the module Media Library  Click on Upgrade To 1.7 from the menu  Select the Media Library tab and click  Migrate  In the Media Picker Field section click  Migrate  Finally, update any template which was previously using the Media Picker Field directly",
            "title": "Importing Media files into the Media Library"
        },
        {
            "location": "/Documentation/Orchard-1-7-Release-Notes/#contributors",
            "text": "This software would not exist without the community. In particular, for this release,\nwe should all be grateful to the following people who contributed patches and features:   Andrew Connell ( andrewconnell )  Antoine Griffard ( agriffard )  Benedek Farkas ( nightwolf226 )  Bertrand Le Roy ( bertrandleroy )  Damien Clarke ( damoclarke )  Jacky Hsu ( twomeetings )  Jasper Dunker ( jasperd )  Jeff Bullock ( j3ffb )  Jorge Gamba ( jorgegamba )  ( Jimasp )  Kees Schouten ( Znowman )  Ken Wilkinson ( wilk )  Matt Melling ( kobowi )  Michael Petrinolis ( Redbyron )  Mirza Dervi\u0161evi\u0107 ( Mirza )  Nicholas Mayne ( Jetski5822 )  Piotr Szmyd ( pszmyd )  Rafael Medeiros ( rafaelmedeiros )  Sebastien Ros ( sebastienros )  Sergey Romanchuk ( Rezet )  Sipke Schoorstra ( sfmskywalker )  Stanley Goldman ( StanleyGoldman )  Travis James ( GQAdonis )  Zolt\u00e1n Leh\u00f3czky ( Piedone )",
            "title": "Contributors"
        },
        {
            "location": "/Documentation/Orchard-1-6-Release-Notes/",
            "text": "Published: 10/27/2012\n\n\nHow to Install Orchard\n\n\nTo install Orchard using Web PI, follow these instructions:\n\nhttp://docs.orchardproject.net/Documentation/Installing-Orchard\n.\nWeb PI will detect your hardware environment and install the application.\n\n\nAlternatively, to install the release manually, download the Orchard.Web.1.6.zip file.\n\n\nhttp://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file\n\n\nThe zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site.\nPlease make sure you have a machine key\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-machine-key\n\nor you may experience frequent disconnections.\n\n\nWhat file to download?\n\n\nIf you just want to use Orchard and don't care about the source code, Orchard.Web.1.6.zip\nis what you want to use, preferably through the WebPI instructions.\n\n\nIf you want to take a look at the source code, Orchard.Source.1.6.zip is fine.\n\n\nIf you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here:\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment\n\n\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.\n\n\nBranches are described here: \nhttp://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?\n\n\nWho should use this software?\n\n\nThis software is in version 1.6. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.\n\n\nYou are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.\n\n\nWhat's new?\n\n\nOrchard 1.6 fixes bugs and introduces the following features:\n\n\n\n\nASP.NET MVC 4:\n  We upgraded the MVC library to the latest available version.\n\n\nRazor 2:\n The brand new version of the Razor view engine which simplifies many parts of your views. \nDetails here \nhttp://vibrantcode.com/blog/2012/4/10/whats-new-in-razor-v2.html/\n \nand here \nhttp://vibrantcode.com/blog/2012/4/13/what-else-is-new-in-razor-v2.html/\n.\n\n\nWeb API:\n The rest-enabled web framework which lets you create API from Orchard modules\n\n\nMySQL:\n There is now a third option in the setup screen to use MySQL as the database.\n\n\nNHibernate 3.3:\n We upgraded the NHibernate library to the latest available version, allowing module developers \nto leverage database caching.\n\n\nSysCache:\n A default implementation of a database cache provider.\n\n\nPerformance:\n Some work as been done to improve performance in different places like Widgets/Layers and Blog archives.\n\n\nPrecompiled target\n: There is a new \"Precompiled\" build target which generates a build without any source code\n\n\nFile monitoring is off by default\n: When building the website using a build script - usually for deployment - files won't be monitored by default.\n\n\n\n\nSession configuration\n: Sessions behavior can be defined per module and per route, and are on by default\nThe full list of more than 200 fixed bugs for this release can be found here:\n\n\n\n\n\n\nBugs fixed in 1.6\n.\n\n\n\n\n\n\nHow to upgrade from a previous version\n\n\nYou can find migration instructions here: \nhttp://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard\n.\n\n\nNo matter what migration path you take, please take the precaution of making a backup of your\nsite and database first.\n\n\nUpgrading from Orchard 1.3 and earlier\n\n\nOrchard 1.4 introduced breaking changes in the way content URLs are managed. Because of that,\nand if you're migrating from version 1.3 or earlier, the UpgradeTo16 module can be used to migrate\ndata. If you upgrade a site to 1.6RC from 1.3 or earlier and can't\nsee your contents, you probably need to run this module. In order to do that, go to the admin\nsection of the site (by appending /admin to the URL where the home page should be), then go\nto Modules and enable the feature.\n\n\nThe feature, once enabled, adds a new entry to the admin menu: \"Upgrade to 1.6\", that can\nmigrate the Route data of your content items as well as field data from older field modules, and menu items.\n\n\nThemes\n\n\nIf you are using a custom theme, the new Razor parser might fail on the previous version of the LogOn.cshtml \ntemplate. If you have such a file in your theme then you will need to change lines 2 and 3 accordingly:\n\n\n@{\n    var userCanRegister = WorkContext.CurrentSite.As<Orchard.Users.Models.RegistrationSettingsPart>().UsersCanRegister;\n    var enableLostPassword = WorkContext.CurrentSite.As<Orchard.Users.Models.RegistrationSettingsPart>().EnableLostPassword;\n}\n\n\n\nHow to Reset Your Site Data\n\n\nThe \nApp_Data\n directory contains database and settings documents produced during setup.\n\nThe contents of this directory are protected from download by visitors to your site. \n\n\nTo completely reset your site\n (destroy all data, starting from the setup screen again), \nyou can delete the contents of this directory.  This action is irreversible so backup first!\n\n\nFor other known issues, please refer to \nhttp://orchard.codeplex.com/workitem/list/basic\n.\n\n\nContributors\n\n\nThis software would not exist without the community. In particular, for this release,\nwe should all be grateful to the following people who contributed patches and features:\n\n\n\n\nAntoine Griffard (\nagriffard\n)\n\n\nBenedek Farkas (\nnightwolf226\n)\n\n\nBertrand Le Roy (\nbertrandleroy\n)\n\n\nDavid Cornish (\ndavidcornish\n)\n\n\nDavid Hayden (\ndavidhayden\n)\n\n\nGiscard Biamby (\nTheMonarch\n)\n\n\nJeff Bullock (\nj3ffb\n)\n\n\nMartin Skinner (\nfiletek\n)\n\n\nMatt Melling (\nkobowi\n)\n\n\nMichael Yates (\nmjy78\n)\n\n\nNathan Swenson (\nnswenson\n)\n\n\nNicholas Mayne (\nJetski5822\n)\n\n\nPedro Costa (\npnmcosta\n)\n\n\nPiotr Szmyd (\npszmyd\n)\n\n\nRebecca Pleshaw (\nRebecca\n)\n\n\nRickard Pettersson (\nRickardP\n)\n\n\nSebastien Ros (\nsebastienros\n)\n\n\nSergey Ermakovich (\nyermakovich\n)\n\n\nSipke Schoorstra (\nsfmskywalker\n)\n\n\nThomas Bolon (\nstyx31\n)\n\n\nTim Mylemans (\nAimOrchard\n)\n\n\nZolt\u00e1n Leh\u00f3czky (\nPiedone\n)",
            "title": "Orchard 1.6"
        },
        {
            "location": "/Documentation/Orchard-1-6-Release-Notes/#how-to-install-orchard",
            "text": "To install Orchard using Web PI, follow these instructions: http://docs.orchardproject.net/Documentation/Installing-Orchard .\nWeb PI will detect your hardware environment and install the application.  Alternatively, to install the release manually, download the Orchard.Web.1.6.zip file.  http://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file  The zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site.\nPlease make sure you have a machine key http://docs.orchardproject.net/Documentation/Setting-up-a-machine-key \nor you may experience frequent disconnections.",
            "title": "How to Install Orchard"
        },
        {
            "location": "/Documentation/Orchard-1-6-Release-Notes/#what-file-to-download",
            "text": "If you just want to use Orchard and don't care about the source code, Orchard.Web.1.6.zip\nis what you want to use, preferably through the WebPI instructions.  If you want to take a look at the source code, Orchard.Source.1.6.zip is fine.  If you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here: http://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment  Do not attempt to build the WebPI version in VS. Use the full source if you want to use VS.  Branches are described here:  http://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?",
            "title": "What file to download?"
        },
        {
            "location": "/Documentation/Orchard-1-6-Release-Notes/#who-should-use-this-software",
            "text": "This software is in version 1.6. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.  You are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.",
            "title": "Who should use this software?"
        },
        {
            "location": "/Documentation/Orchard-1-6-Release-Notes/#whats-new",
            "text": "Orchard 1.6 fixes bugs and introduces the following features:   ASP.NET MVC 4:   We upgraded the MVC library to the latest available version.  Razor 2:  The brand new version of the Razor view engine which simplifies many parts of your views. \nDetails here  http://vibrantcode.com/blog/2012/4/10/whats-new-in-razor-v2.html/  \nand here  http://vibrantcode.com/blog/2012/4/13/what-else-is-new-in-razor-v2.html/ .  Web API:  The rest-enabled web framework which lets you create API from Orchard modules  MySQL:  There is now a third option in the setup screen to use MySQL as the database.  NHibernate 3.3:  We upgraded the NHibernate library to the latest available version, allowing module developers \nto leverage database caching.  SysCache:  A default implementation of a database cache provider.  Performance:  Some work as been done to improve performance in different places like Widgets/Layers and Blog archives.  Precompiled target : There is a new \"Precompiled\" build target which generates a build without any source code  File monitoring is off by default : When building the website using a build script - usually for deployment - files won't be monitored by default.   Session configuration : Sessions behavior can be defined per module and per route, and are on by default\nThe full list of more than 200 fixed bugs for this release can be found here:    Bugs fixed in 1.6 .",
            "title": "What's new?"
        },
        {
            "location": "/Documentation/Orchard-1-6-Release-Notes/#how-to-upgrade-from-a-previous-version",
            "text": "You can find migration instructions here:  http://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard .  No matter what migration path you take, please take the precaution of making a backup of your\nsite and database first.",
            "title": "How to upgrade from a previous version"
        },
        {
            "location": "/Documentation/Orchard-1-6-Release-Notes/#upgrading-from-orchard-13-and-earlier",
            "text": "Orchard 1.4 introduced breaking changes in the way content URLs are managed. Because of that,\nand if you're migrating from version 1.3 or earlier, the UpgradeTo16 module can be used to migrate\ndata. If you upgrade a site to 1.6RC from 1.3 or earlier and can't\nsee your contents, you probably need to run this module. In order to do that, go to the admin\nsection of the site (by appending /admin to the URL where the home page should be), then go\nto Modules and enable the feature.  The feature, once enabled, adds a new entry to the admin menu: \"Upgrade to 1.6\", that can\nmigrate the Route data of your content items as well as field data from older field modules, and menu items.",
            "title": "Upgrading from Orchard 1.3 and earlier"
        },
        {
            "location": "/Documentation/Orchard-1-6-Release-Notes/#themes",
            "text": "If you are using a custom theme, the new Razor parser might fail on the previous version of the LogOn.cshtml \ntemplate. If you have such a file in your theme then you will need to change lines 2 and 3 accordingly:  @{\n    var userCanRegister = WorkContext.CurrentSite.As<Orchard.Users.Models.RegistrationSettingsPart>().UsersCanRegister;\n    var enableLostPassword = WorkContext.CurrentSite.As<Orchard.Users.Models.RegistrationSettingsPart>().EnableLostPassword;\n}",
            "title": "Themes"
        },
        {
            "location": "/Documentation/Orchard-1-6-Release-Notes/#how-to-reset-your-site-data",
            "text": "The  App_Data  directory contains database and settings documents produced during setup. \nThe contents of this directory are protected from download by visitors to your site.   To completely reset your site  (destroy all data, starting from the setup screen again), \nyou can delete the contents of this directory.  This action is irreversible so backup first!  For other known issues, please refer to  http://orchard.codeplex.com/workitem/list/basic .",
            "title": "How to Reset Your Site Data"
        },
        {
            "location": "/Documentation/Orchard-1-6-Release-Notes/#contributors",
            "text": "This software would not exist without the community. In particular, for this release,\nwe should all be grateful to the following people who contributed patches and features:   Antoine Griffard ( agriffard )  Benedek Farkas ( nightwolf226 )  Bertrand Le Roy ( bertrandleroy )  David Cornish ( davidcornish )  David Hayden ( davidhayden )  Giscard Biamby ( TheMonarch )  Jeff Bullock ( j3ffb )  Martin Skinner ( filetek )  Matt Melling ( kobowi )  Michael Yates ( mjy78 )  Nathan Swenson ( nswenson )  Nicholas Mayne ( Jetski5822 )  Pedro Costa ( pnmcosta )  Piotr Szmyd ( pszmyd )  Rebecca Pleshaw ( Rebecca )  Rickard Pettersson ( RickardP )  Sebastien Ros ( sebastienros )  Sergey Ermakovich ( yermakovich )  Sipke Schoorstra ( sfmskywalker )  Thomas Bolon ( styx31 )  Tim Mylemans ( AimOrchard )  Zolt\u00e1n Leh\u00f3czky ( Piedone )",
            "title": "Contributors"
        },
        {
            "location": "/Documentation/Orchard-1-5-Release-Notes/",
            "text": "Published: 7/18/2012\n\n\nUpdated for version 1.5.1: 7/20/2012\n\n\nHow to Install Orchard\n\n\nTo install Orchard using Web PI, follow these instructions:\n\nhttp://docs.orchardproject.net/Documentation/Installing-Orchard\n.\nWeb PI will detect your hardware environment and install the application.\n\n\nAlternatively, to install the release manually, download the Orchard.Web.1.5.1.zip file.\n\n\nhttp://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file\n\n\nThe zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site.\nPlease make sure you have a machine key\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-machine-key\n\nor you may experience frequent disconnections.\n\n\nWhat file to download?\n\n\nIf you just want to use Orchard and don't care about the source code, Orchard.Web.1.5.1.zip\nis what you want to use, preferably through the WebPI instructions.\n\n\nIf you want to take a look at the source code, OrchardSource.1.5.1.zip is fine.\n\n\nIf you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here:\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment\n\n\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.\n\n\nBranches are described here: \nhttp://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?\n\n\nWho should use this software?\n\n\nThis software is in version 1.5.1. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.\n\n\nYou are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.\n\n\nWhat's new?\n\n\nOrchard 1.5.1 fixes bugs and introduces the following features:\n\n\n\n\nAdmin Search:\n Enables search from the content screen of the admin dashboard.\n\n\nAdmin-based Placement:\n the editor placement of parts and fields can now be overridden from\nthe content type editor.\n\n\nAntiSpam:\n The AntiSpam module provides various spam-fighting features and infrastructure pieces.\nIt makes it possible to prevent spam on arbitrary contents (previous versions of Orchard only had\nanti-spam services on comments). With this module, you can add ReCaptcha, external spam-filtering using\nthe Akismet or TypePad external services or submission limits simply by adding a few parts to your types,\nincluding custom forms.\n\n\nContent Permissions:\n  This module provides a part that can be added to any content type to restrict\nviewing permissions per content item instead of per content type.\n\n\nContent Picker:\n This module provides an extensible content item picker that can be used to build\nrelationships between content items.\n\n\nCustom Forms:\n Custom forms are built as content types, typically using fields. Once you've built\nthe content type for your custom form, you can enable its instances to be created from the front-end\nby anonymous users. This is useful, for example, to create contact forms.\n\n\nNavigation:\n The navigation module now supports hierarchical menus and breadcrumbs. The navigation\nsystem is also now pluggable. Existing applications should replace the Menu part with the new Navigation\npart.\n\n\nLayout placement\n: \nPlacement.info\n files can now use the '/' character to specify Layout zone targets likes this: \"/AsideSecond:10\"\n\n\n\n\nThe full list of fixed bugs for this release can be found here:\n\n\n\n\nBugs fixed in 1.5\n.\n\n\nBugs fixed in 1.5.1\n.\n\n\n\n\nHow to upgrade from a previous version\n\n\nYou can find migration instructions here: \nhttp://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard\n.\n\n\nNo matter what migration path you take, please take the precaution of making a backup of your\nsite and database first.\n\n\nNavigation module\n\n\nYou will need to enable the Content Picker feature before you can edit the navigation.\n\n\n\n\nIn Dashboard -> Modules, search for Content Picker and enable it\n\n\n\n\nIn Orchard 1.5.1 the navigation is no more injected automatically in the Navigation zone. \nBecause of this change you will need to add a widget to render the main menu.\n\n\n\n\nIn Dashboard -> Navigation, search for the Navigation zone and click Add\n\n\nSelect Menu Widget\n\n\nIn Title type \"Main Menu\"\n\n\nUncheck the \"Show title\" checkbox\n\n\nIn Menu select \"Main Menu\"\n\n\nClick the Save button\n\n\n\n\nUpgrading from Orchard 1.3 and earlier\n\n\nOrchard 1.4 introduced breaking changes in the way content URLs are managed. Because of that,\nand if you're migrating from version 1.3 or earlier, the UpgradeTo15 module can be used to migrate\ndata. If you upgrade a site to 1.5.1 from 1.3 or earlier and can't\nsee your contents, you probably need to run this module. In order to do that, go to the admin\nsection of the site (by appending /admin to the URL where the home page should be), then go\nto Modules and enable the feature.\n\n\nThe feature, once enabled, adds a new entry to the admin menu: \"Migrate to 1.5\", that can\nmigrate the Route data of your content items as well as field data from older field modules.\n\n\nSee \nOrchard 1.4 release notes\n for more details.\n\n\nHow to Reset Your Site Data\n\n\nThe \nApp_Data\n directory contains database and settings documents produced during setup.\n\nThe contents of this directory are protected from download by visitors to your site. \n\n\nTo completely reset your site\n (destroy all data, starting from the setup screen again), \nyou can delete the contents of this directory.  This action is irreversible so backup first!\n\n\nFor other known issues, please refer to \nhttp://orchard.codeplex.com/workitem/list/basic\n.\n\n\nContributors\n\n\nThis software would not exist without the community. In particular, for this release,\nwe should all be grateful to the following people who contributed patches and features:\n\n\n\n\nBenedek Farkas (nightwolf226)\n\n\nBertrand Le Roy (bertrandleroy)\n\n\nMartin Skinner (filetek)\n\n\nGeert Doornbos (geertdoornbos)\n\n\nJonas Ledel (JLedel)\n\n\nJohn Murdoch (jrmurdoch)\n\n\nNicholas Mayne (Jetski5822)\n\n\nPiotr Szmyd (pszmyd)\n\n\nSebastien Ros (sebastienros)\n\n\nSean Farrow (SeanFarrow)\n\n\nThomas Bolon (styx31)\n\n\nZolt\u00e1n Leh\u00f3czky (piedone)",
            "title": "Orchard 1.5"
        },
        {
            "location": "/Documentation/Orchard-1-5-Release-Notes/#how-to-install-orchard",
            "text": "To install Orchard using Web PI, follow these instructions: http://docs.orchardproject.net/Documentation/Installing-Orchard .\nWeb PI will detect your hardware environment and install the application.  Alternatively, to install the release manually, download the Orchard.Web.1.5.1.zip file.  http://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file  The zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site.\nPlease make sure you have a machine key http://docs.orchardproject.net/Documentation/Setting-up-a-machine-key \nor you may experience frequent disconnections.",
            "title": "How to Install Orchard"
        },
        {
            "location": "/Documentation/Orchard-1-5-Release-Notes/#what-file-to-download",
            "text": "If you just want to use Orchard and don't care about the source code, Orchard.Web.1.5.1.zip\nis what you want to use, preferably through the WebPI instructions.  If you want to take a look at the source code, OrchardSource.1.5.1.zip is fine.  If you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here: http://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment  Do not attempt to build the WebPI version in VS. Use the full source if you want to use VS.  Branches are described here:  http://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?",
            "title": "What file to download?"
        },
        {
            "location": "/Documentation/Orchard-1-5-Release-Notes/#who-should-use-this-software",
            "text": "This software is in version 1.5.1. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.  You are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.",
            "title": "Who should use this software?"
        },
        {
            "location": "/Documentation/Orchard-1-5-Release-Notes/#whats-new",
            "text": "Orchard 1.5.1 fixes bugs and introduces the following features:   Admin Search:  Enables search from the content screen of the admin dashboard.  Admin-based Placement:  the editor placement of parts and fields can now be overridden from\nthe content type editor.  AntiSpam:  The AntiSpam module provides various spam-fighting features and infrastructure pieces.\nIt makes it possible to prevent spam on arbitrary contents (previous versions of Orchard only had\nanti-spam services on comments). With this module, you can add ReCaptcha, external spam-filtering using\nthe Akismet or TypePad external services or submission limits simply by adding a few parts to your types,\nincluding custom forms.  Content Permissions:   This module provides a part that can be added to any content type to restrict\nviewing permissions per content item instead of per content type.  Content Picker:  This module provides an extensible content item picker that can be used to build\nrelationships between content items.  Custom Forms:  Custom forms are built as content types, typically using fields. Once you've built\nthe content type for your custom form, you can enable its instances to be created from the front-end\nby anonymous users. This is useful, for example, to create contact forms.  Navigation:  The navigation module now supports hierarchical menus and breadcrumbs. The navigation\nsystem is also now pluggable. Existing applications should replace the Menu part with the new Navigation\npart.  Layout placement :  Placement.info  files can now use the '/' character to specify Layout zone targets likes this: \"/AsideSecond:10\"   The full list of fixed bugs for this release can be found here:   Bugs fixed in 1.5 .  Bugs fixed in 1.5.1 .",
            "title": "What's new?"
        },
        {
            "location": "/Documentation/Orchard-1-5-Release-Notes/#how-to-upgrade-from-a-previous-version",
            "text": "You can find migration instructions here:  http://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard .  No matter what migration path you take, please take the precaution of making a backup of your\nsite and database first.",
            "title": "How to upgrade from a previous version"
        },
        {
            "location": "/Documentation/Orchard-1-5-Release-Notes/#navigation-module",
            "text": "You will need to enable the Content Picker feature before you can edit the navigation.   In Dashboard -> Modules, search for Content Picker and enable it   In Orchard 1.5.1 the navigation is no more injected automatically in the Navigation zone. \nBecause of this change you will need to add a widget to render the main menu.   In Dashboard -> Navigation, search for the Navigation zone and click Add  Select Menu Widget  In Title type \"Main Menu\"  Uncheck the \"Show title\" checkbox  In Menu select \"Main Menu\"  Click the Save button",
            "title": "Navigation module"
        },
        {
            "location": "/Documentation/Orchard-1-5-Release-Notes/#upgrading-from-orchard-13-and-earlier",
            "text": "Orchard 1.4 introduced breaking changes in the way content URLs are managed. Because of that,\nand if you're migrating from version 1.3 or earlier, the UpgradeTo15 module can be used to migrate\ndata. If you upgrade a site to 1.5.1 from 1.3 or earlier and can't\nsee your contents, you probably need to run this module. In order to do that, go to the admin\nsection of the site (by appending /admin to the URL where the home page should be), then go\nto Modules and enable the feature.  The feature, once enabled, adds a new entry to the admin menu: \"Migrate to 1.5\", that can\nmigrate the Route data of your content items as well as field data from older field modules.  See  Orchard 1.4 release notes  for more details.",
            "title": "Upgrading from Orchard 1.3 and earlier"
        },
        {
            "location": "/Documentation/Orchard-1-5-Release-Notes/#how-to-reset-your-site-data",
            "text": "The  App_Data  directory contains database and settings documents produced during setup. \nThe contents of this directory are protected from download by visitors to your site.   To completely reset your site  (destroy all data, starting from the setup screen again), \nyou can delete the contents of this directory.  This action is irreversible so backup first!  For other known issues, please refer to  http://orchard.codeplex.com/workitem/list/basic .",
            "title": "How to Reset Your Site Data"
        },
        {
            "location": "/Documentation/Orchard-1-5-Release-Notes/#contributors",
            "text": "This software would not exist without the community. In particular, for this release,\nwe should all be grateful to the following people who contributed patches and features:   Benedek Farkas (nightwolf226)  Bertrand Le Roy (bertrandleroy)  Martin Skinner (filetek)  Geert Doornbos (geertdoornbos)  Jonas Ledel (JLedel)  John Murdoch (jrmurdoch)  Nicholas Mayne (Jetski5822)  Piotr Szmyd (pszmyd)  Sebastien Ros (sebastienros)  Sean Farrow (SeanFarrow)  Thomas Bolon (styx31)  Zolt\u00e1n Leh\u00f3czky (piedone)",
            "title": "Contributors"
        },
        {
            "location": "/Documentation/Orchard-1-4-Release-Notes/",
            "text": "Published: 2/29/2012\n\n\nUpdated 5/4/2012 for version 1.4.1\n\n\nUpdated 5/21/2012 for version 1.4.2\n\n\nHow to Install Orchard\n\n\nTo install Orchard using Web PI, follow these instructions: \nhttp://docs.orchardproject.net/Documentation/Installing-Orchard\n. Web PI will detect your hardware environment and install the application.\n\n\nAlternatively, to install the release manually, download the Orchard.Web.1.4.2.zip file.\n\n\nhttp://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file\n\n\nThe zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site.\nPlease make sure you have a machine key\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-machine-key\n\nor you may experience frequent disconnections.\n\n\nWhat file to download?\n\n\nIf you just want to use Orchard and don't care about the source code, Orchard.Web.1.4.2.zip\nis what you want to use, preferably through the WebPI instructions.\n\n\nIf you want to take a look at the source code, OrchardSource.1.4.2.zip is fine.\n\n\nIf you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here:\n\nhttp://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment\n\n\nDo not attempt to build the WebPI version in VS. Use the full source if you want to use VS.\n\n\nBranches are described here: \nhttp://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?\n\n\nWho should use this software?\n\n\nThis software is in version 1.4.2. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.\n\n\nYou are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.\n\n\nCompatibility with ASP.NET WebPages and ASP.NET MVC\n\n\nThe 1.4.2 release of Orchard is only compatible with ASP.NET MVC 3.\nIf you have installed WebMatrix Betas or RCs, you need to uninstall them from the\nmachine where you run Orchard.\n\n\nNote: if you don't have ASP.NET MVC or WebMatrix installed, you are fine and you don't\nneed to install them first as Orchard will then use its own copy.\n\n\nWhat's new?\n\n\nOrchard 1.4.2 fixes bugs, improves performance and introduces the following features:\n\n\n\n\nAutoroute:\n Set-up token-based patterns for your URLs.\n  David Hayden has a good post describing the feature: \n  \nhttp://www.davidhayden.me/blog/autoroute-custom-patterns-and-route-regeneration-in-orchard-1.4\n\n\nProjector:\n Create arbitrary queries on your site contents, then display the results in projection pages and widgets.\n\n\nFields:\n Orchard now comes with new field types for Boolean, Date/Time, Enumeration, HTML5 Input,\n  Links, Media Picker and Numeric. The text field has a new setting for the flavor which adds\n  html, markdown and textarea to the default text box.\n\n\n\n\nThe full list of fixed bugs for this release can be found here:\n\n\n\n\nBugs fixed in 1.4\n.\n\n\nBugs fixed in 1.4.1\n.\n\n\nBugs fixed in 1.4.2\n\n\n\n\nBreaking Changes\n\n\nOrchard 1.4 introduces a breaking change with the Autoroute and Alias features by removing\nthe Route part that was previously handling URLs and titles for content items.\n\n\nMigrating existing content items can be done with a special module (see next section), but\nit may also happen that some modules that were relying on the presence of Route may stop working.\n\n\nWe've asked all module developers to review their code with the new version, but there may\nstill be incompatible ones out there. If a module misbehaves, please check whether a new version\nis available. If there isn't one, please contact its author through the contact form on the\n\nOrchard Gallery\n.\n\n\nYou may also attempt to fix the modules you need: we have a set of instructions on this thread:\n\nhttp://orchard.codeplex.com/discussions/311109\n\n\nHow to upgrade from a previous version\n\n\nYou can find migration instructions here: \nhttp://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard\n.\n\n\nNo matter what migration path you take, please take the precaution of making a backup of your\nsite and database first.\n\n\nOrchard 1.4 introduces breaking changes in the way content URLs are managed. Because of that,\nthe source code version comes with a special module, UpgradeTo14, that can be used to migrate\ndata from a previous version of Orchard to 1.4. If you upgrade a site to 1.4 code and can't\nsee your contents, you probably need to run this module. In order to do that, go to the admin\nsection of the site (by appending /admin to the URL where the home page should be), then go\nto Modules and enable the feature.\n\n\nThe feature, once enabled, adds a new entry to the admin menu: \"Migrate to 1.4\", that can\nmigrate the Route data of your content items as well as field data from older field modules.\n\n\nTo migrate route data, check the types to migrate, then click the Migrate button. This will\nmove all your route data to the new alias and autoroute feature, it will move your titles\nto the Title part, and it will remove the Route part from your content type definition,\nreplacing it with the newer Autoroute and Title parts.\n\n\nTo migrate field values from existing field features such as Contrib.DateTimeField, click\non the \"Migrate Fields\" tab on the \"Migrate to 1.4\" screen. Check the types you want to\nmigrate, then click the Migrate button.\n\n\nAll your contents should now be restored ad functioning like it was in the previous version\nof Orchard that you were using.\n\n\nHow to Reset Your Site Data\n\n\nThe \nApp_Data\n directory contains database and settings documents produced during setup.\n\nThe contents of this directory are protected from download by visitors to your site. \n\n\nTo completely reset your site\n (destroy all data, starting from the setup screen again), \nyou can delete the contents of this directory.  This action is irreversible so backup first!\n\n\nFor other known issues, please refer to [url:http://orchard.codeplex.com/workitem/list/basic].\n\n\nContributors\n\n\nThis software would not exist without the community. In particular, for this release,\nwe should all be grateful to the following people who contributed patches and features:\n\n\n\n\nJLedel\n\n\nTheMonarch (Giscard Biamby)\n\n\nKevin Kuebler\n\n\nsberry3057\n\n\nmiguelerm\n\n\nstyx31\n\n\npiedone\n\n\nEddieDesk\n\n\nldhertert\n\n\nmartijnl\n\n\nSteve@raptor\n\n\nrandompete (Pete Hurst)\n\n\nagriffard (Antoine Griffard)\n\n\nplanetClaire (Claire Botman)\n\n\nSebastien Ros\n\n\nBertrand Le Roy\n\n\nNicholas Mayne\n\n\n\n\nFor 1.4.1:\n\n\n\n\npiedone\n\n\nfiletek\n\n\npszmyd\n\n\nrdobson\n\n\nNicholas Mayne\n\n\nLaere\n\n\n\n\nFor 1.4.2:\n\n\n\n\njao28\n\n\nClaire Botman",
            "title": "Orchard 1.4"
        },
        {
            "location": "/Documentation/Orchard-1-4-Release-Notes/#how-to-install-orchard",
            "text": "To install Orchard using Web PI, follow these instructions:  http://docs.orchardproject.net/Documentation/Installing-Orchard . Web PI will detect your hardware environment and install the application.  Alternatively, to install the release manually, download the Orchard.Web.1.4.2.zip file.  http://docs.orchardproject.net/Documentation/Manually-installing-Orchard-zip-file  The zip contents are pre-built and ready-to-run. Simply extract the contents of the Orchard\nfolder from the zip contents to an IIS virtual directory (or site root) and then point your\nbrowser to the site. You can also just extract to a local folder and open the Orchard\nfolder in Visual Studio or WebMatrix as a web site.\nPlease make sure you have a machine key http://docs.orchardproject.net/Documentation/Setting-up-a-machine-key \nor you may experience frequent disconnections.",
            "title": "How to Install Orchard"
        },
        {
            "location": "/Documentation/Orchard-1-4-Release-Notes/#what-file-to-download",
            "text": "If you just want to use Orchard and don't care about the source code, Orchard.Web.1.4.2.zip\nis what you want to use, preferably through the WebPI instructions.  If you want to take a look at the source code, OrchardSource.1.4.2.zip is fine.  If you want to setup a development environment for patch or module development,\nyou should clone the repository by following the instructions here: http://docs.orchardproject.net/Documentation/Setting-up-a-source-enlistment  Do not attempt to build the WebPI version in VS. Use the full source if you want to use VS.  Branches are described here:  http://docs.orchardproject.net/Documentation/Developer-FAQ#Whatarethedefaultanddevbranches?WhichoneshouldIbeusing?",
            "title": "What file to download?"
        },
        {
            "location": "/Documentation/Orchard-1-4-Release-Notes/#who-should-use-this-software",
            "text": "This software is in version 1.4.2. The code is in a stable state and constitutes\na solid foundation for building applications, themes and modules.\nSuggestions are welcome in the discussion forums.  You are allowed to use this software in any way that is compatible with the new BSD license.\nThis includes commercial derivative work.",
            "title": "Who should use this software?"
        },
        {
            "location": "/Documentation/Orchard-1-4-Release-Notes/#compatibility-with-aspnet-webpages-and-aspnet-mvc",
            "text": "The 1.4.2 release of Orchard is only compatible with ASP.NET MVC 3.\nIf you have installed WebMatrix Betas or RCs, you need to uninstall them from the\nmachine where you run Orchard.  Note: if you don't have ASP.NET MVC or WebMatrix installed, you are fine and you don't\nneed to install them first as Orchard will then use its own copy.",
            "title": "Compatibility with ASP.NET WebPages and ASP.NET MVC"
        },
        {
            "location": "/Documentation/Orchard-1-4-Release-Notes/#whats-new",
            "text": "Orchard 1.4.2 fixes bugs, improves performance and introduces the following features:   Autoroute:  Set-up token-based patterns for your URLs.\n  David Hayden has a good post describing the feature: \n   http://www.davidhayden.me/blog/autoroute-custom-patterns-and-route-regeneration-in-orchard-1.4  Projector:  Create arbitrary queries on your site contents, then display the results in projection pages and widgets.  Fields:  Orchard now comes with new field types for Boolean, Date/Time, Enumeration, HTML5 Input,\n  Links, Media Picker and Numeric. The text field has a new setting for the flavor which adds\n  html, markdown and textarea to the default text box.   The full list of fixed bugs for this release can be found here:   Bugs fixed in 1.4 .  Bugs fixed in 1.4.1 .  Bugs fixed in 1.4.2",
            "title": "What's new?"
        },
        {
            "location": "/Documentation/Orchard-1-4-Release-Notes/#breaking-changes",
            "text": "Orchard 1.4 introduces a breaking change with the Autoroute and Alias features by removing\nthe Route part that was previously handling URLs and titles for content items.  Migrating existing content items can be done with a special module (see next section), but\nit may also happen that some modules that were relying on the presence of Route may stop working.  We've asked all module developers to review their code with the new version, but there may\nstill be incompatible ones out there. If a module misbehaves, please check whether a new version\nis available. If there isn't one, please contact its author through the contact form on the Orchard Gallery .  You may also attempt to fix the modules you need: we have a set of instructions on this thread: http://orchard.codeplex.com/discussions/311109",
            "title": "Breaking Changes"
        },
        {
            "location": "/Documentation/Orchard-1-4-Release-Notes/#how-to-upgrade-from-a-previous-version",
            "text": "You can find migration instructions here:  http://docs.orchardproject.net/Documentation/Upgrading-a-site-to-a-new-version-of-Orchard .  No matter what migration path you take, please take the precaution of making a backup of your\nsite and database first.  Orchard 1.4 introduces breaking changes in the way content URLs are managed. Because of that,\nthe source code version comes with a special module, UpgradeTo14, that can be used to migrate\ndata from a previous version of Orchard to 1.4. If you upgrade a site to 1.4 code and can't\nsee your contents, you probably need to run this module. In order to do that, go to the admin\nsection of the site (by appending /admin to the URL where the home page should be), then go\nto Modules and enable the feature.  The feature, once enabled, adds a new entry to the admin menu: \"Migrate to 1.4\", that can\nmigrate the Route data of your content items as well as field data from older field modules.  To migrate route data, check the types to migrate, then click the Migrate button. This will\nmove all your route data to the new alias and autoroute feature, it will move your titles\nto the Title part, and it will remove the Route part from your content type definition,\nreplacing it with the newer Autoroute and Title parts.  To migrate field values from existing field features such as Contrib.DateTimeField, click\non the \"Migrate Fields\" tab on the \"Migrate to 1.4\" screen. Check the types you want to\nmigrate, then click the Migrate button.  All your contents should now be restored ad functioning like it was in the previous version\nof Orchard that you were using.",
            "title": "How to upgrade from a previous version"
        },
        {
            "location": "/Documentation/Orchard-1-4-Release-Notes/#how-to-reset-your-site-data",
            "text": "The  App_Data  directory contains database and settings documents produced during setup. \nThe contents of this directory are protected from download by visitors to your site.   To completely reset your site  (destroy all data, starting from the setup screen again), \nyou can delete the contents of this directory.  This action is irreversible so backup first!  For other known issues, please refer to [url:http://orchard.codeplex.com/workitem/list/basic].",
            "title": "How to Reset Your Site Data"
        },
        {
            "location": "/Documentation/Orchard-1-4-Release-Notes/#contributors",
            "text": "This software would not exist without the community. In particular, for this release,\nwe should all be grateful to the following people who contributed patches and features:   JLedel  TheMonarch (Giscard Biamby)  Kevin Kuebler  sberry3057  miguelerm  styx31  piedone  EddieDesk  ldhertert  martijnl  Steve@raptor  randompete (Pete Hurst)  agriffard (Antoine Griffard)  planetClaire (Claire Botman)  Sebastien Ros  Bertrand Le Roy  Nicholas Mayne   For 1.4.1:   piedone  filetek  pszmyd  rdobson  Nicholas Mayne  Laere   For 1.4.2:   jao28  Claire Botman",
            "title": "Contributors"
        },
        {
            "location": "/Documentation/Walkthroughs/",
            "text": "Orchard Branding\n\n\n\n\nBranding svg\n\n\nBranding vectors\n\n\nBranding PSD\n\n\nAdobe Illustrator logo sources\n\n\n\n\nWireframes\n\n\nClick on the walkthrough title to download a zip file containing the numbered images.\n\n\n\n\nBlog\n\n\nComments\n\n\nMedia Management\n\n\nPages\n\n\nRoles and Permissions\n\n\nThemes\n\n\n\n\nThemes\n\n\nPhotoshop and HTML front-end theme mockups.\n\n\n\n\nClassic Theme - html\n\n\nGreen Theme - html\n\n\nDark Theme\n - not implemented\n\n\nBrown Theme\n - not implemented\n\n\n\n\nAdmin UI\n\n\nBelow are some of the more recent admin designs.\n\n\n\n\nLight Admin Theme\n\n\nDark Admin Theme\n\n\nList of posts\n\n\nManage users rev 1\n\n\nManage users rev 2\n\n\n\n\nAdmin UI - Original\n\n\nBelow are some of the original admin designs. These show how the design progressed from something that was strongly branded Orchard to a more generic design.\n\n\n\n\nManage blogs\n\n\nManage pages\n\n\nList of posts\n\n\nZip of admin designs\n\n\n\n\nDesign Concepts & Ideas\n\n\nThese designs and mocks are not related to work we are currently developing.\n\n\nWireframes:\n\n\n\n\nContext buttons deep zoom concept board (Silverlight required)\n\n\nToolbar concept for edit page UI\n\n\nModule install rev 1\n\n\nModule install rev 2\n\n\nPage Builder concept\n\n\nLive edit concept\n\n\n\n\nPhotoShop mocks:\n\n\n\n\nSidebar/toolboxes concept for edit page UI\n\n\nDrawer concept for edit page UI\n\n\nDrawer/tab concept rev 1\n\n\nDrawer/tab concept rev 2\n\n\n\n\nJavaScript & html Mocks\n\n\n\n\nContext publish buttons\n\n\nContext TinyMCE\n\n\nView switcher\n\n\nAdmin buttons\n\n\n\n\nWe use the \nBalsamiq Mockups\n tool to create these walkthroughs.",
            "title": "Walkthroughs and UI Mockups"
        },
        {
            "location": "/Documentation/Walkthroughs/#orchard-branding",
            "text": "Branding svg  Branding vectors  Branding PSD  Adobe Illustrator logo sources",
            "title": "Orchard Branding"
        },
        {
            "location": "/Documentation/Walkthroughs/#wireframes",
            "text": "Click on the walkthrough title to download a zip file containing the numbered images.   Blog  Comments  Media Management  Pages  Roles and Permissions  Themes",
            "title": "Wireframes"
        },
        {
            "location": "/Documentation/Walkthroughs/#themes",
            "text": "Photoshop and HTML front-end theme mockups.   Classic Theme - html  Green Theme - html  Dark Theme  - not implemented  Brown Theme  - not implemented",
            "title": "Themes"
        },
        {
            "location": "/Documentation/Walkthroughs/#admin-ui",
            "text": "Below are some of the more recent admin designs.   Light Admin Theme  Dark Admin Theme  List of posts  Manage users rev 1  Manage users rev 2",
            "title": "Admin UI"
        },
        {
            "location": "/Documentation/Walkthroughs/#admin-ui-original",
            "text": "Below are some of the original admin designs. These show how the design progressed from something that was strongly branded Orchard to a more generic design.   Manage blogs  Manage pages  List of posts  Zip of admin designs",
            "title": "Admin UI - Original"
        },
        {
            "location": "/Documentation/Walkthroughs/#design-concepts-ideas",
            "text": "These designs and mocks are not related to work we are currently developing.  Wireframes:   Context buttons deep zoom concept board (Silverlight required)  Toolbar concept for edit page UI  Module install rev 1  Module install rev 2  Page Builder concept  Live edit concept   PhotoShop mocks:   Sidebar/toolboxes concept for edit page UI  Drawer concept for edit page UI  Drawer/tab concept rev 1  Drawer/tab concept rev 2   JavaScript & html Mocks   Context publish buttons  Context TinyMCE  View switcher  Admin buttons   We use the  Balsamiq Mockups  tool to create these walkthroughs.",
            "title": "Design Concepts &amp; Ideas"
        },
        {
            "location": "/Documentation/Blogs/",
            "text": "Initial feature set\n\n\nPost Creation & Administration\n\n\nThis feature makes it possible to create new blog posts as well as find and edit existing ones (see scenarios below). This should be a consistent  user experience with \nCMS page\n.\n\n\nXML-RPC / Live Writer Integration\n\n\nThe existing \nXML-RPC features\n will be extended to work for blog posts.\n\n\nMedia Integration\n\n\nThe existing \nmedia management\n features will be integrated into the blog post editing experience (including Live Writer).\n\n\nDrafts\n\n\nBlog post drafts will be implemented in a way that is consistent with \nCMS page\n drafts.\n\n\nScheduled Publication\n\n\nScheduled publication of blog posts will be implemented in a way that is consistent with \nCMS page\n scheduled publication.\n\n\nMulti-blog / Multi-author\n\n\nThis feature could potentially be postponed, but if implemented it enables multiple authors to maintain multiple blogs. A given author can create more than one blog, and a given blog can be contributed to by more than one author.\n\n\nThe simple \npermission model\n may need to be modified to enable authorship delegation, or this can be implemented as an ad-hoc feature.\n\n\nArchives\n\n\nThe list of posts can be displayed by month. A list of past months with the number of posts for each month can be displayed.\n\n\nLinkback: trackback, pingback and refback\n\n\nLinkback\n is a generic term that describes one of the three current methods to manage posts linking to each other across blogs.\n\n\nThe blog package should send trackbacks when a post gets created, and should receive refbacks, trackbacks and pingbacks. It should put all three through spam filters and should provide admin UI to manage the linkbacks and configure their moderation (moderation required or not, etc.).\n\n\nRelated aspects\n\n\nA few features that are necessary for any blog engine will be implemented as aspects that can be applied to other content types in addition to blog posts.\n\n\nList of Posts\n\n\nLists of content items need to be implemented for the blog front-end to work. This will be implemented as part of this iteration.\n\n\nRSS/Atom\n\n\nAll lists in the application should be exposed as alternate views that conform to RSS and Atom.\n\n\nComments\n\n\nComments will be implemented with the bare minimum features (name, URL, e-mail, text, date). We will implement spam protection to an external service such as Akismet, and make it swappable in a future iteration.  We will also support authenticated comments (captring user name for comments when a user is logged in).\n\n\nThe implementation is described in \ncomments\n.\n\n\nTags\n\n\nTagging is described in \nTags\n.\n\n\nSearch\n\n\nSearch will not be implemented in the initial blog iteration but will be added later as a cross-content-type aspect.\n\n\nThemes\n\n\nThemes will be implemented for the whole application in a later iteration.\n\n\nPlug-ins\n\n\nPlug-ins will be implemented in a future iteration and will be retrofitted into the existing blog code.\n\n\nBackground tasks\n\n\nBackground tasks will be implemented in this iteration and will be retrofitted where relevant into the existing pages code.\n\n\nWidgets\n\n\nWidgets will be implemented in a future iteration and will be retrofitted where relevant into the existing blog code.\n\n\nFuture features\n\n\nBlogML import and export\n\n\nThis will provide a migration path to and from Oxite and other blogging engines.\n\n\nPermissions\n\n\nHere, owner means the post owner if acting on a post, the blog owner if creating a post, and the site owner when creating a blog.\n\n\n\n\n\n\n\n\nPermission\n\n\nAnon.\n\n\nAuthentic.\n\n\nOwner\n\n\nAdmin.\n\n\nAuthor\n\n\nEditor\n\n\n\n\n\n\n\n\n\n\nView Posts\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nCreate & Manage Blogs\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nNo\n\n\nNo\n\n\n\n\n\n\nCreate & Manage Posts (implies all others)\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nNo\n\n\n\n\n\n\nCreate Drafts\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nNo\n\n\n\n\n\n\nModify/Delete posts\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nPublish/Unpublish/Schedule posts\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\n\n\nAdditional permissions may apply to aspects such as comments or tags.",
            "title": "Blogs"
        },
        {
            "location": "/Documentation/Blogs/#initial-feature-set",
            "text": "",
            "title": "Initial feature set"
        },
        {
            "location": "/Documentation/Blogs/#post-creation-administration",
            "text": "This feature makes it possible to create new blog posts as well as find and edit existing ones (see scenarios below). This should be a consistent  user experience with  CMS page .",
            "title": "Post Creation &amp; Administration"
        },
        {
            "location": "/Documentation/Blogs/#xml-rpc-live-writer-integration",
            "text": "The existing  XML-RPC features  will be extended to work for blog posts.",
            "title": "XML-RPC / Live Writer Integration"
        },
        {
            "location": "/Documentation/Blogs/#media-integration",
            "text": "The existing  media management  features will be integrated into the blog post editing experience (including Live Writer).",
            "title": "Media Integration"
        },
        {
            "location": "/Documentation/Blogs/#drafts",
            "text": "Blog post drafts will be implemented in a way that is consistent with  CMS page  drafts.",
            "title": "Drafts"
        },
        {
            "location": "/Documentation/Blogs/#scheduled-publication",
            "text": "Scheduled publication of blog posts will be implemented in a way that is consistent with  CMS page  scheduled publication.",
            "title": "Scheduled Publication"
        },
        {
            "location": "/Documentation/Blogs/#multi-blog-multi-author",
            "text": "This feature could potentially be postponed, but if implemented it enables multiple authors to maintain multiple blogs. A given author can create more than one blog, and a given blog can be contributed to by more than one author.  The simple  permission model  may need to be modified to enable authorship delegation, or this can be implemented as an ad-hoc feature.",
            "title": "Multi-blog / Multi-author"
        },
        {
            "location": "/Documentation/Blogs/#archives",
            "text": "The list of posts can be displayed by month. A list of past months with the number of posts for each month can be displayed.",
            "title": "Archives"
        },
        {
            "location": "/Documentation/Blogs/#linkback-trackback-pingback-and-refback",
            "text": "Linkback  is a generic term that describes one of the three current methods to manage posts linking to each other across blogs.  The blog package should send trackbacks when a post gets created, and should receive refbacks, trackbacks and pingbacks. It should put all three through spam filters and should provide admin UI to manage the linkbacks and configure their moderation (moderation required or not, etc.).",
            "title": "Linkback: trackback, pingback and refback"
        },
        {
            "location": "/Documentation/Blogs/#related-aspects",
            "text": "A few features that are necessary for any blog engine will be implemented as aspects that can be applied to other content types in addition to blog posts.",
            "title": "Related aspects"
        },
        {
            "location": "/Documentation/Blogs/#list-of-posts",
            "text": "Lists of content items need to be implemented for the blog front-end to work. This will be implemented as part of this iteration.",
            "title": "List of Posts"
        },
        {
            "location": "/Documentation/Blogs/#rssatom",
            "text": "All lists in the application should be exposed as alternate views that conform to RSS and Atom.",
            "title": "RSS/Atom"
        },
        {
            "location": "/Documentation/Blogs/#comments",
            "text": "Comments will be implemented with the bare minimum features (name, URL, e-mail, text, date). We will implement spam protection to an external service such as Akismet, and make it swappable in a future iteration.  We will also support authenticated comments (captring user name for comments when a user is logged in).  The implementation is described in  comments .",
            "title": "Comments"
        },
        {
            "location": "/Documentation/Blogs/#tags",
            "text": "Tagging is described in  Tags .",
            "title": "Tags"
        },
        {
            "location": "/Documentation/Blogs/#search",
            "text": "Search will not be implemented in the initial blog iteration but will be added later as a cross-content-type aspect.",
            "title": "Search"
        },
        {
            "location": "/Documentation/Blogs/#themes",
            "text": "Themes will be implemented for the whole application in a later iteration.",
            "title": "Themes"
        },
        {
            "location": "/Documentation/Blogs/#plug-ins",
            "text": "Plug-ins will be implemented in a future iteration and will be retrofitted into the existing blog code.",
            "title": "Plug-ins"
        },
        {
            "location": "/Documentation/Blogs/#background-tasks",
            "text": "Background tasks will be implemented in this iteration and will be retrofitted where relevant into the existing pages code.",
            "title": "Background tasks"
        },
        {
            "location": "/Documentation/Blogs/#widgets",
            "text": "Widgets will be implemented in a future iteration and will be retrofitted where relevant into the existing blog code.",
            "title": "Widgets"
        },
        {
            "location": "/Documentation/Blogs/#future-features",
            "text": "",
            "title": "Future features"
        },
        {
            "location": "/Documentation/Blogs/#blogml-import-and-export",
            "text": "This will provide a migration path to and from Oxite and other blogging engines.",
            "title": "BlogML import and export"
        },
        {
            "location": "/Documentation/Blogs/#permissions",
            "text": "Here, owner means the post owner if acting on a post, the blog owner if creating a post, and the site owner when creating a blog.     Permission  Anon.  Authentic.  Owner  Admin.  Author  Editor      View Posts  Yes  Yes  Yes  Yes  Yes  Yes    Create & Manage Blogs  No  No  Yes  Yes  No  No    Create & Manage Posts (implies all others)  No  No  Yes  Yes  Yes  No    Create Drafts  No  No  Yes  Yes  Yes  No    Modify/Delete posts  No  No  Yes  Yes  Yes  Yes    Publish/Unpublish/Schedule posts  No  No  Yes  Yes  Yes  Yes     Additional permissions may apply to aspects such as comments or tags.",
            "title": "Permissions"
        },
        {
            "location": "/Documentation/Comments/",
            "text": "Scenarios\n\n\nA user can comment content entries\n\n\n\n\n\n\nUser browses the site and wants to comment a blog post\n\n\n\n\n\n\nUser scrolls down to the bottom of the post and starts entering the mandatory information: name, e-mail and comment. He also enters the URL of his own blog and checks \"remember me\" so that he doesn't have to enter that information when he returns. He clicks the \"add comment\" button.\n\n\n\n\n\n\nValidation rules check that the e-mail, name and text was entered before validating the comment.\n\n\nWhen \"remember me\" is checked, a cookie with a long expiration is set on the client to store the information to remember.\n\n\n\n\nThe comment is published after validation by the spam filter.\n\n\n\n\nA user can receive notifications when answers to his comments are published\n\n\n\n\n\n\nWhen adding a comment, a user can check \"receive e-mail notifications for new comments on this post\".\n\n\n\n\n\n\nA new comment gets added to the same post.\n\n\n\n\n\n\nThe user receives an e-mail to notify him of the new comment.\nThe e-mail contains the text of the new comment and a link (using a # anchor) to the new comment.\n\n\n\n\n\n\nStatus: Not implemented yet\n\n\nA user can subscribe to the comments feed for any item\n\n\n\n\n\n\nThe user can use the feed icon for the comment stream to add it to his favorite feed reader (modus operandi varies with readers and browsers).\n\n\n\n\n\n\nNew comments get published.\n\n\n\n\n\n\nUser sees the new comments in feed reader.\n\n\n\n\n\n\nStatus: Not implemented yet\n\n\nThe site administrator gets notified when new comments are added\n\n\n\n\n\n\nA user adds a comment.\n\n\n\n\n\n\nThe administrator receives an e-mail with a link to the admin UI for comments.\n\n\n\n\n\n\nThe administrator can then click on a comment and moderate it or click the link to the content item in order to answer the new comment.\n\n\n\n\n\n\nStatus: Not implemented yet\n\n\nThe site administrator can manage comments\n\n\n\n\n\n\nThe administrator of the site clicks \"Manage comments\" from the admin UI's global menu or from a \"manage comments for this item\" link at the bottom of the admin UI for a specific content item or from an alert e-mail he received from the site.\n\n\n\n\n\n\nHe checks the checkbox in front of a bunch of comments he recognizes as spam, chooses the \"Delete\" bulk action and clicks \"Apply\".\n\n\n\n\n\n\nHe clicks on a specific unpublished comment, reads it and then clicks \"publish\".\n\n\n\n\n\n\nThe new comment can be read by anyone.\n\n\n\n\n\n\nThe site administrator can configure comment publication rules\n\n\n\n\n\n\nThe administrator goes to the permission administration screen.\n\n\n\n\n\n\nHe changes the \"Add a comment without validation\" right to apply only to authenticated users.\n\n\n\n\n\n\nComments by non-authenticated users are not published by default anymore, but only when an administrator publishes them.\n\n\n\n\n\n\nA content owner can close comments on his items\n\n\n\n\n\n\nA content author feels the comment thread on one of his blog posts is spinning out of control into a troll fest.\n\n\n\n\n\n\nHe clicks \"Close comments on this item\".\n\n\n\n\n\n\nNo new comments can be added.\n\n\n\n\n\n\nComments are threaded\n\n\n\n\n\n\nA user sees a specific comment he wants to answer.\n\n\n\n\n\n\nHe clicks the \"reply\" button next to that specific comment.\n\n\n\n\n\n\nHe types an answer that is stored as an answer to the original comment.\n\n\n\n\n\n\nThe resulting new comment gets added at the end of the comment thread and has a link to the original comment.\n\n\n\n\n\n\nAuthenticated users and author comments appear different\n\n\n\n\n\n\nAn author answers a comment on one of his content items.\n\n\n\n\n\n\nHis comment appears in the comment thread with a different style.\n\n\n\n\n\n\nNote:\n authenticated users' comments could also appear differently (from non-authenticated and also from author comments) as they can have a different weight in people's minds on some sites.\n\n\nSpam protection\n\n\nSpam protection is strictly necessary on a comment feature but is difficult to implement. Fortunately, many solutions already exist and can be integrated into existing applications.\n\n\nThe comment infrastructure should be ready to be extended with various spam protection technologies such as CAPTCHA or Akismet. We will integrate Akismet by default and make it easy for users to obtain their own Akismet key.\n\n\nAdministrators can mark comments as spam rather than delete them, which could result in the comment being fed into the spam protection provider's feedback service.\n\n\nPermissions\n\n\nIn this context, the owner is the owner of the content item being commented (the container of the comments).\n\n\n\n\n\n\n\n\nPermission\n\n\nAnon.\n\n\nAuthentic.\n\n\nOwner\n\n\nAdmin.\n\n\nAuthor\n\n\nEditor\n\n\n\n\n\n\n\n\n\n\nAdd Comments\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nManage Comments (implies all others)\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nNo\n\n\nYes\n\n\n\n\n\n\nClose Comments\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nModerate comments\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nNo\n\n\nYes",
            "title": "Comments"
        },
        {
            "location": "/Documentation/Comments/#scenarios",
            "text": "",
            "title": "Scenarios"
        },
        {
            "location": "/Documentation/Comments/#a-user-can-comment-content-entries",
            "text": "User browses the site and wants to comment a blog post    User scrolls down to the bottom of the post and starts entering the mandatory information: name, e-mail and comment. He also enters the URL of his own blog and checks \"remember me\" so that he doesn't have to enter that information when he returns. He clicks the \"add comment\" button.    Validation rules check that the e-mail, name and text was entered before validating the comment.  When \"remember me\" is checked, a cookie with a long expiration is set on the client to store the information to remember.   The comment is published after validation by the spam filter.",
            "title": "A user can comment content entries"
        },
        {
            "location": "/Documentation/Comments/#a-user-can-receive-notifications-when-answers-to-his-comments-are-published",
            "text": "When adding a comment, a user can check \"receive e-mail notifications for new comments on this post\".    A new comment gets added to the same post.    The user receives an e-mail to notify him of the new comment.\nThe e-mail contains the text of the new comment and a link (using a # anchor) to the new comment.    Status: Not implemented yet",
            "title": "A user can receive notifications when answers to his comments are published"
        },
        {
            "location": "/Documentation/Comments/#a-user-can-subscribe-to-the-comments-feed-for-any-item",
            "text": "The user can use the feed icon for the comment stream to add it to his favorite feed reader (modus operandi varies with readers and browsers).    New comments get published.    User sees the new comments in feed reader.    Status: Not implemented yet",
            "title": "A user can subscribe to the comments feed for any item"
        },
        {
            "location": "/Documentation/Comments/#the-site-administrator-gets-notified-when-new-comments-are-added",
            "text": "A user adds a comment.    The administrator receives an e-mail with a link to the admin UI for comments.    The administrator can then click on a comment and moderate it or click the link to the content item in order to answer the new comment.    Status: Not implemented yet",
            "title": "The site administrator gets notified when new comments are added"
        },
        {
            "location": "/Documentation/Comments/#the-site-administrator-can-manage-comments",
            "text": "The administrator of the site clicks \"Manage comments\" from the admin UI's global menu or from a \"manage comments for this item\" link at the bottom of the admin UI for a specific content item or from an alert e-mail he received from the site.    He checks the checkbox in front of a bunch of comments he recognizes as spam, chooses the \"Delete\" bulk action and clicks \"Apply\".    He clicks on a specific unpublished comment, reads it and then clicks \"publish\".    The new comment can be read by anyone.",
            "title": "The site administrator can manage comments"
        },
        {
            "location": "/Documentation/Comments/#the-site-administrator-can-configure-comment-publication-rules",
            "text": "The administrator goes to the permission administration screen.    He changes the \"Add a comment without validation\" right to apply only to authenticated users.    Comments by non-authenticated users are not published by default anymore, but only when an administrator publishes them.",
            "title": "The site administrator can configure comment publication rules"
        },
        {
            "location": "/Documentation/Comments/#a-content-owner-can-close-comments-on-his-items",
            "text": "A content author feels the comment thread on one of his blog posts is spinning out of control into a troll fest.    He clicks \"Close comments on this item\".    No new comments can be added.",
            "title": "A content owner can close comments on his items"
        },
        {
            "location": "/Documentation/Comments/#comments-are-threaded",
            "text": "A user sees a specific comment he wants to answer.    He clicks the \"reply\" button next to that specific comment.    He types an answer that is stored as an answer to the original comment.    The resulting new comment gets added at the end of the comment thread and has a link to the original comment.",
            "title": "Comments are threaded"
        },
        {
            "location": "/Documentation/Comments/#authenticated-users-and-author-comments-appear-different",
            "text": "An author answers a comment on one of his content items.    His comment appears in the comment thread with a different style.    Note:  authenticated users' comments could also appear differently (from non-authenticated and also from author comments) as they can have a different weight in people's minds on some sites.",
            "title": "Authenticated users and author comments appear different"
        },
        {
            "location": "/Documentation/Comments/#spam-protection",
            "text": "Spam protection is strictly necessary on a comment feature but is difficult to implement. Fortunately, many solutions already exist and can be integrated into existing applications.  The comment infrastructure should be ready to be extended with various spam protection technologies such as CAPTCHA or Akismet. We will integrate Akismet by default and make it easy for users to obtain their own Akismet key.  Administrators can mark comments as spam rather than delete them, which could result in the comment being fed into the spam protection provider's feedback service.",
            "title": "Spam protection"
        },
        {
            "location": "/Documentation/Comments/#permissions",
            "text": "In this context, the owner is the owner of the content item being commented (the container of the comments).     Permission  Anon.  Authentic.  Owner  Admin.  Author  Editor      Add Comments  Yes  Yes  Yes  Yes  Yes  Yes    Manage Comments (implies all others)  No  No  Yes  Yes  No  Yes    Close Comments  No  No  Yes  Yes  Yes  Yes    Moderate comments  No  No  Yes  Yes  No  Yes",
            "title": "Permissions"
        },
        {
            "location": "/Documentation/Content-types/",
            "text": "At the core of the idea of CMS is the ability to extend the system to new content types instead of restricting it\nto pre-defined ones such as blog posts.\n\n\nOrchard has a rich composition model that enables new content types to be created from existing parts\nand extended at runtime. It also enables a development model that is code-centric rather than database-centric:\nfor all practical purposes, database persistence will just happen without the developer having to do anything\nbeyond defining the shape of his objects in code.\n\n\nBasic Concepts\n\n\nContent Item\n\n\nA content item is a piece of content that you'd want to manipulate as a single entity.\nFor example, a blog post is composed of many parts: there is a title, a body, an author, comments, tags, etc.\nBut it is clear that the entity that you want to manipulate is the blog post as a whole.\nOther examples of content items are images, videos, wiki pages, products, forum threads, etc.\n\n\nA content item has an integer id that is unique across the site.\n\n\nThe definition of a content item is voluntarily relatively vague, because we don't want to restrict\nwhat is considered a content item, so that developers can apply the same concepts to a wide array of objects.\n\n\nContent Type\n\n\nA content type can be seen as a category of contents; it represents what a content item is.\nFor example, it's easy to understand that a content item is a blog post, or a photo, or a wiki page.\nThe core of the notion here are in the words \"is a\": if you can say that a given content item is a \"something\",\nthat \"something\" probably is the content type of the content item.\n\n\nIn developer speech, this concept is analogous to the concept of class, although the Orchard type system\nis established at run-time rather than statically determined from definitions in source code.\n\n\nA content type in Orchard is just a name (in other words, it's identified by a simple string).\n\n\nContent Part\n\n\nContent items in Orchard are composed from existing nuggets of data and logic called content parts.\nA content part packages the set of fields and methods that are necessary to implement a particular\nreusable aspect of a content item.\n\n\nAll the parts that form a given content item share the same integer id.\n\n\nFor example, the \"Comments\" part has four properties: lists of published and pending comments,\na flag that determines whether comments are shown, and a flag that determines\nwhether the comment thread is closed. That part can be added to a content type to make it commentable.\nIn this system, the comment aspect doesn't need to know what it's commenting on, and the commented item\ndoesn't need to know that it has comments.\n\n\nThis of course provides high reusability as the composed units are narrow and loosely-coupled aspects.\nStill, the size of the aspects is large enough that they can package a whole feature\n(as opposed to field-level composition that does not enable rich feature sets to be encapsulated as one single entity,\nand to type-level definition of behavior that doesn't provide easy reuse of cross-concerns\nthat apply to more than one content type).\n\n\nRecord\n\n\nA record is a concept that only needs to be known to content-type developers and that doesn't need\nto surface to the end user of the application.\n\n\nA record is the simple code representation of the data for a content part, as an almost Plain CLR Object\nthat is used for persistence of the part in and out of the database.\n\"Almost Plain CLR\" because it usually derives from ContentPartRecord, which gives them an Id and a reference\nto the content item the part is participating in.\n\n\nContent Driver\n\n\nA content driver is similar to an MVC controller, except that it works at the level of the content part.\nIt is responsible for preparing the views of the part, on the front-end, but also as an editor in\nthe content item editor. It also handles post modifications in those editors in order to persist changes.\nFinally, it handles the importing and exporting of the part. In many ways, the driver is the brain of your part.\n\n\nContent Handler\n\n\nA content handler is the object that manages content items and parts.\nIt is a set of services that will chime in whenever the application needs to create parts or items,\namong other tasks. Content providers are built around the idea of a filter, where the application\ncalls into all filters when it needs something, and each filter can decide whether to participate or not,\ndepending on the parameters communicated by the application.\n\n\nFor example, a content handler often manages the persistence of a part into a repository.\n\n\nMost handlers are implemented as a simple assemblage of pre-defined filters.\n\n\nShapes and Templates\n\n\nDrivers create dynamic objects that represent the data to be rendered to the browser. Those objects are\ncalled shapes and correspond to a view model in MVC, except that they represent a single part instead\nof the whole model for the complete view.\n\n\nWhen the time comes to render those shapes and transform them into HTML, Orchard looks in the file system\nfor templates and in special code constructs called shape methods for the most relevant way to handle\nthat specific shape. Templates are typically what you will use. They are typically \n.cshtml\n files found in the Views\nfolder of a theme or module.\n\n\nBuilding a new content type\n\n\nNew content types, and even new content parts, can be built from the admin UI. For more details about\nthis scenario, please read \ncreating custom content types\n.\n\n\nOf course, content parts and types can also be built from code.\nRead the \nGetting Started with Modules course\n or the \nwriting a content part\n guide for examples.\n\n\nComposing types from parts\n\n\nOn its own, a part doesn't do much. To make it useful, we need compose multiple parts\ninto a content type. Here are a few examples of the most frequently used parts:\n\n\n\n\nCommonPart gives an owner, created and last modified dates as well as an optional container (useful for hierarchies of content items such as a book containing chapters that contain pages that contain paragraphs for example).\n\n\nTitlePart gives the item a title\n\n\nAutoroutePart gives the item a path, making it possible to navigate to the item as a page in the front-end.\n\n\nBodyPart adds a body field and a format for that body.\n\n\n\n\nSettings\n\n\nContent parts can have settings that define the behavior of the part for all items of a certain type.\nFor example, a map part can have settings for the default location to map, or for whether the map\nshould be interactive or not.\nThese part settings can be modified from the admin UI by going into Content/Content Types, choosing the content\ntype to configure and then by deploying the section of the part.\n\n\nAdmin Menu\n\n\nModules can plug into the admin system.\nThis can be accomplished by using the INavigationProvider interface in the Orchard.UI.Navigation namespace.\n\n\nHere is an example of an admin menu item:\n\n\npublic class AdminMenu : INavigationProvider {\n    public string MenuName { get { return \"admin\"; } }\n\n    public void GetNavigation(NavigationBuilder builder) {\n        builder.Add(\"Sandbox\", \"1\",\n            menu => menu\n                .Add(\"Manage Something\", \"1.0\",\n                    item => item\n                        .Action(\"List\", \"Admin\", new { area = \"Orchard.Sandbox\" })\n                        .Permission(StandardPermissions.AccessAdminPanel)));\n    }\n}\n\n\n\nNote that we're using Orchard.Security.StandardPermissions.AccessAdminPanel here.\nYou can just as easily define your own permissions using the IPermissionProvider interface.\n\n\nCreating items of a custom type\n\n\nOnce you have created your own content type, you can create items of this type from the admin UI\nby clicking New/YourContentType if the type has been marked \"creatable\".\n\n\nItems can also be created from code:\n\n\nvar custom = _contentManager.Create<CustomPart>(\"CustomType\", part => {\n    part.Record.SomeProperty = \"My property value\";\n});\n\n\n\nQuerying the catalog\n\n\nTo get a specific content item of which you know the id, you can call:\n\n\nvar page = _contentManager.Get<CustomPart>(id);\n\n\n\nIt is also possible to create more general queries against the content manager,\nthat can return lists of items:\n\n\nvar items = _contentManager.Query<TitlePart, TitlePartRecord>()\n    .Where(t => t.Title.Contains(\"foo\"))\n    .OrderBy(r => r.Title)\n    .Slice(10, 5);\n\n\n\nThe code above will get the items 10 to 15 in the list of items that have \"foo\" in their titles, when ordered by title.\n\n\nAccessing the parts of the item\n\n\nTo access the different parts of a content item, you can call the As method on any of the parts:\n\n\nvar body = mypage.As<BodyPart>().Text\n\n\n\nRevisions\n\n\n06-10-2012: rewrite for current version of Orchard (1.4)",
            "title": "Content types"
        },
        {
            "location": "/Documentation/Content-types/#basic-concepts",
            "text": "",
            "title": "Basic Concepts"
        },
        {
            "location": "/Documentation/Content-types/#content-item",
            "text": "A content item is a piece of content that you'd want to manipulate as a single entity.\nFor example, a blog post is composed of many parts: there is a title, a body, an author, comments, tags, etc.\nBut it is clear that the entity that you want to manipulate is the blog post as a whole.\nOther examples of content items are images, videos, wiki pages, products, forum threads, etc.  A content item has an integer id that is unique across the site.  The definition of a content item is voluntarily relatively vague, because we don't want to restrict\nwhat is considered a content item, so that developers can apply the same concepts to a wide array of objects.",
            "title": "Content Item"
        },
        {
            "location": "/Documentation/Content-types/#content-type",
            "text": "A content type can be seen as a category of contents; it represents what a content item is.\nFor example, it's easy to understand that a content item is a blog post, or a photo, or a wiki page.\nThe core of the notion here are in the words \"is a\": if you can say that a given content item is a \"something\",\nthat \"something\" probably is the content type of the content item.  In developer speech, this concept is analogous to the concept of class, although the Orchard type system\nis established at run-time rather than statically determined from definitions in source code.  A content type in Orchard is just a name (in other words, it's identified by a simple string).",
            "title": "Content Type"
        },
        {
            "location": "/Documentation/Content-types/#content-part",
            "text": "Content items in Orchard are composed from existing nuggets of data and logic called content parts.\nA content part packages the set of fields and methods that are necessary to implement a particular\nreusable aspect of a content item.  All the parts that form a given content item share the same integer id.  For example, the \"Comments\" part has four properties: lists of published and pending comments,\na flag that determines whether comments are shown, and a flag that determines\nwhether the comment thread is closed. That part can be added to a content type to make it commentable.\nIn this system, the comment aspect doesn't need to know what it's commenting on, and the commented item\ndoesn't need to know that it has comments.  This of course provides high reusability as the composed units are narrow and loosely-coupled aspects.\nStill, the size of the aspects is large enough that they can package a whole feature\n(as opposed to field-level composition that does not enable rich feature sets to be encapsulated as one single entity,\nand to type-level definition of behavior that doesn't provide easy reuse of cross-concerns\nthat apply to more than one content type).",
            "title": "Content Part"
        },
        {
            "location": "/Documentation/Content-types/#record",
            "text": "A record is a concept that only needs to be known to content-type developers and that doesn't need\nto surface to the end user of the application.  A record is the simple code representation of the data for a content part, as an almost Plain CLR Object\nthat is used for persistence of the part in and out of the database.\n\"Almost Plain CLR\" because it usually derives from ContentPartRecord, which gives them an Id and a reference\nto the content item the part is participating in.",
            "title": "Record"
        },
        {
            "location": "/Documentation/Content-types/#content-driver",
            "text": "A content driver is similar to an MVC controller, except that it works at the level of the content part.\nIt is responsible for preparing the views of the part, on the front-end, but also as an editor in\nthe content item editor. It also handles post modifications in those editors in order to persist changes.\nFinally, it handles the importing and exporting of the part. In many ways, the driver is the brain of your part.",
            "title": "Content Driver"
        },
        {
            "location": "/Documentation/Content-types/#content-handler",
            "text": "A content handler is the object that manages content items and parts.\nIt is a set of services that will chime in whenever the application needs to create parts or items,\namong other tasks. Content providers are built around the idea of a filter, where the application\ncalls into all filters when it needs something, and each filter can decide whether to participate or not,\ndepending on the parameters communicated by the application.  For example, a content handler often manages the persistence of a part into a repository.  Most handlers are implemented as a simple assemblage of pre-defined filters.",
            "title": "Content Handler"
        },
        {
            "location": "/Documentation/Content-types/#shapes-and-templates",
            "text": "Drivers create dynamic objects that represent the data to be rendered to the browser. Those objects are\ncalled shapes and correspond to a view model in MVC, except that they represent a single part instead\nof the whole model for the complete view.  When the time comes to render those shapes and transform them into HTML, Orchard looks in the file system\nfor templates and in special code constructs called shape methods for the most relevant way to handle\nthat specific shape. Templates are typically what you will use. They are typically  .cshtml  files found in the Views\nfolder of a theme or module.",
            "title": "Shapes and Templates"
        },
        {
            "location": "/Documentation/Content-types/#building-a-new-content-type",
            "text": "New content types, and even new content parts, can be built from the admin UI. For more details about\nthis scenario, please read  creating custom content types .  Of course, content parts and types can also be built from code.\nRead the  Getting Started with Modules course  or the  writing a content part  guide for examples.",
            "title": "Building a new content type"
        },
        {
            "location": "/Documentation/Content-types/#composing-types-from-parts",
            "text": "On its own, a part doesn't do much. To make it useful, we need compose multiple parts\ninto a content type. Here are a few examples of the most frequently used parts:   CommonPart gives an owner, created and last modified dates as well as an optional container (useful for hierarchies of content items such as a book containing chapters that contain pages that contain paragraphs for example).  TitlePart gives the item a title  AutoroutePart gives the item a path, making it possible to navigate to the item as a page in the front-end.  BodyPart adds a body field and a format for that body.",
            "title": "Composing types from parts"
        },
        {
            "location": "/Documentation/Content-types/#settings",
            "text": "Content parts can have settings that define the behavior of the part for all items of a certain type.\nFor example, a map part can have settings for the default location to map, or for whether the map\nshould be interactive or not.\nThese part settings can be modified from the admin UI by going into Content/Content Types, choosing the content\ntype to configure and then by deploying the section of the part.",
            "title": "Settings"
        },
        {
            "location": "/Documentation/Content-types/#admin-menu",
            "text": "Modules can plug into the admin system.\nThis can be accomplished by using the INavigationProvider interface in the Orchard.UI.Navigation namespace.  Here is an example of an admin menu item:  public class AdminMenu : INavigationProvider {\n    public string MenuName { get { return \"admin\"; } }\n\n    public void GetNavigation(NavigationBuilder builder) {\n        builder.Add(\"Sandbox\", \"1\",\n            menu => menu\n                .Add(\"Manage Something\", \"1.0\",\n                    item => item\n                        .Action(\"List\", \"Admin\", new { area = \"Orchard.Sandbox\" })\n                        .Permission(StandardPermissions.AccessAdminPanel)));\n    }\n}  Note that we're using Orchard.Security.StandardPermissions.AccessAdminPanel here.\nYou can just as easily define your own permissions using the IPermissionProvider interface.",
            "title": "Admin Menu"
        },
        {
            "location": "/Documentation/Content-types/#creating-items-of-a-custom-type",
            "text": "Once you have created your own content type, you can create items of this type from the admin UI\nby clicking New/YourContentType if the type has been marked \"creatable\".  Items can also be created from code:  var custom = _contentManager.Create<CustomPart>(\"CustomType\", part => {\n    part.Record.SomeProperty = \"My property value\";\n});",
            "title": "Creating items of a custom type"
        },
        {
            "location": "/Documentation/Content-types/#querying-the-catalog",
            "text": "To get a specific content item of which you know the id, you can call:  var page = _contentManager.Get<CustomPart>(id);  It is also possible to create more general queries against the content manager,\nthat can return lists of items:  var items = _contentManager.Query<TitlePart, TitlePartRecord>()\n    .Where(t => t.Title.Contains(\"foo\"))\n    .OrderBy(r => r.Title)\n    .Slice(10, 5);  The code above will get the items 10 to 15 in the list of items that have \"foo\" in their titles, when ordered by title.",
            "title": "Querying the catalog"
        },
        {
            "location": "/Documentation/Content-types/#accessing-the-parts-of-the-item",
            "text": "To access the different parts of a content item, you can call the As method on any of the parts:  var body = mypage.As<BodyPart>().Text",
            "title": "Accessing the parts of the item"
        },
        {
            "location": "/Documentation/Content-types/#revisions",
            "text": "06-10-2012: rewrite for current version of Orchard (1.4)",
            "title": "Revisions"
        },
        {
            "location": "/Documentation/Definitions/",
            "text": "Application\n\n\nAn application is a packaged and ready to use specialized web site.\n\n\nExamples\n\n\nOur CMS application is one example of an application. Other examples include Blog, Wiki, Forum or Media Gallery.\n\n\nContents\n\n\nAn application can be downloaded as source code by developers, but the most common form will include a precompiled dll, images, stylesheets, theme files and possibly a selection of plug-ins.\n\n\nAn application typically includes one or several packages (see definition below).\n\n\nPackaging\n\n\nOrchard applications can be deployed using WebPI, i.e. as MS-Deploy packages. They can also be xcopied into a web site.\n\n\nPackage\n\n\nA package is the deployment vehicle for all extensions. It is a versioned zip archive.\n\n\nTheme\n\n\nA theme is a packaged look and feel for the front-end of the application.\n\n\n\nThemes are also sometimes called skins.\nThe most obvious way to personalize an application, themes provide a simple way to modify the structure and styling of the application markup. They should be easy to create, modify, install and switch. They should enable radical changes in presentation to the point where it would be difficult to tell what application technology is powering the site by looking at its UI or its markup.\n\n\nContents\n\n\nA theme usually consists of a file that contains the meta-data and possibly some helpers, a CSS file, images and markup files. Some if not most of the markup files are templates.\n\n\nPackaging\n\n\nThe theme can either be exploded into its constituent files or can be uploaded under zipped form.\n\n\nTemplate\n\n\nA template is a file that contains only structural markup, but no content-specific markup. For example, a template file may describe a two-column layout. In that case, it would contain a place holder for each of the two columns but it does not specify what contents goes into them. This enables templates to be used to display a wide variety of contents. It enables the separation of layout from contents.\n\n\nContents\n\n\nA template is usually one aspx file that defines the markup for the template and the meta-data of the template (author, available zones, etc.). It can have stylesheet, image or other dependencies.\n\n\nPackaging\n\n\nA template is deployed as part of the views of the application, or as part of a theme or package.\n\n\nWidget\n\n\nA widget is a self-contained piece of UI that can be injected into specific placeholders in application pages.\n\n\nWidgets are similar to WebParts, and like WebParts can be added to predefined zones on the page but they are much simpler in implementation.\nWidgets may surface the features of a plug-in or other feature of the application, and in many cases depend on underlying application or extended features.\n\n\nExamples\n\n\nExamples of widgets include:\n\n category list\n\n latest posts\n\n ads\n\n blogroll\n\n search field\n\n rating UI\n\n\nContents\n\n\nA widget is implemented as a code file (containing meta-data and code), a manifest and at least one user control (also sometimes called partial view in the context of MVC), and optionally an admin user control and resources such as CSS and image files. A widget may have its own controller and routes.\n\n\nPackaging\n\n\nA widget can be either exploded into its different constituent files or packaged into a zip file and uploaded to the application under this form.\nA widget may be packaged together with its dependencies (such as a plug-in or other type of extension).\n\n\nPlug-in\n\n\nA Plug-in is a piece of code that hooks into a specific extensibility point of the application to add new features.\n\n\nPlug-ins are sometimes called add-ons, extensions or modules in other CMS platforms.\n\n\nPlug-ins do not typically expose UI of their own, but may come with one or several specialized widgets whose purpose is to surface their features.\n\n\nExamples\n\n\nExamples of plug-ins include:\n\n replacing emoticon character sequences with images\n\n spam protection\n\n profanity filters\n\n order validation rules\n\n comments\n\n ratings\n\n search\n\n payment\n* shipping\n\n\nCode\n\n\nThe code of a simple plug-in looks like this:\n\n\npublic class LiberalBiasPlugin {\n    public string ProcessHTML(string input) {\n        return input.Replace(\"fox\", \"NPR\");\n    }\n}\n\n\n\nContents\n\n\nA plug-in is typically a single file written in C# (or in another .NET language). Other plug-in managers than the default reflection-based plug-in manager will be able to handle plug-ins written in IronPython or IronRuby, as well as plug-ins that are deployed as precompiled dlls.\n\n\nPackaging\n\n\nA plug-in may be deployed as a simple code file into app_code or as a class in a compiled dll deployed in bin or even in the GAC (although that last option is somewhat unlikely).\n\n\nA plug-in's code file or dll may be distributed and installed as part of a packaged zip file that may contain one or several widgets and corresponding resources.\n\n\nContent-type\n\n\nA content-type is a top-level feature of the application such as blog or wiki, a collection of top-level content entities..\n\n\nExamples\n\n\nExamples of content-types include:\n\n Blog\n\n Wiki\n\n Forum\n\n Product\n* Media\n\n\nPackaging\n\n\nA content-type is typically deployed as part of a package.\n\n\nContent Item\n\n\nA content item is a unit of contents in a content-type.\n\n\nAn item is a concept that is close to an entity but more centered around the idea of contents (as in contents management). An item can appear in a list but will also typically have its own page in the site.\n\n\nExamples\n\n\nExamples of items include:\n\n Blog post\n\n Product\n\n Photo\n\n Video\n* CMS page\n\n\nContents and packaging\n\n\nItems cannot be dissociated from their type.\n\n\nContent part\n\n\nA content part is a feature that can enrich any existing content-types without prior knowledge of the content part by the content-type or by the content-type from the content part.\n\n\nExamples\n\n\nExamples of content parts include:\n\n Search\n\n Tagging\n* Comments",
            "title": "Definitions"
        },
        {
            "location": "/Documentation/Definitions/#application",
            "text": "An application is a packaged and ready to use specialized web site.",
            "title": "Application"
        },
        {
            "location": "/Documentation/Definitions/#examples",
            "text": "Our CMS application is one example of an application. Other examples include Blog, Wiki, Forum or Media Gallery.",
            "title": "Examples"
        },
        {
            "location": "/Documentation/Definitions/#contents",
            "text": "An application can be downloaded as source code by developers, but the most common form will include a precompiled dll, images, stylesheets, theme files and possibly a selection of plug-ins.  An application typically includes one or several packages (see definition below).",
            "title": "Contents"
        },
        {
            "location": "/Documentation/Definitions/#packaging",
            "text": "Orchard applications can be deployed using WebPI, i.e. as MS-Deploy packages. They can also be xcopied into a web site.",
            "title": "Packaging"
        },
        {
            "location": "/Documentation/Definitions/#package",
            "text": "A package is the deployment vehicle for all extensions. It is a versioned zip archive.",
            "title": "Package"
        },
        {
            "location": "/Documentation/Definitions/#theme",
            "text": "A theme is a packaged look and feel for the front-end of the application.  \nThemes are also sometimes called skins.\nThe most obvious way to personalize an application, themes provide a simple way to modify the structure and styling of the application markup. They should be easy to create, modify, install and switch. They should enable radical changes in presentation to the point where it would be difficult to tell what application technology is powering the site by looking at its UI or its markup.",
            "title": "Theme"
        },
        {
            "location": "/Documentation/Definitions/#contents_1",
            "text": "A theme usually consists of a file that contains the meta-data and possibly some helpers, a CSS file, images and markup files. Some if not most of the markup files are templates.",
            "title": "Contents"
        },
        {
            "location": "/Documentation/Definitions/#packaging_1",
            "text": "The theme can either be exploded into its constituent files or can be uploaded under zipped form.",
            "title": "Packaging"
        },
        {
            "location": "/Documentation/Definitions/#template",
            "text": "A template is a file that contains only structural markup, but no content-specific markup. For example, a template file may describe a two-column layout. In that case, it would contain a place holder for each of the two columns but it does not specify what contents goes into them. This enables templates to be used to display a wide variety of contents. It enables the separation of layout from contents.",
            "title": "Template"
        },
        {
            "location": "/Documentation/Definitions/#contents_2",
            "text": "A template is usually one aspx file that defines the markup for the template and the meta-data of the template (author, available zones, etc.). It can have stylesheet, image or other dependencies.",
            "title": "Contents"
        },
        {
            "location": "/Documentation/Definitions/#packaging_2",
            "text": "A template is deployed as part of the views of the application, or as part of a theme or package.",
            "title": "Packaging"
        },
        {
            "location": "/Documentation/Definitions/#widget",
            "text": "A widget is a self-contained piece of UI that can be injected into specific placeholders in application pages.  Widgets are similar to WebParts, and like WebParts can be added to predefined zones on the page but they are much simpler in implementation.\nWidgets may surface the features of a plug-in or other feature of the application, and in many cases depend on underlying application or extended features.",
            "title": "Widget"
        },
        {
            "location": "/Documentation/Definitions/#examples_1",
            "text": "Examples of widgets include:  category list  latest posts  ads  blogroll  search field  rating UI",
            "title": "Examples"
        },
        {
            "location": "/Documentation/Definitions/#contents_3",
            "text": "A widget is implemented as a code file (containing meta-data and code), a manifest and at least one user control (also sometimes called partial view in the context of MVC), and optionally an admin user control and resources such as CSS and image files. A widget may have its own controller and routes.",
            "title": "Contents"
        },
        {
            "location": "/Documentation/Definitions/#packaging_3",
            "text": "A widget can be either exploded into its different constituent files or packaged into a zip file and uploaded to the application under this form.\nA widget may be packaged together with its dependencies (such as a plug-in or other type of extension).",
            "title": "Packaging"
        },
        {
            "location": "/Documentation/Definitions/#plug-in",
            "text": "A Plug-in is a piece of code that hooks into a specific extensibility point of the application to add new features.  Plug-ins are sometimes called add-ons, extensions or modules in other CMS platforms.  Plug-ins do not typically expose UI of their own, but may come with one or several specialized widgets whose purpose is to surface their features.",
            "title": "Plug-in"
        },
        {
            "location": "/Documentation/Definitions/#examples_2",
            "text": "Examples of plug-ins include:  replacing emoticon character sequences with images  spam protection  profanity filters  order validation rules  comments  ratings  search  payment\n* shipping",
            "title": "Examples"
        },
        {
            "location": "/Documentation/Definitions/#code",
            "text": "The code of a simple plug-in looks like this:  public class LiberalBiasPlugin {\n    public string ProcessHTML(string input) {\n        return input.Replace(\"fox\", \"NPR\");\n    }\n}",
            "title": "Code"
        },
        {
            "location": "/Documentation/Definitions/#contents_4",
            "text": "A plug-in is typically a single file written in C# (or in another .NET language). Other plug-in managers than the default reflection-based plug-in manager will be able to handle plug-ins written in IronPython or IronRuby, as well as plug-ins that are deployed as precompiled dlls.",
            "title": "Contents"
        },
        {
            "location": "/Documentation/Definitions/#packaging_4",
            "text": "A plug-in may be deployed as a simple code file into app_code or as a class in a compiled dll deployed in bin or even in the GAC (although that last option is somewhat unlikely).  A plug-in's code file or dll may be distributed and installed as part of a packaged zip file that may contain one or several widgets and corresponding resources.",
            "title": "Packaging"
        },
        {
            "location": "/Documentation/Definitions/#content-type",
            "text": "A content-type is a top-level feature of the application such as blog or wiki, a collection of top-level content entities..",
            "title": "Content-type"
        },
        {
            "location": "/Documentation/Definitions/#examples_3",
            "text": "Examples of content-types include:  Blog  Wiki  Forum  Product\n* Media",
            "title": "Examples"
        },
        {
            "location": "/Documentation/Definitions/#packaging_5",
            "text": "A content-type is typically deployed as part of a package.",
            "title": "Packaging"
        },
        {
            "location": "/Documentation/Definitions/#content-item",
            "text": "A content item is a unit of contents in a content-type.  An item is a concept that is close to an entity but more centered around the idea of contents (as in contents management). An item can appear in a list but will also typically have its own page in the site.",
            "title": "Content Item"
        },
        {
            "location": "/Documentation/Definitions/#examples_4",
            "text": "Examples of items include:  Blog post  Product  Photo  Video\n* CMS page",
            "title": "Examples"
        },
        {
            "location": "/Documentation/Definitions/#contents-and-packaging",
            "text": "Items cannot be dissociated from their type.",
            "title": "Contents and packaging"
        },
        {
            "location": "/Documentation/Definitions/#content-part",
            "text": "A content part is a feature that can enrich any existing content-types without prior knowledge of the content part by the content-type or by the content-type from the content part.",
            "title": "Content part"
        },
        {
            "location": "/Documentation/Definitions/#examples_5",
            "text": "Examples of content parts include:  Search  Tagging\n* Comments",
            "title": "Examples"
        },
        {
            "location": "/Documentation/Fundamentals-doctype/",
            "text": "The choice of a doctype is such a choice that we have to make for our own default themes.\nThis page presents the main points and results of our debate about the choice of a doctype.\n\n\n\n\nTheme authors will ultimately be free to pick any DTD/doctype they want, this only describes the default ones and the ones that we'll build.\n\n\nCross-browser compatibility is a must.\n\n\nHTML 5 is the future-proof choice.\n\n\nXHTML is important to many.\n\n\nIE6 support is hopefully on its way out but is probably still necessary for the front-end.\n\n\nFor the back-end (the admin interface), we have decided to drop IE6 support.\n\n\nIE has never really supported XHTML at all but merely tolerated it (it just renders it because XHTML is constrained HTML with some extra stuff that is getting ignored).\n\n\nXHTML specs recommend serving XHTML with the right MIME type and discourage using several features such as custom namespaces unless that is the case. Unfortunately, that fails in IE.\n\n\nHTML 5 does have an XHTML 5 flavor, but it has been considerably scaled down and is now little more than a serialization format.\n\n\nThe XHTML team at W3C is getting dissolved.\n\n\nNo existing browser supports all of HTML5 yet.\n\n\nThe part of HTML5 markup that is not new will just work on past, present and future browsers.\n\n\nHTML5 and past, present and future browsers are resilient to XHTML syntax such as self-closing tags. It will validate against HTML5.\n\n\nIn reality, browsers ignore the doctype, they have only two modes: quirks and standard (except IE8, which also has IE7 mode, off topic here), pretty much determined by the presence of a doctype, not by its value.\n\n\nWe are going to operate in standard mode no matter what our choice of doctype is.\n\n\nWe should use the subset of HTML 5 that will work in today's browsers.\n\n\nWe should use markup that is XHTML-compatible (self-closing tags, etc.) even if we don't use a true XHTML doctype.\n\n\nWe should make sure our markup validates on the W3C validators.\n\n\n\n\nIn summary, we're recommending the use of the HTML 5 doctype, using the subset of HTML 5 that is compatible with today's browsers and using the XHTML-compatible style.\n\n\nReferences\n\n\n\n\nThe future of XHTML explained as a comic book",
            "title": "HTML doctype"
        },
        {
            "location": "/Documentation/Fundamentals-doctype/#references",
            "text": "The future of XHTML explained as a comic book",
            "title": "References"
        },
        {
            "location": "/Documentation/Linkback/",
            "text": "Orchard should send linkbacks when contents gets created, and should receive refbacks, trackbacks and pingbacks. It should put all three through spam filters and should provide admin UI to manage the linkbacks and configure their moderation (moderation required or not, etc.).\n\n\nSending linkbacks\n\n\nThe Linkback module, when activated for a given content type, should act as a filter on save actions. It should be looking for A tags in the body of the content item and extract the href attribute for each. It should then schedule trackback and pingback pings for each extracted URL.\n\n\n\n\nIssue:\n should only body be scanned for URLs or should we rely on a more generic definition of content text?\n\n\nNote:\n linking back to local contents can be considered like a regular linkback, but some site authors like to only show external ones. For this reason, there should be a setting to only send trackback notifications to external URLs.\n\n\n\n\nSending refback\n\n\nFor refbacks, there isn't anything to do from the sender's end. The first visitor to click the link will implicitly notify the target site.\n\n\nSending trackback\n\n\nOn the scheduled job, the linkback module should do a GET on the linked URL and then scan the results for embedded RDF for the ping URL. If such a ping URL is found, the module should send the trackback ping, according to \nthe trackback specification\n.\n\n\nSending pingback\n\n\nThe GET request that is being made to search for trackback RDF can be re-used to look for pingback HTTP headers or link tags, according to \nthe pingback specification\n. If such a pingback URL is discovered, it should be pinged according to spec.\n\n\nWhen both trackback and pingback are supported\n\n\nWhen both pingback and trackback are discovered to be supported, we should only send the pingback notification.\n\n\nEmbedding trackback and pingback auto-discovery\n\n\nIn order to comply with trackback and pingback specifications, we must include auto-discovery information in any document that must be able to be linked back to. For pingback, there is a choice of using an HTTP header or a link tag. We will use link tags because they are more explicit and easier to fit in our overall UI composition engine.\n\n\nThe linkback module, when activated on the main content item being displayed, will inject the auto-discovery markup for both trackback and pingback into the page, using the same composition engine that is being used for the rest of the page. That markup will point the linkback clients to trackback and pingback actions on the linkback controller.\n\n\nReceiving linkback pings\n\n\nThe linkback controller will receive all notifications for pingback and trackback.\n\n\nFor refback, the linkback module will have to act as a filter in order to handle all incoming GET actions that have a referrer that is different from the current URL.\n\n\nIn all three cases, the linkback module will verify that the targeted content item has linkback enabled (it has a linkback part), and it will then add a record to the list of linkback URLs on the linkback part for that item, if that URL is not already in the list.\n\n\nThe items in the list of linkback URLs have a URL, a title (the extracted title of the linking page), a summary (the summary meta of the linking page if available, null otherwise) and a date (the date the linkback was received).\n\n\nModeration and spam filtering\n\n\nEach linkback to a content item should be moderated and filtered for spam like comments are. See \ncomment specification\n.\n\n\nSettings\n\n\nIt should be possible eventually to configure what content items accept linkbacks. That will be part of the general configuration of parts on content types. That work has not been done yet.\n\n\nIt should be possible to enable or disable each of the three linkback protocols, on the ways in or out.\n\n\nThere should be a setting to enable or disable local/internal linkbacks.\n\n\nPermissions\n\n\nIn this context, the owner is the owner of the content item being linked back to (the container of the linkbacks).\n\n\n\n\n\n\n\n\nPermission\n\n\nAnon.\n\n\nAuthentic.\n\n\nOwner\n\n\nAdmin.\n\n\nAuthor\n\n\nEditor\n\n\n\n\n\n\n\n\n\n\nModerate linkbacks (implies all others)\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nDisable linkbacks\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes",
            "title": "Linkbacks: Pingbacks, Refbacks and Trackbacks"
        },
        {
            "location": "/Documentation/Linkback/#sending-linkbacks",
            "text": "The Linkback module, when activated for a given content type, should act as a filter on save actions. It should be looking for A tags in the body of the content item and extract the href attribute for each. It should then schedule trackback and pingback pings for each extracted URL.   Issue:  should only body be scanned for URLs or should we rely on a more generic definition of content text?  Note:  linking back to local contents can be considered like a regular linkback, but some site authors like to only show external ones. For this reason, there should be a setting to only send trackback notifications to external URLs.",
            "title": "Sending linkbacks"
        },
        {
            "location": "/Documentation/Linkback/#sending-refback",
            "text": "For refbacks, there isn't anything to do from the sender's end. The first visitor to click the link will implicitly notify the target site.",
            "title": "Sending refback"
        },
        {
            "location": "/Documentation/Linkback/#sending-trackback",
            "text": "On the scheduled job, the linkback module should do a GET on the linked URL and then scan the results for embedded RDF for the ping URL. If such a ping URL is found, the module should send the trackback ping, according to  the trackback specification .",
            "title": "Sending trackback"
        },
        {
            "location": "/Documentation/Linkback/#sending-pingback",
            "text": "The GET request that is being made to search for trackback RDF can be re-used to look for pingback HTTP headers or link tags, according to  the pingback specification . If such a pingback URL is discovered, it should be pinged according to spec.",
            "title": "Sending pingback"
        },
        {
            "location": "/Documentation/Linkback/#when-both-trackback-and-pingback-are-supported",
            "text": "When both pingback and trackback are discovered to be supported, we should only send the pingback notification.",
            "title": "When both trackback and pingback are supported"
        },
        {
            "location": "/Documentation/Linkback/#embedding-trackback-and-pingback-auto-discovery",
            "text": "In order to comply with trackback and pingback specifications, we must include auto-discovery information in any document that must be able to be linked back to. For pingback, there is a choice of using an HTTP header or a link tag. We will use link tags because they are more explicit and easier to fit in our overall UI composition engine.  The linkback module, when activated on the main content item being displayed, will inject the auto-discovery markup for both trackback and pingback into the page, using the same composition engine that is being used for the rest of the page. That markup will point the linkback clients to trackback and pingback actions on the linkback controller.",
            "title": "Embedding trackback and pingback auto-discovery"
        },
        {
            "location": "/Documentation/Linkback/#receiving-linkback-pings",
            "text": "The linkback controller will receive all notifications for pingback and trackback.  For refback, the linkback module will have to act as a filter in order to handle all incoming GET actions that have a referrer that is different from the current URL.  In all three cases, the linkback module will verify that the targeted content item has linkback enabled (it has a linkback part), and it will then add a record to the list of linkback URLs on the linkback part for that item, if that URL is not already in the list.  The items in the list of linkback URLs have a URL, a title (the extracted title of the linking page), a summary (the summary meta of the linking page if available, null otherwise) and a date (the date the linkback was received).",
            "title": "Receiving linkback pings"
        },
        {
            "location": "/Documentation/Linkback/#moderation-and-spam-filtering",
            "text": "Each linkback to a content item should be moderated and filtered for spam like comments are. See  comment specification .",
            "title": "Moderation and spam filtering"
        },
        {
            "location": "/Documentation/Linkback/#settings",
            "text": "It should be possible eventually to configure what content items accept linkbacks. That will be part of the general configuration of parts on content types. That work has not been done yet.  It should be possible to enable or disable each of the three linkback protocols, on the ways in or out.  There should be a setting to enable or disable local/internal linkbacks.",
            "title": "Settings"
        },
        {
            "location": "/Documentation/Linkback/#permissions",
            "text": "In this context, the owner is the owner of the content item being linked back to (the container of the linkbacks).     Permission  Anon.  Authentic.  Owner  Admin.  Author  Editor      Moderate linkbacks (implies all others)  No  No  Yes  Yes  Yes  Yes    Disable linkbacks  No  No  Yes  Yes  Yes  Yes",
            "title": "Permissions"
        },
        {
            "location": "/Documentation/Media-management/",
            "text": "Media storage\n\n\nWhen storing media such as images, there are basically two choices: the file system or the database.\n\n\nDatabase storage\n\n\nThe database storage has the advantage that it's relatively easier to set-up and to not require additional writing privileges. When media are attached to other database-bound objects such as a contents page, it also makes the management a little easier as the association between the object and the media it uses is explicit. On the other hand, such a structure also makes it more difficult to reuse media across objects.\n\n\nDatabase storage also provides great freedom to add arbitrary metadata and also handle multiple revisions, drafts, etc.\n\n\nTo properly scale, a database storage for media will probably have to implement many features of a file system, which may be expensive to implement.\n\n\nFrom the end-user management perspective, the database is a black box. The web interface being the only way to explore the contents can be seen as a disadvantage.\n\n\nUploading tools are also more constrained with a database storage: with the file system, any FTP tool can upload, in addition to web-based uploads. With database storage, only web uploads are possible. XML-RPC APIs such as the \nAtom Publishing Protocol\n are appearing though, enabling media publishing from non-web-based tools.\n\n\nAnother problem with the database storage is performance: IIS serves static files a lot faster than dynamic resources.\n\n\nFile system storage\n\n\nStoring media in the file system looks like a natural choice. It makes it very easy to manage the files, even without using the application: open an FTP client, navigate to the contents/media folder and explore at will.\n\n\nFile system storage also enables the application to associate content entities with the media they use by automatically creating folders with the entities' slugs but the association is less robust than with database storage: there is no reference integrity checks and it is possible to delete the media and end up with the dreaded red crosses in web pages. Similarly, if the content goes away and the media are not deleted, this might lead the media folder to slowly rot.\n\n\nMetadata can be managed in the database even if the media is in the file system, but that also leads to integrity problems. Metadata can also be managed with files next to the media files. Finally, most media formats support meta-data right in the media file. For example, photographic formats support EXIF data. Meta-data is best handled using the storage that the media format already provides, as the workflow that produces those media files already uses tools that understand native embedded meta-data formats.\n\n\nFile system or database?\n\n\nThat decision could actually be abstracted away by virtual path providers but those don't run in medium trust on .NET 3.5. Effectively, they will be abstracted away from the outside as they will be available through XML-RPC APIs. Without using virtual path providers, it is still possible to go with an abstraction, enabling for database storage even if our default implementation is the file system.\n\n\nAs the default, we are implementing the file system storage, with a thin abstraction layer to still allow for alternative implementations and easier testing.\n\n\nScenarios\n\n\nFrom the page editor, I can upload an image and insert it into a content zone\n\n\nUsers must be able to upload and use media in their contents without leaving the page editor. The goal of this scenario is that the online content editing experience is on par with the LiveWriter experience.\n\n\nIn the case where JavaScript is enabled, a rich text editor is displayed in admin UI to edit contents. This rich-text editor will be extended to add an \"Upload picture\" button to the editor's toolbar. Pressing this button will bring an overlay dialog that contains a file upload field and an \"Upload\" button. The user would click \"browse\" on the upload field, would navigate to a file on his local hard drive, select it and then click OK to close the choose file dialog. He would then click \"Upload\". The image would then be uploaded, and on completion, would be automatically inserted into the contents being edited at the position of the caret.\n\n\nThe location on the site where the media get uploaded would be similar to the case of LiveWriter post creation. That means in particular that a folder gets auto-created from the slug to contain the uploaded files. For a blog post, the uploading location could be: /media/[slugOfMyBlog]/[SlugOfMyPost]/[ImageFileName].[extension (jpg, png, etc.)].\n\n\nIf an image with the same name already exists in the uploading folder, a number gets automatically appended to the file name to make it unique.\n\n\n\n\nNote:\n Flow 1 below represents a non-JavaScript scenario for the same thing, which we won't implement at this time.\n\n\n\n\nFrom the page editor, I can browse to an existing image and insert it into a content zone\n\n\nSee flow 2 below. Media can be reused across different pieces of contents.\n\n\nI can manage the files on the site\n\n\nSee flow 2 below. Media management has its own specialized management UI.\n\n\nWhen JavaScript is off, I can still upload an image and get its URL as a result, which I can use in an img tag\n\n\nSee flow 1 below. Embedding media in contents is easy with or without JavaScript.\n\n\nPermissions\n\n\nIn this context, owner means the media asset owner when acting on a specific asset, or the folder owner otherwise.\n\n\n\n\nNote:\n Front-end viewing permissions for media are out of the scope of Orchard permissions because media are being served directly by IIS without intervention of the ASP.NET pipeline. Thus, the view permissions for media really are file-level permissions and should be managed at that level if the need arises.\n\n\n\n\nDefault permissions are:\n\n\n\n\n\n\n\n\nPermission\n\n\nAnon.\n\n\nAuthentic.\n\n\nOwner\n\n\nAdmin.\n\n\nAuthor\n\n\nEditor\n\n\n\n\n\n\n\n\n\n\nUpload & manage media (modify/rename/delete)\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nCreate and manage media folders\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nNo\n\n\n\n\n\n\n\n\nFlows\n\n\nFlow 1: media uploading and embedding with JavaScript disabled from the page editor\n\n\n\n\n\n\n\n\n\n\nFlow 2: media management",
            "title": "Media management"
        },
        {
            "location": "/Documentation/Media-management/#media-storage",
            "text": "When storing media such as images, there are basically two choices: the file system or the database.",
            "title": "Media storage"
        },
        {
            "location": "/Documentation/Media-management/#database-storage",
            "text": "The database storage has the advantage that it's relatively easier to set-up and to not require additional writing privileges. When media are attached to other database-bound objects such as a contents page, it also makes the management a little easier as the association between the object and the media it uses is explicit. On the other hand, such a structure also makes it more difficult to reuse media across objects.  Database storage also provides great freedom to add arbitrary metadata and also handle multiple revisions, drafts, etc.  To properly scale, a database storage for media will probably have to implement many features of a file system, which may be expensive to implement.  From the end-user management perspective, the database is a black box. The web interface being the only way to explore the contents can be seen as a disadvantage.  Uploading tools are also more constrained with a database storage: with the file system, any FTP tool can upload, in addition to web-based uploads. With database storage, only web uploads are possible. XML-RPC APIs such as the  Atom Publishing Protocol  are appearing though, enabling media publishing from non-web-based tools.  Another problem with the database storage is performance: IIS serves static files a lot faster than dynamic resources.",
            "title": "Database storage"
        },
        {
            "location": "/Documentation/Media-management/#file-system-storage",
            "text": "Storing media in the file system looks like a natural choice. It makes it very easy to manage the files, even without using the application: open an FTP client, navigate to the contents/media folder and explore at will.  File system storage also enables the application to associate content entities with the media they use by automatically creating folders with the entities' slugs but the association is less robust than with database storage: there is no reference integrity checks and it is possible to delete the media and end up with the dreaded red crosses in web pages. Similarly, if the content goes away and the media are not deleted, this might lead the media folder to slowly rot.  Metadata can be managed in the database even if the media is in the file system, but that also leads to integrity problems. Metadata can also be managed with files next to the media files. Finally, most media formats support meta-data right in the media file. For example, photographic formats support EXIF data. Meta-data is best handled using the storage that the media format already provides, as the workflow that produces those media files already uses tools that understand native embedded meta-data formats.",
            "title": "File system storage"
        },
        {
            "location": "/Documentation/Media-management/#file-system-or-database",
            "text": "That decision could actually be abstracted away by virtual path providers but those don't run in medium trust on .NET 3.5. Effectively, they will be abstracted away from the outside as they will be available through XML-RPC APIs. Without using virtual path providers, it is still possible to go with an abstraction, enabling for database storage even if our default implementation is the file system.  As the default, we are implementing the file system storage, with a thin abstraction layer to still allow for alternative implementations and easier testing.",
            "title": "File system or database?"
        },
        {
            "location": "/Documentation/Media-management/#scenarios",
            "text": "",
            "title": "Scenarios"
        },
        {
            "location": "/Documentation/Media-management/#from-the-page-editor-i-can-upload-an-image-and-insert-it-into-a-content-zone",
            "text": "Users must be able to upload and use media in their contents without leaving the page editor. The goal of this scenario is that the online content editing experience is on par with the LiveWriter experience.  In the case where JavaScript is enabled, a rich text editor is displayed in admin UI to edit contents. This rich-text editor will be extended to add an \"Upload picture\" button to the editor's toolbar. Pressing this button will bring an overlay dialog that contains a file upload field and an \"Upload\" button. The user would click \"browse\" on the upload field, would navigate to a file on his local hard drive, select it and then click OK to close the choose file dialog. He would then click \"Upload\". The image would then be uploaded, and on completion, would be automatically inserted into the contents being edited at the position of the caret.  The location on the site where the media get uploaded would be similar to the case of LiveWriter post creation. That means in particular that a folder gets auto-created from the slug to contain the uploaded files. For a blog post, the uploading location could be: /media/[slugOfMyBlog]/[SlugOfMyPost]/[ImageFileName].[extension (jpg, png, etc.)].  If an image with the same name already exists in the uploading folder, a number gets automatically appended to the file name to make it unique.   Note:  Flow 1 below represents a non-JavaScript scenario for the same thing, which we won't implement at this time.",
            "title": "From the page editor, I can upload an image and insert it into a content zone"
        },
        {
            "location": "/Documentation/Media-management/#from-the-page-editor-i-can-browse-to-an-existing-image-and-insert-it-into-a-content-zone",
            "text": "See flow 2 below. Media can be reused across different pieces of contents.",
            "title": "From the page editor, I can browse to an existing image and insert it into a content zone"
        },
        {
            "location": "/Documentation/Media-management/#i-can-manage-the-files-on-the-site",
            "text": "See flow 2 below. Media management has its own specialized management UI.",
            "title": "I can manage the files on the site"
        },
        {
            "location": "/Documentation/Media-management/#when-javascript-is-off-i-can-still-upload-an-image-and-get-its-url-as-a-result-which-i-can-use-in-an-img-tag",
            "text": "See flow 1 below. Embedding media in contents is easy with or without JavaScript.",
            "title": "When JavaScript is off, I can still upload an image and get its URL as a result, which I can use in an img tag"
        },
        {
            "location": "/Documentation/Media-management/#permissions",
            "text": "In this context, owner means the media asset owner when acting on a specific asset, or the folder owner otherwise.   Note:  Front-end viewing permissions for media are out of the scope of Orchard permissions because media are being served directly by IIS without intervention of the ASP.NET pipeline. Thus, the view permissions for media really are file-level permissions and should be managed at that level if the need arises.   Default permissions are:     Permission  Anon.  Authentic.  Owner  Admin.  Author  Editor      Upload & manage media (modify/rename/delete)  No  No  Yes  Yes  Yes  Yes    Create and manage media folders  No  No  Yes  Yes  Yes  No",
            "title": "Permissions"
        },
        {
            "location": "/Documentation/Media-management/#flows",
            "text": "",
            "title": "Flows"
        },
        {
            "location": "/Documentation/Media-management/#flow-1-media-uploading-and-embedding-with-javascript-disabled-from-the-page-editor",
            "text": "",
            "title": "Flow 1: media uploading and embedding with JavaScript disabled from the page editor"
        },
        {
            "location": "/Documentation/Media-management/#flow-2-media-management",
            "text": "",
            "title": "Flow 2: media management"
        },
        {
            "location": "/Documentation/Navigation/",
            "text": "Navigation and search are an essential part of CMS applications. This specification aims at defining the default navigation menu generation experience.\n\n\nScenarios\n\n\nThe application contains one main menu by default\n\n\nThe application comes preconfigured with one static menu that is present in the header include of the default templates.\n\n\n\n\nThe current implementation only allows one global flat menu for the whole site.\n\n\n\n\nA menu item consists of a name, description, and target route/url\n\n\nThe name and description can have their default values extracted from the object being pointed to if available, and can be overridden on the menu item.\n\n\nThe choice of the target route or URL is made through a URL editor that should eventually become standard and shared for other components to use (for the moment it's just a textbox with validation).\n\n\nMenu items can either point to a statically determined URL, or they can be attached to a routable content item, in which case the URL is not editable but is instead provided by the item's routable aspect.\n\n\nAn administrator can manage the set of menus and menu items from the application's admin panel\n\n\n\n\nThe application currently supports only one menu, without support for nested menus.\n\n\n\n\nThe administrator can create new named menus and modify or delete existing ones.\n\n\nAn administrator can add, enable/disable, reorder, nest and delete menu items within a menu.\n\n\nThe main menu display is determined by a menu template included in the header template, so the markup is customizable by a theme author\n\n\nDisplaying the menu is done by including a partial view and giving it a specific named menu as the model. That partial view can be modified and overridden by themes.\n\n\n\n\nIn the current implementation, there is only one menu, and the partial view is simply named menu.ascx.\n\n\n\n\nThe application may optionally contain one or more sub-menus to be displayed within application sidebar zones\n\n\nThose \"sub-menus\" actually are other named menus. Until we build widgets, these other menus will have to be manually added to templates.\n\n\n\n\nNot implemented.\n\n\n\n\nA navigation menu displays contextual links for every content item\n\n\nSuch a dynamic menu may be implemented as a helper API that asks all content providers to give parents, children (optionally hierarchical to a specified depth) and siblings from a given content item. The results of this call could then get rendered by a partial view using it as the model.\n\n\n\n\nNot implemented.\n\n\n\n\nA user can choose to add a page or post to a menu as part of the page/post editing interface\n\n\nThis should be on by default for pages, off by default for posts.\n\n\nThe UI to add an item to a menu consists of a checkbox (\"Included in navigation menu\") and a name textbox that is pre-filled by default with the title of the item.\n\n\nA menu widget can be configured to display the contents of a menu\n\n\nSee Widgets section for more detail. This is essentially the same scenario as above, except that the partial view is encapsulated into a widget. Will be implemented when the widget infrastructure exists.\n\n\n\n\nNot implemented.\n\n\n\n\nThe menu widget may be configured to show a static or dynamic set of items\n\n\nThe dynamic behavior is to display only the parent/children of the currently displayed item.\n\n\n\n\nNot implemented. Only one static menu at the moment.\n\n\n\n\nThe main menu and menu widget have progressive expand/collapse behavior\n\n\nThe menu widget has a setting for the depth at which it represents the site hierarchy. When JavaScript is not enabled, the sub-menus have a statically defined CSS class that hides them (the downlevel experience could actually be CSS dynamic menus). When JavaScript is enabled, better expansion logic can be added, using a jQuery plug-in preferably (developing a complete JavaScript menu is not a trivial task and could become a project in itself. We should concentrate first on the core scenario).\n\n\n\n\nNot implemented.\n\n\n\n\nThe application exposes an API for accessing menus and menu items that can be called from user code in a template/view\n\n\nThe API that asks content providers to contribute menu hierarchies knowing the current item could also take a menu name. This way, the \"static\" named menus could just be a special, default case of dynamic menus.\n\n\n\n\nNot implemented.\n\n\n\n\nPermissions\n\n\nThe owner in this context is the site owner.\n\n\n\n\n\n\n\n\nPermission\n\n\nAnon.\n\n\nAuthentic.\n\n\nOwner\n\n\nAdmin.\n\n\nAuthor\n\n\nEditor\n\n\n\n\n\n\n\n\n\n\nManage navigation menu\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nNo\n\n\nNo",
            "title": "Navigation"
        },
        {
            "location": "/Documentation/Navigation/#scenarios",
            "text": "",
            "title": "Scenarios"
        },
        {
            "location": "/Documentation/Navigation/#the-application-contains-one-main-menu-by-default",
            "text": "The application comes preconfigured with one static menu that is present in the header include of the default templates.   The current implementation only allows one global flat menu for the whole site.",
            "title": "The application contains one main menu by default"
        },
        {
            "location": "/Documentation/Navigation/#a-menu-item-consists-of-a-name-description-and-target-routeurl",
            "text": "The name and description can have their default values extracted from the object being pointed to if available, and can be overridden on the menu item.  The choice of the target route or URL is made through a URL editor that should eventually become standard and shared for other components to use (for the moment it's just a textbox with validation).  Menu items can either point to a statically determined URL, or they can be attached to a routable content item, in which case the URL is not editable but is instead provided by the item's routable aspect.",
            "title": "A menu item consists of a name, description, and target route/url"
        },
        {
            "location": "/Documentation/Navigation/#an-administrator-can-manage-the-set-of-menus-and-menu-items-from-the-applications-admin-panel",
            "text": "The application currently supports only one menu, without support for nested menus.   The administrator can create new named menus and modify or delete existing ones.  An administrator can add, enable/disable, reorder, nest and delete menu items within a menu.",
            "title": "An administrator can manage the set of menus and menu items from the application's admin panel"
        },
        {
            "location": "/Documentation/Navigation/#the-main-menu-display-is-determined-by-a-menu-template-included-in-the-header-template-so-the-markup-is-customizable-by-a-theme-author",
            "text": "Displaying the menu is done by including a partial view and giving it a specific named menu as the model. That partial view can be modified and overridden by themes.   In the current implementation, there is only one menu, and the partial view is simply named menu.ascx.",
            "title": "The main menu display is determined by a menu template included in the header template, so the markup is customizable by a theme author"
        },
        {
            "location": "/Documentation/Navigation/#the-application-may-optionally-contain-one-or-more-sub-menus-to-be-displayed-within-application-sidebar-zones",
            "text": "Those \"sub-menus\" actually are other named menus. Until we build widgets, these other menus will have to be manually added to templates.   Not implemented.",
            "title": "The application may optionally contain one or more sub-menus to be displayed within application sidebar zones"
        },
        {
            "location": "/Documentation/Navigation/#a-navigation-menu-displays-contextual-links-for-every-content-item",
            "text": "Such a dynamic menu may be implemented as a helper API that asks all content providers to give parents, children (optionally hierarchical to a specified depth) and siblings from a given content item. The results of this call could then get rendered by a partial view using it as the model.   Not implemented.",
            "title": "A navigation menu displays contextual links for every content item"
        },
        {
            "location": "/Documentation/Navigation/#a-user-can-choose-to-add-a-page-or-post-to-a-menu-as-part-of-the-pagepost-editing-interface",
            "text": "This should be on by default for pages, off by default for posts.  The UI to add an item to a menu consists of a checkbox (\"Included in navigation menu\") and a name textbox that is pre-filled by default with the title of the item.",
            "title": "A user can choose to add a page or post to a menu as part of the page/post editing interface"
        },
        {
            "location": "/Documentation/Navigation/#a-menu-widget-can-be-configured-to-display-the-contents-of-a-menu",
            "text": "See Widgets section for more detail. This is essentially the same scenario as above, except that the partial view is encapsulated into a widget. Will be implemented when the widget infrastructure exists.   Not implemented.",
            "title": "A menu widget can be configured to display the contents of a menu"
        },
        {
            "location": "/Documentation/Navigation/#the-menu-widget-may-be-configured-to-show-a-static-or-dynamic-set-of-items",
            "text": "The dynamic behavior is to display only the parent/children of the currently displayed item.   Not implemented. Only one static menu at the moment.",
            "title": "The menu widget may be configured to show a static or dynamic set of items"
        },
        {
            "location": "/Documentation/Navigation/#the-main-menu-and-menu-widget-have-progressive-expandcollapse-behavior",
            "text": "The menu widget has a setting for the depth at which it represents the site hierarchy. When JavaScript is not enabled, the sub-menus have a statically defined CSS class that hides them (the downlevel experience could actually be CSS dynamic menus). When JavaScript is enabled, better expansion logic can be added, using a jQuery plug-in preferably (developing a complete JavaScript menu is not a trivial task and could become a project in itself. We should concentrate first on the core scenario).   Not implemented.",
            "title": "The main menu and menu widget have progressive expand/collapse behavior"
        },
        {
            "location": "/Documentation/Navigation/#the-application-exposes-an-api-for-accessing-menus-and-menu-items-that-can-be-called-from-user-code-in-a-templateview",
            "text": "The API that asks content providers to contribute menu hierarchies knowing the current item could also take a menu name. This way, the \"static\" named menus could just be a special, default case of dynamic menus.   Not implemented.",
            "title": "The application exposes an API for accessing menus and menu items that can be called from user code in a template/view"
        },
        {
            "location": "/Documentation/Navigation/#permissions",
            "text": "The owner in this context is the site owner.     Permission  Anon.  Authentic.  Owner  Admin.  Author  Editor      Manage navigation menu  No  No  Yes  Yes  No  No",
            "title": "Permissions"
        },
        {
            "location": "/Documentation/Pages-editing/",
            "text": "Page creation\n\n\nThe page draft is created in the database when the save or preview button is clicked (preview saves the draft implicitly). In order to save, the state of the page form must be valid.\n\n\nValidation rules\n\n\nThe slug rules are described here: \nSlugs\n.\n\n\n\n\nThe title field cannot be empty. Message: \"Please specify a title.\"\n\n\nThe title field can contain any character except for tabs, newlines/CR and control characters. Message: \"No control characters are allowed in the title field.\"\n\n\nIf the radio button for later publication is checked, a date must be specified. Message: \"Please specify a publication date.\"\n\n\nIf a publication date is specified, it must be parsable under the current culture. Message: \"'{0}' is not recognized as a valid date. An example of a valid date is: '{1}'.\" Substitute {1} with the current date, formatted with the current culture.\n\n\nThe publication date, if specified, must be in the future. \"Please specify a future date.\"\n\n\n\n\nOrphaned contents\n\n\nWhen the user switches the page to a layout that has less zones than the previous ones, he is potentially creating orphaned contents. We don't throw that contents away or try to merge them. We also don't try to reassign if the zone names are different, even if the number of zones is the same.\n\n\nInstead, we display the following message in the top alert zone: \"You have switched to a template that does not have the same content zones as the previous one, resulting in some of your contents not showing up on your site. You can either delete that content or copy it into another zone.\"\n\n\nIn the admin screen for the page, we show the orphaned contents with an alert \"This content is assigned to a zone that does not exist in the current template. Please delete it or copy it to another zone.\"\n\n\nWhen the page is saved, we delete empty orphaned contents. By empty, we mean empty of contents, not necessarily empty string: <p></p> is empty contents. Warning, <img src=\"foo.gif\"/> is not.\n\n\nPreview\n\n\nWhen the user clicks the \"Preview\" button, we need to create a draft. We've considered making that draft \"temporary\" and not a full draft. We also talked about the potential concurrency issues associated with this. Those concurrency issues actually also exist when saving a draft, the difference here is that the operation is implicit.\n\n\nFor the moment, we'll ignore the concurrent editing scenarios and let the latest draft, implicit or explicit, win. There is still always only one draft at any given time.\nClicking preview is exactly equivalent to saving as a draft and then navigating to the url for the draft in a new window. The draft is not automatically deleted.\n\n\nWhen the preview button is clicked and JS is disabled, we save a draft then redirect to the preview page. The user can go back to the edit page UI by clicking \"edit this page\" in the preview or by hitting back.\n\n\nWhen JS is enabled, we can override the default behavior of the button and open the preview in a new window.\n\n\nChanging template\n\n\nThe behavior when clicking the change template button is to be determined. We could warn about unsaved changes when JS is enabled, or we could implicitly save, or we could persist the data in hidden fields.\n\n\nPage Management\n\n\nWe are not implementing parent pages. In future iterations, we'll introduce ways to organize pages and other kinds of contents using tags and / or categories.\n\n\nSecurity\n\n\nWe do not introduce security in the iteration as this would require making a decision on user management / membership, which we are not ready to do at this point. It should be a high priority item for future iterations.\n\n\nMedia Management\n\n\nWe do not implement media management this iteration but it should be a high priority item for future iterations.\n\n\nHistory / Revisions\n\n\nWe do not implement history now but so that we do not have to throw away our implementation of drafts when we do, we implement the draft feature now with history in mind. In particular, the database structure will be the one that we'll eventually use for storing revisions. A draft is a special case of revision.\n\n\nError information bar\n\n\nError messages and warnings in the admin UI are uniformly presented in a colored bar that sits between the title area and the top of the current screen. The bar takes all the width of the page.\n\n\nErrors are on a red background, warnings on an orange background, informational / confirmation messages are on a cream background.\n\n\nWhen JavaScript is enabled, we can animate the appearance of the message (Jon?) to better attract attention.\nThe messages have an optional icon, a type (error / warning / notification) and a text message. They are informational and may state possible action steps for the user, but they do not contain any UI (confirmation or otherwise) other than the icon and message.\n\n\nThe bar is temporary and disappears as soon as any user action results in a POST or an Ajax request.\n\n\nThe bar is able to expand to display more than one message at a time, stacked one above another.\n\n\nThe validation summary when it exists goes into the error bar.\n\n\nThe admin views will have to provide a hook for the message bar to display.\n\n\nDialogs\n\n\nSome user actions will result in the system prompting him for additional information. One such example is bulk delayed publishing, where we need to prompt for the publication date.\n\n\nIn the non-JavaScript case, this is done by displaying the dialog UI as a separate screen.\n\n\nWhen JavaScript is enabled, the same dialog is shown as a lightbox modal dialog style without navigating away from the current page.\n\n\nDialogs have a cancel button.",
            "title": "Page editing"
        },
        {
            "location": "/Documentation/Pages-editing/#page-creation",
            "text": "The page draft is created in the database when the save or preview button is clicked (preview saves the draft implicitly). In order to save, the state of the page form must be valid.",
            "title": "Page creation"
        },
        {
            "location": "/Documentation/Pages-editing/#validation-rules",
            "text": "The slug rules are described here:  Slugs .   The title field cannot be empty. Message: \"Please specify a title.\"  The title field can contain any character except for tabs, newlines/CR and control characters. Message: \"No control characters are allowed in the title field.\"  If the radio button for later publication is checked, a date must be specified. Message: \"Please specify a publication date.\"  If a publication date is specified, it must be parsable under the current culture. Message: \"'{0}' is not recognized as a valid date. An example of a valid date is: '{1}'.\" Substitute {1} with the current date, formatted with the current culture.  The publication date, if specified, must be in the future. \"Please specify a future date.\"",
            "title": "Validation rules"
        },
        {
            "location": "/Documentation/Pages-editing/#orphaned-contents",
            "text": "When the user switches the page to a layout that has less zones than the previous ones, he is potentially creating orphaned contents. We don't throw that contents away or try to merge them. We also don't try to reassign if the zone names are different, even if the number of zones is the same.  Instead, we display the following message in the top alert zone: \"You have switched to a template that does not have the same content zones as the previous one, resulting in some of your contents not showing up on your site. You can either delete that content or copy it into another zone.\"  In the admin screen for the page, we show the orphaned contents with an alert \"This content is assigned to a zone that does not exist in the current template. Please delete it or copy it to another zone.\"  When the page is saved, we delete empty orphaned contents. By empty, we mean empty of contents, not necessarily empty string: <p></p> is empty contents. Warning, <img src=\"foo.gif\"/> is not.",
            "title": "Orphaned contents"
        },
        {
            "location": "/Documentation/Pages-editing/#preview",
            "text": "When the user clicks the \"Preview\" button, we need to create a draft. We've considered making that draft \"temporary\" and not a full draft. We also talked about the potential concurrency issues associated with this. Those concurrency issues actually also exist when saving a draft, the difference here is that the operation is implicit.  For the moment, we'll ignore the concurrent editing scenarios and let the latest draft, implicit or explicit, win. There is still always only one draft at any given time.\nClicking preview is exactly equivalent to saving as a draft and then navigating to the url for the draft in a new window. The draft is not automatically deleted.  When the preview button is clicked and JS is disabled, we save a draft then redirect to the preview page. The user can go back to the edit page UI by clicking \"edit this page\" in the preview or by hitting back.  When JS is enabled, we can override the default behavior of the button and open the preview in a new window.",
            "title": "Preview"
        },
        {
            "location": "/Documentation/Pages-editing/#changing-template",
            "text": "The behavior when clicking the change template button is to be determined. We could warn about unsaved changes when JS is enabled, or we could implicitly save, or we could persist the data in hidden fields.",
            "title": "Changing template"
        },
        {
            "location": "/Documentation/Pages-editing/#page-management",
            "text": "We are not implementing parent pages. In future iterations, we'll introduce ways to organize pages and other kinds of contents using tags and / or categories.",
            "title": "Page Management"
        },
        {
            "location": "/Documentation/Pages-editing/#security",
            "text": "We do not introduce security in the iteration as this would require making a decision on user management / membership, which we are not ready to do at this point. It should be a high priority item for future iterations.",
            "title": "Security"
        },
        {
            "location": "/Documentation/Pages-editing/#media-management",
            "text": "We do not implement media management this iteration but it should be a high priority item for future iterations.",
            "title": "Media Management"
        },
        {
            "location": "/Documentation/Pages-editing/#history-revisions",
            "text": "We do not implement history now but so that we do not have to throw away our implementation of drafts when we do, we implement the draft feature now with history in mind. In particular, the database structure will be the one that we'll eventually use for storing revisions. A draft is a special case of revision.",
            "title": "History / Revisions"
        },
        {
            "location": "/Documentation/Pages-editing/#error-information-bar",
            "text": "Error messages and warnings in the admin UI are uniformly presented in a colored bar that sits between the title area and the top of the current screen. The bar takes all the width of the page.  Errors are on a red background, warnings on an orange background, informational / confirmation messages are on a cream background.  When JavaScript is enabled, we can animate the appearance of the message (Jon?) to better attract attention.\nThe messages have an optional icon, a type (error / warning / notification) and a text message. They are informational and may state possible action steps for the user, but they do not contain any UI (confirmation or otherwise) other than the icon and message.  The bar is temporary and disappears as soon as any user action results in a POST or an Ajax request.  The bar is able to expand to display more than one message at a time, stacked one above another.  The validation summary when it exists goes into the error bar.  The admin views will have to provide a hook for the message bar to display.",
            "title": "Error information bar"
        },
        {
            "location": "/Documentation/Pages-editing/#dialogs",
            "text": "Some user actions will result in the system prompting him for additional information. One such example is bulk delayed publishing, where we need to prompt for the publication date.  In the non-JavaScript case, this is done by displaying the dialog UI as a separate screen.  When JavaScript is enabled, the same dialog is shown as a lightbox modal dialog style without navigating away from the current page.  Dialogs have a cancel button.",
            "title": "Dialogs"
        },
        {
            "location": "/Documentation/Pages/",
            "text": "I can create an empty CMS page and give it a slug from the admin interface. I can then navigate to that page\n\n\nThe CMS module contributes a \"Pages / Add new page\" entry to the admin menu. As part of its initialization, each module will register its admin menu entries as a list of paths and associated action names.\n\n\nClicking that link brings the user to a screen where he can define the title and slug of the new page.\n\n\nThe created pages are empty: no widgets, no contents. They are an empty page with a slug and title.\n\n\nI can find an existing page from the admin UI or from the front end and edit its properties\n\n\nThe admin UI has a list of pages with an edit button next to each. Getting to this page is done by clicking the \"Pages\" or \"Pages / List of pages\" menu entry that the module contributed.\n\n\nFrom the front-end, when the user is logged in as an administrator, a toolbar appears at the bottom of the screen that has an \"Edit Page\" or \"Page properties\" button that takes him to the same back-end admin page as the list mentioned above.\n\n\nFrom a page's admin page, the user can change the slug and title of the page (there will be additional properties as we implement more scenarios).\n\n\nI can delete a CMS page\n\n\nThe back-end list of pages and the front-end admin toolbar have a delete button for each page. Clicking this button brings a confirm button, then deletes the page from the database.\n\n\nWhen we have drafts, deleting a page deletes both the draft and published version if they exist. Similarly, when we have revisions, deleting a page also will delete all revisions.\n\n\nQuestion:\n do we do a hard delete or a soft one? Or both? Do we have a waste bin like Windows and can you undelete? We won't implement those scenarios at first and will do a hard delete. Changing that will be easier when we have the versioning story.\n\n\nI can enter contents for a page I created\n\n\nThe page editor exposes a rudimentary HTML editor (a.k.a. textbox) where I can enter HTML that will get rendered in \"contents\" zones on the page.\n\n\nThe page editor exposes an editor field for each content zone in the current template. The name of the zone is used as the title of the field.\n\n\nWe know that eventually, we'll have to handle different kinds of contents, so we build from the start so that the controller can specify what partial view to use to render contents. The model is the contents that this partial views will have to render.\n\n\nSo for a CMS page, the Model is a dictionary from zone names to HTML strings, and for a product if would be the product object. The results from an action can specify the content partial views to use, which are different from the view as a whole, which really is the layout template to use.\n\n\nAt this point, the view to use is the layout template for the page, while the partial views to render at the content placeholders specified by the template are what the controller decides, and the model is the content object (HTML strings for CMS pages).\n\n\nThe templates specify the content zones by calling into Html.IncludeZone(string zoneName). There can be any number of content zones on a page.\n\n\nNote: when we introduce widgets back into the system, we will provide an overload to IncludeZone that takes a zone type, that type being Content (default) or Widget, or a widget chrome layout name.\n\n\nIssue:\n if the number and names of content zones determines the number and names of content pieces that can be entered by the user, there is a possibility that content pieces can become orphaned if the user changes the template he's using after he built the page. Do we display the orphaned pieces as read-only (so users can still copy and paste to another content zone)? Do we display them at all? Do we still allow editing them? Do we provide an action to remove them?\n\n\nResolution:\n We don't throw that contents away or try to merge them. We also don't try to reassign if the zone names are different, even if the number of zones is the same. Instead, we display the following message in the top alert zone: \"You have switched to a template that does not have the same content zones as the previous one, resulting in some of your contents not showing up on your site. You can either delete that contents or copy it into another zone.\" In the admin screen for the page, we show the orphaned contents with an alert \"This contents is assigned to a zone that does not exist in the current template. Please delete it or copy it to another zone.\" \nWhen the page is saved, we delete empty orphaned contents. By empty, we mean empty of contents, not necessarily empty string: \n<p></p>\n is empty contents. Warning, \n<img src=\"foo.gif\"/>\n is not.\n\n\nI can use a rich text editor to edit contents\n\n\nWhen the browser can handle JavaScript, we replace the content editing text areas with rich text editors. We will start with TinyMCE, and this might become pluggable in the future. At first, we don't implement media management (even images are out of the picture at this point).\n\n\nI can preview the draft version of an edited page before it's published\n\n\nMany CMS only allow the user to modify the published version of the page. In this model, any modification is immediately visible to the world.\n\n\nIn Orchard, saving is a distinct operation from publishing. Editing a page should be doable in an incremental fashion where the user can save the page regularly, without affecting the published site. This is why all edits on the page are saved in draft form until the user chooses to explicitly publish the changes.\n\n\nThe page property screen has a \"preview\" button that opens the modified page in a new window. Clicking \"preview\" effectively creates a draft if one doesn't already exist.\n\n\nWhen I edit or create a page, I can do so without affecting the publicly visible site\n\n\nThis is the draft feature where we store the modified version of the page in a separate database row from the published version.\n\n\nThe transitions between the states of a page is detailed here: \nCMS publication workflow\n.\n\n\nI can choose a layout template for a CMS page\n\n\nThe layout template is the view that will be used to render the page. What template to use is stored with the page in the database. There is a default, default.aspx, to which we can fall back if the template is not found or if none was chosen. The drop-down for the choice of the template shows all the *.aspx files in the templates subdirectory of the views directory.\n\n\nI can easily create my own layout template for the application\n\n\nAny template file in the templates subdirectory of the view directory will be picked up by the system as a template that can be used by CMS pages.\n\n\nI can delay the publication of a page\n\n\nThe page property screen has a \"delayed publication\" button that enables the user to choose the date and time at which the draft version will become the published version.\n\n\nThe UI do determine the status of the modified page gives a choice of:\n\n\n\n\nDraft\n\n\nPublished\n\n\nPending, with UI to pick a date and time for publication\n\n\n\n\nUntil the time the publishing date is reached, the new version of the page is only visible by administrators. Until then, the previously published version (if it exists) is what end-users see at that address on the site.\n\n\nI can view the previous versions of my page and bring them back\n\n\nDesign pending. We might want to save any change as a different versions or only the published ones, or create a new version only when the user explicitly does so. Creating a new version every time the page is published could be a good balance between chattiness and safety.\n\n\nDo we also envision an undo-like feature for the current draft where all changes are saved while editing a draft, but as soon as the page is published, we forget about that local history and just keep the latest as the new version and archive the currently published one? This might be way overkill at first (although pretty cool).\n\n\nAnother thing to consider is how we'll map that feature to contents other than CMS pages: it's easy for pages, but might be tougher on other types of contents.\n\n\nI can restore the site into the state it was on a specific date\n\n\nThe admin UI enables the user to pick a date from the list of recent modifications. The user can preview the site at this date in a separate window. He can restore the state of the whole site to that date.\n\n\nIssue:\n does that apply only to CMS pages or do we allow other modules to expose a similar feature so the whole site, across modules, can be rolled back in one operation? How common is this scenario?\n\n\nI can define and add new widgets to the file system that are auto-discovered by the app, and made available when editing CMS pages\n\n\nWidgets that are put in the Widgets directory of the application will be auto-discovered by Orchard and will then be displayed in the application's admin bar so that they can be added to zones of CMS pages.\n\n\nMy CMS pages display the widgets that have been configured at the application level\n\n\nAt first, we will implement only global widgets, and according to the \nWidgets\n.\n\n\nEach template can expose one or several zones where widgets can be rendered. Adding a widget to one of these zones is done by going to the widgets page of the admin UI, choosing the zone to add the widget to, then clicking \"add widget\" from the list of widgets already in the zone.\n\n\nI can move widgets within a zone to re-order them\n\n\nWidgets can be reordered within a zone or moved from one zone to another.\n\n\nOrchard provides me a number of useful widgets\n\n\nOrchard should come with default widgets that can display navigation menus, plain contents or ads (Widgets will also enventually be available from an online catalog).\n\n\nHere's a tentative list of the first widgets that we will implement:\n\n\n\n\nHTML contents\n\n\nLocal navigation: displays the parent, peers and children of the current page\n\n\nMedia\n\n\nAds\n\n\nPoll\n\n\nRSS\n\n\nSocial networks (share on FaceBook, Twitter, Digg, etc.)\n\n\nTracking / stats\n\n\n\n\nWidgets expose properties and the edit UI is generated automatically, along with handling of data persistence\n\n\nIf no admin view is provided by the widget, Orchard inspects the public properties of the widget class and generates a default admin UI to edit them. Orchard also handles the persistence of these settings into the database.\n\n\nI can expose custom HTML for my widget's edit UI, handling the validation and data persistence myself\n\n\nA widget may expose a specialized edit view to replace the default one that is generated from properties. Doing so is as simple as creating a file named following the convention [widgetname]-edit.ascx.\n\n\nThe widget can also override methods on the base widget class to handle validation and data persistence itself.\n\n\nI can define specific zones in a template that can contain dynamic content widgets or sidebar widgets\n\n\nThe theme author or customizer goes into the page's code and adds a simple call to a helper function to insert a zone into a specific place on the page:\n\n\n<div class=\"colleft fltleft\"> \n    <%= Html.IncludeZone(\"Left Sidebar\"); %>\n</div>\n\n\n\nHe also declares the zone name in the template manifest:\n\n\nName: Two-column layout\nZones: Left Sidebar, Contents\n\n\n\nThis is enough to define a zone.\n\n\nI can customize the chrome that goes around the widgets\n\n\nThe HTML that goes before and after each widget can be customized by modifying user controls that follow a well-defined convention.\n\n\nSome zones need to be rendered with different chrome because of the specific place in the template where they get rendered. For example, the center contents zone will typically have the most real estate on the page and will have widgets stacked vertically, whereas the horizontal menu zone below the header will be much smaller and horizontally stacked. Similarly, a sidebar will have medium width, unlimited height and will be stacked vertically.\n\n\nThe IncludeZone method has an optional parameter to specify what specific layout to use. The name of that layout is a convention that the theme author establishes that maps to a user control in the theme. If no layout is specified, we use a default layout, which is plain rendering based on UL/LI.\n\n\n~/Views/Templates/TwoColumn.aspx\n<html>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheet.css\"/>\n  </head>\n  <body>\n    <div class=\"topNavigationZone\">\n      <%= Html.IncludeZone(\"Top navigation\", \"HorizontalTable\") %>\n    </div>   \n    <div class=\"leftSidebarZone\">\n      <%= Html.IncludeZone(\"Left sidebar\", \"VerticalList\") %>\n    </div>   \n    <div class=\"centerContentZone\">\n      <%= Html.IncludeZone(\"Contents\") %>\n    </div>   \n    <div class=\"footerZone\">\n      <%= Html.IncludeZone(\"Footer zone\", \"Div\") %>\n    </div>   \n    <%= Html.IncludeAdmin(); %>\n  </body>\n</html>\n\n\n\n~/Views/Layouts/VerticalList.ascx\n<ul>\n  <% foreach (var widget in Widgets) { %>\n  <li><h4><%= widget.Title %></h4></li>\n  <li>\n      <% RenderPartial(widget.Content); %>\n  </li>\n  <% } %>\n</ul>\n\n\n\n~/Views/Layouts/HorizontalTable.ascx\n<table><tr>\n  <% foreach (var widget in Widgets) { %>\n    <td><%= widget.Title %></td>\n    <td>\n      <% RenderPartial(widget.Content); %>\n    </td>\n  <% } %>\n</tr></table>\n\n\n\n~/Views/Layouts/Div.ascx\n<% foreach (var widget in Widgets) { %>\n  <div><h4><%= widget.Title %></h4>\n    <% RenderPartial(widget.Content); %>\n  </div>\n<% } %>\n\n\n\nI can manage different widget sets (previously known as page groups) and apply them to my CMS pages\n\n\nThis might be a way of delaying or suppressing the need for local widgets. It avoids the complexity of a full local/global approach while allowing most of the common scenarios.\n\n\nA possible design for this feature is to enable the user to override the default set-up by the template author on what each zone in the template does. The user would then be able to change a content zone to a widget zone using one of the widget sets:\n\n\n\nI can choose a theme to override the default rendering\n\n\nThis is our existing theme feature. Themes can enrich the list of templates shown above. See \nThemes\n.\n\n\nI can create new content types that can be configured and displayed in any CMS page\n\n\nDesign TBD when we have a second content type to add to the application (likely blog or media).\n\n\nI can package my custom content type so other users can install it on their copy of the application\n\n\nDesign TBD.\n\n\nI can install a new content type and start building pages using it\n\n\nDesign TBD.\n\n\nPermissions\n\n\nIn this context, owner means the page owner when acting on a specific page, or the site owner otherwise.\n\n\n\n\n\n\n\n\nPermission\n\n\nAnon.\n\n\nAuthentic.\n\n\nOwner\n\n\nAdmin.\n\n\nAuthor\n\n\nEditor\n\n\n\n\n\n\n\n\n\n\nView pages\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nCreate & manage pages (implies all others)\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nNo\n\n\n\n\n\n\nCreate draft pages\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nNo\n\n\n\n\n\n\nModify/delete pages\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nNo\n\n\n\n\n\n\nPublish/unpublish/schedule pages\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nNo\n\n\n\n\n\n\n\n\nFlows\n\n\n\n\n\n\n\n\n\n\n\n\nWorkflow:\n\n\n\n\n\n\n\n\nPublished\n\n\nDraft\n\n\nTimer\n\n\nSave button defaults to...\n\n\n\n\n\n\n\n\n\n\nYes\n\n\nNo\n\n\nNo\n\n\nPublish Now\n\n\n\n\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nPublish Later\n\n\n\n\n\n\nNo\n\n\nYes\n\n\nNo\n\n\nSave Draft\n\n\n\n\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nPublish Later\n\n\n\n\n\n\nYes\n\n\nYes\n\n\nNo\n\n\nSave Draft\n\n\n\n\n\n\nNo\n\n\nNo\n\n\nNo\n\n\nSave Draft",
            "title": "Page management and publishing"
        },
        {
            "location": "/Documentation/Pages/#i-can-create-an-empty-cms-page-and-give-it-a-slug-from-the-admin-interface-i-can-then-navigate-to-that-page",
            "text": "The CMS module contributes a \"Pages / Add new page\" entry to the admin menu. As part of its initialization, each module will register its admin menu entries as a list of paths and associated action names.  Clicking that link brings the user to a screen where he can define the title and slug of the new page.  The created pages are empty: no widgets, no contents. They are an empty page with a slug and title.",
            "title": "I can create an empty CMS page and give it a slug from the admin interface. I can then navigate to that page"
        },
        {
            "location": "/Documentation/Pages/#i-can-find-an-existing-page-from-the-admin-ui-or-from-the-front-end-and-edit-its-properties",
            "text": "The admin UI has a list of pages with an edit button next to each. Getting to this page is done by clicking the \"Pages\" or \"Pages / List of pages\" menu entry that the module contributed.  From the front-end, when the user is logged in as an administrator, a toolbar appears at the bottom of the screen that has an \"Edit Page\" or \"Page properties\" button that takes him to the same back-end admin page as the list mentioned above.  From a page's admin page, the user can change the slug and title of the page (there will be additional properties as we implement more scenarios).",
            "title": "I can find an existing page from the admin UI or from the front end and edit its properties"
        },
        {
            "location": "/Documentation/Pages/#i-can-delete-a-cms-page",
            "text": "The back-end list of pages and the front-end admin toolbar have a delete button for each page. Clicking this button brings a confirm button, then deletes the page from the database.  When we have drafts, deleting a page deletes both the draft and published version if they exist. Similarly, when we have revisions, deleting a page also will delete all revisions.  Question:  do we do a hard delete or a soft one? Or both? Do we have a waste bin like Windows and can you undelete? We won't implement those scenarios at first and will do a hard delete. Changing that will be easier when we have the versioning story.",
            "title": "I can delete a CMS page"
        },
        {
            "location": "/Documentation/Pages/#i-can-enter-contents-for-a-page-i-created",
            "text": "The page editor exposes a rudimentary HTML editor (a.k.a. textbox) where I can enter HTML that will get rendered in \"contents\" zones on the page.  The page editor exposes an editor field for each content zone in the current template. The name of the zone is used as the title of the field.  We know that eventually, we'll have to handle different kinds of contents, so we build from the start so that the controller can specify what partial view to use to render contents. The model is the contents that this partial views will have to render.  So for a CMS page, the Model is a dictionary from zone names to HTML strings, and for a product if would be the product object. The results from an action can specify the content partial views to use, which are different from the view as a whole, which really is the layout template to use.  At this point, the view to use is the layout template for the page, while the partial views to render at the content placeholders specified by the template are what the controller decides, and the model is the content object (HTML strings for CMS pages).  The templates specify the content zones by calling into Html.IncludeZone(string zoneName). There can be any number of content zones on a page.  Note: when we introduce widgets back into the system, we will provide an overload to IncludeZone that takes a zone type, that type being Content (default) or Widget, or a widget chrome layout name.  Issue:  if the number and names of content zones determines the number and names of content pieces that can be entered by the user, there is a possibility that content pieces can become orphaned if the user changes the template he's using after he built the page. Do we display the orphaned pieces as read-only (so users can still copy and paste to another content zone)? Do we display them at all? Do we still allow editing them? Do we provide an action to remove them?  Resolution:  We don't throw that contents away or try to merge them. We also don't try to reassign if the zone names are different, even if the number of zones is the same. Instead, we display the following message in the top alert zone: \"You have switched to a template that does not have the same content zones as the previous one, resulting in some of your contents not showing up on your site. You can either delete that contents or copy it into another zone.\" In the admin screen for the page, we show the orphaned contents with an alert \"This contents is assigned to a zone that does not exist in the current template. Please delete it or copy it to another zone.\" \nWhen the page is saved, we delete empty orphaned contents. By empty, we mean empty of contents, not necessarily empty string:  <p></p>  is empty contents. Warning,  <img src=\"foo.gif\"/>  is not.",
            "title": "I can enter contents for a page I created"
        },
        {
            "location": "/Documentation/Pages/#i-can-use-a-rich-text-editor-to-edit-contents",
            "text": "When the browser can handle JavaScript, we replace the content editing text areas with rich text editors. We will start with TinyMCE, and this might become pluggable in the future. At first, we don't implement media management (even images are out of the picture at this point).",
            "title": "I can use a rich text editor to edit contents"
        },
        {
            "location": "/Documentation/Pages/#i-can-preview-the-draft-version-of-an-edited-page-before-its-published",
            "text": "Many CMS only allow the user to modify the published version of the page. In this model, any modification is immediately visible to the world.  In Orchard, saving is a distinct operation from publishing. Editing a page should be doable in an incremental fashion where the user can save the page regularly, without affecting the published site. This is why all edits on the page are saved in draft form until the user chooses to explicitly publish the changes.  The page property screen has a \"preview\" button that opens the modified page in a new window. Clicking \"preview\" effectively creates a draft if one doesn't already exist.",
            "title": "I can preview the draft version of an edited page before it's published"
        },
        {
            "location": "/Documentation/Pages/#when-i-edit-or-create-a-page-i-can-do-so-without-affecting-the-publicly-visible-site",
            "text": "This is the draft feature where we store the modified version of the page in a separate database row from the published version.  The transitions between the states of a page is detailed here:  CMS publication workflow .",
            "title": "When I edit or create a page, I can do so without affecting the publicly visible site"
        },
        {
            "location": "/Documentation/Pages/#i-can-choose-a-layout-template-for-a-cms-page",
            "text": "The layout template is the view that will be used to render the page. What template to use is stored with the page in the database. There is a default, default.aspx, to which we can fall back if the template is not found or if none was chosen. The drop-down for the choice of the template shows all the *.aspx files in the templates subdirectory of the views directory.",
            "title": "I can choose a layout template for a CMS page"
        },
        {
            "location": "/Documentation/Pages/#i-can-easily-create-my-own-layout-template-for-the-application",
            "text": "Any template file in the templates subdirectory of the view directory will be picked up by the system as a template that can be used by CMS pages.",
            "title": "I can easily create my own layout template for the application"
        },
        {
            "location": "/Documentation/Pages/#i-can-delay-the-publication-of-a-page",
            "text": "The page property screen has a \"delayed publication\" button that enables the user to choose the date and time at which the draft version will become the published version.  The UI do determine the status of the modified page gives a choice of:   Draft  Published  Pending, with UI to pick a date and time for publication   Until the time the publishing date is reached, the new version of the page is only visible by administrators. Until then, the previously published version (if it exists) is what end-users see at that address on the site.",
            "title": "I can delay the publication of a page"
        },
        {
            "location": "/Documentation/Pages/#i-can-view-the-previous-versions-of-my-page-and-bring-them-back",
            "text": "Design pending. We might want to save any change as a different versions or only the published ones, or create a new version only when the user explicitly does so. Creating a new version every time the page is published could be a good balance between chattiness and safety.  Do we also envision an undo-like feature for the current draft where all changes are saved while editing a draft, but as soon as the page is published, we forget about that local history and just keep the latest as the new version and archive the currently published one? This might be way overkill at first (although pretty cool).  Another thing to consider is how we'll map that feature to contents other than CMS pages: it's easy for pages, but might be tougher on other types of contents.",
            "title": "I can view the previous versions of my page and bring them back"
        },
        {
            "location": "/Documentation/Pages/#i-can-restore-the-site-into-the-state-it-was-on-a-specific-date",
            "text": "The admin UI enables the user to pick a date from the list of recent modifications. The user can preview the site at this date in a separate window. He can restore the state of the whole site to that date.  Issue:  does that apply only to CMS pages or do we allow other modules to expose a similar feature so the whole site, across modules, can be rolled back in one operation? How common is this scenario?",
            "title": "I can restore the site into the state it was on a specific date"
        },
        {
            "location": "/Documentation/Pages/#i-can-define-and-add-new-widgets-to-the-file-system-that-are-auto-discovered-by-the-app-and-made-available-when-editing-cms-pages",
            "text": "Widgets that are put in the Widgets directory of the application will be auto-discovered by Orchard and will then be displayed in the application's admin bar so that they can be added to zones of CMS pages.",
            "title": "I can define and add new widgets to the file system that are auto-discovered by the app, and made available when editing CMS pages"
        },
        {
            "location": "/Documentation/Pages/#my-cms-pages-display-the-widgets-that-have-been-configured-at-the-application-level",
            "text": "At first, we will implement only global widgets, and according to the  Widgets .  Each template can expose one or several zones where widgets can be rendered. Adding a widget to one of these zones is done by going to the widgets page of the admin UI, choosing the zone to add the widget to, then clicking \"add widget\" from the list of widgets already in the zone.",
            "title": "My CMS pages display the widgets that have been configured at the application level"
        },
        {
            "location": "/Documentation/Pages/#i-can-move-widgets-within-a-zone-to-re-order-them",
            "text": "Widgets can be reordered within a zone or moved from one zone to another.",
            "title": "I can move widgets within a zone to re-order them"
        },
        {
            "location": "/Documentation/Pages/#orchard-provides-me-a-number-of-useful-widgets",
            "text": "Orchard should come with default widgets that can display navigation menus, plain contents or ads (Widgets will also enventually be available from an online catalog).  Here's a tentative list of the first widgets that we will implement:   HTML contents  Local navigation: displays the parent, peers and children of the current page  Media  Ads  Poll  RSS  Social networks (share on FaceBook, Twitter, Digg, etc.)  Tracking / stats",
            "title": "Orchard provides me a number of useful widgets"
        },
        {
            "location": "/Documentation/Pages/#widgets-expose-properties-and-the-edit-ui-is-generated-automatically-along-with-handling-of-data-persistence",
            "text": "If no admin view is provided by the widget, Orchard inspects the public properties of the widget class and generates a default admin UI to edit them. Orchard also handles the persistence of these settings into the database.",
            "title": "Widgets expose properties and the edit UI is generated automatically, along with handling of data persistence"
        },
        {
            "location": "/Documentation/Pages/#i-can-expose-custom-html-for-my-widgets-edit-ui-handling-the-validation-and-data-persistence-myself",
            "text": "A widget may expose a specialized edit view to replace the default one that is generated from properties. Doing so is as simple as creating a file named following the convention [widgetname]-edit.ascx.  The widget can also override methods on the base widget class to handle validation and data persistence itself.",
            "title": "I can expose custom HTML for my widget's edit UI, handling the validation and data persistence myself"
        },
        {
            "location": "/Documentation/Pages/#i-can-define-specific-zones-in-a-template-that-can-contain-dynamic-content-widgets-or-sidebar-widgets",
            "text": "The theme author or customizer goes into the page's code and adds a simple call to a helper function to insert a zone into a specific place on the page:  <div class=\"colleft fltleft\"> \n    <%= Html.IncludeZone(\"Left Sidebar\"); %>\n</div>  He also declares the zone name in the template manifest:  Name: Two-column layout\nZones: Left Sidebar, Contents  This is enough to define a zone.",
            "title": "I can define specific zones in a template that can contain dynamic content widgets or sidebar widgets"
        },
        {
            "location": "/Documentation/Pages/#i-can-customize-the-chrome-that-goes-around-the-widgets",
            "text": "The HTML that goes before and after each widget can be customized by modifying user controls that follow a well-defined convention.  Some zones need to be rendered with different chrome because of the specific place in the template where they get rendered. For example, the center contents zone will typically have the most real estate on the page and will have widgets stacked vertically, whereas the horizontal menu zone below the header will be much smaller and horizontally stacked. Similarly, a sidebar will have medium width, unlimited height and will be stacked vertically.  The IncludeZone method has an optional parameter to specify what specific layout to use. The name of that layout is a convention that the theme author establishes that maps to a user control in the theme. If no layout is specified, we use a default layout, which is plain rendering based on UL/LI.  ~/Views/Templates/TwoColumn.aspx\n<html>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheet.css\"/>\n  </head>\n  <body>\n    <div class=\"topNavigationZone\">\n      <%= Html.IncludeZone(\"Top navigation\", \"HorizontalTable\") %>\n    </div>   \n    <div class=\"leftSidebarZone\">\n      <%= Html.IncludeZone(\"Left sidebar\", \"VerticalList\") %>\n    </div>   \n    <div class=\"centerContentZone\">\n      <%= Html.IncludeZone(\"Contents\") %>\n    </div>   \n    <div class=\"footerZone\">\n      <%= Html.IncludeZone(\"Footer zone\", \"Div\") %>\n    </div>   \n    <%= Html.IncludeAdmin(); %>\n  </body>\n</html>\n\n\n\n~/Views/Layouts/VerticalList.ascx\n<ul>\n  <% foreach (var widget in Widgets) { %>\n  <li><h4><%= widget.Title %></h4></li>\n  <li>\n      <% RenderPartial(widget.Content); %>\n  </li>\n  <% } %>\n</ul>\n\n\n\n~/Views/Layouts/HorizontalTable.ascx\n<table><tr>\n  <% foreach (var widget in Widgets) { %>\n    <td><%= widget.Title %></td>\n    <td>\n      <% RenderPartial(widget.Content); %>\n    </td>\n  <% } %>\n</tr></table>\n\n\n\n~/Views/Layouts/Div.ascx\n<% foreach (var widget in Widgets) { %>\n  <div><h4><%= widget.Title %></h4>\n    <% RenderPartial(widget.Content); %>\n  </div>\n<% } %>",
            "title": "I can customize the chrome that goes around the widgets"
        },
        {
            "location": "/Documentation/Pages/#i-can-manage-different-widget-sets-previously-known-as-page-groups-and-apply-them-to-my-cms-pages",
            "text": "This might be a way of delaying or suppressing the need for local widgets. It avoids the complexity of a full local/global approach while allowing most of the common scenarios.  A possible design for this feature is to enable the user to override the default set-up by the template author on what each zone in the template does. The user would then be able to change a content zone to a widget zone using one of the widget sets:",
            "title": "I can manage different widget sets (previously known as page groups) and apply them to my CMS pages"
        },
        {
            "location": "/Documentation/Pages/#i-can-choose-a-theme-to-override-the-default-rendering",
            "text": "This is our existing theme feature. Themes can enrich the list of templates shown above. See  Themes .",
            "title": "I can choose a theme to override the default rendering"
        },
        {
            "location": "/Documentation/Pages/#i-can-create-new-content-types-that-can-be-configured-and-displayed-in-any-cms-page",
            "text": "Design TBD when we have a second content type to add to the application (likely blog or media).",
            "title": "I can create new content types that can be configured and displayed in any CMS page"
        },
        {
            "location": "/Documentation/Pages/#i-can-package-my-custom-content-type-so-other-users-can-install-it-on-their-copy-of-the-application",
            "text": "Design TBD.",
            "title": "I can package my custom content type so other users can install it on their copy of the application"
        },
        {
            "location": "/Documentation/Pages/#i-can-install-a-new-content-type-and-start-building-pages-using-it",
            "text": "Design TBD.",
            "title": "I can install a new content type and start building pages using it"
        },
        {
            "location": "/Documentation/Pages/#permissions",
            "text": "In this context, owner means the page owner when acting on a specific page, or the site owner otherwise.     Permission  Anon.  Authentic.  Owner  Admin.  Author  Editor      View pages  Yes  Yes  Yes  Yes  Yes  Yes    Create & manage pages (implies all others)  No  No  Yes  Yes  Yes  No    Create draft pages  No  No  Yes  Yes  Yes  No    Modify/delete pages  No  No  Yes  Yes  Yes  No    Publish/unpublish/schedule pages  No  No  Yes  Yes  Yes  No",
            "title": "Permissions"
        },
        {
            "location": "/Documentation/Pages/#flows",
            "text": "Workflow:     Published  Draft  Timer  Save button defaults to...      Yes  No  No  Publish Now    No  Yes  Yes  Publish Later    No  Yes  No  Save Draft    Yes  Yes  Yes  Publish Later    Yes  Yes  No  Save Draft    No  No  No  Save Draft",
            "title": "Flows"
        },
        {
            "location": "/Documentation/Pages-publishing/",
            "text": "Published version\n\n\nA page can be published (publicly accessible) or not. When a page is first created, for example, it is not yet published.\nTechnically, unpublishing (taking pages offline) is done by Orchard by setting the IsOnline bit in the database record for the page to zero.\n\n\nDraft version\n\n\nA page can have a draft version, which is a version that is not yet publicly available. Any modifications done on the draft version are without effect on the version of the page that is currently published (if there is one). The draft version exists precisely so that the page can be modified without affecting the version that the public sees.\nA draft of any page is technically created by copying its row in the database to a new one with the IsDraft bit set to one. Publishing the draft is done by copying all data from the draft back into the published page row (except for id and the published bit) and deleting the draft row.\n\n\nTechnically, the database and model allow for the following states for a page:\n\n Not created yet (no record)\n\n Published does not exist, but there is a draft\n\n Not published, no draft\n\n Not published, draft exists\n\n Published, no draft\n\n Published, draft exists\n\n\nThis is simplified for the end user by only having a few possible actions in the admin UI that define the transitions between possible page states:\n\n Create\n\n Publish\n\n Unpublish\n\n Edit\n* Revert\n\n\nHere is a diagram of the state transitions:\n\n\n\nThe page list displays information about the existence of a draft using a torn page icon, and shows whether the page is online (published) or not using a check icon. The only actions that can be taken from this page are in the actions column.\nThe view action navigates to the currently published version (if there is one).\nEdit goes to the edit page.\nDelete deletes both draft and published page.",
            "title": "Page publishing workflow"
        },
        {
            "location": "/Documentation/Pages-publishing/#published-version",
            "text": "A page can be published (publicly accessible) or not. When a page is first created, for example, it is not yet published.\nTechnically, unpublishing (taking pages offline) is done by Orchard by setting the IsOnline bit in the database record for the page to zero.",
            "title": "Published version"
        },
        {
            "location": "/Documentation/Pages-publishing/#draft-version",
            "text": "A page can have a draft version, which is a version that is not yet publicly available. Any modifications done on the draft version are without effect on the version of the page that is currently published (if there is one). The draft version exists precisely so that the page can be modified without affecting the version that the public sees.\nA draft of any page is technically created by copying its row in the database to a new one with the IsDraft bit set to one. Publishing the draft is done by copying all data from the draft back into the published page row (except for id and the published bit) and deleting the draft row.  Technically, the database and model allow for the following states for a page:  Not created yet (no record)  Published does not exist, but there is a draft  Not published, no draft  Not published, draft exists  Published, no draft  Published, draft exists  This is simplified for the end user by only having a few possible actions in the admin UI that define the transitions between possible page states:  Create  Publish  Unpublish  Edit\n* Revert  Here is a diagram of the state transitions:  The page list displays information about the existence of a draft using a torn page icon, and shows whether the page is online (published) or not using a check icon. The only actions that can be taken from this page are in the actions column.\nThe view action navigates to the currently published version (if there is one).\nEdit goes to the edit page.\nDelete deletes both draft and published page.",
            "title": "Draft version"
        },
        {
            "location": "/Documentation/Rss-atom/",
            "text": "Orchard will provide an easy way for content type authors to expose new feeds and advertise them from a view.\n\n\nRequirements\n\n\n\n\nFeeds should strictly conform to the relevant standards.\n\n\nAny list of content items can be exposed as a feed.\n\n\nIt is simple as possible to enable feeds on a list of contents, no matter what the type of content item is.\n\n\nFeeds should be able to contain heterogeneous content types.\n\n\nFeed contents should be easily extensible (for example by content parts).\n\n\n\n\nFeed rendering and why it's not just a view\n\n\nWhen rendering an HTML page, there are potentially going to be multiple content items and multiple parts for each item, all contributing to the rendering. But whereas in HTML the rendering for each part are relatively isolated from each other, in the case of a feed, the contribution actually happens on the same tag. In other words, in HTML, each aspect results in an island of HTML that it owns, whereas in RSS, everyone parties on the same tags, and there is only one tag (and subtags) for each item.\n\n\nTemplate-based rendering of XML does not provide significant benefits and in fact obscures the design. For example, if you want to let different (and unknown) parts of a content item contribute attributes to the top-level item element, you would need to inject a zone placeholder inside of the item tag.\n\n\nXML manipulation APIs are mature and will enable much cleaner construction of the feed documents from many parts than the regular view template system would allow. The template system would end up generating XML fragment strings from C# code.\n\n\nThe target audience for building handlers that contribute to feeds is also different as HTML templates are usually written by designers whereas feed handlers will be written by content type or part authors, who are developers.\n\n\nExposing contents as a feed\n\n\nOrchard will provide a ready-made controller for RSS, Atom and other feeds. This controller will dispatch the request to registered feed handlers, providing them a context object. Each handler can decide whether to handle the request or not based on the information available on the context object. If it decides to handle the request, it can add feed items to the response object (a property of the context object).\n\n\nMultiple handlers can independently contribute to a given feed, allowing for example the home page feed of a site to include items from a blogging module, a pages module and a forum module.\n\n\nBuilding a feed document from the list of feed items\n\n\nThe way the feed document is built is specific per feed type (RSS, Atom, etc.) and per content part. Feed item builder objects will be able to contribute to the document based on the feed item and the type of feed.\n\n\nAdvertising a feed from a view\n\n\nTo be discoverable, feeds have to be advertised on the regular views that show the same data in HTML form. This advertising can be done as actual links in the HTML body, and as link tags in the header. The latter is the most important as it enables feed readers to discover the feeds automatically. The former is important to inform user who may not be aware of feeds.\n\n\nThe code that advertises a feed will be written in the display template for a specific container item. For example, the post feed for a blog will be advertised from the display template for the Blog object that also displays the list of posts.\n\n\nThe link tag advertising is done by calling Html.RegisterFeed(new {type=\"comment\", parent=slug}, \"Comment feed\");. From that, Orchard will ask each feed provider (we will provide RSS and Atom) to create a link tag that will get added to the top-level zone subsection \"header:link\" (need to add that subsection to the existing styles and scripts).\n\n\nTo advertise the feed as an HTML link, a developer can call a Html.FeedLink helper. That helper, modeled after Html.ActionLink, creates a specialized A tag that already has the type=\"application/rss+xml\" attribute and builds the URL to the feed.\n\n\nA variation is to handle the whole markup from the view template and only get the URL from the Html.FeedUrl helper for maximum control over the link markup. It should be pointed out that this may make it more difficult down the road to easily modify how RSS links get rendered throughout the site. Because of that, we might want to introduce a display template for feeds that Html.FeedLink can use when it exists.\n\n\nFeed advertising could be automatically done on all content item containers. This way, feeds would become automatically available for all lists of contents without any specific development. Enabling finer-grained configuration of feed availability could be added later.\n\n\nLifecycle of a feed\n\n\n\n\nOn a blog post page\n\n\nHtml.RegisterFeed(new {type=\"comment\", parent=slug}, \"Comment feed\"); results in \n.\n\n\n\n\n\n\nNavigating to that feed url is routed to the feed controller\n\n\ncontroller retrieves the IEnumeration\n\n\nforeach IFeedHandler in the list, Invoke(FeedContext). FeedContext has a Request property that has route values and querystring.\n\n The Invoke code contributes to ctx.Response.FeedItems (FeedItem has ContentItem and XElement, which is null for now).\n\n controller gets the IEnumeration\n (there is one for each feed format: RSS, Atom, etc. and IFeedBuilder has a Format string property).\n\n find the IFeedBuilder for the current format and call Invoke(FeedContext) on it. FeedContext has a Format string property so each IFeedBuilder can decide to participate. It also has an XDocument on the Response (null so far). The Invoke code creates the XDocument on context.Response if it doesn't exist and populates its top-level properties.\n\n foreach FeedItem in context.Response.FeedItems, create the XElement on the FeedItem\n\n foreach IFeedItemBuilder, Invoke(FeedContext, IFeedBuilder)\n\n The feed builder invocation enumerates foreach FeedItem and maps ContentItem to XElement as appropriate when the format is recognized, or dumps data by calling back into IFeedBuilder.AddProperty(string name, string value, FeedItem). The feed builder can then choose to format that data in a generic way or throw the data away.\n\n** The XDocument is now complete. The feed builder returns an ActionResult.\n\n\nThe controller returns the ActionResult it got back from the feed handler.\n\n\n\n\n\n\nActionResult gets executed, resulting in an XML string, a JSON string or even possibly it could be injected into the view engine if a \"regular\" ActionResult was returned.\n\n\n\n\nObject model\n\n\nFeedContext\n\n\n\n\nFeedRequest Request {get;set;}\n\n\nFeedResponse Response {get;set;}\n\n\n\n\nFeedRequest\n\n\n\n\nRouteData RouteData {get;}\n\n\nHttpRequestBase HttpRequest {get;}\n\n\n\n\nFeedResponse\n\n\n\n\nXDocument Document {get;set;}\n\n\nIEnumerable\n {get;}\n\n\n\n\nFeedItem\n\n\n\n\nContentItem ContentItem {get;set;}\n\n\nXElement Element {get;set;}\n\n\n\n\nIFeedHandler\n\n\n\n\nvoid Invoke(FeedContext context)\n\n\n\n\nIFeedBuilder\n\n\n\n\nstring Format {get;}\n\n\nActionResult Invoke(FeedContext context)\n\n\nvoid AddProperty(string name, string value, FeedItem item)\n\n\n\n\nIFeedItemBuilder\n\n\n\n\nvoid Invoke(FeedContext context, IFeedBuilder feedBuilder)",
            "title": "RSS and Atom feeds"
        },
        {
            "location": "/Documentation/Rss-atom/#requirements",
            "text": "Feeds should strictly conform to the relevant standards.  Any list of content items can be exposed as a feed.  It is simple as possible to enable feeds on a list of contents, no matter what the type of content item is.  Feeds should be able to contain heterogeneous content types.  Feed contents should be easily extensible (for example by content parts).",
            "title": "Requirements"
        },
        {
            "location": "/Documentation/Rss-atom/#feed-rendering-and-why-its-not-just-a-view",
            "text": "When rendering an HTML page, there are potentially going to be multiple content items and multiple parts for each item, all contributing to the rendering. But whereas in HTML the rendering for each part are relatively isolated from each other, in the case of a feed, the contribution actually happens on the same tag. In other words, in HTML, each aspect results in an island of HTML that it owns, whereas in RSS, everyone parties on the same tags, and there is only one tag (and subtags) for each item.  Template-based rendering of XML does not provide significant benefits and in fact obscures the design. For example, if you want to let different (and unknown) parts of a content item contribute attributes to the top-level item element, you would need to inject a zone placeholder inside of the item tag.  XML manipulation APIs are mature and will enable much cleaner construction of the feed documents from many parts than the regular view template system would allow. The template system would end up generating XML fragment strings from C# code.  The target audience for building handlers that contribute to feeds is also different as HTML templates are usually written by designers whereas feed handlers will be written by content type or part authors, who are developers.",
            "title": "Feed rendering and why it's not just a view"
        },
        {
            "location": "/Documentation/Rss-atom/#exposing-contents-as-a-feed",
            "text": "Orchard will provide a ready-made controller for RSS, Atom and other feeds. This controller will dispatch the request to registered feed handlers, providing them a context object. Each handler can decide whether to handle the request or not based on the information available on the context object. If it decides to handle the request, it can add feed items to the response object (a property of the context object).  Multiple handlers can independently contribute to a given feed, allowing for example the home page feed of a site to include items from a blogging module, a pages module and a forum module.",
            "title": "Exposing contents as a feed"
        },
        {
            "location": "/Documentation/Rss-atom/#building-a-feed-document-from-the-list-of-feed-items",
            "text": "The way the feed document is built is specific per feed type (RSS, Atom, etc.) and per content part. Feed item builder objects will be able to contribute to the document based on the feed item and the type of feed.",
            "title": "Building a feed document from the list of feed items"
        },
        {
            "location": "/Documentation/Rss-atom/#advertising-a-feed-from-a-view",
            "text": "To be discoverable, feeds have to be advertised on the regular views that show the same data in HTML form. This advertising can be done as actual links in the HTML body, and as link tags in the header. The latter is the most important as it enables feed readers to discover the feeds automatically. The former is important to inform user who may not be aware of feeds.  The code that advertises a feed will be written in the display template for a specific container item. For example, the post feed for a blog will be advertised from the display template for the Blog object that also displays the list of posts.  The link tag advertising is done by calling Html.RegisterFeed(new {type=\"comment\", parent=slug}, \"Comment feed\");. From that, Orchard will ask each feed provider (we will provide RSS and Atom) to create a link tag that will get added to the top-level zone subsection \"header:link\" (need to add that subsection to the existing styles and scripts).  To advertise the feed as an HTML link, a developer can call a Html.FeedLink helper. That helper, modeled after Html.ActionLink, creates a specialized A tag that already has the type=\"application/rss+xml\" attribute and builds the URL to the feed.  A variation is to handle the whole markup from the view template and only get the URL from the Html.FeedUrl helper for maximum control over the link markup. It should be pointed out that this may make it more difficult down the road to easily modify how RSS links get rendered throughout the site. Because of that, we might want to introduce a display template for feeds that Html.FeedLink can use when it exists.  Feed advertising could be automatically done on all content item containers. This way, feeds would become automatically available for all lists of contents without any specific development. Enabling finer-grained configuration of feed availability could be added later.",
            "title": "Advertising a feed from a view"
        },
        {
            "location": "/Documentation/Rss-atom/#lifecycle-of-a-feed",
            "text": "On a blog post page  Html.RegisterFeed(new {type=\"comment\", parent=slug}, \"Comment feed\"); results in  .    Navigating to that feed url is routed to the feed controller  controller retrieves the IEnumeration  foreach IFeedHandler in the list, Invoke(FeedContext). FeedContext has a Request property that has route values and querystring.  The Invoke code contributes to ctx.Response.FeedItems (FeedItem has ContentItem and XElement, which is null for now).  controller gets the IEnumeration  (there is one for each feed format: RSS, Atom, etc. and IFeedBuilder has a Format string property).  find the IFeedBuilder for the current format and call Invoke(FeedContext) on it. FeedContext has a Format string property so each IFeedBuilder can decide to participate. It also has an XDocument on the Response (null so far). The Invoke code creates the XDocument on context.Response if it doesn't exist and populates its top-level properties.  foreach FeedItem in context.Response.FeedItems, create the XElement on the FeedItem  foreach IFeedItemBuilder, Invoke(FeedContext, IFeedBuilder)  The feed builder invocation enumerates foreach FeedItem and maps ContentItem to XElement as appropriate when the format is recognized, or dumps data by calling back into IFeedBuilder.AddProperty(string name, string value, FeedItem). The feed builder can then choose to format that data in a generic way or throw the data away. ** The XDocument is now complete. The feed builder returns an ActionResult.  The controller returns the ActionResult it got back from the feed handler.    ActionResult gets executed, resulting in an XML string, a JSON string or even possibly it could be injected into the view engine if a \"regular\" ActionResult was returned.",
            "title": "Lifecycle of a feed"
        },
        {
            "location": "/Documentation/Rss-atom/#object-model",
            "text": "",
            "title": "Object model"
        },
        {
            "location": "/Documentation/Rss-atom/#feedcontext",
            "text": "FeedRequest Request {get;set;}  FeedResponse Response {get;set;}",
            "title": "FeedContext"
        },
        {
            "location": "/Documentation/Rss-atom/#feedrequest",
            "text": "RouteData RouteData {get;}  HttpRequestBase HttpRequest {get;}",
            "title": "FeedRequest"
        },
        {
            "location": "/Documentation/Rss-atom/#feedresponse",
            "text": "XDocument Document {get;set;}  IEnumerable  {get;}",
            "title": "FeedResponse"
        },
        {
            "location": "/Documentation/Rss-atom/#feeditem",
            "text": "ContentItem ContentItem {get;set;}  XElement Element {get;set;}",
            "title": "FeedItem"
        },
        {
            "location": "/Documentation/Rss-atom/#ifeedhandler",
            "text": "void Invoke(FeedContext context)",
            "title": "IFeedHandler"
        },
        {
            "location": "/Documentation/Rss-atom/#ifeedbuilder",
            "text": "string Format {get;}  ActionResult Invoke(FeedContext context)  void AddProperty(string name, string value, FeedItem item)",
            "title": "IFeedBuilder"
        },
        {
            "location": "/Documentation/Rss-atom/#ifeeditembuilder",
            "text": "void Invoke(FeedContext context, IFeedBuilder feedBuilder)",
            "title": "IFeedItemBuilder"
        },
        {
            "location": "/Documentation/Slugs/",
            "text": "The slug admin UI shows the first part of the URL as read only and follows that immediately with a textbox that is wide enough to accommodate long slugs.\n\n\nWe should explain what a slug is and what it's used for right in the admin UI as many users will not be familiar with that notion:\n\"A slug' is what Orchard uses to build a unique and readable address for your pages. You can usually trust the system to build one for you from the title or you can tweak it to make it shorter or more or less explicit, at your convenience. An example of slug is 'about-us'.\"\n\n\nValidation\n\n\n\n\nA slug can't be empty. The slug that we store in the database should never be empty, but the user is allowed to not enter a slug. In that case, we generate one for him (see below).\n\n\nA slug can't be more than (some arbitrariness here) 1000 characters, which allows for some reasonable additions such as /json or the first parts of the url without a great risk of hitting IE's 2048 char limit for the URL. Message: \"Please keep the slug under a thousand characters.\"\n\n\nA slug can have international characters and should conform to the RFC for IRI (International Resource Identifier): \nRFC 3987\n, which is supported by all modern browsers. A slug can include slashes (/) but each token between slashes must conform to RFC 3987 and not include any of the following characters: \":\", \"/\", \"?\", \"#\", \"[\", \"]\", \"@\", \"!\", \"$\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", \"=\", \" \".\n\"Please do not use any of the following characters in your slugs: \":\", \"?\", \"#\", \"[\", \"]\", \"@\", \"!\", \"$\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", \"=\". No spaces are allowed (please use dashes or underscores instead).\"\n\n\n\n\nSlug generation\n\n\nWhen JavaScript is enabled, we should generate a slug after the title field has been entered. When a character is outside of the range of allowed characters, we should replace them with dashes. The generated slug should be converted to lowercase during generation, but if it's manually entered, we should leave it as is. In other words, we should only generate a slug if it was previously empty.\n\n\nWhen JavaScript is not enabled, the user will have to type a slug himself or leave the field empty. When the form is submitted with an empty slug, we generate one from the title.\n\n\nThe slug can be changed even after the resource has been created. This is somewhat dangerous because internal and external links to that page might get out of sync as a result, so we should display a warning in that case: \"You changed the slug of this page from \"{0}\" to \"{1}\", which changes its address. Links to this page may get broken as a result.\"\n\n\nNote that we allow forward slashes into the slug, which allows the user to manually introduce some hierarchy even though we don't support parent pages.\n\n\nThe slug prefix is built from the application path and the currently configured routes for the module. For example, if the application URL is \"http://mydomain/mysite\" and the URL for the resource with slug \"my-slug\" is \"~/pages/my-slug\", we prefix the slug input field with \"http://mydomain/mysite/pages/\".\n\n\nWhen the generated or manually entered slug is discovered by the server to not be unique, it should be made unique by adding a number after it.",
            "title": "Slugs"
        },
        {
            "location": "/Documentation/Slugs/#validation",
            "text": "A slug can't be empty. The slug that we store in the database should never be empty, but the user is allowed to not enter a slug. In that case, we generate one for him (see below).  A slug can't be more than (some arbitrariness here) 1000 characters, which allows for some reasonable additions such as /json or the first parts of the url without a great risk of hitting IE's 2048 char limit for the URL. Message: \"Please keep the slug under a thousand characters.\"  A slug can have international characters and should conform to the RFC for IRI (International Resource Identifier):  RFC 3987 , which is supported by all modern browsers. A slug can include slashes (/) but each token between slashes must conform to RFC 3987 and not include any of the following characters: \":\", \"/\", \"?\", \"#\", \"[\", \"]\", \"@\", \"!\", \"$\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", \"=\", \" \".\n\"Please do not use any of the following characters in your slugs: \":\", \"?\", \"#\", \"[\", \"]\", \"@\", \"!\", \"$\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", \"=\". No spaces are allowed (please use dashes or underscores instead).\"",
            "title": "Validation"
        },
        {
            "location": "/Documentation/Slugs/#slug-generation",
            "text": "When JavaScript is enabled, we should generate a slug after the title field has been entered. When a character is outside of the range of allowed characters, we should replace them with dashes. The generated slug should be converted to lowercase during generation, but if it's manually entered, we should leave it as is. In other words, we should only generate a slug if it was previously empty.  When JavaScript is not enabled, the user will have to type a slug himself or leave the field empty. When the form is submitted with an empty slug, we generate one from the title.  The slug can be changed even after the resource has been created. This is somewhat dangerous because internal and external links to that page might get out of sync as a result, so we should display a warning in that case: \"You changed the slug of this page from \"{0}\" to \"{1}\", which changes its address. Links to this page may get broken as a result.\"  Note that we allow forward slashes into the slug, which allows the user to manually introduce some hierarchy even though we don't support parent pages.  The slug prefix is built from the application path and the currently configured routes for the module. For example, if the application URL is \"http://mydomain/mysite\" and the URL for the resource with slug \"my-slug\" is \"~/pages/my-slug\", we prefix the slug input field with \"http://mydomain/mysite/pages/\".  When the generated or manually entered slug is discovered by the server to not be unique, it should be made unique by adding a number after it.",
            "title": "Slug generation"
        },
        {
            "location": "/Documentation/Templates/",
            "text": "Layout templates are aspx files with includes and calls to helpers.\n\n\nTemplate markup\n\n\nCurrently, we have only content zones, so a template can look like this:\n\n\n<html>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\"\n          href=\"<%= ResolveUrl(\"~/Content/StyleSheet.css\") %>\" />\n  </head>\n  <body>\n    <div class=\"header\">\n      <%= Html.Include(\"header\") %>\n    </div>   \n    <div class=\"centerContentZone\">\n      <%= Html.IncludeZone(\"Content\") %>\n    </div>   \n    <div class=\"rightSidebar\">\n      <%= Html.IncludeZone(\"Right sidebar\") %>\n    </div>\n    <div class=\"footer\">\n      <%= Html.Include(\"footer\") %>\n    </div>\n    <%= Html.IncludeAdmin() %>\n  </body>\n</html>\n\n\n\nThe helpers used above are:\n\n Html.Include(string includeName) includes the partial view whose name is specified.\n\n Html.IncludeZone(string zoneName) includes a named content zone.\n* Html.RenderAdmin() includes the admin link if the user is logged in as administrator.\n\n\nTemplate Meta-data\n\n\nTemplate meta-data is stored directly in the template file as server comments. They are in a simple key-value format. Keys and values are separated by a colon character:\n\n\n<%@Page %>\n<%--\nname: Two column layout\ndescription: This has a main content area and a sidebar on the right.\nzones: Content, Right sidebar\nauthor: Jon\n--%>\n\n\n\nThe keys in the meta-data are case-insensitive.\n\n\nMeta-data values can be on multiple lines.\n\n\nThe syntax for meta-data is YAML.\n\n\nThe fields that are not recognized are put in a dictionary so that they are still accessible from code.\n\n\nThe last piece of meta-data, which is optional, is the thumbnail representation for it that is used in the template selection screen and in the edit page screen. This is a PNG or GIF image that has the same name as the template file and that is stored in the same directory.",
            "title": "Page templates and syntax"
        },
        {
            "location": "/Documentation/Templates/#template-markup",
            "text": "Currently, we have only content zones, so a template can look like this:  <html>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\"\n          href=\"<%= ResolveUrl(\"~/Content/StyleSheet.css\") %>\" />\n  </head>\n  <body>\n    <div class=\"header\">\n      <%= Html.Include(\"header\") %>\n    </div>   \n    <div class=\"centerContentZone\">\n      <%= Html.IncludeZone(\"Content\") %>\n    </div>   \n    <div class=\"rightSidebar\">\n      <%= Html.IncludeZone(\"Right sidebar\") %>\n    </div>\n    <div class=\"footer\">\n      <%= Html.Include(\"footer\") %>\n    </div>\n    <%= Html.IncludeAdmin() %>\n  </body>\n</html>  The helpers used above are:  Html.Include(string includeName) includes the partial view whose name is specified.  Html.IncludeZone(string zoneName) includes a named content zone.\n* Html.RenderAdmin() includes the admin link if the user is logged in as administrator.",
            "title": "Template markup"
        },
        {
            "location": "/Documentation/Templates/#template-meta-data",
            "text": "Template meta-data is stored directly in the template file as server comments. They are in a simple key-value format. Keys and values are separated by a colon character:  <%@Page %>\n<%--\nname: Two column layout\ndescription: This has a main content area and a sidebar on the right.\nzones: Content, Right sidebar\nauthor: Jon\n--%>  The keys in the meta-data are case-insensitive.  Meta-data values can be on multiple lines.  The syntax for meta-data is YAML.  The fields that are not recognized are put in a dictionary so that they are still accessible from code.  The last piece of meta-data, which is optional, is the thumbnail representation for it that is used in the template selection screen and in the edit page screen. This is a PNG or GIF image that has the same name as the template file and that is stored in the same directory.",
            "title": "Template Meta-data"
        },
        {
            "location": "/Documentation/Tags/",
            "text": "The system can also be queried to provide all tags currently in use or to provide all content items that have been tagged with a given tag.\n\n\nBecause any content could be tagged, this will be implemented as a content part.\n\n\nApplicability of the taggable content part\n\n\nThe default setting for tags should be that they are available on any content type.\n\n\nScenarios\n\n\nA content author can apply tags to any content item he creates\n\n\nExcept is the site administrator disabled the taggable aspect from the content type being edited, content items can be tagged through UI that is dynamically added to the admin UI for the current item.\n\n\n\n\n\n\nThe author goes to the admin page for his content item.\n\n\n\n\n\n\nA tags section appears on the bottom of the admin page where the list of existing tags is presented as a checkbox list. There is also a textbox and an \"add\" button to add a new tag.\n\n\n\n\n\n\nThe author checks \"Apples\", \"Pears\" and types Orange into the text box, then clicks \"add\".\n\n\n\n\n\n\nThe author publishes the new version.\n\n\n\n\n\n\nA user of the site can navigate contents by tags\n\n\n\n\nA user navigates to the site and sees a tag cloud in one of the columns.\n\n\n\n\nFor the moment, and until we have widgets, we will hard-code the tag cloud into the page templates.\n\n\n\n\n\n\nThe user sees a topic he's interested in: \"Pears\" and clicks the tag.\n\n\n\n\n\n\nThe user is then taken to a page that has a list of content items that have been tagged with \"Pears\". \nNote:\n this requires the list feature to be implemented.\n\n\n\n\n\n\n(optional) The user can refine the search by clicking on \"Orange\" on the \"sub\" tag cloud that appeared on top of the search results.\n\n\n\n\n\n\nThe user clicks on the title of one of the items and can then read the full page.\n\n\n\n\n\n\nPermissions\n\n\nThe owner here is the owner of the content item being tagged for the tag content permission, and the site owner for the tag management right.\n\n\n\n\n\n\n\n\nPermission\n\n\nAnon.\n\n\nAuthentic.\n\n\nOwner\n\n\nAdmin.\n\n\nAuthor\n\n\nEditor\n\n\n\n\n\n\n\n\n\n\nTag contents\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nManage tags\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nNo\n\n\nNo",
            "title": "Tags"
        },
        {
            "location": "/Documentation/Tags/#applicability-of-the-taggable-content-part",
            "text": "The default setting for tags should be that they are available on any content type.",
            "title": "Applicability of the taggable content part"
        },
        {
            "location": "/Documentation/Tags/#scenarios",
            "text": "",
            "title": "Scenarios"
        },
        {
            "location": "/Documentation/Tags/#a-content-author-can-apply-tags-to-any-content-item-he-creates",
            "text": "Except is the site administrator disabled the taggable aspect from the content type being edited, content items can be tagged through UI that is dynamically added to the admin UI for the current item.    The author goes to the admin page for his content item.    A tags section appears on the bottom of the admin page where the list of existing tags is presented as a checkbox list. There is also a textbox and an \"add\" button to add a new tag.    The author checks \"Apples\", \"Pears\" and types Orange into the text box, then clicks \"add\".    The author publishes the new version.",
            "title": "A content author can apply tags to any content item he creates"
        },
        {
            "location": "/Documentation/Tags/#a-user-of-the-site-can-navigate-contents-by-tags",
            "text": "A user navigates to the site and sees a tag cloud in one of the columns.   For the moment, and until we have widgets, we will hard-code the tag cloud into the page templates.    The user sees a topic he's interested in: \"Pears\" and clicks the tag.    The user is then taken to a page that has a list of content items that have been tagged with \"Pears\".  Note:  this requires the list feature to be implemented.    (optional) The user can refine the search by clicking on \"Orange\" on the \"sub\" tag cloud that appeared on top of the search results.    The user clicks on the title of one of the items and can then read the full page.",
            "title": "A user of the site can navigate contents by tags"
        },
        {
            "location": "/Documentation/Tags/#permissions",
            "text": "The owner here is the owner of the content item being tagged for the tag content permission, and the site owner for the tag management right.     Permission  Anon.  Authentic.  Owner  Admin.  Author  Editor      Tag contents  No  No  Yes  Yes  Yes  Yes    Manage tags  No  No  Yes  Yes  No  No",
            "title": "Permissions"
        },
        {
            "location": "/Documentation/Themes/",
            "text": "Context\n\n\nMany applications owe their success in part to the availability of a large number of themes, which is in turn due to the simplicity of building new themes. An MVC type of framework where the view to use can be dynamically determined instead of being mapped 1:1 from url to file system like in WebForms certainly helps building a theming engine.\n\n\nAudience\n\n\nThe audiences for this feature are:\n\n Application administrators and users: users with little to no technical skills. These users will typically upload a theme to their application or choose one of the pre-installed ones, configure it and use it.\n\n Designers: users with little to no knowledge of programming concepts but with design, CSS and HTML skills. Might create a new theme by modifying an existing one.\n\n\nGoals\n\n\n\n\nSimplicity of the theme model, enabling the designer audience to create themes.\n\n\nEnable theme development using notepad and an FTP client.\n\n\nEnable users to change themes on the fly.\n\n\nEnable users to easily discover and install new themes.\n\n\nEnable users to customize the look of their site without having writing rights to the site file system.\n\n\n\n\nScenarios\n\n\nInstallation\n\n\nThe installation experience for a theme must be extremely simple.\n\n\nIt should be possible to choose a theme from our online repository and just add it to the site. In that scenario, the user goes to the themes section of the admin tool, clicks \"Search for themes online\", navigates through categories or does a text search in the catalog. He then chooses a theme, clicks \"install\". The theme is then downloaded and installed. The user may then configure, preview and use the theme.\n\n\nIdeally, the online repository of themes and the installed list of themes are one and the same (with the ability to filter by installed or online).\n\n\nIn another scenario, the user unzips the theme on his local hard drive and uploads its contents to the server using FTP.\n\n\nIn another scenario, the user connects to his dedicated server using Terminal Services, copies the zip into the server's file system, directly under the application's themes folder and unzips the theme. Once this is done, the theme can be configured from the admin UI. The zip file can remain in the themes directory.\n\n\nIn another scenario, the user uploads the zipped theme through the admin UI. The application then unzips and installs it.\n\n\nSwitching between themes\n\n\nA user wants to switch from the current theme to one of the other themes installed on the box. He goes to the themes section of the admin UI, browses the list of installed themes (including thumbnail previews), chooses the new theme he wants. The admin UI shows an overlay that shows a live preview of the theme with the actual user's data, providing a faithful glimpse at what the site will look like with this theme. He can even navigate within that preview to check other pages look OK with the new theme. Once he has decided whether the new theme should be applied, he can revert the changes (which never affected other users of the site) or apply the changes for other users to enjoy.\n\n\nConfiguration\n\n\nA user adds a new theme to his site. He goes to the admin tool, goes to the themes section and chooses the new theme. He is then taken to the theme's admin applet where he chooses a different color palette that fits his company's design guidelines. He also uploads a new logo that replaces the default logo that came with the theme.\n\n\nTheme Creation\n\n\nA user downloads an existing two-column theme. He opens its files in a text editor and modifies them by adding a third sidebar and tweaking the CSS to give it a completely new look. He tests the theme locally and checks everything works. He then packages the theme files into a zip file and uploads it to the Orchard theme repository.\n\n\nUninstallation\n\n\nA user decides not to use the \"pretty in pink\" theme anymore and wants it out of the system. He goes into the admin tool, selects the theme and clicks \"uninstall\". After confirming the operation, the theme is removed from the system. If the site was configured to still use that theme, it automatically reverts to the default theme (which can't be uninstalled).\n\n\nLocal themes\n\n\nIn some cases such as when the site contains several blogs, it will be desirable to apply different themes to different parts of the site.\n\n\nTo enable this scenario, we will provide the extensibility points for the theme to be determined dynamically, and will make the \"apply theme\" UI re-usable.\n\n\nChoices\n\n\nThere are a number of choices a theme engine has to make that are impacting both its simplicity and its power.\n\n\nShould themes define a hierarchy and should there be a fallback from a theme to its parent when a file is absent?\n\n\nCreating a fallback mechanism between themes enables theme authors to create derived themes that contain only the difference with the parent. For example, a theme might contain only a stylesheet.\n\n\nOn the other hand, the penalty of copying all files is relatively low and it removes the kind of confusion where it's difficult to understand in which file to look when something goes wrong or when one wants to modify something that is not part of the theme but that can only be found in one of the parents.\n\n\nThis also greatly simplifies both the theme engine and the development of the actual themes as dependencies of the theme can be referenced directly, without the need to dynamically resolve them relatively to anything but the current view itself.\nWithout fallback, themes are self-contained and can be copied around without having to also copy parent themes with them. It is also avoiding the issue where the parent theme is uninstalled and its descendants stop working or change behavior.\n\n\nIn summary, the added complexity and potential confusion that cross-theme fallback introduces does not seem to be justified by the marginal benefit it brings. Without fallback, all the views and their dependencies that might be used to display any data will always be found within the current theme's directory.\n\n\nAn intermediate solution is to have one minimalist default theme that must always be present and have this be the only fallback mechanism that works across themes. This enables a theme author to only override the stylesheet for example without having to copy all files, and it avoids the issues associated with deleting the parent theme for example.\n\n\nHaving a default or system theme also makes it easier to add or remove theming from an application. One could consider that the default theme is the application itself and that themes are just a way to override parts or all of the default rendering of the application. This plays very well with the architecture of view engines in ASP.NET MVC.\n\n\nThe theme engine will be developed as a package that could be de-activated or uninstalled. When that is the case, the application would revert to the \"safe mode\"'s default views.\n\n\nShould themes handle multiple content types?\n\n\nHaving themes that can be applied to any content type seems quite compelling. Still, on first analysis, themes that are too general might be too much of a constraint and might impair the ability of each application to provide an experience that is unique and well adapted to the problem it's addressing.\n\n\nThe approach of having a fallback within the themes from the most specific view to more generic views allows for both specialized and generic themes.\n\n\nIn Orchard, the same thing opens the door for even a theme that is specialized for e-commerce, for example, to be used with a blogging content-type unmodified, or to be modified to adapt to another type of contents. A theme could also have specialized views available for more than one content type.\n\n\nThe separation of layout templates from specialized partial views is also a way to make it easier to obtain more universal themes.\n\n\nThe default theme should include very basic and semantic markup, with a stylesheet that is easy to modify and override. Packages will typically add new partial views to that default theme, and those should have the same semantic qualities so that themes can get good results even if they only override CSS and have no knowledge of the installed packages. Most themes will do most of their work through CSS, but the theme author or the site administrator should be able to get into the theme and add specialized overrides for any view, including the ones that are added by packages.\n\n\nShould themes be customizable from the admin tool?\n\n\nIt is debatable on first analysis whether themes should expose any sort of configuration as they can easily be modified using simple text editors. On closer look, when one considers the end user's point of view as well as multi-tenant scenarios, the ability for themes to expose settings such as a logo or a color palette becomes much more important.\n\n\nWhen a user just installed an e-commerce package, for example, the first thing he will want to do, before even starting to populate the product catalog, will be to brand the application with his logo and colors. If the experience to do that is to go into a code editor, we probably already failed him.\n\n\nIn multi-tenant scenarios (which we don't explicitly support as a goal today but want to keep in our sights for the relatively near future), the user won't have access to any modifications of the site's physical files. One solution that is adopted by many applications is to expose \"CSS overrides\" which are a secondary, database-bound CSS stylesheet that the application can add to the theme's default CSS at runtime. This clearly works and we will support it, but exposing the most common settings directly in the admin with an adapted UI would be friendlier.\n\n\nShould themes use master pages?\n\n\nMaster pages are a great feature of ASP.NET but also one that is virtually unseen on other platforms that seem content with a simpler include mechanism.\n\n\nThey constitute an inversion of the concept of an include or user control: it's the contents that \"include\" the master instead of the more familiar case where the main files includes the contents.\n\n\nThis inversion works really well once it's understood and removes some repetition but it definitely is a concept that can be hard to grasp, especially for non-developers. Theme development will precisely be done by designers that are not necessarily familiar with such concepts. In the context of themes, master pages don't seem to bring enough value to justify introducing the new concept.\n\n\nSome themes might very well use master pages, but the default ones that we ship should probably avoid them.\n\n\nShould themes contain code files?\n\n\nA code file may be the place where theme authors can write reusable helpers that are specific to the theme. This is also where themes could define specialized plug-ins and widgets. One example of a theme-specific plugin might be specific view resolution logic.\n\n\nWhile not strictly necessary, it is an interesting addition, similar to an app_code local to the theme. On the other hand, having code in a theme goes against separation of concerns as the theme should be specialized purely in customizing the rendering. The view resolution scenario for example could be handled by having the theme depend on a package that contains the view resolution plug-in.\n\n\nThis might also be the place to define the theme's configuration settings as properties, but this scenario can also be handled through a YAML description similar to the ones we use for meta-data.\n\n\nIf a theme introduces a setting that has a specific editor, it could make sense to deploy the code for the editor with the theme, although it could also be argued that that editor, to be reusable by other themes, should be separated into a package rather than deployed with the theme.\n\n\nIn the absence of a compelling scenario that couldn't be handled in another way, we won't allow for code files in themes for now.\n\n\nWhere and how should meta-data be defined?\n\n\nThe way we define meta-data for themes should preferably be consistent with the way we define it for packages, i.e. a YAML file at the root of the theme. This will make it easy for the application to reflect on the theme to display the meta-data.\n\n\nFeature description\n\n\nSample themes\n\n\nWe will design several themes that will be delivered with the application.\n\n\nOne of these themes will be designed to exercise all the features of the theme engine, including overrides for specific display templates and widgets.\n\n\nAnother theme will be designed to be a minimal theme, consisting simply of a manifest and a stylesheet (and associated images).\n\n\nTemplates\n\n\nThe list of templates that we will deliver initially is:\n\n\n\n\nOne-column: a header, a large content zone and a footer\n\n\nTwo-column: a header, a sidebar (positioned on the left in safe mode templates), a large content zone and a footer.\n\n\nThree-column: a header, a left sidebar, a large central content zone, a right sidebar and a footer.\n\n\n\n\nThose templates, in the safe mode default rendering, must have minimal markup.\n\n\nPackaging\n\n\nA theme is essentially a collection of files. In order to make the creation and deployment of themes as easy as possible, they should be packaged using the most common packaging format: zip. Packaging a theme should be as simple as right-clicking the folder and choosing \"compress\".\n\n\nWhile Virtual Path Providers in theory would enable us to serve the contents inside the zip without physically unpacking it, this won't work in medium trust with .NET 3.5 SP1. This is fixed in 4.0 but we decided we would run on 3.5 SP1 to help adoption.\nAn alternative option is to unzip the package when it is uploaded, which can be done in medium trust and might be less confusing to users.\n\n\nThe zip file containing a theme contains at its root a single folder named like the theme that contains the theme files.\n\n\nThe name of the zip itself can include version information but the root folder inside it should not: Skyblue-1.0.1.zip/skyblue/.\n\n\nWhat we should focus on is that a single entity such as a theme is kept entirely in a single location so that it can be easily found, modified or deleted.\n\n\nStructure\n\n\nThe contents of a theme are images, stylesheets, pages, user controls and code. The files a theme can contain are:\n\n\n\n\nTheme.txt: the manifest of the theme, where the meta-data for the theme is defined. If the manifest file is missing from a theme or if it can't be read, the admin UI will display the theme disabled (this is debatable) with a warning message explaining the problem: \"This theme is missing a valid theme.txt manifest file.\"\n\n\nTheme.png: the thumbnail that will appear in the theme galleries. This thumbnail should be relatively high resolution to enable JavaScript enhancements in the admin UI to show the higher resolution on hover. The high resolution thumbnail will be resized by the style of the img tag to a standard width when displayed in the list of themes.\n\n\nSite.css: this is where most of the styles for the theme are defined. To enable settings to be inserted dynamically, a theme might have a dynamic style section in the master page or the template pages, in addition to the static link to the stylesheet.\n\n\nViews/Templates/Default.aspx: this is the default layout template. It typically contains a main zone where the application will insert a partial view depending on the nature of the contents being displayed (list of posts or details of a post for the home page of a blog, details of a product, etc.).\n\n\nImages: a directory containing the images used by the theme.\n\n\nScripts: a directory containing the client scripts used by the theme.\n\n\n\n\nOther, more specialized views and partial views may be optionally included into a theme, following a naming convention as described in the next section.\n\n\nA typical organization for the templates in a package, and the corresponding organization for theme overrides of the templates of the same package could look like this:\n\n\n\n\nViews\n\n\nAdmin\n\n\nBlog\n\n\nDisplayTemplates\n\n\nEditorTemplates\n\n\n\n\n\n\nBlogPost\n\n\nDisplayTemplates\n\n\nEditorTemplates\n\n\n\n\n\n\n\n\n\n\nBlog\n\n\nDisplayTemplates\n\n\nEditorTemplates\n\n\n\n\n\n\nBlogPost\n\n\nDisplayTemplates\n\n\nEditorTemplates\n\n\n\n\n\n\n\n\n\n\n\n\nOptionally, a theme may also be localizable. For that purpose, it may contain a resources directory following the same resource definition convention as the rest of the site (TBD).\n\n\nIf a folder in the theme folder starts with a non-alphanumerical character, it is not seen as a theme.\n\n\nThe theme directory by default is called \"themes\" and is at the root of the application. A site-level setting could enable users to relocate that folder, if they want for example to shorten file paths.\n\n\nView selection\n\n\n\n\nNote\n:This section is speculative and depends on future decisions on the extensibility model of the application.\n\n\n\n\nThe selection of the most specialized view is done dynamically and is delegated to a plug-in. A default plug-in is provided by the Orchard framework but that can be overridden or completed by plug-ins.\n\n\nThe plug-in has the following signature:\n\n\nstring ResolveView(\n     string viewName, Theme theme, ControllerContext context)\n\n\n\nA view resolution plug-in should return null if it can't find a relevant view. If no plug-in exists or if all returned null, the framework will use default.aspx or default.ascx (depending on whether a full or partial view is necessary in the calling context). As soon as any enabled plug-in returns something other than null, empty string or \"default\", the framework stops the call loop and uses that value as the name of the physical view to use. This implies that the order in which plug-ins run may be important. This order can be determined from the plug-in admin UI.\n\n\nThe view name that is getting passed into the plug-in is typically just what the controller action asked for. The plug-in system allows for arbitrary flexibility in selecting a physical view from what the action is asking for, depending on any convention and keeping the end result within what the current theme is able to display.\n\n\nThe default view selection plug-in will try to find a view with [viewName].aspx as the name within the theme and return this if it is found. If not, it will assume that the view name is built using the following convention: \nviewName = [ContentType]-[ItemSlug]\n\n\nThe default view resolver will split the file name on the first dash character, will remove what comes after and try to find a physical view with that name.\n\n\nHere's a possible implementation of the default view resolution plug-in:\n\n\npublic string ResolveView(\n    string viewName, Theme theme, ControllerContext context) {\n\n    // look for the specific view in the theme.\n    if (theme.HasView(viewName)) {\n        return viewName;\n    }\n    else {\n        // fallback to generic view in the theme.\n        viewName = GetGenericView(viewName);\n        if (viewName != null && theme.HasView(viewName)){\n                return viewName;\n            }\n        }\n        // fallback to default view.\n        return null;\n    }\n}\n\nprivate static string GetGenericView(string viewName) {\n    if (String.IsNullOrEmpty(viewName)) {\n        return null;\n    }\n    int index = viewName.IndexOf(\"-\");\n    if (index == -1)\n        return null;\n    return viewName.Substring(0, index);\n}\n\n\n\nOf course, implementing any other convention to resolve the controller action-provided view name to a physical view name is just a matter of implementing a plug-in.\n\n\nIn the example of displaying a blog post, one can see that the controller would ask for a view named for example \"post-my-first-post\". The default view resolver would ask the current theme for a view named \"post-my-first-post\". If it doesn't find it (which is quite likely), it will look for a view named \"post\". If the current theme has been built for the blog application, it will most likely have it and that's what will be used, otherwise the engine will ask other plug-ins and ultimately fall back to \"default\".\n\n\nIn the example of a commerce package, the controller could ask for \"category-boots\". The theme could contain that view but if it doesn't the default implementation will try to find \"category\" and then revert to default.\n\n\nBut we can also look at other patterns to resolve views.\nFor example, here's the code for a plug-in that implements the page branch of a resolution tree:\n\n\npublic string ResolveView(\n    string viewName, Theme theme, ControllerContext context) {\n\n    if (viewName.StartsWith(\"page-\") {\n        var pageName = viewName.Substring(5);\n        if (theme.HasView(pageName)) {\n            return pageName;\n        } else if (theme.HasView(\"page\") {\n            return \"page\";\n        }\n    }\n    return null;\n}\n\n\n\nOne thing to note is that the application does not need in any case to have pre-determined knowledge of the content types. Those are just a matter of establishing a convention between a controller and its associated view resolution plug-in (if I there is one). This makes the theme engine very extensible while remaining simple for the end user and theme developer.\n\n\nLocalization\n\n\nLocalization of a theme can be done using the same conventions as in the application itself. Insertion of localized strings can be done using special helpers for resource strings (TBD).\n\n\nDeclaring meta-data\n\n\nMeta-data about themes can be specified through a simple YAML manifest (Theme.txt). This enables an expressive declaration of the meta-data:\n\n\nName: Pretty in pink\nAuthor: Bertrand Le Roy\nDescription:\n    This theme is full of butterflies, hearts\n    and unicorns.\nVersion: 1.0\nTags: pink, butterfly, heart, unicorn, pony, rainbow\nUrl: http://orchardproject.net/themegallery/prettyinpink\nWebsite: http://weblogs.asp.net/bleroy\n\n\n\nThese attributes are used in the admin tool to display rich details about the theme, and are also used to populate the description of themes in the online gallery.\n\n\nIt is possible to define custom meta-data attributes beyond those that are provided out of the box. \n\n\nLocalization of the meta-data is not supported at this point. Our default themes will eventually provide an example of a localized theme description.\n\n\nThe license can be specified using a License meta-data property in the manifest.\n\n\nThe Orchard framework defines the following meta-data attributes out of the box:\n\n\n\n\nName (the default value for this is the theme's type name, \"uncameled\")\n\n\nAuthor (can take a comma-separated list)\n\n\nDescription\n\n\nCategory\n\n\nTags (comma-separated list)\n\n\nVersion\n\n\nLicense\n\n\nUrl (the URL where the latest version of the theme can be found)\n\n\nWebsite\n\n\nSettings (this is detailed in the next section)\n\n\n\n\nSettings\n\n\nSome themes can expose settings so that simple customization of a theme can be done without opening a text editor. Typically, a theme can expose settings for a color palette or a logo.\n\n\nThe way themes can expose settings in through the YAML meta-data manifest:\n\n\nSettings:\n  - Palette:\n    - Description: A dominant color for the theme.\n    - Default: Pink\n    - Editor: ColorEditor\n  - Logo:\n    - Description: The site's logo.\n    - Default: images/logo.png\n    - Editor: MediaPicker\n\n\n\nThe description for each setting can have a description and an editor hint. This tells the system how to build the admin UI to handle that setting by finding a partial view with the same name.\n\n\nThere is no type information associated with a setting because the intended audience for theme authoring shouldn't be required to understand such coding concepts. Instead, seen from the theme views, all theme settings are strings and can be injected easily.\n\n\nIt's the editor that is responsible for translating the value of a setting back and forth between the string representation and any internal representation it may need in order to provide a good editing experience. For example, a color setting would be represented in a \"#RRGGBB\" format that is immediately usable in HTML, but the editor would transform that representation into an instance of the Color type internally, and would surface color picker UI in the admin view to edit it. When it's done, it would persist the string representation back to the theme engine.\n\n\nThe editor is also responsible for validation of setting values.\n\n\nTheme settings can be injected into a view using the Html.Theme helper (see \nTheme Includes and Overrides\n).\n\n\nThere is a set of setting values per theme so that switching to a new theme switches to a new set of values, and going back to the original theme restores the corresponding values.\n\n\nEach setting can expose a default value in the meta-data.\n\n\nStylesheet overrides\n\n\nStylesheet overrides are a special kind of setting that enables more arbitrary customization of a theme even when the user doesn't have direct access to the theme directory's files.\n\n\nStylesheet overrides are a large string of CSS that can be set for each site. It is stored in the database like other theme settings but doesn't need to be declared explicitly by the theme's manifest. There is a set of overrides per theme so that switching to a new theme switches to a new set of overrides, and going back to the original theme restores the corresponding overrides.\n\n\nThe stylesheet overrides will be served by a special action. The views will include stylesheet overrides in the head of the page after the other stylesheets.\n\n\nThe themes directory\n\n\nEach theme is found as a subdirectory under the \"themes\" subdirectory of the root of the application. The name of the theme's directory should be the same as the name of the class in theme.cs if there is one.\n\n\nStylesheet overrides\n\n\nAll themes should contain a call to a helper, \nHtml.IncludeRegisteredHeaders()\n, right after the inclusion of the theme's stylesheet.aspx that can include database-bound CSS that is specific to the current tenant, as well as script and css that may be added dynamically by extensions such as widgets.\n\n\nSetup\n\n\nThemes can be uploaded (unzipped) through FTP into the themes directory of the application, and that is enough to set them up.\nAlternatively, the zipped theme can be uploaded through the admin tool, which will unzip the file into the themes directory.\nFinally, the theme can be chosen from the online catalog of themes that we will host on our servers and directly installed. Installing an online theme will directly transfer the zipped theme from our server to the application's server and then unzip it into the themes directory.\n\n\n\n\nNote:\n The online catalog scenario won't be immediately implemented as it is dependent on the existence of this catalog, which is not yet planned.\n\n\n\n\nThemes can also be uninstalled. When the currently used theme is uninstalled, the site will revert to the \"safe mode\" built-in theme (no theme at all).\n\n\nThemes and widgets\n\n\nThe design of themes will be coupled to the widget infrastructure. The widgets specification can be found here:\n\n\nWidgets\n\n\nPermissions\n\n\nHere, owner means the site owner.\n\n\n\n\n\n\n\n\nPermission\n\n\nAnon.\n\n\nAuthentic.\n\n\nOwner\n\n\nAdmin.\n\n\nAuthor\n\n\nEditor\n\n\n\n\n\n\n\n\n\n\nChange current theme\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nNo\n\n\nNo\n\n\n\n\n\n\nEdit theme\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nNo\n\n\nNo\n\n\n\n\n\n\nInstall and uninstall themes\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nNo\n\n\nNo\n\n\n\n\n\n\n\n\nAdditional permissions may apply to local themes when they get implemented.",
            "title": "Themes"
        },
        {
            "location": "/Documentation/Themes/#context",
            "text": "Many applications owe their success in part to the availability of a large number of themes, which is in turn due to the simplicity of building new themes. An MVC type of framework where the view to use can be dynamically determined instead of being mapped 1:1 from url to file system like in WebForms certainly helps building a theming engine.",
            "title": "Context"
        },
        {
            "location": "/Documentation/Themes/#audience",
            "text": "The audiences for this feature are:  Application administrators and users: users with little to no technical skills. These users will typically upload a theme to their application or choose one of the pre-installed ones, configure it and use it.  Designers: users with little to no knowledge of programming concepts but with design, CSS and HTML skills. Might create a new theme by modifying an existing one.",
            "title": "Audience"
        },
        {
            "location": "/Documentation/Themes/#goals",
            "text": "Simplicity of the theme model, enabling the designer audience to create themes.  Enable theme development using notepad and an FTP client.  Enable users to change themes on the fly.  Enable users to easily discover and install new themes.  Enable users to customize the look of their site without having writing rights to the site file system.",
            "title": "Goals"
        },
        {
            "location": "/Documentation/Themes/#scenarios",
            "text": "",
            "title": "Scenarios"
        },
        {
            "location": "/Documentation/Themes/#installation",
            "text": "The installation experience for a theme must be extremely simple.  It should be possible to choose a theme from our online repository and just add it to the site. In that scenario, the user goes to the themes section of the admin tool, clicks \"Search for themes online\", navigates through categories or does a text search in the catalog. He then chooses a theme, clicks \"install\". The theme is then downloaded and installed. The user may then configure, preview and use the theme.  Ideally, the online repository of themes and the installed list of themes are one and the same (with the ability to filter by installed or online).  In another scenario, the user unzips the theme on his local hard drive and uploads its contents to the server using FTP.  In another scenario, the user connects to his dedicated server using Terminal Services, copies the zip into the server's file system, directly under the application's themes folder and unzips the theme. Once this is done, the theme can be configured from the admin UI. The zip file can remain in the themes directory.  In another scenario, the user uploads the zipped theme through the admin UI. The application then unzips and installs it.",
            "title": "Installation"
        },
        {
            "location": "/Documentation/Themes/#switching-between-themes",
            "text": "A user wants to switch from the current theme to one of the other themes installed on the box. He goes to the themes section of the admin UI, browses the list of installed themes (including thumbnail previews), chooses the new theme he wants. The admin UI shows an overlay that shows a live preview of the theme with the actual user's data, providing a faithful glimpse at what the site will look like with this theme. He can even navigate within that preview to check other pages look OK with the new theme. Once he has decided whether the new theme should be applied, he can revert the changes (which never affected other users of the site) or apply the changes for other users to enjoy.",
            "title": "Switching between themes"
        },
        {
            "location": "/Documentation/Themes/#configuration",
            "text": "A user adds a new theme to his site. He goes to the admin tool, goes to the themes section and chooses the new theme. He is then taken to the theme's admin applet where he chooses a different color palette that fits his company's design guidelines. He also uploads a new logo that replaces the default logo that came with the theme.",
            "title": "Configuration"
        },
        {
            "location": "/Documentation/Themes/#theme-creation",
            "text": "A user downloads an existing two-column theme. He opens its files in a text editor and modifies them by adding a third sidebar and tweaking the CSS to give it a completely new look. He tests the theme locally and checks everything works. He then packages the theme files into a zip file and uploads it to the Orchard theme repository.",
            "title": "Theme Creation"
        },
        {
            "location": "/Documentation/Themes/#uninstallation",
            "text": "A user decides not to use the \"pretty in pink\" theme anymore and wants it out of the system. He goes into the admin tool, selects the theme and clicks \"uninstall\". After confirming the operation, the theme is removed from the system. If the site was configured to still use that theme, it automatically reverts to the default theme (which can't be uninstalled).",
            "title": "Uninstallation"
        },
        {
            "location": "/Documentation/Themes/#local-themes",
            "text": "In some cases such as when the site contains several blogs, it will be desirable to apply different themes to different parts of the site.  To enable this scenario, we will provide the extensibility points for the theme to be determined dynamically, and will make the \"apply theme\" UI re-usable.",
            "title": "Local themes"
        },
        {
            "location": "/Documentation/Themes/#choices",
            "text": "There are a number of choices a theme engine has to make that are impacting both its simplicity and its power.",
            "title": "Choices"
        },
        {
            "location": "/Documentation/Themes/#should-themes-define-a-hierarchy-and-should-there-be-a-fallback-from-a-theme-to-its-parent-when-a-file-is-absent",
            "text": "Creating a fallback mechanism between themes enables theme authors to create derived themes that contain only the difference with the parent. For example, a theme might contain only a stylesheet.  On the other hand, the penalty of copying all files is relatively low and it removes the kind of confusion where it's difficult to understand in which file to look when something goes wrong or when one wants to modify something that is not part of the theme but that can only be found in one of the parents.  This also greatly simplifies both the theme engine and the development of the actual themes as dependencies of the theme can be referenced directly, without the need to dynamically resolve them relatively to anything but the current view itself.\nWithout fallback, themes are self-contained and can be copied around without having to also copy parent themes with them. It is also avoiding the issue where the parent theme is uninstalled and its descendants stop working or change behavior.  In summary, the added complexity and potential confusion that cross-theme fallback introduces does not seem to be justified by the marginal benefit it brings. Without fallback, all the views and their dependencies that might be used to display any data will always be found within the current theme's directory.  An intermediate solution is to have one minimalist default theme that must always be present and have this be the only fallback mechanism that works across themes. This enables a theme author to only override the stylesheet for example without having to copy all files, and it avoids the issues associated with deleting the parent theme for example.  Having a default or system theme also makes it easier to add or remove theming from an application. One could consider that the default theme is the application itself and that themes are just a way to override parts or all of the default rendering of the application. This plays very well with the architecture of view engines in ASP.NET MVC.  The theme engine will be developed as a package that could be de-activated or uninstalled. When that is the case, the application would revert to the \"safe mode\"'s default views.",
            "title": "Should themes define a hierarchy and should there be a fallback from a theme to its parent when a file is absent?"
        },
        {
            "location": "/Documentation/Themes/#should-themes-handle-multiple-content-types",
            "text": "Having themes that can be applied to any content type seems quite compelling. Still, on first analysis, themes that are too general might be too much of a constraint and might impair the ability of each application to provide an experience that is unique and well adapted to the problem it's addressing.  The approach of having a fallback within the themes from the most specific view to more generic views allows for both specialized and generic themes.  In Orchard, the same thing opens the door for even a theme that is specialized for e-commerce, for example, to be used with a blogging content-type unmodified, or to be modified to adapt to another type of contents. A theme could also have specialized views available for more than one content type.  The separation of layout templates from specialized partial views is also a way to make it easier to obtain more universal themes.  The default theme should include very basic and semantic markup, with a stylesheet that is easy to modify and override. Packages will typically add new partial views to that default theme, and those should have the same semantic qualities so that themes can get good results even if they only override CSS and have no knowledge of the installed packages. Most themes will do most of their work through CSS, but the theme author or the site administrator should be able to get into the theme and add specialized overrides for any view, including the ones that are added by packages.",
            "title": "Should themes handle multiple content types?"
        },
        {
            "location": "/Documentation/Themes/#should-themes-be-customizable-from-the-admin-tool",
            "text": "It is debatable on first analysis whether themes should expose any sort of configuration as they can easily be modified using simple text editors. On closer look, when one considers the end user's point of view as well as multi-tenant scenarios, the ability for themes to expose settings such as a logo or a color palette becomes much more important.  When a user just installed an e-commerce package, for example, the first thing he will want to do, before even starting to populate the product catalog, will be to brand the application with his logo and colors. If the experience to do that is to go into a code editor, we probably already failed him.  In multi-tenant scenarios (which we don't explicitly support as a goal today but want to keep in our sights for the relatively near future), the user won't have access to any modifications of the site's physical files. One solution that is adopted by many applications is to expose \"CSS overrides\" which are a secondary, database-bound CSS stylesheet that the application can add to the theme's default CSS at runtime. This clearly works and we will support it, but exposing the most common settings directly in the admin with an adapted UI would be friendlier.",
            "title": "Should themes be customizable from the admin tool?"
        },
        {
            "location": "/Documentation/Themes/#should-themes-use-master-pages",
            "text": "Master pages are a great feature of ASP.NET but also one that is virtually unseen on other platforms that seem content with a simpler include mechanism.  They constitute an inversion of the concept of an include or user control: it's the contents that \"include\" the master instead of the more familiar case where the main files includes the contents.  This inversion works really well once it's understood and removes some repetition but it definitely is a concept that can be hard to grasp, especially for non-developers. Theme development will precisely be done by designers that are not necessarily familiar with such concepts. In the context of themes, master pages don't seem to bring enough value to justify introducing the new concept.  Some themes might very well use master pages, but the default ones that we ship should probably avoid them.",
            "title": "Should themes use master pages?"
        },
        {
            "location": "/Documentation/Themes/#should-themes-contain-code-files",
            "text": "A code file may be the place where theme authors can write reusable helpers that are specific to the theme. This is also where themes could define specialized plug-ins and widgets. One example of a theme-specific plugin might be specific view resolution logic.  While not strictly necessary, it is an interesting addition, similar to an app_code local to the theme. On the other hand, having code in a theme goes against separation of concerns as the theme should be specialized purely in customizing the rendering. The view resolution scenario for example could be handled by having the theme depend on a package that contains the view resolution plug-in.  This might also be the place to define the theme's configuration settings as properties, but this scenario can also be handled through a YAML description similar to the ones we use for meta-data.  If a theme introduces a setting that has a specific editor, it could make sense to deploy the code for the editor with the theme, although it could also be argued that that editor, to be reusable by other themes, should be separated into a package rather than deployed with the theme.  In the absence of a compelling scenario that couldn't be handled in another way, we won't allow for code files in themes for now.",
            "title": "Should themes contain code files?"
        },
        {
            "location": "/Documentation/Themes/#where-and-how-should-meta-data-be-defined",
            "text": "The way we define meta-data for themes should preferably be consistent with the way we define it for packages, i.e. a YAML file at the root of the theme. This will make it easy for the application to reflect on the theme to display the meta-data.",
            "title": "Where and how should meta-data be defined?"
        },
        {
            "location": "/Documentation/Themes/#feature-description",
            "text": "",
            "title": "Feature description"
        },
        {
            "location": "/Documentation/Themes/#sample-themes",
            "text": "We will design several themes that will be delivered with the application.  One of these themes will be designed to exercise all the features of the theme engine, including overrides for specific display templates and widgets.  Another theme will be designed to be a minimal theme, consisting simply of a manifest and a stylesheet (and associated images).",
            "title": "Sample themes"
        },
        {
            "location": "/Documentation/Themes/#templates",
            "text": "The list of templates that we will deliver initially is:   One-column: a header, a large content zone and a footer  Two-column: a header, a sidebar (positioned on the left in safe mode templates), a large content zone and a footer.  Three-column: a header, a left sidebar, a large central content zone, a right sidebar and a footer.   Those templates, in the safe mode default rendering, must have minimal markup.",
            "title": "Templates"
        },
        {
            "location": "/Documentation/Themes/#packaging",
            "text": "A theme is essentially a collection of files. In order to make the creation and deployment of themes as easy as possible, they should be packaged using the most common packaging format: zip. Packaging a theme should be as simple as right-clicking the folder and choosing \"compress\".  While Virtual Path Providers in theory would enable us to serve the contents inside the zip without physically unpacking it, this won't work in medium trust with .NET 3.5 SP1. This is fixed in 4.0 but we decided we would run on 3.5 SP1 to help adoption.\nAn alternative option is to unzip the package when it is uploaded, which can be done in medium trust and might be less confusing to users.  The zip file containing a theme contains at its root a single folder named like the theme that contains the theme files.  The name of the zip itself can include version information but the root folder inside it should not: Skyblue-1.0.1.zip/skyblue/.  What we should focus on is that a single entity such as a theme is kept entirely in a single location so that it can be easily found, modified or deleted.",
            "title": "Packaging"
        },
        {
            "location": "/Documentation/Themes/#structure",
            "text": "The contents of a theme are images, stylesheets, pages, user controls and code. The files a theme can contain are:   Theme.txt: the manifest of the theme, where the meta-data for the theme is defined. If the manifest file is missing from a theme or if it can't be read, the admin UI will display the theme disabled (this is debatable) with a warning message explaining the problem: \"This theme is missing a valid theme.txt manifest file.\"  Theme.png: the thumbnail that will appear in the theme galleries. This thumbnail should be relatively high resolution to enable JavaScript enhancements in the admin UI to show the higher resolution on hover. The high resolution thumbnail will be resized by the style of the img tag to a standard width when displayed in the list of themes.  Site.css: this is where most of the styles for the theme are defined. To enable settings to be inserted dynamically, a theme might have a dynamic style section in the master page or the template pages, in addition to the static link to the stylesheet.  Views/Templates/Default.aspx: this is the default layout template. It typically contains a main zone where the application will insert a partial view depending on the nature of the contents being displayed (list of posts or details of a post for the home page of a blog, details of a product, etc.).  Images: a directory containing the images used by the theme.  Scripts: a directory containing the client scripts used by the theme.   Other, more specialized views and partial views may be optionally included into a theme, following a naming convention as described in the next section.  A typical organization for the templates in a package, and the corresponding organization for theme overrides of the templates of the same package could look like this:   Views  Admin  Blog  DisplayTemplates  EditorTemplates    BlogPost  DisplayTemplates  EditorTemplates      Blog  DisplayTemplates  EditorTemplates    BlogPost  DisplayTemplates  EditorTemplates       Optionally, a theme may also be localizable. For that purpose, it may contain a resources directory following the same resource definition convention as the rest of the site (TBD).  If a folder in the theme folder starts with a non-alphanumerical character, it is not seen as a theme.  The theme directory by default is called \"themes\" and is at the root of the application. A site-level setting could enable users to relocate that folder, if they want for example to shorten file paths.",
            "title": "Structure"
        },
        {
            "location": "/Documentation/Themes/#view-selection",
            "text": "Note :This section is speculative and depends on future decisions on the extensibility model of the application.   The selection of the most specialized view is done dynamically and is delegated to a plug-in. A default plug-in is provided by the Orchard framework but that can be overridden or completed by plug-ins.  The plug-in has the following signature:  string ResolveView(\n     string viewName, Theme theme, ControllerContext context)  A view resolution plug-in should return null if it can't find a relevant view. If no plug-in exists or if all returned null, the framework will use default.aspx or default.ascx (depending on whether a full or partial view is necessary in the calling context). As soon as any enabled plug-in returns something other than null, empty string or \"default\", the framework stops the call loop and uses that value as the name of the physical view to use. This implies that the order in which plug-ins run may be important. This order can be determined from the plug-in admin UI.  The view name that is getting passed into the plug-in is typically just what the controller action asked for. The plug-in system allows for arbitrary flexibility in selecting a physical view from what the action is asking for, depending on any convention and keeping the end result within what the current theme is able to display.  The default view selection plug-in will try to find a view with [viewName].aspx as the name within the theme and return this if it is found. If not, it will assume that the view name is built using the following convention:  viewName = [ContentType]-[ItemSlug]  The default view resolver will split the file name on the first dash character, will remove what comes after and try to find a physical view with that name.  Here's a possible implementation of the default view resolution plug-in:  public string ResolveView(\n    string viewName, Theme theme, ControllerContext context) {\n\n    // look for the specific view in the theme.\n    if (theme.HasView(viewName)) {\n        return viewName;\n    }\n    else {\n        // fallback to generic view in the theme.\n        viewName = GetGenericView(viewName);\n        if (viewName != null && theme.HasView(viewName)){\n                return viewName;\n            }\n        }\n        // fallback to default view.\n        return null;\n    }\n}\n\nprivate static string GetGenericView(string viewName) {\n    if (String.IsNullOrEmpty(viewName)) {\n        return null;\n    }\n    int index = viewName.IndexOf(\"-\");\n    if (index == -1)\n        return null;\n    return viewName.Substring(0, index);\n}  Of course, implementing any other convention to resolve the controller action-provided view name to a physical view name is just a matter of implementing a plug-in.  In the example of displaying a blog post, one can see that the controller would ask for a view named for example \"post-my-first-post\". The default view resolver would ask the current theme for a view named \"post-my-first-post\". If it doesn't find it (which is quite likely), it will look for a view named \"post\". If the current theme has been built for the blog application, it will most likely have it and that's what will be used, otherwise the engine will ask other plug-ins and ultimately fall back to \"default\".  In the example of a commerce package, the controller could ask for \"category-boots\". The theme could contain that view but if it doesn't the default implementation will try to find \"category\" and then revert to default.  But we can also look at other patterns to resolve views.\nFor example, here's the code for a plug-in that implements the page branch of a resolution tree:  public string ResolveView(\n    string viewName, Theme theme, ControllerContext context) {\n\n    if (viewName.StartsWith(\"page-\") {\n        var pageName = viewName.Substring(5);\n        if (theme.HasView(pageName)) {\n            return pageName;\n        } else if (theme.HasView(\"page\") {\n            return \"page\";\n        }\n    }\n    return null;\n}  One thing to note is that the application does not need in any case to have pre-determined knowledge of the content types. Those are just a matter of establishing a convention between a controller and its associated view resolution plug-in (if I there is one). This makes the theme engine very extensible while remaining simple for the end user and theme developer.",
            "title": "View selection"
        },
        {
            "location": "/Documentation/Themes/#localization",
            "text": "Localization of a theme can be done using the same conventions as in the application itself. Insertion of localized strings can be done using special helpers for resource strings (TBD).",
            "title": "Localization"
        },
        {
            "location": "/Documentation/Themes/#declaring-meta-data",
            "text": "Meta-data about themes can be specified through a simple YAML manifest (Theme.txt). This enables an expressive declaration of the meta-data:  Name: Pretty in pink\nAuthor: Bertrand Le Roy\nDescription:\n    This theme is full of butterflies, hearts\n    and unicorns.\nVersion: 1.0\nTags: pink, butterfly, heart, unicorn, pony, rainbow\nUrl: http://orchardproject.net/themegallery/prettyinpink\nWebsite: http://weblogs.asp.net/bleroy  These attributes are used in the admin tool to display rich details about the theme, and are also used to populate the description of themes in the online gallery.  It is possible to define custom meta-data attributes beyond those that are provided out of the box.   Localization of the meta-data is not supported at this point. Our default themes will eventually provide an example of a localized theme description.  The license can be specified using a License meta-data property in the manifest.  The Orchard framework defines the following meta-data attributes out of the box:   Name (the default value for this is the theme's type name, \"uncameled\")  Author (can take a comma-separated list)  Description  Category  Tags (comma-separated list)  Version  License  Url (the URL where the latest version of the theme can be found)  Website  Settings (this is detailed in the next section)",
            "title": "Declaring meta-data"
        },
        {
            "location": "/Documentation/Themes/#settings",
            "text": "Some themes can expose settings so that simple customization of a theme can be done without opening a text editor. Typically, a theme can expose settings for a color palette or a logo.  The way themes can expose settings in through the YAML meta-data manifest:  Settings:\n  - Palette:\n    - Description: A dominant color for the theme.\n    - Default: Pink\n    - Editor: ColorEditor\n  - Logo:\n    - Description: The site's logo.\n    - Default: images/logo.png\n    - Editor: MediaPicker  The description for each setting can have a description and an editor hint. This tells the system how to build the admin UI to handle that setting by finding a partial view with the same name.  There is no type information associated with a setting because the intended audience for theme authoring shouldn't be required to understand such coding concepts. Instead, seen from the theme views, all theme settings are strings and can be injected easily.  It's the editor that is responsible for translating the value of a setting back and forth between the string representation and any internal representation it may need in order to provide a good editing experience. For example, a color setting would be represented in a \"#RRGGBB\" format that is immediately usable in HTML, but the editor would transform that representation into an instance of the Color type internally, and would surface color picker UI in the admin view to edit it. When it's done, it would persist the string representation back to the theme engine.  The editor is also responsible for validation of setting values.  Theme settings can be injected into a view using the Html.Theme helper (see  Theme Includes and Overrides ).  There is a set of setting values per theme so that switching to a new theme switches to a new set of values, and going back to the original theme restores the corresponding values.  Each setting can expose a default value in the meta-data.",
            "title": "Settings"
        },
        {
            "location": "/Documentation/Themes/#stylesheet-overrides",
            "text": "Stylesheet overrides are a special kind of setting that enables more arbitrary customization of a theme even when the user doesn't have direct access to the theme directory's files.  Stylesheet overrides are a large string of CSS that can be set for each site. It is stored in the database like other theme settings but doesn't need to be declared explicitly by the theme's manifest. There is a set of overrides per theme so that switching to a new theme switches to a new set of overrides, and going back to the original theme restores the corresponding overrides.  The stylesheet overrides will be served by a special action. The views will include stylesheet overrides in the head of the page after the other stylesheets.",
            "title": "Stylesheet overrides"
        },
        {
            "location": "/Documentation/Themes/#the-themes-directory",
            "text": "Each theme is found as a subdirectory under the \"themes\" subdirectory of the root of the application. The name of the theme's directory should be the same as the name of the class in theme.cs if there is one.",
            "title": "The themes directory"
        },
        {
            "location": "/Documentation/Themes/#stylesheet-overrides_1",
            "text": "All themes should contain a call to a helper,  Html.IncludeRegisteredHeaders() , right after the inclusion of the theme's stylesheet.aspx that can include database-bound CSS that is specific to the current tenant, as well as script and css that may be added dynamically by extensions such as widgets.",
            "title": "Stylesheet overrides"
        },
        {
            "location": "/Documentation/Themes/#setup",
            "text": "Themes can be uploaded (unzipped) through FTP into the themes directory of the application, and that is enough to set them up.\nAlternatively, the zipped theme can be uploaded through the admin tool, which will unzip the file into the themes directory.\nFinally, the theme can be chosen from the online catalog of themes that we will host on our servers and directly installed. Installing an online theme will directly transfer the zipped theme from our server to the application's server and then unzip it into the themes directory.   Note:  The online catalog scenario won't be immediately implemented as it is dependent on the existence of this catalog, which is not yet planned.   Themes can also be uninstalled. When the currently used theme is uninstalled, the site will revert to the \"safe mode\" built-in theme (no theme at all).",
            "title": "Setup"
        },
        {
            "location": "/Documentation/Themes/#themes-and-widgets",
            "text": "The design of themes will be coupled to the widget infrastructure. The widgets specification can be found here:  Widgets",
            "title": "Themes and widgets"
        },
        {
            "location": "/Documentation/Themes/#permissions",
            "text": "Here, owner means the site owner.     Permission  Anon.  Authentic.  Owner  Admin.  Author  Editor      Change current theme  No  No  Yes  Yes  No  No    Edit theme  No  No  Yes  Yes  No  No    Install and uninstall themes  No  No  Yes  Yes  No  No     Additional permissions may apply to local themes when they get implemented.",
            "title": "Permissions"
        },
        {
            "location": "/Documentation/Themes-includes/",
            "text": "This design proposal outlines enhancements to the Themes feature to support the following:\n\n\n\n\nThe ability for the application to function independently of the Themes feature, by having default Views, Content, Scripts, Packages and Widgets folders\n\n\nThe ability for an applied Theme to override the default files in the application for Views, Content, Scripts, Packages and Widgets\n\n\nThe ability for an applied Theme to \u201cfall back\u201d to default files when they are not overridden by the Theme\n\n\nAn include-style helper method syntax for composition of View-related files (either in the applied Theme or in the default Views folder)\n\n\n\n\nTheme Overrides\n\n\nThe application defines top-level Content, Views, Scripts, Packages and Widgets folders, which are not related to the applied Theme and allow the application to function independently of the Themes feature.\n\n\nIn the absence of the Themes feature (or an applied Theme), the application will use the files in these directories to serve the UI for the application. \n\n\nThemes override the default files in the application by specifying files for Content, Views, Scripts and Widgets under the Theme folder.  For example, if the application contains a ~/Views/Login.aspx page, the Blue Theme may override the rendering for this page by specifying a custom ~/Themes/Blue/Views/Login.aspx page.\n\n\nThe View Engine will look to the currently applied Theme to resolve files before \u201dfalling back\u201d to the default Views folder.  Overrides allow a theme to only specify the files that require customization by the Theme, instead of requiring Themes to duplicate every file in the application.\n\n\nThe override feature can dramatically simplify some theme definitions - a simple Theme may only need to override the header and style sheet for the application, so it would only need to specify ~/Views/Header.aspx and ~/Styles/Site.css.\n\n\nThe override feature can also simplify upgrading the application to a newer version, since it allows the default files of the application to be independently updated, while preserving Theme customizations.\n\n\n\n\nNote:\n Serving static files needs to be as fast as possible and the overhead of running any code on top of the web server's tends to be prohibitively high in comparison to the benefits. For this reason, the helper APIs presented here will directly generate URLs that directly map to the physical location of the resource files instead of, for example, generating a route-based URL that could be dynamically resolved later. Where that becomes problematic is that there are a few places, such as stylesheets, that are themselves static resources but that must reference other static resources (typically background images). Because the stylesheet is itself a static resource (it is possible to serve an aspx as the stylesheet but this is confusing and breaks IntelliSense), it cannot call into the helpers and must reference its dependencies using URLs that are relative to itself. This means in turn that the dependencies in question must be physically at the place the stylesheet points. This of course puts a limitation to resource fallback: you cannot override just the stylesheet, you also need to copy everything it depends on.\n\nIssue\n: In cases where the page is output-cached, adding or removing a file in the theme might not have immediate effect as the cached page is still pointing at the previously resolved resource. This could be fixed by \"touching\" the page or by doing more elaborate management of cache dependencies.\n\n\n\n\nDisplay template overrides\n\n\nDisplay and editor templates are typically defined in a module under ~/Packages/[PackageName]/Views/DisplayTemplates/[items|parts]/[PackageName].[ItemOrPartName].ascx.\n\n\nOverriding such a specialized display template is possible and sometimes useful, but it is discouraged, because the theme author can't possibly handle all existing modules. Whenever possible, the markup in the module view should be generic enough to be efficiently styled through CSS.\n\n\nFor those cases where the theme author or the person who customizes the application needs to override one of the display templates from a core or extension module, he should do so in the current theme under ~/Themes/[ThemeName]/Views/DisplayTemplates/[items|parts]/[PackageName].[ItemOrPartName].ascx. Notice that the only change in the path was to replace ~/Packages/[PackageName] with ~/Themes/[ThemeName].\n\n\nWidget Overrides\n\n\n\n\nPreliminary: widgets are not yet implemented.\nIn order to allow a Theme to override the complete rendering for the application, it is necessary to support the ability for a Theme to override an individual widget's rendering.\n\n\n\n\nThis assumes that the Theme author has foreknowledge of which widgets are installed to the application, but in many cases an application will include a default set of widgets that can be assumed to exist.\n\n\nAn override for a widget is specified by adding a Widgets folder underneath the named folder for the Theme, creating a subfolder for the Widget to override, and copying the widget's view file (.ascx) to the folder.\n\n\nThis file can be customized any way the Theme author sees fit, and the widget engine will use this file instead of the default one supplied with the widget.\n\n\nInclude Methods\n\n\nTo enable the override feature to work properly, it is necessary to introduce an indirection for composing View files and including dependent references such as scripts, images, and style sheets.\n\n\nThis allows the Theme to reference files in a way that allows the application to resolve dependent file references without depending on a hard-coded physical path.\n\n\nThis is achieved using helper methods to generate URLs, as described below.  It should be noted that an include-style model for composition is decidedly different from the built-in ASP.NET Master Page feature, but is more tailored to the desired audience for Theme developers, namely HTML designers that may not be familiar with the intricacies of the ASP.NET programming model.  The assumption is that includes are likely to be more immediately understandable by this audience.\n\n\nView composition relies on an Html.Zone helper method that defines named zones in the views. Several providers can take advantage of the named zones, for example an include provider that resolves the appropriate View file (either local to the Theme or one of the default application files) and includes it, or a widget provider that injects widgets into zones.\n\n\nZones can include named subsections that enable the insertion of positioned contents. By default, all zones come with two subsections, before and after, that enable the insertion of contents at the beginning and end of the zone. An example of a zone with named subsections is:\n\n\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" />\n    <title><%=Html.Title() %></title><%\n    Html.Zone(\"head\", \":metas :styles :scripts\"); %>\n</head>\n\n\n\nIn this example, a head zone is injected into the head tag, and it defines a subsection for metas, stylesheets and scripts. This is used to inject meta-tags, registered styles and scripts.\n\n\nExample document and layout files follow:\n\n\ndocument.aspx:\n<%@ Page Language=\"C#\" Inherits=\"System.Web.Mvc.ViewPage<BaseViewModel>\" %>\n<%@ Import Namespace=\"Orchard.Mvc.ViewModels\"%>\n<%@ Import Namespace=\"Orchard.Mvc.Html\"\n%><!DOCTYPE html>\n<html>\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" />\n    <title><%=Html.Title() %></title><%\n    Html.Zone(\"head\", \":metas :styles :scripts\"); %>\n</head>\n<body><%\n    Html.ZoneBody(\"body\"); %>\n</body>\n</html>\n\n\n\nNote: The document file is almost never overridden by the theme.\n\n\nlayout.ascx:\n<%@ Control Language=\"C#\" Inherits=\"System.Web.Mvc.ViewUserControl<BaseViewModel>\" %>\n<%@ Import Namespace=\"Orchard.Mvc.ViewModels\"%>\n<%--\nname: Sample layout template\nzones: Head, Header, Content, Right sidebar, Footer\n--%><%\nHtml.RegisterStyle(\"site.css\");\nHtml.RegisterScript(\"MyScript.js\");\nModel.Zones.AddRenderPartial(\"header\");\nModel.Zones.AddRenderPartial(\"footer\");\n%>\n<div class=\"page\">\n    <img src=\"<%= Html.ContentFolderUrl(\"images/banner.jpg\") %>\" alt=\"Banner\"/>\n    <img src=\"<%= Html.Theme(\"Logo\") %>\" alt=\"Logo\"/>\n    <div id=\"header\"><%\n        Html.Zone(\"header\");\n        Html.Zone(\"menu\"); %>\n    </div>\n    <div id=\"main\"><%\n        Html.ZoneBody(\"content\");\n    %></div>\n    <div id=\"rightSidebar\"><%\n        Html.Zone(\"right sidebar\", \"UnorderedListLayout\")\n    %></div>\n    <div id=\"footer\"><%\n        Html.Zone(\"footer\");\n    %></div>\n</div>\n\n\n\n\n\nNote\n: in this example, some contents are inlined but in a real template those would really be in partial views.\nIn this example, the calls to Html.Zone declare zones on the page where components will be able to inject contents and widgets.\n\n\n\n\nFor the header and footer zones, calls to AddRenderPartial will try to find a partial view with the same name (without its extension) as the zone (first in the theme, then in the top views) and will include it if it's found.\n\n\nThe included files can themselves contain calls to Html.Zone() for nested composition.\n\n\n\n\nIssue:\n when new zones are being added by included partial view, how will the admin UI discover them?\nThe page also contains specialized calls to other APIs that will be detailed below.\n\n\nOpen Issue\n: Do we need a version of Html.Zone that accepts a model?\n\n\n\n\nHow many overloads of RenderPartial do we want to repeat?\n\n\n\n\nQuestion:\n includes will be so common that we could consider having a shortcut like we have for localization. Zone(\"Content\") or Z(\"Content\")?\nThe contents of each include file should be semantically complete HTML. No separation of opening and closing tags into separate file should exist. When this looks necessary, the surrounding markup should be moved to the parent file.\n\n\n\n\nHtml.Title\n\n\nA special helper that injects the page title.\n\n\nHtml.RegisterScript\n\n\nRegisters a JavaScript file for inclusion by Html.Zone(\"head\", \":metas :styles :scripts\").  This helper method accepts as input a path that is relative to the root Scripts directory (of either the theme or root application).\n\n\nIt registers the script to include but does not render anything immediately. The actual rendering of the script tag will happen when the view calls Html.Zone(\"head\", \":metas :styles :scripts\").\n\n\nThe actual URL that will be rendered into the page will be mapped by the web server directly to either the theme or root application Scripts directory without having to run application code.\n\n\nThe system will search for the correct physical file to serve  in the following order:\n\n\n\n\n~/Themes/ThemeName/Scripts\n\n\n~/Scripts\n\n\n\n\nExample:\n\n\nHtml.RegisterScript(\ufffdmyscript.js\ufffd)\n\n\n\n...registers a URL to the first physical file that exists in these locations (in order):\n\n\n\n\n/ApplicationName/Themes/ThemeName/Scripts/myscript.js\n\n\n/ApplicationName/Scripts/myscript.js\n\n\n\n\nParameters:\n\n\nscriptPath\n [String] - the path to the script file, relative to the root of the Scripts directory.\n\n\nReturn Value:\n\n\nNone\n\n\nHtml.RegisterStyleSheet\n\n\nRegisters a CSS file for inclusion by Html.Zone(\"head\", \":metas :styles :scripts\"). This helper method accepts as input a path that is relative to the root Content directory (of either the theme or root application).\n\n\nIt registers the stylesheet to include but does not render anything immediately. The actual rendering of the link tag will happen when the view calls Html.Zone(\"head\", \":metas :styles :scripts\").\n\n\nThe actual URL that will be rendered into the page will be mapped by the web server directly to either the theme or root application Scripts directory without having to run application code.\n\n\nThe system will search for the correct physical file to serve  in the following order:\n\n\n\n\n~/Themes/ThemeName\n\n\n~/Themes/ThemeName/Content\n\n\n~/\n\n\n~/Content\n\n\n\n\nNote:\n It is not correct (and might result in an exception) to include stylesheets from widgets using this API, since these stylesheets belong in the \n of the document. Refer to the section entitled \u201cWidget Scripts and Stylesheets\u201d below.\n\n\nExample:\n\n\nHtml.RegisterStyleSheet(\"mystylesheet.css\")\n\n\n\n...registers a URL to the first physical file that exists in these locations (in order):\n\n\n\n\n/ApplicationName/Themes/ThemeName/mystylesheet.css\n\n\n/ApplicationName/Themes/ThemeName/Content/mystylesheet.css\n\n\n/ApplicationName/mystylesheet.css\n\n\n/ApplicationName/Content/mystylesheet.css\n\n\n\n\nParameters:\n\n\nstyleSheetPath\n [String] - the path to the CSS file, relative to the root of the Content or theme directory.\n\n\nReturn Value:\n\n\nNone\n\n\nHtml.Zone(\"head\", \":metas :styles :scripts\")\n\n\nWe'll have a special provider that recognizes the \"Head\" zone and generates the script, style and link tags resulting from previous registration by widgets and views. In particular, Html.RegisterScript and Html.RegisterStyleSheet calls result in Html.Include(\"Head\") generating the relevant tags.\n\n\nThis special provider is also the one that will inject style overrides.\n\n\nThe widgets can also participate in what gets rendered by this API by exposing their list of scripts and stylesheets (see \nWidgets\n).\n\n\nThe list of stylesheets and scripts to be included is first processed to remove duplicates, and then the helpers proceeds to rendering the relevant tags.\n\n\nParameters:\n\n\nname\n [string] - the name of the zone. May correspond to the name of a partial view, minus the file extension.\n\n\nsubsections\n [string] - a space-separated list of subsections for the zone. Each subsection name begins with a colon. The \":before\" and \":after\" subsections always exist no matter what is specified in this parameter.\n\n\nlayout\n [String] - Optional: the name of the view file that defines the chrome to render between the different items of the zone (to surround individual contents). The chrome template file looks like this:\n\n\n\n\nPreliminary\n    UnorderedListLayout.ascx:\n\n\n\n\n<@Control language=\"C#\" inherits=\"System.Web.Mvc.ViewUserControl<List<object>>\" %>\n<% if (Model.Length > 0) { %>\n  <% if (Model.Length == 1) { %>\n  <%= Html.DisplayFor(Model[0]) %>\n  <% } else {\n  <ul class=\"layoutList\">\n    <% foreach(var item in Model) { %>\n    <li><%= Html.DisplayFor(item) %></li>\n    <% } %>\n  </ul>\n  <% } %>\n<% } %>\n\n\n\nIf no layout file with that name is found, a default layout is used, that is looked for in the template directory, then in the fallback theme.\n\n\nHtml.Theme\n\n\nIncludes a theme setting.\n\n\nParameters:\n\n\nsettingName\n [String] - the name of the setting to include.\n\n\nReturn Value:\n\n\nA string that contains the value of the setting, or an empty string if it not found.\n\n\nDefault Includes\n\n\nBy convention, the pages of the Orchard Commerce application are divided into the following includes.\n\n\nSpecific Themes may override and/or define additional include files.  \n\n\nHead.ascx\n\n\nContains meta tags, styles, and scripts that should be included in every page of the application. In the example above, the contents of the head file has been inlined so that the file contains examples of each include method. In a real template, this contents would be in head, and the template itself would have a simple Html.Include(\"head\").\n\n\nHeader.ascx\n\n\nContains header content that is common all pages (site name banner image, navigation menus, login/logout link, etc).\n\n\nNote: in the example above, the banner has been put in the template itself but it shouldn't be in a real template.\n\n\nFooter.ascx\n\n\nContains footer content that is common to all pages.\nThe overall composition of views might result in something like this:\n\n\n\n\nContent and Script Includes\n\n\nSupporting Theme overrides for Views, Scripts, and Content enables Theme authors to simply copy files from the default application's top-level folders into the Theme's folder structure.\n\n\nHowever, a given View page might have references to other files - in particular, content such as images and stylesheets, and scripts.\n\n\nIn order to keep these references intact when copying files to the Theme, it is necessary to support helper methods for referencing files from the Content and Scripts directories, namely Html.ContentFolderUrl, Html.RegisterStylesheet and Html.RegisterScript.\n\n\nThese methods take as input a path relative to the local Content or Scripts folder for the Theme (or Widget) and return a resolved URL.\n\n\nFor example, in a Theme, a particular View page might have code as follows:\n\n\n<a href=\"<%=Url.Action(\"Show\", \"Cart\") %>\"><img\n  src=\"<%=Html.ContentFolderUrl(\"images/cart.gif\") %>\"\n  alt=\"Cart\" /></a>\n\n\n\nThe Html.ContentFolderUrl returns a path to /ApplicationName/Themes/MyCurrentTheme/images/cart.gif, /ApplicationName/Themes/MyCurrentTheme/Content/images/cart.gif, /ApplicationName/images/cart.gif or /ApplicationName/Content/images/cart.gif, whichever is found first when the API is called. This relies on IIS static file handling to serve the content, for performance reasons.\n\n\n<a href=\"/Cart/Show\"><img src=\"/ContentFiles/images/cart.gif\" alt=\"Your cart\" /></a>\n\n\n\nA similar Html.RegisterScriptUrl is supported for script file references, which searches under the appropriate Scripts folder (first in the Theme, then in the top-level Scripts folder for the application).  \n\n\nIn general, if a content or script file is meant to be Theme-overridable, these Include methods should be used to reference the file path.\n\n\nIn the example above, the View page might be in the top-level Views folder and the Theme overrides the cart.gif image in the Theme's Content/images folder.\n\n\nConversely, the View page might be overridden by the Theme, but the cart.gif image remains in the top-level Content/images folder.\n\n\nIn either case, the references will resolve correctly at runtime.",
            "title": "Theme includes"
        },
        {
            "location": "/Documentation/Themes-includes/#theme-overrides",
            "text": "The application defines top-level Content, Views, Scripts, Packages and Widgets folders, which are not related to the applied Theme and allow the application to function independently of the Themes feature.  In the absence of the Themes feature (or an applied Theme), the application will use the files in these directories to serve the UI for the application.   Themes override the default files in the application by specifying files for Content, Views, Scripts and Widgets under the Theme folder.  For example, if the application contains a ~/Views/Login.aspx page, the Blue Theme may override the rendering for this page by specifying a custom ~/Themes/Blue/Views/Login.aspx page.  The View Engine will look to the currently applied Theme to resolve files before \u201dfalling back\u201d to the default Views folder.  Overrides allow a theme to only specify the files that require customization by the Theme, instead of requiring Themes to duplicate every file in the application.  The override feature can dramatically simplify some theme definitions - a simple Theme may only need to override the header and style sheet for the application, so it would only need to specify ~/Views/Header.aspx and ~/Styles/Site.css.  The override feature can also simplify upgrading the application to a newer version, since it allows the default files of the application to be independently updated, while preserving Theme customizations.   Note:  Serving static files needs to be as fast as possible and the overhead of running any code on top of the web server's tends to be prohibitively high in comparison to the benefits. For this reason, the helper APIs presented here will directly generate URLs that directly map to the physical location of the resource files instead of, for example, generating a route-based URL that could be dynamically resolved later. Where that becomes problematic is that there are a few places, such as stylesheets, that are themselves static resources but that must reference other static resources (typically background images). Because the stylesheet is itself a static resource (it is possible to serve an aspx as the stylesheet but this is confusing and breaks IntelliSense), it cannot call into the helpers and must reference its dependencies using URLs that are relative to itself. This means in turn that the dependencies in question must be physically at the place the stylesheet points. This of course puts a limitation to resource fallback: you cannot override just the stylesheet, you also need to copy everything it depends on. Issue : In cases where the page is output-cached, adding or removing a file in the theme might not have immediate effect as the cached page is still pointing at the previously resolved resource. This could be fixed by \"touching\" the page or by doing more elaborate management of cache dependencies.",
            "title": "Theme Overrides"
        },
        {
            "location": "/Documentation/Themes-includes/#display-template-overrides",
            "text": "Display and editor templates are typically defined in a module under ~/Packages/[PackageName]/Views/DisplayTemplates/[items|parts]/[PackageName].[ItemOrPartName].ascx.  Overriding such a specialized display template is possible and sometimes useful, but it is discouraged, because the theme author can't possibly handle all existing modules. Whenever possible, the markup in the module view should be generic enough to be efficiently styled through CSS.  For those cases where the theme author or the person who customizes the application needs to override one of the display templates from a core or extension module, he should do so in the current theme under ~/Themes/[ThemeName]/Views/DisplayTemplates/[items|parts]/[PackageName].[ItemOrPartName].ascx. Notice that the only change in the path was to replace ~/Packages/[PackageName] with ~/Themes/[ThemeName].",
            "title": "Display template overrides"
        },
        {
            "location": "/Documentation/Themes-includes/#widget-overrides",
            "text": "Preliminary: widgets are not yet implemented.\nIn order to allow a Theme to override the complete rendering for the application, it is necessary to support the ability for a Theme to override an individual widget's rendering.   This assumes that the Theme author has foreknowledge of which widgets are installed to the application, but in many cases an application will include a default set of widgets that can be assumed to exist.  An override for a widget is specified by adding a Widgets folder underneath the named folder for the Theme, creating a subfolder for the Widget to override, and copying the widget's view file (.ascx) to the folder.  This file can be customized any way the Theme author sees fit, and the widget engine will use this file instead of the default one supplied with the widget.",
            "title": "Widget Overrides"
        },
        {
            "location": "/Documentation/Themes-includes/#include-methods",
            "text": "To enable the override feature to work properly, it is necessary to introduce an indirection for composing View files and including dependent references such as scripts, images, and style sheets.  This allows the Theme to reference files in a way that allows the application to resolve dependent file references without depending on a hard-coded physical path.  This is achieved using helper methods to generate URLs, as described below.  It should be noted that an include-style model for composition is decidedly different from the built-in ASP.NET Master Page feature, but is more tailored to the desired audience for Theme developers, namely HTML designers that may not be familiar with the intricacies of the ASP.NET programming model.  The assumption is that includes are likely to be more immediately understandable by this audience.  View composition relies on an Html.Zone helper method that defines named zones in the views. Several providers can take advantage of the named zones, for example an include provider that resolves the appropriate View file (either local to the Theme or one of the default application files) and includes it, or a widget provider that injects widgets into zones.  Zones can include named subsections that enable the insertion of positioned contents. By default, all zones come with two subsections, before and after, that enable the insertion of contents at the beginning and end of the zone. An example of a zone with named subsections is:  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" />\n    <title><%=Html.Title() %></title><%\n    Html.Zone(\"head\", \":metas :styles :scripts\"); %>\n</head>  In this example, a head zone is injected into the head tag, and it defines a subsection for metas, stylesheets and scripts. This is used to inject meta-tags, registered styles and scripts.  Example document and layout files follow:  document.aspx:\n<%@ Page Language=\"C#\" Inherits=\"System.Web.Mvc.ViewPage<BaseViewModel>\" %>\n<%@ Import Namespace=\"Orchard.Mvc.ViewModels\"%>\n<%@ Import Namespace=\"Orchard.Mvc.Html\"\n%><!DOCTYPE html>\n<html>\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" />\n    <title><%=Html.Title() %></title><%\n    Html.Zone(\"head\", \":metas :styles :scripts\"); %>\n</head>\n<body><%\n    Html.ZoneBody(\"body\"); %>\n</body>\n</html>  Note: The document file is almost never overridden by the theme.  layout.ascx:\n<%@ Control Language=\"C#\" Inherits=\"System.Web.Mvc.ViewUserControl<BaseViewModel>\" %>\n<%@ Import Namespace=\"Orchard.Mvc.ViewModels\"%>\n<%--\nname: Sample layout template\nzones: Head, Header, Content, Right sidebar, Footer\n--%><%\nHtml.RegisterStyle(\"site.css\");\nHtml.RegisterScript(\"MyScript.js\");\nModel.Zones.AddRenderPartial(\"header\");\nModel.Zones.AddRenderPartial(\"footer\");\n%>\n<div class=\"page\">\n    <img src=\"<%= Html.ContentFolderUrl(\"images/banner.jpg\") %>\" alt=\"Banner\"/>\n    <img src=\"<%= Html.Theme(\"Logo\") %>\" alt=\"Logo\"/>\n    <div id=\"header\"><%\n        Html.Zone(\"header\");\n        Html.Zone(\"menu\"); %>\n    </div>\n    <div id=\"main\"><%\n        Html.ZoneBody(\"content\");\n    %></div>\n    <div id=\"rightSidebar\"><%\n        Html.Zone(\"right sidebar\", \"UnorderedListLayout\")\n    %></div>\n    <div id=\"footer\"><%\n        Html.Zone(\"footer\");\n    %></div>\n</div>   Note : in this example, some contents are inlined but in a real template those would really be in partial views.\nIn this example, the calls to Html.Zone declare zones on the page where components will be able to inject contents and widgets.   For the header and footer zones, calls to AddRenderPartial will try to find a partial view with the same name (without its extension) as the zone (first in the theme, then in the top views) and will include it if it's found.  The included files can themselves contain calls to Html.Zone() for nested composition.   Issue:  when new zones are being added by included partial view, how will the admin UI discover them?\nThe page also contains specialized calls to other APIs that will be detailed below.  Open Issue : Do we need a version of Html.Zone that accepts a model?   How many overloads of RenderPartial do we want to repeat?   Question:  includes will be so common that we could consider having a shortcut like we have for localization. Zone(\"Content\") or Z(\"Content\")?\nThe contents of each include file should be semantically complete HTML. No separation of opening and closing tags into separate file should exist. When this looks necessary, the surrounding markup should be moved to the parent file.",
            "title": "Include Methods"
        },
        {
            "location": "/Documentation/Themes-includes/#htmltitle",
            "text": "A special helper that injects the page title.",
            "title": "Html.Title"
        },
        {
            "location": "/Documentation/Themes-includes/#htmlregisterscript",
            "text": "Registers a JavaScript file for inclusion by Html.Zone(\"head\", \":metas :styles :scripts\").  This helper method accepts as input a path that is relative to the root Scripts directory (of either the theme or root application).  It registers the script to include but does not render anything immediately. The actual rendering of the script tag will happen when the view calls Html.Zone(\"head\", \":metas :styles :scripts\").  The actual URL that will be rendered into the page will be mapped by the web server directly to either the theme or root application Scripts directory without having to run application code.  The system will search for the correct physical file to serve  in the following order:   ~/Themes/ThemeName/Scripts  ~/Scripts   Example:  Html.RegisterScript(\ufffdmyscript.js\ufffd)  ...registers a URL to the first physical file that exists in these locations (in order):   /ApplicationName/Themes/ThemeName/Scripts/myscript.js  /ApplicationName/Scripts/myscript.js   Parameters:  scriptPath  [String] - the path to the script file, relative to the root of the Scripts directory.  Return Value:  None",
            "title": "Html.RegisterScript"
        },
        {
            "location": "/Documentation/Themes-includes/#htmlregisterstylesheet",
            "text": "Registers a CSS file for inclusion by Html.Zone(\"head\", \":metas :styles :scripts\"). This helper method accepts as input a path that is relative to the root Content directory (of either the theme or root application).  It registers the stylesheet to include but does not render anything immediately. The actual rendering of the link tag will happen when the view calls Html.Zone(\"head\", \":metas :styles :scripts\").  The actual URL that will be rendered into the page will be mapped by the web server directly to either the theme or root application Scripts directory without having to run application code.  The system will search for the correct physical file to serve  in the following order:   ~/Themes/ThemeName  ~/Themes/ThemeName/Content  ~/  ~/Content   Note:  It is not correct (and might result in an exception) to include stylesheets from widgets using this API, since these stylesheets belong in the   of the document. Refer to the section entitled \u201cWidget Scripts and Stylesheets\u201d below.  Example:  Html.RegisterStyleSheet(\"mystylesheet.css\")  ...registers a URL to the first physical file that exists in these locations (in order):   /ApplicationName/Themes/ThemeName/mystylesheet.css  /ApplicationName/Themes/ThemeName/Content/mystylesheet.css  /ApplicationName/mystylesheet.css  /ApplicationName/Content/mystylesheet.css   Parameters:  styleSheetPath  [String] - the path to the CSS file, relative to the root of the Content or theme directory.  Return Value:  None",
            "title": "Html.RegisterStyleSheet"
        },
        {
            "location": "/Documentation/Themes-includes/#htmlzonehead-metas-styles-scripts",
            "text": "We'll have a special provider that recognizes the \"Head\" zone and generates the script, style and link tags resulting from previous registration by widgets and views. In particular, Html.RegisterScript and Html.RegisterStyleSheet calls result in Html.Include(\"Head\") generating the relevant tags.  This special provider is also the one that will inject style overrides.  The widgets can also participate in what gets rendered by this API by exposing their list of scripts and stylesheets (see  Widgets ).  The list of stylesheets and scripts to be included is first processed to remove duplicates, and then the helpers proceeds to rendering the relevant tags.  Parameters:  name  [string] - the name of the zone. May correspond to the name of a partial view, minus the file extension.  subsections  [string] - a space-separated list of subsections for the zone. Each subsection name begins with a colon. The \":before\" and \":after\" subsections always exist no matter what is specified in this parameter.  layout  [String] - Optional: the name of the view file that defines the chrome to render between the different items of the zone (to surround individual contents). The chrome template file looks like this:   Preliminary\n    UnorderedListLayout.ascx:   <@Control language=\"C#\" inherits=\"System.Web.Mvc.ViewUserControl<List<object>>\" %>\n<% if (Model.Length > 0) { %>\n  <% if (Model.Length == 1) { %>\n  <%= Html.DisplayFor(Model[0]) %>\n  <% } else {\n  <ul class=\"layoutList\">\n    <% foreach(var item in Model) { %>\n    <li><%= Html.DisplayFor(item) %></li>\n    <% } %>\n  </ul>\n  <% } %>\n<% } %>  If no layout file with that name is found, a default layout is used, that is looked for in the template directory, then in the fallback theme.",
            "title": "Html.Zone(\"head\", \":metas :styles :scripts\")"
        },
        {
            "location": "/Documentation/Themes-includes/#htmltheme",
            "text": "Includes a theme setting.  Parameters:  settingName  [String] - the name of the setting to include.  Return Value:  A string that contains the value of the setting, or an empty string if it not found.",
            "title": "Html.Theme"
        },
        {
            "location": "/Documentation/Themes-includes/#default-includes",
            "text": "By convention, the pages of the Orchard Commerce application are divided into the following includes.  Specific Themes may override and/or define additional include files.",
            "title": "Default Includes"
        },
        {
            "location": "/Documentation/Themes-includes/#headascx",
            "text": "Contains meta tags, styles, and scripts that should be included in every page of the application. In the example above, the contents of the head file has been inlined so that the file contains examples of each include method. In a real template, this contents would be in head, and the template itself would have a simple Html.Include(\"head\").",
            "title": "Head.ascx"
        },
        {
            "location": "/Documentation/Themes-includes/#headerascx",
            "text": "Contains header content that is common all pages (site name banner image, navigation menus, login/logout link, etc).  Note: in the example above, the banner has been put in the template itself but it shouldn't be in a real template.",
            "title": "Header.ascx"
        },
        {
            "location": "/Documentation/Themes-includes/#footerascx",
            "text": "Contains footer content that is common to all pages.\nThe overall composition of views might result in something like this:",
            "title": "Footer.ascx"
        },
        {
            "location": "/Documentation/Themes-includes/#content-and-script-includes",
            "text": "Supporting Theme overrides for Views, Scripts, and Content enables Theme authors to simply copy files from the default application's top-level folders into the Theme's folder structure.  However, a given View page might have references to other files - in particular, content such as images and stylesheets, and scripts.  In order to keep these references intact when copying files to the Theme, it is necessary to support helper methods for referencing files from the Content and Scripts directories, namely Html.ContentFolderUrl, Html.RegisterStylesheet and Html.RegisterScript.  These methods take as input a path relative to the local Content or Scripts folder for the Theme (or Widget) and return a resolved URL.  For example, in a Theme, a particular View page might have code as follows:  <a href=\"<%=Url.Action(\"Show\", \"Cart\") %>\"><img\n  src=\"<%=Html.ContentFolderUrl(\"images/cart.gif\") %>\"\n  alt=\"Cart\" /></a>  The Html.ContentFolderUrl returns a path to /ApplicationName/Themes/MyCurrentTheme/images/cart.gif, /ApplicationName/Themes/MyCurrentTheme/Content/images/cart.gif, /ApplicationName/images/cart.gif or /ApplicationName/Content/images/cart.gif, whichever is found first when the API is called. This relies on IIS static file handling to serve the content, for performance reasons.  <a href=\"/Cart/Show\"><img src=\"/ContentFiles/images/cart.gif\" alt=\"Your cart\" /></a>  A similar Html.RegisterScriptUrl is supported for script file references, which searches under the appropriate Scripts folder (first in the Theme, then in the top-level Scripts folder for the application).    In general, if a content or script file is meant to be Theme-overridable, these Include methods should be used to reference the file path.  In the example above, the View page might be in the top-level Views folder and the Theme overrides the cart.gif image in the Theme's Content/images folder.  Conversely, the View page might be overridden by the Theme, but the cart.gif image remains in the top-level Content/images folder.  In either case, the references will resolve correctly at runtime.",
            "title": "Content and Script Includes"
        },
        {
            "location": "/Documentation/Users/",
            "text": "Requirements\n\n\n\n\nDo not couple authentication to membership and profile data\n\n\nAbility to plug-in and combine multiple authentication schemes (internal AD, OpenID, etc.)\n\n\nMust enable creation of roles by administrators and modules\n\n\nMust be able to store custom and extensible information about users\n\n\nAbility for areas to extend user profiles\n\n\nAllow administrators to set-up user permissions in a scalable manner (adding more users and features do not result in non-linear growth of workload for the administrator)\n\n\nAllows modules to expose permissions\n\n\nPermission checking logic can be replaced\n\n\n\n\nNon goals\n\n\n\n\nACL-type of permission system with allow/deny and priorities\n\n\nSetting permissions at the content item or instance level\n\n\n\n\nScenarios\n\n\nA user can log into the application using his existing OpenID account\n\n\nA user can create a new user account\n\n\nThis should include a default captcha mechanism and provide extensibility points to replace it.\n\n\nAn administrator can create a new user account\n\n\nThe account verification is bypassed in this case.\n\n\nA user can access and modify all his profile information\n\n\nThis is by law in many countries.\n\n\nThis includes subscriptions, etc.\n\n\nA user can delete his account\n\n\nAn administrator can create new roles and assign users to roles\n\n\nA module author can add new roles and profile properties\n\n\nAn administrator can manage user membership in groups\n\n\nAn administrator can modify a user's profile\n\n\nAn administrator can delete or ban a user\n\n\nUser creation can be configured to require validation and/or confirmation\n\n\nA user can recover a lost password\n\n\nIf not using OpenID.\n\n\nAn administrator can personalize automatic e-mail messages to the users\n\n\nMessages include welcome message (with or without approval), approval notices, password recovery, account activation, account banned or account deleted.\n\n\nA module can expose permissions\n\n\nA module exposes what operations can be configured to be allowed or denied to specific groups.\n\n\nAn administrator can configure what groups are allowed to perform operations\n\n\nDefault roles\n\n\nOrchard comes installed with some default roles. New packages should provide default permission settings for those default roles to minimize the administrator's workload when adding a new package to the system.\n\n\nThose roles are:\n\n\n\n\nAnonymous user (cannot be removed)\n\n\nAuthenticated user (cannot be removed)\n\n\nOwner (cannot be removed, and is dynamically determined based on the object being verified)\n\n\nAdministrator (cannot be removed)\n\n\nAuthor (typically creates new contents and can manage their own)\n\n\nEditor (can modify and publish contents created by authors)\n\n\n\n\nPermissions\n\n\nAs part of our initial implementation of the permission system, we are retrofitting the following permissions into the existing Orchard packages.\n\n\nAdministration UI\n\n\nDefault permissions are:\n\n\n\n\n\n\n\n\nPermission\n\n\nAnon.\n\n\nAuthentic.\n\n\nOwner\n\n\nAdmin.\n\n\nAuthor\n\n\nEditor\n\n\n\n\n\n\n\n\n\n\nAccess the administration UI\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\n\n\nUser/Role/Permission editing\n\n\nDefault permissions are:\n\n\n\n\n\n\n\n\nPermission\n\n\nAnon.\n\n\nAuthentic.\n\n\nOwner\n\n\nAdmin.\n\n\nAuthor\n\n\nEditor\n\n\n\n\n\n\n\n\n\n\nManage permissions\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nNo\n\n\nNo\n\n\n\n\n\n\nCreate & manage users\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nNo\n\n\nNo\n\n\n\n\n\n\nCreate & manage roles\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nNo\n\n\nNo\n\n\n\n\n\n\nAssign users to roles\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nNo\n\n\nNo\n\n\n\n\n\n\n\n\n\n\nNote:\n the site owner not only has this permission by default but it also cannot be revoked from him, which is a special case.\n\n\n\n\nBlog\n\n\nSee \nBlog package\n.\n\n\nCMS Pages\n\n\nSee \nCMS scenarios\n.\n\n\nMedia\n\n\nSee \nMedia management\n.\n\n\nXML-RPC operations\n\n\nSee \nXML-RPC\n.\n\n\nTags\n\n\nSee \nTags\n.\n\n\nComments\n\n\nSee \nComments\n.\n\n\nError messages\n\n\nWhen an operation can't be performed due to a permission issue, the user gets the following message if he's not authenticated:\n\n\n\"You are not allowed to perform this operation. Please log into the site and try again.\"\n\n\nIf he's authenticated:\n\n\n\"You are not allowed to perform this operation. Please contact the site administrator if you think this is an error.\"\n\n\nFlows\n\n\nUser self-creation\n\n\n\n\n\n\n\n\n\n\nAdd a role\n\n\n\n\n\n\n\n\nModify roles for a user\n\n\n\n\n\n\n\n\n\n\nModify permissions for a role",
            "title": "Users, roles and permissions"
        },
        {
            "location": "/Documentation/Users/#requirements",
            "text": "Do not couple authentication to membership and profile data  Ability to plug-in and combine multiple authentication schemes (internal AD, OpenID, etc.)  Must enable creation of roles by administrators and modules  Must be able to store custom and extensible information about users  Ability for areas to extend user profiles  Allow administrators to set-up user permissions in a scalable manner (adding more users and features do not result in non-linear growth of workload for the administrator)  Allows modules to expose permissions  Permission checking logic can be replaced",
            "title": "Requirements"
        },
        {
            "location": "/Documentation/Users/#non-goals",
            "text": "ACL-type of permission system with allow/deny and priorities  Setting permissions at the content item or instance level",
            "title": "Non goals"
        },
        {
            "location": "/Documentation/Users/#scenarios",
            "text": "",
            "title": "Scenarios"
        },
        {
            "location": "/Documentation/Users/#a-user-can-log-into-the-application-using-his-existing-openid-account",
            "text": "",
            "title": "A user can log into the application using his existing OpenID account"
        },
        {
            "location": "/Documentation/Users/#a-user-can-create-a-new-user-account",
            "text": "This should include a default captcha mechanism and provide extensibility points to replace it.",
            "title": "A user can create a new user account"
        },
        {
            "location": "/Documentation/Users/#an-administrator-can-create-a-new-user-account",
            "text": "The account verification is bypassed in this case.",
            "title": "An administrator can create a new user account"
        },
        {
            "location": "/Documentation/Users/#a-user-can-access-and-modify-all-his-profile-information",
            "text": "This is by law in many countries.  This includes subscriptions, etc.",
            "title": "A user can access and modify all his profile information"
        },
        {
            "location": "/Documentation/Users/#a-user-can-delete-his-account",
            "text": "",
            "title": "A user can delete his account"
        },
        {
            "location": "/Documentation/Users/#an-administrator-can-create-new-roles-and-assign-users-to-roles",
            "text": "",
            "title": "An administrator can create new roles and assign users to roles"
        },
        {
            "location": "/Documentation/Users/#a-module-author-can-add-new-roles-and-profile-properties",
            "text": "",
            "title": "A module author can add new roles and profile properties"
        },
        {
            "location": "/Documentation/Users/#an-administrator-can-manage-user-membership-in-groups",
            "text": "",
            "title": "An administrator can manage user membership in groups"
        },
        {
            "location": "/Documentation/Users/#an-administrator-can-modify-a-users-profile",
            "text": "",
            "title": "An administrator can modify a user's profile"
        },
        {
            "location": "/Documentation/Users/#an-administrator-can-delete-or-ban-a-user",
            "text": "",
            "title": "An administrator can delete or ban a user"
        },
        {
            "location": "/Documentation/Users/#user-creation-can-be-configured-to-require-validation-andor-confirmation",
            "text": "",
            "title": "User creation can be configured to require validation and/or confirmation"
        },
        {
            "location": "/Documentation/Users/#a-user-can-recover-a-lost-password",
            "text": "If not using OpenID.",
            "title": "A user can recover a lost password"
        },
        {
            "location": "/Documentation/Users/#an-administrator-can-personalize-automatic-e-mail-messages-to-the-users",
            "text": "Messages include welcome message (with or without approval), approval notices, password recovery, account activation, account banned or account deleted.",
            "title": "An administrator can personalize automatic e-mail messages to the users"
        },
        {
            "location": "/Documentation/Users/#a-module-can-expose-permissions",
            "text": "A module exposes what operations can be configured to be allowed or denied to specific groups.",
            "title": "A module can expose permissions"
        },
        {
            "location": "/Documentation/Users/#an-administrator-can-configure-what-groups-are-allowed-to-perform-operations",
            "text": "",
            "title": "An administrator can configure what groups are allowed to perform operations"
        },
        {
            "location": "/Documentation/Users/#default-roles",
            "text": "Orchard comes installed with some default roles. New packages should provide default permission settings for those default roles to minimize the administrator's workload when adding a new package to the system.  Those roles are:   Anonymous user (cannot be removed)  Authenticated user (cannot be removed)  Owner (cannot be removed, and is dynamically determined based on the object being verified)  Administrator (cannot be removed)  Author (typically creates new contents and can manage their own)  Editor (can modify and publish contents created by authors)",
            "title": "Default roles"
        },
        {
            "location": "/Documentation/Users/#permissions",
            "text": "As part of our initial implementation of the permission system, we are retrofitting the following permissions into the existing Orchard packages.",
            "title": "Permissions"
        },
        {
            "location": "/Documentation/Users/#administration-ui",
            "text": "Default permissions are:     Permission  Anon.  Authentic.  Owner  Admin.  Author  Editor      Access the administration UI  No  No  Yes  Yes  Yes  Yes",
            "title": "Administration UI"
        },
        {
            "location": "/Documentation/Users/#userrolepermission-editing",
            "text": "Default permissions are:     Permission  Anon.  Authentic.  Owner  Admin.  Author  Editor      Manage permissions  No  No  Yes  Yes  No  No    Create & manage users  No  No  Yes  Yes  No  No    Create & manage roles  No  No  Yes  Yes  No  No    Assign users to roles  No  No  Yes  Yes  No  No      Note:  the site owner not only has this permission by default but it also cannot be revoked from him, which is a special case.",
            "title": "User/Role/Permission editing"
        },
        {
            "location": "/Documentation/Users/#blog",
            "text": "See  Blog package .",
            "title": "Blog"
        },
        {
            "location": "/Documentation/Users/#cms-pages",
            "text": "See  CMS scenarios .",
            "title": "CMS Pages"
        },
        {
            "location": "/Documentation/Users/#media",
            "text": "See  Media management .",
            "title": "Media"
        },
        {
            "location": "/Documentation/Users/#xml-rpc-operations",
            "text": "See  XML-RPC .",
            "title": "XML-RPC operations"
        },
        {
            "location": "/Documentation/Users/#tags",
            "text": "See  Tags .",
            "title": "Tags"
        },
        {
            "location": "/Documentation/Users/#comments",
            "text": "See  Comments .",
            "title": "Comments"
        },
        {
            "location": "/Documentation/Users/#error-messages",
            "text": "When an operation can't be performed due to a permission issue, the user gets the following message if he's not authenticated:  \"You are not allowed to perform this operation. Please log into the site and try again.\"  If he's authenticated:  \"You are not allowed to perform this operation. Please contact the site administrator if you think this is an error.\"",
            "title": "Error messages"
        },
        {
            "location": "/Documentation/Users/#flows",
            "text": "",
            "title": "Flows"
        },
        {
            "location": "/Documentation/Users/#user-self-creation",
            "text": "",
            "title": "User self-creation"
        },
        {
            "location": "/Documentation/Users/#add-a-role",
            "text": "",
            "title": "Add a role"
        },
        {
            "location": "/Documentation/Users/#modify-roles-for-a-user",
            "text": "",
            "title": "Modify roles for a user"
        },
        {
            "location": "/Documentation/Users/#modify-permissions-for-a-role",
            "text": "",
            "title": "Modify permissions for a role"
        },
        {
            "location": "/Documentation/Widgets/",
            "text": "Widgets are fragments of UI that surface specific data or features. Examples of widgets include navigation menus, image galleries, ads,  videos, tag clouds.\n\n\nWidgets are typically rendered in a zone on the page. A zone can contain zero or more widgets.\n\n\nAnatomy of a widget\n\n\nA widget is composed of two or more files that are placed in a /Packages/[MyPackage]/Widgets directory of the application.\n\n\nIn many ways, a widget can become a simplified mini-MVC application, with a model, a controller and one or several views.\n\n\nWidget meta-data\n\n\nThe meta-data is defined as part of the package.txt manifest file at the root of the widget's directory:\n\n\nWidgets:\n    - Tag Cloud\n        Author: Renaud Paquay\n        Description:\n            Displays available tags as a cloud where the size of each tag\n            reflects the number of items that use it.\n        Version: 0.1\n\n\n\nIn this example, we give the widget a display name (the name of the widget folder is used otherwise), we describe the author of the widget, give a long description and version number.\n\n\nWidget code file\n\n\nThe code file for a widget is named [MyWidgetName].cs by convention and is at the root of the widgets subdirectory of the package directory. This file contains the definition, settings and server code for the widget.\n\n\nHere is an example of code for a simple widget:\n\n\npublic class ProductList : Widget {\n    // ... widget code\n\n\n\nThe properties will be interpreted as settings for the widget instance.\n\n\nThe widget class is used as the model for the widget. As we will see, the widget's views are strongly-typed to use the widget class as the model.\n\n\nThe widget's class name should be the same widget name that is also defined in the package manifest.\n\n\nThe widgets in the widgets directory are dynamically compiled by the application, but widgets may also be deployed as part of a compiled package. In that case, the discovery is made through reflection instead of file-based discovery. The manifest for compiled widgets will be deployed as part of the package (TBD).\n\n\n\n\nNote:\n dynamic compilation of widgets will be implemented during the same iteration as plug-in dynamic compilation.\n\n\n\n\nData access\n\n\nWidget instances are content items that are contained in widget groups, which are also content items. The data persistence will be handled by Orchard but might use serialization in a single widgets table that is not specialized by widget type.\n\n\nView file\n\n\nThe second necessary part in a widget is an ascx file must be named [MyWidgetName].ascx by convention. This file is placed in the package's display template folder. The view file is actually just the display template for the widget.\n\n\nThis file is a partial view that uses the widget class as its model type.\n\n\nHere is an example of a widget's view code:\n\n\n<%@ Control Language=\"C#\" \n    Inherits=\"System.Web.Mvc.ViewUserControl<ProductList>\" %>\n\n<h5 class=\"widgetTitle\"><%=Html.Encode(Model.Title)%></h5>\n<ul id=\"imgholder_<%=Html.Encode(Model.ID)%>\" class=\"widgetBody\">\n  <%foreach (Product p in Model.Products) { %>\n  <li>\n    <p><a href=\"<%=Url.Action(\"show\",\"home\",new{sku=p.SKU})%>\"\n        title=\"Go to <%=Html.Encode(p.Name)%> Details Page\"\n        ><%=Html.Encode(p.Name)%></a><br />\n       <a href=\"<%=Url.Action(\"show\",\"home\",new{sku=p.SKU})%>\" \n           title=\"Go to <%=Html.Encode(p.Name)%> Details Page\"\n           ><%=Html.Encode(p.Price.ToString(\"C\"))%></a>\n    </p>\n  </li>\n  <%} %>\n</ul>\n\n\n\nCSS conventions\n\n\nThe widget views are built with a number of conventions that will make theme overrides and integration easier. The default view for a widget -the one that comes with the package- should be neutral, semantic markup so that it can inherit the current theme's styles without necessitating a specific view override.\n\n\nWe will set-up the conventions for a few class names that will make it easy to style all widgets with simple CSS:\n\n\n\n\nwidgetTitle\n\n\nwidgetBody\n\n\n\n\nAdministration view\n\n\nOptionally, a widget can provide its own UI to manage its settings.\n\n\nIt does so by having a [MyWidgetName].ascx (for example PageMap.ascx) partial view in the package's EditorTemplates directory. That partial view may rely on specific controller actions that may be implemented as part of the widget (see below).\n\n\nIf no edit view exists for the widget, Orchard will generate UI using MVC editor templates like for any other content type.\n\n\nContent and script files\n\n\nContent files (resp. script files) should be placed in a \"Content\" (resp. \"Scripts\") directory under the package's directory. Content files include stylesheets and images.\n\n\nIf a widget includes its own script files or its own stylesheets, it should declare those by calling Html.RegisterScript and Html.RegisterStylsheet from the view. Orchard will make a double pass on views, which will enable registration API call results to be included into the head.\n\n\nImplementing those methods will result in the theme's view code for the current page to remove duplicates and render the relevant script and link tags in the head of the page. For this to happen, the page view's header code must contain a call to \nHtml.Include(\"Head\")\n (usually in head.ascx).\n\n\nOrchard will look first for overrides for those files in the current theme folder, and will then look for them in the package's content folder. URLs for script files should be relative to the Scripts subfolder and URLs for stylesheets should be relative to the Content subfolder.\n\n\nIf two widget instances ask for the same script or the same stylesheet, Orchard will know how to include them only once.\n\n\nTo include images, a widget's view can use the Html.ContentFolderUrl helper, which will resolve to the widget's content folder when used from within a widget view:\n\n\n<img alt=\"circle\" src=\"<%= Html.ContentFolderUrl(\"circle.png\")%>\"/>\n\n\n\nThe URL returned by \nContentFolderUrl\n is already HTML-encoded. If the URL contains fragments that need to be URL-encoded, that encoding needs to be done on the parameter by the calling code, before it calls into the API. The same is true of the URLs returned by GetScriptUrls and GetStyleSheetUrls.\n\n\nAll the content resources that the widget needs should be included in the widget package's Content folder. The widget view should not rely on global application or global theme resources to ensure that the widget is a self-contained entity that can be deployed as is. Orchard will not fallback to global resources when a resource is not found either in the current theme's widget override folder or in the widget's content folder.\n\n\nExceptions to that rule is when the widget needs scripts or stylesheets that have not been written by the widget author and that are susceptible to be used by more than one widget type. In this case, it is recommended that the widgets refers to a (preferably version-neutral) URL of the resource stored on a CDN.\n\n\nTo allow for the CDN scenario, the resource URLs can be specified either as local relative URLs (in which case it is interpreted relative to the Content or Script subdirectory of the widget directory), as an application-relative URL (e.g. \"~/Scripts/somelibrary.js\") or as an absolute URL (e.g. \"http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.js\").\n\n\n\n\nNote:\n Serving static files needs to be as fast as possible and the overhead of running any code on top of the web server's tends to be  high in comparison to the benefits. For this reason, the helper APIs presented here will directly generate URLs that directly map to the physical location of the resource files instead of, for example, generating a route-based URL that could be dynamically resolved later. Where that becomes problematic is that there are a few places, such as stylesheets, that are themselves static resources but that must reference other static resources (typically background images). Because the stylesheet is itself a static resource (it is possible to serve an aspx as the stylesheet but this is confusing and breaks IntelliSense), it cannot call into the helpers and must reference its dependencies using URLs that are relative to itself. This means in turn that the dependencies in question must be physically at the place the stylesheet points. This of course puts a limitation to resource fallback: you cannot override just the stylesheet, you also need to copy everything it depends on.\n\n\n\n\nWidget controllers and routes\n\n\nA widget may expose its own controller to handle user interaction.\n\n\nA widget's controller should be named by convention [MyWidgetName]Controller and should be defined in the [MyWidgetName].cs file that also contains the widget's definition class and record class. It should implement the IController interface or inherit from a class that does.\n\n\nTo expose custom routes, the widget provider should act like other content type provider classes.\n\n\nWidget groups\n\n\nThe administrator can define named widget groups at the site level. These groups consist in an ordered list of widgets and the configuration for these widgets. The scope of the configuration is the widget group.\n\n\nWhat group of widgets goes into each zone for a given content item is handled by a specialized content part and is thus configurable at the content-item level.\n\n\n\n\nNote:\n we won't implement widget group administration in this iteration. Instead, we will code the infrastructure and will \"hard-code\" groups that the templates will statically include.\n\n\n\n\nInitial widgets\n\n\nWe will implement the following widgets as part of the first widget iteration:\n\n\n\n\nTag cloud\n\n\nHTML\n\n\n\n\nThe HTML widget will be used to render the site footer.\n\n\nIn the first iteration, we'll inject the widgets into the views with hard code. Configuration will come in a later iteration.\n\n\nIn future iteration, we could look at the following widgets (in no particular order):\n\n\n\n\nBlog archives\n\n\nRecent items\n\n\nAds\n\n\nAnalytics / stats\n\n\nXbox Live\n\n\nTwitter\n\n\nFaceBook\n\n\nCurrent user / login / logout\n\n\nMedia\n\n\nFlickr\n\n\nZune\n\n\n\n\nCommunity contributions could also provide some of these widgets.\n\n\nPermissions\n\n\nThe owner in this context refers to the content item owner when assigning a widget group to a zone in the template, or to the site owner for other permissions.\n\n\n\n\n\n\n\n\nPermission\n\n\nAnon.\n\n\nAuthentic.\n\n\nOwner\n\n\nAdmin.\n\n\nAuthor\n\n\nEditor\n\n\n\n\n\n\n\n\n\n\nCreate and manage widget groups\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nNo\n\n\nNo\n\n\n\n\n\n\nAssign a widget group to a zone\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nNo",
            "title": "Widgets"
        },
        {
            "location": "/Documentation/Widgets/#anatomy-of-a-widget",
            "text": "A widget is composed of two or more files that are placed in a /Packages/[MyPackage]/Widgets directory of the application.  In many ways, a widget can become a simplified mini-MVC application, with a model, a controller and one or several views.",
            "title": "Anatomy of a widget"
        },
        {
            "location": "/Documentation/Widgets/#widget-meta-data",
            "text": "The meta-data is defined as part of the package.txt manifest file at the root of the widget's directory:  Widgets:\n    - Tag Cloud\n        Author: Renaud Paquay\n        Description:\n            Displays available tags as a cloud where the size of each tag\n            reflects the number of items that use it.\n        Version: 0.1  In this example, we give the widget a display name (the name of the widget folder is used otherwise), we describe the author of the widget, give a long description and version number.",
            "title": "Widget meta-data"
        },
        {
            "location": "/Documentation/Widgets/#widget-code-file",
            "text": "The code file for a widget is named [MyWidgetName].cs by convention and is at the root of the widgets subdirectory of the package directory. This file contains the definition, settings and server code for the widget.  Here is an example of code for a simple widget:  public class ProductList : Widget {\n    // ... widget code  The properties will be interpreted as settings for the widget instance.  The widget class is used as the model for the widget. As we will see, the widget's views are strongly-typed to use the widget class as the model.  The widget's class name should be the same widget name that is also defined in the package manifest.  The widgets in the widgets directory are dynamically compiled by the application, but widgets may also be deployed as part of a compiled package. In that case, the discovery is made through reflection instead of file-based discovery. The manifest for compiled widgets will be deployed as part of the package (TBD).   Note:  dynamic compilation of widgets will be implemented during the same iteration as plug-in dynamic compilation.",
            "title": "Widget code file"
        },
        {
            "location": "/Documentation/Widgets/#data-access",
            "text": "Widget instances are content items that are contained in widget groups, which are also content items. The data persistence will be handled by Orchard but might use serialization in a single widgets table that is not specialized by widget type.",
            "title": "Data access"
        },
        {
            "location": "/Documentation/Widgets/#view-file",
            "text": "The second necessary part in a widget is an ascx file must be named [MyWidgetName].ascx by convention. This file is placed in the package's display template folder. The view file is actually just the display template for the widget.  This file is a partial view that uses the widget class as its model type.  Here is an example of a widget's view code:  <%@ Control Language=\"C#\" \n    Inherits=\"System.Web.Mvc.ViewUserControl<ProductList>\" %>\n\n<h5 class=\"widgetTitle\"><%=Html.Encode(Model.Title)%></h5>\n<ul id=\"imgholder_<%=Html.Encode(Model.ID)%>\" class=\"widgetBody\">\n  <%foreach (Product p in Model.Products) { %>\n  <li>\n    <p><a href=\"<%=Url.Action(\"show\",\"home\",new{sku=p.SKU})%>\"\n        title=\"Go to <%=Html.Encode(p.Name)%> Details Page\"\n        ><%=Html.Encode(p.Name)%></a><br />\n       <a href=\"<%=Url.Action(\"show\",\"home\",new{sku=p.SKU})%>\" \n           title=\"Go to <%=Html.Encode(p.Name)%> Details Page\"\n           ><%=Html.Encode(p.Price.ToString(\"C\"))%></a>\n    </p>\n  </li>\n  <%} %>\n</ul>",
            "title": "View file"
        },
        {
            "location": "/Documentation/Widgets/#css-conventions",
            "text": "The widget views are built with a number of conventions that will make theme overrides and integration easier. The default view for a widget -the one that comes with the package- should be neutral, semantic markup so that it can inherit the current theme's styles without necessitating a specific view override.  We will set-up the conventions for a few class names that will make it easy to style all widgets with simple CSS:   widgetTitle  widgetBody",
            "title": "CSS conventions"
        },
        {
            "location": "/Documentation/Widgets/#administration-view",
            "text": "Optionally, a widget can provide its own UI to manage its settings.  It does so by having a [MyWidgetName].ascx (for example PageMap.ascx) partial view in the package's EditorTemplates directory. That partial view may rely on specific controller actions that may be implemented as part of the widget (see below).  If no edit view exists for the widget, Orchard will generate UI using MVC editor templates like for any other content type.",
            "title": "Administration view"
        },
        {
            "location": "/Documentation/Widgets/#content-and-script-files",
            "text": "Content files (resp. script files) should be placed in a \"Content\" (resp. \"Scripts\") directory under the package's directory. Content files include stylesheets and images.  If a widget includes its own script files or its own stylesheets, it should declare those by calling Html.RegisterScript and Html.RegisterStylsheet from the view. Orchard will make a double pass on views, which will enable registration API call results to be included into the head.  Implementing those methods will result in the theme's view code for the current page to remove duplicates and render the relevant script and link tags in the head of the page. For this to happen, the page view's header code must contain a call to  Html.Include(\"Head\")  (usually in head.ascx).  Orchard will look first for overrides for those files in the current theme folder, and will then look for them in the package's content folder. URLs for script files should be relative to the Scripts subfolder and URLs for stylesheets should be relative to the Content subfolder.  If two widget instances ask for the same script or the same stylesheet, Orchard will know how to include them only once.  To include images, a widget's view can use the Html.ContentFolderUrl helper, which will resolve to the widget's content folder when used from within a widget view:  <img alt=\"circle\" src=\"<%= Html.ContentFolderUrl(\"circle.png\")%>\"/>  The URL returned by  ContentFolderUrl  is already HTML-encoded. If the URL contains fragments that need to be URL-encoded, that encoding needs to be done on the parameter by the calling code, before it calls into the API. The same is true of the URLs returned by GetScriptUrls and GetStyleSheetUrls.  All the content resources that the widget needs should be included in the widget package's Content folder. The widget view should not rely on global application or global theme resources to ensure that the widget is a self-contained entity that can be deployed as is. Orchard will not fallback to global resources when a resource is not found either in the current theme's widget override folder or in the widget's content folder.  Exceptions to that rule is when the widget needs scripts or stylesheets that have not been written by the widget author and that are susceptible to be used by more than one widget type. In this case, it is recommended that the widgets refers to a (preferably version-neutral) URL of the resource stored on a CDN.  To allow for the CDN scenario, the resource URLs can be specified either as local relative URLs (in which case it is interpreted relative to the Content or Script subdirectory of the widget directory), as an application-relative URL (e.g. \"~/Scripts/somelibrary.js\") or as an absolute URL (e.g. \"http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.js\").   Note:  Serving static files needs to be as fast as possible and the overhead of running any code on top of the web server's tends to be  high in comparison to the benefits. For this reason, the helper APIs presented here will directly generate URLs that directly map to the physical location of the resource files instead of, for example, generating a route-based URL that could be dynamically resolved later. Where that becomes problematic is that there are a few places, such as stylesheets, that are themselves static resources but that must reference other static resources (typically background images). Because the stylesheet is itself a static resource (it is possible to serve an aspx as the stylesheet but this is confusing and breaks IntelliSense), it cannot call into the helpers and must reference its dependencies using URLs that are relative to itself. This means in turn that the dependencies in question must be physically at the place the stylesheet points. This of course puts a limitation to resource fallback: you cannot override just the stylesheet, you also need to copy everything it depends on.",
            "title": "Content and script files"
        },
        {
            "location": "/Documentation/Widgets/#widget-controllers-and-routes",
            "text": "A widget may expose its own controller to handle user interaction.  A widget's controller should be named by convention [MyWidgetName]Controller and should be defined in the [MyWidgetName].cs file that also contains the widget's definition class and record class. It should implement the IController interface or inherit from a class that does.  To expose custom routes, the widget provider should act like other content type provider classes.",
            "title": "Widget controllers and routes"
        },
        {
            "location": "/Documentation/Widgets/#widget-groups",
            "text": "The administrator can define named widget groups at the site level. These groups consist in an ordered list of widgets and the configuration for these widgets. The scope of the configuration is the widget group.  What group of widgets goes into each zone for a given content item is handled by a specialized content part and is thus configurable at the content-item level.   Note:  we won't implement widget group administration in this iteration. Instead, we will code the infrastructure and will \"hard-code\" groups that the templates will statically include.",
            "title": "Widget groups"
        },
        {
            "location": "/Documentation/Widgets/#initial-widgets",
            "text": "We will implement the following widgets as part of the first widget iteration:   Tag cloud  HTML   The HTML widget will be used to render the site footer.  In the first iteration, we'll inject the widgets into the views with hard code. Configuration will come in a later iteration.  In future iteration, we could look at the following widgets (in no particular order):   Blog archives  Recent items  Ads  Analytics / stats  Xbox Live  Twitter  FaceBook  Current user / login / logout  Media  Flickr  Zune   Community contributions could also provide some of these widgets.",
            "title": "Initial widgets"
        },
        {
            "location": "/Documentation/Widgets/#permissions",
            "text": "The owner in this context refers to the content item owner when assigning a widget group to a zone in the template, or to the site owner for other permissions.     Permission  Anon.  Authentic.  Owner  Admin.  Author  Editor      Create and manage widget groups  No  No  Yes  Yes  No  No    Assign a widget group to a zone  No  No  Yes  Yes  Yes  No",
            "title": "Permissions"
        },
        {
            "location": "/Documentation/Xml-Rpc/",
            "text": "Supported tools\n\n\nOn Windows, the best choice for a blogging tool is \nWindows Live Writer\n. On the Mac, \nMarsEdit\n and \nEcto\n are fairly popular. Also of note is \nScribeFire\n, which is a FireFox extension that provides blog writing features right from the browser.\n\n\nAll of these tools support the MetaWeblog API (see below), so supporting MetaWeblog would give us instant support from all those tools.\n\n\nPublication protocols\n\n\nThere are many blogging APIs, but the most important are:\n\n\nMetaWeblog\n\n\nThe \nMetaWeblog API\n is by far the most common API to get implemented by blogs and publishing software. Supporting it pretty much gives instant and universal support. It is a superset of the Blogger API.\n\n\nWordPress\n\n\nThe \nWordPress API\n is an extended version of the Movable Type API. The WordPress API is interesting in that it also exposes the concept of page in addition to blog posts.\n\n\nMovable Type\n\n\nThe \nMovable Type\n is a fairly minimal and limited API. WordPress uses an extended version of that API.\n\n\nBlogger\n\n\nThe \nBlogger API\n is Google's blogging API. MetaWeblog is a superset of the Blogger API.\n\n\nAtom Publishing Protocol\n\n\nThe \nAtom Publishing Protocol\n is what comes closest to an \"official\" standard. It does go well beyond simply blogging and is closer to the needs of a general purpose protocol to publish contents.\n\n\nRecommendation\n\n\nIf we had to support only one format, MetaWeblog looks like the most universally supported one. On the other hand, it is rather poor in terms of features when compared with the WordPress API. For example, it doesn't have page support and is quite specialized to handle blog posts, which means that in order to use it as a more general publishing protocol, we might need to use some custom meta-data. The WordPress API might be a better choice because of the larger scope of the application. In addition to WordPress or MetaWeblog, Atom seems like a good investment for the future, and it does offer more CMS-friendly features than the others but client tool support is lacking. It might be a way in the future to achieve the universality that MetaWeblog or WordPress will make more difficult.\n\n\nDiscoverability\n\n\nTo enable tools to discover what API the application supports, we should implement \nReally Simple Discovery\n and the \nLive Writer Manifest\n.\n\n\nSupported API capability\n\n\nThe Live Writer manifest enables a very granular implementation of the various APIs. The following table shows what set of APIs Orchard would support at first.\n\n\nThose capabilities are being provided by modules (blog, pages, tags), not by the core application. For that reason, we will eventually enable modules to participate in the creation of the manifest. As a first step though, we will implement the manifest as a static list of capabilities (see \nthe LiveWriter Manifest documentation\n).\n\n\n\n\n\n\n\n\nAPI Capability\n\n\nOrchard support\n\n\nExpected behavior\n\n\n\n\n\n\n\n\n\n\nsupportsPostAsDraft\n\n\n?\n\n\nRespects the publish flag on metaWeblog.newPost and metaWeblog.editPost calls\n\n\n\n\n\n\nsupportsFileUpload\n\n\n?\n\n\nSupports metaWeblog.newMediaObject\n\n\n\n\n\n\nsupportsExtendedEntries\n\n\n-\n\n\nSupports mt_text_more field of post struct\n\n\n\n\n\n\nsupportsCustomDate\n\n\n?\n\n\nSupports explicit specification of dateCreated field of post struct\n\n\n\n\n\n\nsupportsCategories\n\n\n?\n\n\nSupports categorization of posts using either a category array within the post struct or mt.setPostCategories\n\n\n\n\n\n\nsupportsCategoriesInline\n\n\n?\n\n\nSupports categories field of post struct\n\n\n\n\n\n\nsupportsMultipleCategories\n\n\n?\n\n\nAllows specification of more than one category per post\n\n\n\n\n\n\nsupportsHierarchicalCategories\n\n\n-\n\n\nSupports wp.getCategories and wp.addCategory\n\n\n\n\n\n\nsupportsNewCategories\n\n\n-\n\n\nSupports the addition of new categories from the client via either inline specification (see below) or via the wp.addCategory method\n\n\n\n\n\n\nsupportsNewCategoriesInline\n\n\n?\n\n\nPreviously unused categories included within the categories field are automatically added\n\n\n\n\n\n\nsupportsKeywords\n\n\n-\n\n\nSupports mt_keywords field of post struct\n\n\n\n\n\n\nsupportsCommentPolicy\n\n\n?\n\n\nSupports mt_allow_comments field of post struct\n\n\n\n\n\n\nsupportsPingPolicy\n\n\n-\n\n\nSupports mt_allow_pings field of post struct\n\n\n\n\n\n\nsupportsAuthor\n\n\n?\n\n\nSupports wp_author field of post struct\n\n\n\n\n\n\nsupportsSlug\n\n\n?\n\n\nSupports either wp_slug or mt_basname field of post struct\n\n\n\n\n\n\nsupportsPassword\n\n\n-\n\n\nSupports wp_password field of post struct\n\n\n\n\n\n\nsupportsExcerpt\n\n\n?\n\n\nSupports mt_excerpt field of post struct\n\n\n\n\n\n\nsupportsTrackbacks\n\n\n-\n\n\nSupports mt_tb_ping_urls field of post struct\n\n\n\n\n\n\nsupportsPages\n\n\n?\n\n\nSupports WordPress page editing API: wp.newPage, wp.editPage, wp.getPage, wp.getPages, wp.getPageList, andwp.deletePage\n\n\n\n\n\n\nsupportsPageParent\n\n\n-\n\n\nSupports wp_page_parent_id field of page struct\n\n\n\n\n\n\nsupportsPageOrder\n\n\n-\n\n\nSupports wp_page_order field of page struct\n\n\n\n\n\n\nsupportsEmptyTitles\n\n\n-\n\n\nAllows empty string as a valid value for the title field of the post struct\n\n\n\n\n\n\nrequiresHtmlTitles\n\n\n-\n\n\nTitle field is interpreted as HTML content rather than plain text\n\n\n\n\n\n\nrequiresXHTML\n\n\n-\n\n\nGenerate XHTML style markup by default\n\n\n\n\n\n\nsupportsScripts\n\n\n?\n\n\nAllows embedded script within post content\n\n\n\n\n\n\nsupportsEmbeds\n\n\n?\n\n\nAllows object embeds within post content\n\n\n\n\n\n\n\n\nCategories in the Live Writer manifest correspond to tags in Orchard.\n\n\nSupporting custom date will mean for Orchard that that date gets translated into scheduled publication if the date is in the future, and to modifying the publication date on the post or page otherwise.\n\n\nPermissions\n\n\nDefault permissions:\n\n\n\n\n\n\n\n\nPermission\n\n\nAnon.\n\n\nAuthentic.\n\n\nOwner\n\n\nAdmin.\n\n\nAuthor\n\n\nEditor\n\n\n\n\n\n\n\n\n\n\nCreate and manage contents through XML-RPC APIs\n\n\nNo\n\n\nNo\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\n\n\n\n\nNote\n: the specific rights for each content type and operation are also checked in addition to this right. If this right is not granted, none of the operations work",
            "title": "XML-RPC and Live Writer"
        },
        {
            "location": "/Documentation/Xml-Rpc/#supported-tools",
            "text": "On Windows, the best choice for a blogging tool is  Windows Live Writer . On the Mac,  MarsEdit  and  Ecto  are fairly popular. Also of note is  ScribeFire , which is a FireFox extension that provides blog writing features right from the browser.  All of these tools support the MetaWeblog API (see below), so supporting MetaWeblog would give us instant support from all those tools.",
            "title": "Supported tools"
        },
        {
            "location": "/Documentation/Xml-Rpc/#publication-protocols",
            "text": "There are many blogging APIs, but the most important are:",
            "title": "Publication protocols"
        },
        {
            "location": "/Documentation/Xml-Rpc/#metaweblog",
            "text": "The  MetaWeblog API  is by far the most common API to get implemented by blogs and publishing software. Supporting it pretty much gives instant and universal support. It is a superset of the Blogger API.",
            "title": "MetaWeblog"
        },
        {
            "location": "/Documentation/Xml-Rpc/#wordpress",
            "text": "The  WordPress API  is an extended version of the Movable Type API. The WordPress API is interesting in that it also exposes the concept of page in addition to blog posts.",
            "title": "WordPress"
        },
        {
            "location": "/Documentation/Xml-Rpc/#movable-type",
            "text": "The  Movable Type  is a fairly minimal and limited API. WordPress uses an extended version of that API.",
            "title": "Movable Type"
        },
        {
            "location": "/Documentation/Xml-Rpc/#blogger",
            "text": "The  Blogger API  is Google's blogging API. MetaWeblog is a superset of the Blogger API.",
            "title": "Blogger"
        },
        {
            "location": "/Documentation/Xml-Rpc/#atom-publishing-protocol",
            "text": "The  Atom Publishing Protocol  is what comes closest to an \"official\" standard. It does go well beyond simply blogging and is closer to the needs of a general purpose protocol to publish contents.",
            "title": "Atom Publishing Protocol"
        },
        {
            "location": "/Documentation/Xml-Rpc/#recommendation",
            "text": "If we had to support only one format, MetaWeblog looks like the most universally supported one. On the other hand, it is rather poor in terms of features when compared with the WordPress API. For example, it doesn't have page support and is quite specialized to handle blog posts, which means that in order to use it as a more general publishing protocol, we might need to use some custom meta-data. The WordPress API might be a better choice because of the larger scope of the application. In addition to WordPress or MetaWeblog, Atom seems like a good investment for the future, and it does offer more CMS-friendly features than the others but client tool support is lacking. It might be a way in the future to achieve the universality that MetaWeblog or WordPress will make more difficult.",
            "title": "Recommendation"
        },
        {
            "location": "/Documentation/Xml-Rpc/#discoverability",
            "text": "To enable tools to discover what API the application supports, we should implement  Really Simple Discovery  and the  Live Writer Manifest .",
            "title": "Discoverability"
        },
        {
            "location": "/Documentation/Xml-Rpc/#supported-api-capability",
            "text": "The Live Writer manifest enables a very granular implementation of the various APIs. The following table shows what set of APIs Orchard would support at first.  Those capabilities are being provided by modules (blog, pages, tags), not by the core application. For that reason, we will eventually enable modules to participate in the creation of the manifest. As a first step though, we will implement the manifest as a static list of capabilities (see  the LiveWriter Manifest documentation ).     API Capability  Orchard support  Expected behavior      supportsPostAsDraft  ?  Respects the publish flag on metaWeblog.newPost and metaWeblog.editPost calls    supportsFileUpload  ?  Supports metaWeblog.newMediaObject    supportsExtendedEntries  -  Supports mt_text_more field of post struct    supportsCustomDate  ?  Supports explicit specification of dateCreated field of post struct    supportsCategories  ?  Supports categorization of posts using either a category array within the post struct or mt.setPostCategories    supportsCategoriesInline  ?  Supports categories field of post struct    supportsMultipleCategories  ?  Allows specification of more than one category per post    supportsHierarchicalCategories  -  Supports wp.getCategories and wp.addCategory    supportsNewCategories  -  Supports the addition of new categories from the client via either inline specification (see below) or via the wp.addCategory method    supportsNewCategoriesInline  ?  Previously unused categories included within the categories field are automatically added    supportsKeywords  -  Supports mt_keywords field of post struct    supportsCommentPolicy  ?  Supports mt_allow_comments field of post struct    supportsPingPolicy  -  Supports mt_allow_pings field of post struct    supportsAuthor  ?  Supports wp_author field of post struct    supportsSlug  ?  Supports either wp_slug or mt_basname field of post struct    supportsPassword  -  Supports wp_password field of post struct    supportsExcerpt  ?  Supports mt_excerpt field of post struct    supportsTrackbacks  -  Supports mt_tb_ping_urls field of post struct    supportsPages  ?  Supports WordPress page editing API: wp.newPage, wp.editPage, wp.getPage, wp.getPages, wp.getPageList, andwp.deletePage    supportsPageParent  -  Supports wp_page_parent_id field of page struct    supportsPageOrder  -  Supports wp_page_order field of page struct    supportsEmptyTitles  -  Allows empty string as a valid value for the title field of the post struct    requiresHtmlTitles  -  Title field is interpreted as HTML content rather than plain text    requiresXHTML  -  Generate XHTML style markup by default    supportsScripts  ?  Allows embedded script within post content    supportsEmbeds  ?  Allows object embeds within post content     Categories in the Live Writer manifest correspond to tags in Orchard.  Supporting custom date will mean for Orchard that that date gets translated into scheduled publication if the date is in the future, and to modifying the publication date on the post or page otherwise.",
            "title": "Supported API capability"
        },
        {
            "location": "/Documentation/Xml-Rpc/#permissions",
            "text": "Default permissions:     Permission  Anon.  Authentic.  Owner  Admin.  Author  Editor      Create and manage contents through XML-RPC APIs  No  No  Yes  Yes  Yes  Yes      Note : the specific rights for each content type and operation are also checked in addition to this right. If this right is not granted, none of the operations work",
            "title": "Permissions"
        },
        {
            "location": "/Documentation/Creating-lists/",
            "text": "The List feature has been rebuilt from the ground up. This topic may contain inaccuracies with regards to the current\n  implementation.\n\n\n\n\nIn Orchard, you can create custom content items and assign them as navigation menu entries. If you have more than a few custom content items, you'll probably want to organize them in lists. This topic walks you through this process. In the walkthrough, you'll create a custom content type and display its items in lists. (For information about how to create a custom content type, see \nCreating Custom Content Types\n.) \n\n\nCreating a Custom Containable Content Type\n\n\nTo begin, you will create a custom content type that represents a book review. \n\n\nOn the dashboard, click \nContent\n, and then click the \nContent Types\n tab. Click \nCreate New Type\n, and then in the \nDisplay Name\n field, enter the name \"Book Review\". (The \nContent Type ID\n field automatically generates an ID value that is based on what you entered for the display name, but without spaces.) Click \nCreate\n to finish creating the new type.  \n\n\n\n\nA screen displays in which you can add content parts to the newly created content type. Select the check box for all of the following content parts to add them to your newly created content type.  \n\n\n\n\nBody\n. Adds a body section with a rich-text editor that you can use to enter reviews.\n\n\nComments\n. Enables users to comment on the reviews.\n\n\nCommon\n. Gives each review a base set of properties, including an owner, a container, versions, a creation date, a publication date, and a modification date. \n\n\nContainable\n. This part tells Orchard that the items of this type can be attached to a list and enables dashboard options to manage the relationship between the items and lists. This is the most important part for the purpose of this walkthrough.   \n\n\nImportant\n Always add the \nCommon\n part when you add the \nContainable\n part. Otherwise you will not be able to add your items to a list.\n\n\n\n\n\n\nRoute\n. Provides friendly URLs for book reviews.\n\n\nTags\n. Lets you add tags to book reviews.\n\n\n\n\n\n\nNote\n You can modify an existing content type to add the \nContainable\n part, which will allow the site administrator to attach items of that type to lists.\n\n\n\n\nThe following illustration shows the new \nBook Review\n content type with all the parts selected:\n\n\n\n\nClick \nSave\n to finish adding the content parts to the type. An edit screen displays the parts you just added to the type, and provides controls to add fields as well. \n\n\nIn the \nEdit Content Type\n screen, click \nAdd\n next to \nFields\n. \n\n\n\n\nAdd each of the following fields by entering the field name in the \nAdd New Field\n screen (no spaces allowed), and then click \nSave\n. \n\n\n\n\nBuy\n.  This field points to a commerce site where the book can be bought.\n\n\nVerdict\n. This field indicates a recommendation for the book, such as \"Buy\", \"Read\", or \"Skip\".\n\n\n\n\n\n\nAfter you have added the fields, your custom type looks like the following illustration.  Click \nSave\n to save the custom content type. \n\n\n\n\nOn the dashboard, expand the \nNew\n menu. You see the \nBook Review\n content type. Don't click the new type on the dashboard yet. First you will create a book container to display book reviews in a list rather than as individual items. \n\n\n\n\nCreating a List of Books\n\n\nTo create the \nBook Review\n list, in the \nNew\n menu of the dashboard, click \nList\n. \n\n\n\n\nNote:\n The \nList\n module (that enables the New List link) may not be installed or active if you created your site using WebMatrix.  \n\n\n\n\nName the new list \"Book Reviews\" and in the \nContains\n field, select \"Book Review\" from the drop-down list. Select the \nShow on main menu\n option, and enter \"Book Reviews\" in the \nMenu Text\n field. When you're finished, save the new list.\n\n\n\n\nCreating Book Content Items\n\n\nNow you can start creating book reviews.\n\n\nIn the dashboard, click the new \nBook Review\n menu item. Create a few book reviews to populate the list. For each review you create, add values to the following fields, and then click \nPublish Now\n. \n\n\n\n\nAdd To\n. Select \nList: Book Reviews\n from the drop-down list, so that the review is added to this list.\n\n\nTitle\n. Enter the book title. A URL is generated based on the title.\n\n\nBody\n. Enter review comments. \n\n\nBuy\n. Add a URL to a site where the book can be purchased.\n\n\nVerdict\n. Add a value indicating your recommendation (buy, read, skip).\n\n\nTags\n. Optionally, enter tags so that the list of reviews can be filtered.\n\n\n\n\n\n\nDisplaying the List\n\n\nTo see the list of book reviews, return to the home page, and then click the new \nBook Reviews\n menu item.\n\n\n\n\nCustomizing How the List is Rendered\n\n\nThe \nBook Review\n content type uses a text field for the \nBuy\n field, because that's the default option in Orchard. However, because this field is intended to contain URLs, a URL field would work better. No specialized URL field available, but you can modify the rendering of the text field to make it better suited for URLs. Create the following new text file in your Orchard site:\n\n\n~/Themes/\nCurrent theme for your site\n/Views/Fields/Common.Text.cshtml\n\n\nCopy and paste the following code into the new file:\n\n\n@using Orchard.Utility.Extensions;\n@{\n    string name = Model.Name;\n    string value = Model.Value;\n}\n@if (HasText(name) && HasText(value)) {\n<p class=\"text-field\">\n  @if (name == \"Buy\") {\n    <a href=\"@value\" class=\"value\">Buy this book</a>\n  }\n  else {\n    <span class=\"name\">@name.CamelFriendly():</span>\n    <span class=\"value\">@value</span>\n  }\n</p>\n}\n\n\n\nThis template looks at the name of the field, and if the name is \"Buy\", the template changes the rendering to be a link to the value of the field.\n\n\nIn addition to customizing how fields render in a custom content type, you can change what's displayed and where it's displayed by using a \nplacement.info\n file. If you already have a \nplacement.info\n file at the root of your site's current theme folder, edit it and add the \nMatch\n element shown in the following example before the \n&lt;/Placement&gt;\n closing tag. If you don't already have a \nplacement.info\n file, create a new file and add the following content:\n\n\n<Placement>\n    <Match ContentType=\"BookReview\">\n        <Match DisplayType=\"Detail\">\n            <Place Parts_Common_Body=\"Content:before\"\n                   Parts_Tags_ShowTags=\"Content:after\"\n                   Parts_Comments=\"Footer\"/>\n        </Match>\n        <Match DisplayType=\"Summary\">\n            <Place Parts_Common_Body_Summary=\"Content\"\n                   Parts_Comments_Count=\"Nowhere\"\n                   Parts_Tags_ShowTags=\"Nowhere\"\n                   Parts_Common_Metadata_Summary=\"Nowhere\"\n                   Fields_Common_Text=\"Nowhere\"/>\n        </Match>\n    </Match>\n</Placement>\n\n\n\nThis placement file affects only the \nBook Review\n content type, as specified in the first \nMatch\n element. Inside the first \nMatch\n element there are two child \nMatch\n elements that match the \nDetail\n and \nSummary\n display types. Those matches specify how book reviews are rendered in two cases: the details view and the list view.  \n\n\nWhen the details are displayed, the placement file specifies that the body of the review should appear at the beginning of the \nContent\n zone, the tags at the end of the same zone, and the comments in the \nFooter\n zone. If you are currently signed in as an admin user, temporarily sign out so that you can see the book reviews as a user would. Click one of the book reviews to see how the module that you added changes the rendering. \n\n\n\n\nWhen the whole list of books is displayed, you want to display a more abbreviated view, such as the title and summary only for each book. To suppress the display of the comment count, the tags, the metadata and the fields, the \nplacement.info\n file sends those shapes to the \"Nowhere\" zone. The \"Nowhere\" zone is not actually a defined Orchard zone, it is simply a standard way in \n.info\n files of suppressing elements you want to hide by sending them to an undefined zone. The summary is sent to the \nContent\n zone. Click the \nBook Reviews\n menu entry to view the updated rendering of your list of reviews. \n\n\n\n\n\n\nNote\n The zones referred to in this section of the topic are not layout-level widget zones, but rather local zones. As an example of how these are defined, check out the \n/Core/Contents/Views/Items/Content.Summary.cshtml\n file.\n\n\n\n\nDisplaying Book Lists as Widgets\n\n\nThe next task is to display the latest book review in a right-hand sidebar on the home page of the site. You will use a container widget object to do that.\n\n\nSign back into your site, and on the dashboard click \nWidgets\n. On the \nWidgets\n screen, in the drop-down list under \nCurrent Layer\n, select the \nTheHomePage\n layer.  In the list of zones, find the zone named \nAside Second\n and click \nAdd\n next to the zone. In the \nChoose a Widget\n screen, click \nContainer Widget\n. The \nAdd Widget\n screen is displayed. \n\n\n\n\nIn the \nTitle\n field, enter \"Latest Book Review\". Under \nShow items from\n, make sure that \nList: Book Reviews\n is selected. Then save the widget. \n\n\nReturn to the home page, and notice that the latest reviews from your book reviews list are now displayed in the sidebar.\n\n\n\n\nCreating a Custom List Widget\n\n\nUsing the filter feature, you can filter the values of custom properties named \nCustom1\n, \nCustom2\n, and \nCustom3\n. This in turn lets you filter what items from a list are displayed in a page. Now you will add some custom properties that will let you filter the display of your reviews.\n\n\nIn the dashboard, click \nContent\n, and then click the \nContent Types\n tab. Click \nEdit\n next to \nBook Review\n. On the \nEdit Content Type\n screen, click \nAdd Parts\n.  \n\n\n\n\nSelect the \nCustom Properties\n part, and click \nSave\n.\n\n\nNow return to the \nBook Reviews\n page in your site and edit one of your book reviews. You will see text fields for the three new properties. Enter \"Featured\" into \nCustom One\n, and then save the updated review.\n\n\n\n\nYou can repeat the last step for any other reviews you'd like to feature on the home page.\n\n\nTo filter the reviews so that only featured reviews are displayed on the home page, click \nWidgets\n on the dashboard, and in the \nWidgets\n screen, select the \nTheHomePage\n layer from the \nCurrent Layer\n drop-down list. Then click the \nLatest Book Review\n widget that you created earlier. \n\n\nIn the \nEdit Widget\n screen, select the \nFilter items\n option, select the \nCustom 1\n property from the first drop-down list, select \nis equal to\n from the second drop-down list, and enter \"Featured\" in the third drop-down list.  This filters reviews so that only featured reviews are displayed on the home page. When you're finished, save the updated widget.\n\n\n\n\nBrowse to your home page. Notice that only the book reviews for which you entered \"Featured\" in the \nCustom 1\n field are displayed.\n\n\n\n\nNow click \nWidgets\n on the dashboard, return to the \nWidgets\n screen, and again select the \nTheHomePage\n layer from the \nCurrent Layer\n drop-down list. Add another widget to the \nTheHomePage\n layer as you did previously by clicking \nAdd\n next to the \nAsideSecond\n zone, and then click \nContainer Widget\n to add it. This time in the \nAdd Widget\n screen, set the \nPosition\n value to 6 so that the new list appears below the first one. Set the \nTitle\n property to \"Featured Reviews\", set the \nMaximum number of items to display\n value to 2, and select the \nFilter items\n option. Set the filter criterion to \"Custom 1 is equal to Featured\". Save your changes.\n\n\n\n\nOn the \nWidgets\n screen, click the \nLatest Book Review\n widget to edit it. Clear the \nFilter items\n check box, which means that it no longer filters reviews. Save the widget. \n\n\nThe following illustration shows what the home page looks like with the two widgets that you configured. It displays both the latest reviews ordered by date, and the featured review in which you added the value \"Featured\" to the Custom 1 property field for a specific book, and filtered for that property. \n\n\n\n\nPagination\n\n\nThe list feature has built-in support for pagination on list pages. \n\n\nOn the dashboard, click \nContent\n, and then click \nEdit\n next to \nBook Reviews\n. In the \nEdit list\n screen, change the page size to a number that is smaller than the number of reviews you've added to the system. Leave \nShow paging controls\n selected. Save the changes.\n\n\n\n\nGo back to the \nBook Reviews\n page. Notice that there is an \nOlder\n button that you can click to see older book reviews.\n\n\n\n\n\n\nNote\n Pagination is available only on list pages and not on list widgets. This is by design, because pagination within a widget would allow multiple pagers on the same page, which could be confusing.\n\n\n\n\nChange History\n\n\n\n\nUpdated for Orchard 1.1\n\n\n3-18-11:  Updated all screens, menu options, and procedures for working with lists.",
            "title": "Creating lists of content items"
        },
        {
            "location": "/Documentation/Creating-lists/#creating-a-custom-containable-content-type",
            "text": "To begin, you will create a custom content type that represents a book review.   On the dashboard, click  Content , and then click the  Content Types  tab. Click  Create New Type , and then in the  Display Name  field, enter the name \"Book Review\". (The  Content Type ID  field automatically generates an ID value that is based on what you entered for the display name, but without spaces.) Click  Create  to finish creating the new type.     A screen displays in which you can add content parts to the newly created content type. Select the check box for all of the following content parts to add them to your newly created content type.     Body . Adds a body section with a rich-text editor that you can use to enter reviews.  Comments . Enables users to comment on the reviews.  Common . Gives each review a base set of properties, including an owner, a container, versions, a creation date, a publication date, and a modification date.   Containable . This part tells Orchard that the items of this type can be attached to a list and enables dashboard options to manage the relationship between the items and lists. This is the most important part for the purpose of this walkthrough.     Important  Always add the  Common  part when you add the  Containable  part. Otherwise you will not be able to add your items to a list.    Route . Provides friendly URLs for book reviews.  Tags . Lets you add tags to book reviews.    Note  You can modify an existing content type to add the  Containable  part, which will allow the site administrator to attach items of that type to lists.   The following illustration shows the new  Book Review  content type with all the parts selected:   Click  Save  to finish adding the content parts to the type. An edit screen displays the parts you just added to the type, and provides controls to add fields as well.   In the  Edit Content Type  screen, click  Add  next to  Fields .    Add each of the following fields by entering the field name in the  Add New Field  screen (no spaces allowed), and then click  Save .    Buy .  This field points to a commerce site where the book can be bought.  Verdict . This field indicates a recommendation for the book, such as \"Buy\", \"Read\", or \"Skip\".    After you have added the fields, your custom type looks like the following illustration.  Click  Save  to save the custom content type.    On the dashboard, expand the  New  menu. You see the  Book Review  content type. Don't click the new type on the dashboard yet. First you will create a book container to display book reviews in a list rather than as individual items.",
            "title": "Creating a Custom Containable Content Type"
        },
        {
            "location": "/Documentation/Creating-lists/#creating-a-list-of-books",
            "text": "To create the  Book Review  list, in the  New  menu of the dashboard, click  List .    Note:  The  List  module (that enables the New List link) may not be installed or active if you created your site using WebMatrix.     Name the new list \"Book Reviews\" and in the  Contains  field, select \"Book Review\" from the drop-down list. Select the  Show on main menu  option, and enter \"Book Reviews\" in the  Menu Text  field. When you're finished, save the new list.",
            "title": "Creating a List of Books"
        },
        {
            "location": "/Documentation/Creating-lists/#creating-book-content-items",
            "text": "Now you can start creating book reviews.  In the dashboard, click the new  Book Review  menu item. Create a few book reviews to populate the list. For each review you create, add values to the following fields, and then click  Publish Now .    Add To . Select  List: Book Reviews  from the drop-down list, so that the review is added to this list.  Title . Enter the book title. A URL is generated based on the title.  Body . Enter review comments.   Buy . Add a URL to a site where the book can be purchased.  Verdict . Add a value indicating your recommendation (buy, read, skip).  Tags . Optionally, enter tags so that the list of reviews can be filtered.",
            "title": "Creating Book Content Items"
        },
        {
            "location": "/Documentation/Creating-lists/#displaying-the-list",
            "text": "To see the list of book reviews, return to the home page, and then click the new  Book Reviews  menu item.",
            "title": "Displaying the List"
        },
        {
            "location": "/Documentation/Creating-lists/#customizing-how-the-list-is-rendered",
            "text": "The  Book Review  content type uses a text field for the  Buy  field, because that's the default option in Orchard. However, because this field is intended to contain URLs, a URL field would work better. No specialized URL field available, but you can modify the rendering of the text field to make it better suited for URLs. Create the following new text file in your Orchard site:  ~/Themes/ Current theme for your site /Views/Fields/Common.Text.cshtml  Copy and paste the following code into the new file:  @using Orchard.Utility.Extensions;\n@{\n    string name = Model.Name;\n    string value = Model.Value;\n}\n@if (HasText(name) && HasText(value)) {\n<p class=\"text-field\">\n  @if (name == \"Buy\") {\n    <a href=\"@value\" class=\"value\">Buy this book</a>\n  }\n  else {\n    <span class=\"name\">@name.CamelFriendly():</span>\n    <span class=\"value\">@value</span>\n  }\n</p>\n}  This template looks at the name of the field, and if the name is \"Buy\", the template changes the rendering to be a link to the value of the field.  In addition to customizing how fields render in a custom content type, you can change what's displayed and where it's displayed by using a  placement.info  file. If you already have a  placement.info  file at the root of your site's current theme folder, edit it and add the  Match  element shown in the following example before the  &lt;/Placement&gt;  closing tag. If you don't already have a  placement.info  file, create a new file and add the following content:  <Placement>\n    <Match ContentType=\"BookReview\">\n        <Match DisplayType=\"Detail\">\n            <Place Parts_Common_Body=\"Content:before\"\n                   Parts_Tags_ShowTags=\"Content:after\"\n                   Parts_Comments=\"Footer\"/>\n        </Match>\n        <Match DisplayType=\"Summary\">\n            <Place Parts_Common_Body_Summary=\"Content\"\n                   Parts_Comments_Count=\"Nowhere\"\n                   Parts_Tags_ShowTags=\"Nowhere\"\n                   Parts_Common_Metadata_Summary=\"Nowhere\"\n                   Fields_Common_Text=\"Nowhere\"/>\n        </Match>\n    </Match>\n</Placement>  This placement file affects only the  Book Review  content type, as specified in the first  Match  element. Inside the first  Match  element there are two child  Match  elements that match the  Detail  and  Summary  display types. Those matches specify how book reviews are rendered in two cases: the details view and the list view.    When the details are displayed, the placement file specifies that the body of the review should appear at the beginning of the  Content  zone, the tags at the end of the same zone, and the comments in the  Footer  zone. If you are currently signed in as an admin user, temporarily sign out so that you can see the book reviews as a user would. Click one of the book reviews to see how the module that you added changes the rendering.    When the whole list of books is displayed, you want to display a more abbreviated view, such as the title and summary only for each book. To suppress the display of the comment count, the tags, the metadata and the fields, the  placement.info  file sends those shapes to the \"Nowhere\" zone. The \"Nowhere\" zone is not actually a defined Orchard zone, it is simply a standard way in  .info  files of suppressing elements you want to hide by sending them to an undefined zone. The summary is sent to the  Content  zone. Click the  Book Reviews  menu entry to view the updated rendering of your list of reviews.     Note  The zones referred to in this section of the topic are not layout-level widget zones, but rather local zones. As an example of how these are defined, check out the  /Core/Contents/Views/Items/Content.Summary.cshtml  file.",
            "title": "Customizing How the List is Rendered"
        },
        {
            "location": "/Documentation/Creating-lists/#displaying-book-lists-as-widgets",
            "text": "The next task is to display the latest book review in a right-hand sidebar on the home page of the site. You will use a container widget object to do that.  Sign back into your site, and on the dashboard click  Widgets . On the  Widgets  screen, in the drop-down list under  Current Layer , select the  TheHomePage  layer.  In the list of zones, find the zone named  Aside Second  and click  Add  next to the zone. In the  Choose a Widget  screen, click  Container Widget . The  Add Widget  screen is displayed.    In the  Title  field, enter \"Latest Book Review\". Under  Show items from , make sure that  List: Book Reviews  is selected. Then save the widget.   Return to the home page, and notice that the latest reviews from your book reviews list are now displayed in the sidebar.",
            "title": "Displaying Book Lists as Widgets"
        },
        {
            "location": "/Documentation/Creating-lists/#creating-a-custom-list-widget",
            "text": "Using the filter feature, you can filter the values of custom properties named  Custom1 ,  Custom2 , and  Custom3 . This in turn lets you filter what items from a list are displayed in a page. Now you will add some custom properties that will let you filter the display of your reviews.  In the dashboard, click  Content , and then click the  Content Types  tab. Click  Edit  next to  Book Review . On the  Edit Content Type  screen, click  Add Parts .     Select the  Custom Properties  part, and click  Save .  Now return to the  Book Reviews  page in your site and edit one of your book reviews. You will see text fields for the three new properties. Enter \"Featured\" into  Custom One , and then save the updated review.   You can repeat the last step for any other reviews you'd like to feature on the home page.  To filter the reviews so that only featured reviews are displayed on the home page, click  Widgets  on the dashboard, and in the  Widgets  screen, select the  TheHomePage  layer from the  Current Layer  drop-down list. Then click the  Latest Book Review  widget that you created earlier.   In the  Edit Widget  screen, select the  Filter items  option, select the  Custom 1  property from the first drop-down list, select  is equal to  from the second drop-down list, and enter \"Featured\" in the third drop-down list.  This filters reviews so that only featured reviews are displayed on the home page. When you're finished, save the updated widget.   Browse to your home page. Notice that only the book reviews for which you entered \"Featured\" in the  Custom 1  field are displayed.   Now click  Widgets  on the dashboard, return to the  Widgets  screen, and again select the  TheHomePage  layer from the  Current Layer  drop-down list. Add another widget to the  TheHomePage  layer as you did previously by clicking  Add  next to the  AsideSecond  zone, and then click  Container Widget  to add it. This time in the  Add Widget  screen, set the  Position  value to 6 so that the new list appears below the first one. Set the  Title  property to \"Featured Reviews\", set the  Maximum number of items to display  value to 2, and select the  Filter items  option. Set the filter criterion to \"Custom 1 is equal to Featured\". Save your changes.   On the  Widgets  screen, click the  Latest Book Review  widget to edit it. Clear the  Filter items  check box, which means that it no longer filters reviews. Save the widget.   The following illustration shows what the home page looks like with the two widgets that you configured. It displays both the latest reviews ordered by date, and the featured review in which you added the value \"Featured\" to the Custom 1 property field for a specific book, and filtered for that property.",
            "title": "Creating a Custom List Widget"
        },
        {
            "location": "/Documentation/Creating-lists/#pagination",
            "text": "The list feature has built-in support for pagination on list pages.   On the dashboard, click  Content , and then click  Edit  next to  Book Reviews . In the  Edit list  screen, change the page size to a number that is smaller than the number of reviews you've added to the system. Leave  Show paging controls  selected. Save the changes.   Go back to the  Book Reviews  page. Notice that there is an  Older  button that you can click to see older book reviews.    Note  Pagination is available only on list pages and not on list widgets. This is by design, because pagination within a widget would allow multiple pagers on the same page, which could be confusing.",
            "title": "Pagination"
        },
        {
            "location": "/Documentation/Creating-lists/#change-history",
            "text": "Updated for Orchard 1.1  3-18-11:  Updated all screens, menu options, and procedures for working with lists.",
            "title": "Change History"
        }
    ]
}